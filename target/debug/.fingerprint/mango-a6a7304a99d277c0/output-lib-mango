{"message":"evaluation of constant value failed","code":{"code":"E0080","explanation":"A constant value failed to get evaluated.\n\nErroneous code example:\n\n```compile_fail,E0080\nenum Enum {\n    X = (1 << 500),\n    Y = (1 / 0),\n}\n```\n\nThis error indicates that the compiler was unable to sensibly evaluate a\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing an integer overflow are two ways to induce this error.\n\nEnsure that the expressions given can be evaluated as the desired integer type.\n\nSee the [Custom Discriminants][custom-discriminants] section of the Reference\nfor more information about setting custom integer types on fieldless enums\nusing the [`repr` attribute][repr-attribute].\n\n[custom-discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#custom-discriminant-values-for-field-less-enumerations\n[repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#reprc-enums\n"},"level":"error","spans":[{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1632,"byte_end":1681,"line_start":55,"line_end":55,"column_start":23,"column_end":72,"is_primary":true,"text":[{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":23,"highlight_end":72}],"label":"attempt to compute `0_usize - 1_usize`, which would overflow","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2309,"byte_end":2332,"line_start":81,"line_end":81,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        const_assert!($x == $y);","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/matching.rs","byte_start":5583,"byte_end":5645,"line_start":200,"line_end":200,"column_start":1,"column_end":63,"is_primary":false,"text":[{"text":"const_assert_eq!(size_of::<AnyNode>(), size_of::<InnerNode>());","highlight_start":1,"highlight_end":63}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"const_assert_eq!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2236,"byte_end":2342,"line_start":79,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert_eq {","highlight_start":1,"highlight_end":1},{"text":"    ($x:expr, $y:expr $(,)?) => {","highlight_start":1,"highlight_end":1},{"text":"        const_assert!($x == $y);","highlight_start":1,"highlight_end":1},{"text":"    };","highlight_start":1,"highlight_end":1},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"const_assert!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1518,"byte_end":1697,"line_start":52,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert {","highlight_start":1,"highlight_end":28},{"text":"    ($x:expr $(,)?) => {","highlight_start":1,"highlight_end":25},{"text":"        #[allow(unknown_lints, eq_op)]","highlight_start":1,"highlight_end":39},{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0080]\u001b[0m\u001b[0m\u001b[1m: evaluation of constant value failed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/matching.rs:200:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m200\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst_assert_eq!(size_of::<AnyNode>(), size_of::<InnerNode>());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mattempt to compute `0_usize - 1_usize`, which would overflow\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `const_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"evaluation of constant value failed","code":{"code":"E0080","explanation":"A constant value failed to get evaluated.\n\nErroneous code example:\n\n```compile_fail,E0080\nenum Enum {\n    X = (1 << 500),\n    Y = (1 / 0),\n}\n```\n\nThis error indicates that the compiler was unable to sensibly evaluate a\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing an integer overflow are two ways to induce this error.\n\nEnsure that the expressions given can be evaluated as the desired integer type.\n\nSee the [Custom Discriminants][custom-discriminants] section of the Reference\nfor more information about setting custom integer types on fieldless enums\nusing the [`repr` attribute][repr-attribute].\n\n[custom-discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#custom-discriminant-values-for-field-less-enumerations\n[repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#reprc-enums\n"},"level":"error","spans":[{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1632,"byte_end":1681,"line_start":55,"line_end":55,"column_start":23,"column_end":72,"is_primary":true,"text":[{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":23,"highlight_end":72}],"label":"attempt to compute `0_usize - 1_usize`, which would overflow","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2309,"byte_end":2332,"line_start":81,"line_end":81,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        const_assert!($x == $y);","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/matching.rs","byte_start":5647,"byte_end":5708,"line_start":201,"line_end":201,"column_start":1,"column_end":62,"is_primary":false,"text":[{"text":"const_assert_eq!(size_of::<AnyNode>(), size_of::<LeafNode>());","highlight_start":1,"highlight_end":62}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"const_assert_eq!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2236,"byte_end":2342,"line_start":79,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert_eq {","highlight_start":1,"highlight_end":31},{"text":"    ($x:expr, $y:expr $(,)?) => {","highlight_start":1,"highlight_end":34},{"text":"        const_assert!($x == $y);","highlight_start":1,"highlight_end":33},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"const_assert!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1518,"byte_end":1697,"line_start":52,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert {","highlight_start":1,"highlight_end":28},{"text":"    ($x:expr $(,)?) => {","highlight_start":1,"highlight_end":25},{"text":"        #[allow(unknown_lints, eq_op)]","highlight_start":1,"highlight_end":39},{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0080]\u001b[0m\u001b[0m\u001b[1m: evaluation of constant value failed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/matching.rs:201:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m201\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst_assert_eq!(size_of::<AnyNode>(), size_of::<LeafNode>());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mattempt to compute `0_usize - 1_usize`, which would overflow\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `const_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"evaluation of constant value failed","code":{"code":"E0080","explanation":"A constant value failed to get evaluated.\n\nErroneous code example:\n\n```compile_fail,E0080\nenum Enum {\n    X = (1 << 500),\n    Y = (1 / 0),\n}\n```\n\nThis error indicates that the compiler was unable to sensibly evaluate a\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing an integer overflow are two ways to induce this error.\n\nEnsure that the expressions given can be evaluated as the desired integer type.\n\nSee the [Custom Discriminants][custom-discriminants] section of the Reference\nfor more information about setting custom integer types on fieldless enums\nusing the [`repr` attribute][repr-attribute].\n\n[custom-discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#custom-discriminant-values-for-field-less-enumerations\n[repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#reprc-enums\n"},"level":"error","spans":[{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1632,"byte_end":1681,"line_start":55,"line_end":55,"column_start":23,"column_end":72,"is_primary":true,"text":[{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":23,"highlight_end":72}],"label":"attempt to compute `0_usize - 1_usize`, which would overflow","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2309,"byte_end":2332,"line_start":81,"line_end":81,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        const_assert!($x == $y);","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/queue.rs","byte_start":11538,"byte_end":11601,"line_start":414,"line_end":414,"column_start":1,"column_end":64,"is_primary":false,"text":[{"text":"const_assert_eq!(size_of::<AnyEvent>(), size_of::<FillEvent>());","highlight_start":1,"highlight_end":64}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"const_assert_eq!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2236,"byte_end":2342,"line_start":79,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert_eq {","highlight_start":1,"highlight_end":31},{"text":"    ($x:expr, $y:expr $(,)?) => {","highlight_start":1,"highlight_end":34},{"text":"        const_assert!($x == $y);","highlight_start":1,"highlight_end":33},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"const_assert!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1518,"byte_end":1697,"line_start":52,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert {","highlight_start":1,"highlight_end":28},{"text":"    ($x:expr $(,)?) => {","highlight_start":1,"highlight_end":25},{"text":"        #[allow(unknown_lints, eq_op)]","highlight_start":1,"highlight_end":39},{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0080]\u001b[0m\u001b[0m\u001b[1m: evaluation of constant value failed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/queue.rs:414:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m414\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst_assert_eq!(size_of::<AnyEvent>(), size_of::<FillEvent>());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mattempt to compute `0_usize - 1_usize`, which would overflow\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `const_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"evaluation of constant value failed","code":{"code":"E0080","explanation":"A constant value failed to get evaluated.\n\nErroneous code example:\n\n```compile_fail,E0080\nenum Enum {\n    X = (1 << 500),\n    Y = (1 / 0),\n}\n```\n\nThis error indicates that the compiler was unable to sensibly evaluate a\nconstant expression that had to be evaluated. Attempting to divide by 0\nor causing an integer overflow are two ways to induce this error.\n\nEnsure that the expressions given can be evaluated as the desired integer type.\n\nSee the [Custom Discriminants][custom-discriminants] section of the Reference\nfor more information about setting custom integer types on fieldless enums\nusing the [`repr` attribute][repr-attribute].\n\n[custom-discriminants]: https://doc.rust-lang.org/reference/items/enumerations.html#custom-discriminant-values-for-field-less-enumerations\n[repr-attribute]: https://doc.rust-lang.org/reference/type-layout.html#reprc-enums\n"},"level":"error","spans":[{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1632,"byte_end":1681,"line_start":55,"line_end":55,"column_start":23,"column_end":72,"is_primary":true,"text":[{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":23,"highlight_end":72}],"label":"attempt to compute `0_usize - 1_usize`, which would overflow","suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2309,"byte_end":2332,"line_start":81,"line_end":81,"column_start":9,"column_end":32,"is_primary":false,"text":[{"text":"        const_assert!($x == $y);","highlight_start":9,"highlight_end":32}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":{"span":{"file_name":"/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/queue.rs","byte_start":11667,"byte_end":11735,"line_start":416,"line_end":416,"column_start":1,"column_end":69,"is_primary":false,"text":[{"text":"const_assert_eq!(size_of::<AnyEvent>(), size_of::<LiquidateEvent>());","highlight_start":1,"highlight_end":69}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null},"macro_decl_name":"const_assert_eq!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":2236,"byte_end":2342,"line_start":79,"line_end":83,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert_eq {","highlight_start":1,"highlight_end":31},{"text":"    ($x:expr, $y:expr $(,)?) => {","highlight_start":1,"highlight_end":34},{"text":"        const_assert!($x == $y);","highlight_start":1,"highlight_end":33},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}},"macro_decl_name":"const_assert!","def_site_span":{"file_name":"/Users/zohebshahzan/.cargo/registry/src/github.com-1ecc6299db9ec823/static_assertions-1.1.0/src/const_assert.rs","byte_start":1518,"byte_end":1697,"line_start":52,"line_end":57,"column_start":1,"column_end":2,"is_primary":false,"text":[{"text":"macro_rules! const_assert {","highlight_start":1,"highlight_end":28},{"text":"    ($x:expr $(,)?) => {","highlight_start":1,"highlight_end":25},{"text":"        #[allow(unknown_lints, eq_op)]","highlight_start":1,"highlight_end":39},{"text":"        const _: [(); 0 - !{ const ASSERT: bool = $x; ASSERT } as usize] = [];","highlight_start":1,"highlight_end":79},{"text":"    };","highlight_start":1,"highlight_end":7},{"text":"}","highlight_start":1,"highlight_end":2}],"label":null,"suggested_replacement":null,"suggestion_applicability":null,"expansion":null}}}],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror[E0080]\u001b[0m\u001b[0m\u001b[1m: evaluation of constant value failed\u001b[0m\n\u001b[0m   \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m--> \u001b[0m\u001b[0m/Users/zohebshahzan/.cargo/git/checkouts/mango-v3-9044e8c014b9b2ff/c5908a9/program/src/queue.rs:416:1\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m\u001b[1m\u001b[38;5;12m416\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0mconst_assert_eq!(size_of::<AnyEvent>(), size_of::<LiquidateEvent>());\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m| \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9m^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\u001b[0m\u001b[0m \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;9mattempt to compute `0_usize - 1_usize`, which would overflow\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m|\u001b[0m\n\u001b[0m    \u001b[0m\u001b[0m\u001b[1m\u001b[38;5;12m= \u001b[0m\u001b[0m\u001b[1mnote\u001b[0m\u001b[0m: this error originates in the macro `const_assert` (in Nightly builds, run with -Z macro-backtrace for more info)\u001b[0m\n\n"}
{"message":"aborting due to 4 previous errors","code":null,"level":"error","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1m\u001b[38;5;9merror\u001b[0m\u001b[0m\u001b[1m: aborting due to 4 previous errors\u001b[0m\n\n"}
{"message":"For more information about this error, try `rustc --explain E0080`.","code":null,"level":"failure-note","spans":[],"children":[],"rendered":"\u001b[0m\u001b[1mFor more information about this error, try `rustc --explain E0080`.\u001b[0m\n"}
