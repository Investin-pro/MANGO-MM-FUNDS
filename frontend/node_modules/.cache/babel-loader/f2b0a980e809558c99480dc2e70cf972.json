{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/UpdateAllFundTokenPrices.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, MANGO_GROUP_ACCOUNT, MANGO_PROGRAM_ID, platformStateAccount, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, orcaPools, pools, raydiumPools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS, MangoClient, MangoGroupLayout, MarginAccountLayout } from '@blockworks-foundation/mango-client';\nimport { TOKENS } from '../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UpdateAllTokenPrices = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleUpdateTokenPrices = async () => {\n    console.log(\"handle Update Token Prices\");\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n\n    let fundPDAState = await connection.getAccountInfo(fundPDA[0]);\n    console.log(\"fundPDAState:\", fundPDAState);\n    let fund_data = FUND_PDA_DATA.decode(fundPDAState.data);\n\n    if (!fund_data.is_initialized) {\n      alert(\"fund not initialized!\");\n      return;\n    }\n\n    console.log(\"fund_data::\", fund_data);\n    let platData = await connection.getAccountInfo(platformStateAccount);\n    let platform_data = PLATFORM_DATA.decode(platData.data);\n    console.log(\"plat info:: \", platform_data);\n    let filt_pools = [];\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n\n    for (let i = 1; i < 8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\n\n        if (mint.toBase58() === TOKENS.WSOL.mintAddress) {\n          WSOLWhitelisted = true;\n        } else if (mint.toBase58() === TOKENS.MSOL.mintAddress) {\n          MSOLWhitelisted = true;\n        }\n\n        if (fund_data.tokens[i].mux === 0) {\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        }\n      }\n    } //send WSOL everytime \n\n\n    if (!WSOLWhitelisted) {\n      const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n      console.log(\"pushing WSOL pool\");\n      filt_pools.push(wsol_usdc_pool);\n    }\n\n    if (!MSOLWhitelisted) {\n      const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n      console.log(\"pushing MSOL pool\");\n      filt_pools.push(msol_usdc_pool);\n    }\n\n    console.log(\"filt_pools:\", filt_pools);\n    updatePoolPrices(transaction, filt_pools);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Pool Prices\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdateTokenPrices,\n      children: \"Update\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 104,\n    columnNumber: 5\n  }, this);\n};\n\n_s(UpdateAllTokenPrices, \"vzApLtxwVIxxiGsJ9ryXNodyD24=\");\n\n_c = UpdateAllTokenPrices;\n\nvar _c;\n\n$RefreshReg$(_c, \"UpdateAllTokenPrices\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/UpdateAllFundTokenPrices.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","idsIndex","MANGO_GROUP_ACCOUNT","MANGO_PROGRAM_ID","platformStateAccount","priceStateAccount","programId","TOKEN_PROGRAM_ID","nu64","struct","u8","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","FUND_DATA","FUND_PDA_DATA","INVESTOR_DATA","PLATFORM_DATA","PRICE_DATA","devnet_pools","orcaPools","pools","raydiumPools","updatePoolPrices","IDS","MangoClient","MangoGroupLayout","MarginAccountLayout","TOKENS","UpdateAllTokenPrices","ids","walletProvider","s","handleUpdateTokenPrices","console","log","key","publicKey","alert","transaction","fundPDA","findProgramAddress","toBuffer","fundPDAState","getAccountInfo","fund_data","decode","data","is_initialized","platData","platform_data","filt_pools","WSOLWhitelisted","MSOLWhitelisted","i","tokens","balance","mint","token_list","index","mux","toBase58","WSOL","mintAddress","MSOL","x","find","p","coin","push","wsol_usdc_pool","name","msol_usdc_pool","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, MANGO_GROUP_ACCOUNT, MANGO_PROGRAM_ID, platformStateAccount, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, orcaPools, pools, raydiumPools } from '../utils/pools'\n\nimport { updatePoolPrices } from './updatePrices';\nimport {\n  IDS,\n  MangoClient, MangoGroupLayout, MarginAccountLayout\n} from '@blockworks-foundation/mango-client'\nimport { TOKENS } from '../utils/tokens';\n\nexport const UpdateAllTokenPrices = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleUpdateTokenPrices = async () => {\n\n    console.log(\"handle Update Token Prices\")\n\n    const key = walletProvider?.publicKey;\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    const transaction = new Transaction()\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n\n    let fundPDAState = await connection.getAccountInfo(fundPDA[0])\n    console.log(\"fundPDAState:\",fundPDAState)\n    let fund_data = FUND_PDA_DATA.decode(fundPDAState.data)\n    if (!fund_data.is_initialized) {\n      alert(\"fund not initialized!\")\n      return\n    }\n    console.log(\"fund_data::\",fund_data)\n\n\n    let platData = await connection.getAccountInfo(platformStateAccount)\n    let platform_data = PLATFORM_DATA.decode(platData.data)\n    console.log(\"plat info:: \", platform_data)\n\n    let filt_pools = []\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n\n    for (let i = 1; i<8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\n        if(mint.toBase58() === TOKENS.WSOL.mintAddress){\n          WSOLWhitelisted=true;\n        } else if(mint.toBase58() === TOKENS.MSOL.mintAddress){\n          MSOLWhitelisted=true;\n        }\n        if(fund_data.tokens[i].mux === 0){\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        }\n      }  \n    }\n    //send WSOL everytime \n    if(!WSOLWhitelisted){\n      const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n      console.log(\"pushing WSOL pool\")\n      filt_pools.push(wsol_usdc_pool)\n    }\n    if(!MSOLWhitelisted){\n      const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n      console.log(\"pushing MSOL pool\")\n      filt_pools.push(msol_usdc_pool)\n    }\n    console.log(\"filt_pools:\",filt_pools)\n    updatePoolPrices(transaction, filt_pools)\n    \n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n  }\n\n  \n  return (\n    <div className=\"form-div\">\n      <h4>Pool Prices</h4>\n\n      <button onClick={handleUpdateTokenPrices}>Update</button>\n      <br />\n\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}