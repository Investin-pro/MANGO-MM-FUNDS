{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoInitialize.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, MANGO_PROGRAM_ID, RENT_PROGRAM_ID, programId, MANGO_GROUP_ACCOUNT, SERUM_PROGRAM_ID_V3, MARGIN_ACCOUNT_KEY_1, MARGIN_ACCOUNT_KEY_2, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, signAndSendTransaction } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { MarginAccountLayout } from '../utils/MangoLayout';\nimport { OpenOrders } from '@project-serum/serum';\nimport { IDS, MangoAccountLayout } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MangoInitialize = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleMangoInitialize = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction(); // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n    // console.log(\"fundStateAccount:: \", fundStateAccount.toBase58())\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const mangoAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, MARGIN_ACCOUNT_KEY_1, MangoAccountLayout.span, transaction);\n    console.log(\"mangoAccount created::\", mangoAccount.toBase58());\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 8\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, // {pubkey: fundPDA[0], isSigner: false, isWritable: true },\n      {\n        pubkey: MANGO_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: MANGO_GROUP_ACCOUNT,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoAccount,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Mango Initialize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoInitialize,\n      children: \"Mango Margin Account Initialize\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MangoInitialize, \"vzApLtxwVIxxiGsJ9ryXNodyD24=\");\n\n_c = MangoInitialize;\n\nvar _c;\n\n$RefreshReg$(_c, \"MangoInitialize\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoInitialize.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","MANGO_PROGRAM_ID","RENT_PROGRAM_ID","programId","MANGO_GROUP_ACCOUNT","SERUM_PROGRAM_ID_V3","MARGIN_ACCOUNT_KEY_1","MARGIN_ACCOUNT_KEY_2","idsIndex","nu64","struct","u8","createKeyIfNotExists","signAndSendTransaction","FUND_DATA","MarginAccountLayout","OpenOrders","IDS","MangoAccountLayout","MangoInitialize","ids","walletProvider","s","handleMangoInitialize","key","publicKey","alert","transaction","fundPDA","findProgramAddress","toBuffer","mangoAccount","span","console","log","toBase58","dataLayout","data","Buffer","alloc","encode","instruction","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,sBAAjC,QAA+D,iBAA/D;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,YAAT,EAAuBC,UAAvB,EAAmCC,gBAAnC,EAAqDC,gBAArD,EAAuEC,eAAvE,EAAwFC,SAAxF,EAAmGC,mBAAnG,EAAwHC,mBAAxH,EAA6IC,oBAA7I,EAAmKC,oBAAnK,EAAyLC,QAAzL,QAAyM,oBAAzM;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,EAAvB,QAAiC,eAAjC;AACA,SAAUC,oBAAV,EAAgCC,sBAAhC,QAA8D,eAA9D;AACA,SAASC,SAAT,QAA0B,yBAA1B;AACA,SAASC,mBAAT,QAAoC,sBAApC;AACA,SAASC,UAAT,QAA2B,sBAA3B;AACA,SAASC,GAAT,EAAcC,kBAAd,QAAwC,qCAAxC;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAEnC,QAAMC,GAAG,GAAEH,GAAG,CAAC,QAAD,CAAH,CAAcT,QAAd,CAAX;AAGE,QAAMa,cAAc,GAAGxB,WAAW,CAACD,QAAZ,CAAqB0B,CAAC,IAAIA,CAAC,CAACD,cAA5B,CAAvB;;AAEA,QAAME,qBAAqB,GAAG,YAAY;AAEtC,UAAMC,GAAG,GAAGH,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEI,SAA5B;;AAEF,QAAI,CAACD,GAAL,EAAW;AACTE,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD;;AAAA;AACD,UAAMC,WAAW,GAAG,IAAIlC,WAAJ,EAApB,CARwC,CAUxC;AACA;AACA;AACA;AACA;AACA;;AACA,UAAMmC,OAAO,GAAG,MAAMpC,SAAS,CAACqC,kBAAV,CAA6B,CAACR,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEI,SAAhB,CAA0BK,QAA1B,EAAD,CAA7B,EAAqE3B,SAArE,CAAtB;AAEA,UAAM4B,YAAY,GAAG,MAAMnB,oBAAoB,CAACS,cAAD,EAAiB,EAAjB,EAAqBpB,gBAArB,EAAuCK,oBAAvC,EAA6DY,kBAAkB,CAACc,IAAhF,EAAsFL,WAAtF,CAA/C;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ,EAAqCH,YAAY,CAACI,QAAb,EAArC;AAIA,UAAMC,UAAU,GAAG1B,MAAM,CAAC,CAACC,EAAE,CAAC,aAAD,CAAH,CAAD,CAAzB;AAEA,UAAM0B,IAAI,GAAGC,MAAM,CAACC,KAAP,CAAaH,UAAU,CAACJ,IAAxB,CAAb;AACAI,IAAAA,UAAU,CAACI,MAAX,CACE;AACEC,MAAAA,WAAW,EAAE;AADf,KADF,EAIEJ,IAJF;AAME,UAAMI,WAAW,GAAG,IAAI/C,sBAAJ,CAA2B;AAC/CgD,MAAAA,IAAI,EAAE,CACF;AAACC,QAAAA,MAAM,EAAEf,OAAO,CAAC,CAAD,CAAhB;AAAqBgB,QAAAA,QAAQ,EAAE,KAA/B;AAAsCC,QAAAA,UAAU,EAAE;AAAlD,OADE,EAEF;AAACF,QAAAA,MAAM,EAAEnB,GAAT;AAAcoB,QAAAA,QAAQ,EAAE,IAAxB;AAA8BC,QAAAA,UAAU,EAAE;AAA1C,OAFE,EAGF;AAEA;AAACF,QAAAA,MAAM,EAAE1C,gBAAT;AAA2B2C,QAAAA,QAAQ,EAAE,KAArC;AAA4CC,QAAAA,UAAU,EAAC;AAAvD,OALE,EAMF;AAACF,QAAAA,MAAM,EAAEvC,mBAAT;AAA8BwC,QAAAA,QAAQ,EAAE,KAAxC;AAA+CC,QAAAA,UAAU,EAAC;AAA1D,OANE,EAOF;AAACF,QAAAA,MAAM,EAAEZ,YAAT;AAAuBa,QAAAA,QAAQ,EAAE,KAAjC;AAAwCC,QAAAA,UAAU,EAAC;AAAnD,OAPE,CADyC;AAU/C1C,MAAAA,SAV+C;AAW/CkC,MAAAA;AAX+C,KAA3B,CAApB;AAcAV,IAAAA,WAAW,CAACmB,GAAZ,CAAgBL,WAAhB;AACAd,IAAAA,WAAW,CAACoB,QAAZ,GAAuBvB,GAAvB;AACA,QAAIwB,IAAI,GAAG,MAAMjD,UAAU,CAACkD,kBAAX,EAAjB;AACAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyBc,IAAzB;AACArB,IAAAA,WAAW,CAACuB,eAAZ,GAA8BF,IAAI,CAACG,SAAnC;AAEA,UAAMC,IAAI,GAAG,MAAMvC,sBAAsB,CAACQ,cAAD,EAAiBM,WAAjB,CAAzC;AACAM,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BkB,IAA/B;AACAnB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAoC,yBAAwBkB,IAAK,EAAjE;AAGH,GAzDD;;AA6DA,sBACI;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADA,eAGE;AAAQ,MAAA,OAAO,EAAE7B,qBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AASH,CA7EM;;GAAMJ,e;;KAAAA,e","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, MANGO_PROGRAM_ID, RENT_PROGRAM_ID, programId, MANGO_GROUP_ACCOUNT, SERUM_PROGRAM_ID_V3, MARGIN_ACCOUNT_KEY_1, MARGIN_ACCOUNT_KEY_2, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport {  createKeyIfNotExists, signAndSendTransaction } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { MarginAccountLayout } from '../utils/MangoLayout';\nimport { OpenOrders } from '@project-serum/serum';\nimport { IDS, MangoAccountLayout } from '@blockworks-foundation/mango-client';\n\nexport const MangoInitialize = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n\n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n    const handleMangoInitialize = async () => {\n    \n        const key = walletProvider?.publicKey;\n\n      if (!key ) {\n        alert(\"connect wallet\")\n        return;\n      };\n      const transaction = new Transaction()\n\n      // const fundStateAccount = await PublicKey.createWithSeed(\n      //   key,\n      //   FUND_ACCOUNT_KEY,\n      //   programId,\n      // );\n      // console.log(\"fundStateAccount:: \", fundStateAccount.toBase58())\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n   \n      const mangoAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, MARGIN_ACCOUNT_KEY_1, MangoAccountLayout.span, transaction)\n      console.log(\"mangoAccount created::\",mangoAccount.toBase58())\n\n     \n\n      const dataLayout = struct([u8('instruction')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 8,\n        },\n        data\n      )\n        const instruction = new TransactionInstruction({\n        keys: [\n            {pubkey: fundPDA[0], isSigner: false, isWritable: true},\n            {pubkey: key, isSigner: true, isWritable: true },\n            // {pubkey: fundPDA[0], isSigner: false, isWritable: true },\n            \n            {pubkey: MANGO_PROGRAM_ID, isSigner: false, isWritable:false},\n            {pubkey: MANGO_GROUP_ACCOUNT, isSigner: false, isWritable:true},\n            {pubkey: mangoAccount, isSigner: false, isWritable:true},\n        ],\n        programId,\n        data\n        });\n  \n        transaction.add(instruction);\n        transaction.feePayer = key;\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"signature tx:: \", sign)\n        console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n        \n    }\n\n    \n\n    return (\n        <div className=\"form-div\">\n        <h4>Mango Initialize</h4>\n          \n          <button onClick={handleMangoInitialize}>Mango Margin Account Initialize</button>\n          <br />\n          \n        </div>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}