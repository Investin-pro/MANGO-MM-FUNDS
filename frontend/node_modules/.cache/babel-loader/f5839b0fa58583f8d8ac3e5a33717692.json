{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/DisplayInfo.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nimport { FUND_DATA, SPL_TOKEN_MINT_DATA } from '../utils/programLayouts';\nimport { Card, Col, Row, Table } from 'reactstrap';\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout, RootBankCacheLayout, RootBankLayout } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport const DisplayInfo = props => {\n  _s();\n\n  const ids = IDS['groups'][0];\n  const [fundData, setFundData] = useState(\"\");\n  const [mangoGroup, setMangoGroup] = useState({});\n  const [mangoAccount, setMangoAccount] = useState('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX');\n  const [mangoAccountData, setMangoAccountData] = useState({});\n  const [nodeBank, setNodeBank] = useState({});\n  const [rootBank, setRootBank] = useState({});\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const programIdX = programId.toBase58();\n  const adminAccountX = adminAccount.toBase58(); // const platformStateAccountX = platformStateAccount.toBase58();\n  // const priceStateAccountX = priceStateAccount.toBase58();\n\n  const handleGetFundData = async () => {\n    if (!walletProvider) {\n      alert(\"connect wallet \");\n      return;\n    } // const key = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n\n\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet \");\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58());\n    const fundDataAcc = await connection.getAccountInfo(fundStateAcc);\n    console.log(\"fundDataAcc::\", fundDataAcc);\n\n    if (fundDataAcc == null) {\n      alert(\"fundDataAcc info not found\");\n      return;\n    }\n\n    const fundData = FUND_DATA.decode(fundDataAcc.data);\n    console.error(\"fundData::\", fundData);\n    setFundData(fundData);\n  };\n\n  const getAllDecodeMangoData = async () => {\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let mangoGroupDecoded = {};\n    mangoGroupDecoded.admin = mangoGroup.admin.toBase58();\n    mangoGroupDecoded.dexProgramId = mangoGroup.dexProgramId.toBase58();\n    mangoGroupDecoded.insuranceVault = mangoGroup.insuranceVault.toBase58();\n    mangoGroupDecoded.mangoCache = mangoGroup.mangoCache.toBase58();\n    mangoGroupDecoded.msrmVault = mangoGroup.msrmVault.toBase58();\n    mangoGroupDecoded.numOracles = mangoGroup.numOracles.toString();\n    mangoGroupDecoded.oracles = mangoGroup.oracles.map(i => i.toBase58());\n    mangoGroupDecoded.perpMarkets = mangoGroup.perpMarkets.map(i => {\n      return {\n        baseLotSize: i.baseLotSize.toString(),\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        makerFee: i.makerFee.toString(),\n        perpMarket: i.perpMarket.toBase58(),\n        quoteLotSize: i.quoteLotSize.toString(),\n        takerFee: i.takerFee.toString()\n      };\n    });\n    mangoGroupDecoded.spotMarkets = mangoGroup.spotMarkets.map(i => {\n      return {\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        spotMarket: i.spotMarket.toBase58()\n      };\n    });\n    mangoGroupDecoded.tokens = mangoGroup.tokens.map(i => {\n      return {\n        decimals: i.decimals,\n        mint: i.mint.toBase58(),\n        rootBank: i.rootBank.toBase58()\n      };\n    });\n    setMangoGroup(mangoGroupDecoded);\n    console.error(\"mango group DECODED**:: \", mangoGroupDecoded);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    let nodeBankDecode = {\n      borrows: nodeBank.borrows.toString(),\n      deposits: nodeBank.deposits.toString(),\n      vault: nodeBank.vault.toBase58()\n    };\n    setNodeBank(nodeBankDecode);\n    console.error(\"nodeBankDecode:: \", nodeBankDecode);\n    let rootBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].rootKey));\n    let rootBank = RootBankLayout.decode(rootBankInfo.data);\n    console.log(\"rootBank:: \", rootBank);\n    let rootBankDecode = {\n      optimalUtil: rootBank.optimalUtil.toString(),\n      optimalRate: rootBank.optimalRate.toString(),\n      maxRate: rootBank.maxRate.toString(),\n      depositIndex: rootBank.depositIndex.toString(),\n      borrowIndex: rootBank.borrowIndex.toString(),\n      lastUpdated: rootBank.lastUpdated.toString()\n    };\n    setRootBank(rootBankDecode);\n    console.error(\"rootBankDecode:: \", rootBankDecode);\n    return;\n  };\n\n  const getMangoAccountData = async () => {\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoAcc = await client.getMangoAccount(new PublicKey(mangoAccount), ids.serumProgramId);\n    console.log(\"mangoAccount:: \", mangoAccount);\n    let mangoAccountDecoded = {};\n    mangoAccountDecoded.mangoGroup = mangoAcc.mangoGroup.toBase58();\n    mangoAccountDecoded.borrows = mangoAcc.borrows.map(i => i.toString());\n    mangoAccountDecoded.clientOrderIds = mangoAcc.clientOrderIds.map(i => i.toString());\n    mangoAccountDecoded.deposits = mangoAcc.deposits.map(i => i.toString());\n    mangoAccountDecoded.orders = mangoAcc.orders.map(i => i.toString());\n    mangoAccountDecoded.perpAccounts = mangoAcc.perpAccounts.map(i => {\n      return {\n        asksQuantity: i.asksQuantity.toString(),\n        basePosition: i.basePosition.toString(),\n        bidsQuantity: i.bidsQuantity.toString(),\n        longSettledFunding: i.longSettledFunding.toString(),\n        mngoAccrued: i.mngoAccrued.toString(),\n        quotePosition: i.quotePosition.toString(),\n        shortSettledFunding: i.shortSettledFunding.toString(),\n        takerBase: i.takerBase.toString(),\n        takerQuote: i.takerQuote.toString()\n      };\n    });\n    mangoAccountDecoded.spotOpenOrders = mangoAcc.spotOpenOrders.map(i => i.toBase58());\n    setMangoAccountData(mangoAccountDecoded);\n    console.error(\"mangoAccountDecoded DECODED**:: \", mangoAccountDecoded);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Accounts\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 178,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" programID : \", programIdX]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" adminAccount : \", adminAccountX]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 180,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"FUND DATA \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 184,\n      columnNumber: 6\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetFundData,\n      children: \"GET FUND STATE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 6\n    }, this), fundData && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" signer_nonce  : \", fundData.signer_nonce]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 189,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" perp_market_index : \", fundData.perp_market_index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" padding   : u8\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 191,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" no_of_investments : \", fundData.no_of_investments]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 193,\n        columnNumber: 12\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" min_amount  : \", fundData.min_amount.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" min_return  : \", fundData.min_return.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 196,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" performance_fee_percentage  : \", fundData.performance_fee_percentage]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 197,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" total_amount in fund USDC  : \", fundData.total_amount.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 198,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" current_index  : \", fundData.current_index]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 199,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" **deposits  : \", fundData.deposits.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 202,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" vault_balance  : \", fundData.vault_balance.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" manager_account  : \", fundData.manager_account.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" fund_pda  : \", fundData.fund_pda.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 206,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" delegate  : \", fundData.delegate.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" vault_key  : \", fundData.vault_key.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 210,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" mngo_vault_key  : \", fundData.mngo_vault_key.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" mango_account  : \", fundData.mango_account.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" mngo_per_share  : \", fundData.mngo_per_share.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" mngo_manager  : \", fundData.mngo_manager.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" mngo_accrued  : \", fundData.mngo_accrued.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 217,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" total_mngo_accrued  : \", fundData.total_mngo_accrued.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 218,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 177,\n    columnNumber: 5\n  }, this);\n};\n\n_s(DisplayInfo, \"rNu0qM9KVw0SKKPjzw359YJ8QXA=\");\n\n_c = DisplayInfo;\n\nvar _c;\n\n$RefreshReg$(_c, \"DisplayInfo\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/DisplayInfo.js"],"names":["PublicKey","TransactionInstruction","React","useEffect","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","programId","blob","nu64","struct","u32","u8","FUND_DATA","SPL_TOKEN_MINT_DATA","Card","Col","Row","Table","IDS","MangoClient","I80F48","NodeBankLayout","PerpAccountLayout","PerpMarketLayout","RootBankCacheLayout","RootBankLayout","DisplayInfo","props","ids","fundData","setFundData","mangoGroup","setMangoGroup","mangoAccount","setMangoAccount","mangoAccountData","setMangoAccountData","nodeBank","setNodeBank","rootBank","setRootBank","walletProvider","s","programIdX","toBase58","adminAccountX","handleGetFundData","alert","key","publicKey","fundStateAcc","createWithSeed","console","log","fundDataAcc","getAccountInfo","decode","data","error","getAllDecodeMangoData","client","mangoProgramId","getMangoGroup","mangoGroupDecoded","admin","dexProgramId","insuranceVault","mangoCache","msrmVault","numOracles","toString","oracles","map","i","perpMarkets","baseLotSize","initAssetWeight","initLiabWeight","liquidationFee","maintAssetWeight","maintLiabWeight","makerFee","perpMarket","quoteLotSize","takerFee","spotMarkets","spotMarket","tokens","decimals","mint","nodeBankInfo","nodeKeys","nodeBankDecode","borrows","deposits","vault","rootBankInfo","rootKey","rootBankDecode","optimalUtil","optimalRate","maxRate","depositIndex","borrowIndex","lastUpdated","getMangoAccountData","mangoAcc","getMangoAccount","serumProgramId","mangoAccountDecoded","clientOrderIds","orders","perpAccounts","asksQuantity","basePosition","bidsQuantity","longSettledFunding","mngoAccrued","quotePosition","shortSettledFunding","takerBase","takerQuote","spotOpenOrders","signer_nonce","perp_market_index","no_of_investments","min_amount","min_return","performance_fee_percentage","total_amount","current_index","vault_balance","manager_account","fund_pda","delegate","vault_key","mngo_vault_key","mango_account","mngo_per_share","mngo_manager","mngo_accrued","total_mngo_accrued"],"mappings":"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","sourcesContent":["import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react'\nimport { GlobalState } from '../store/globalState';\n\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nimport { FUND_DATA, SPL_TOKEN_MINT_DATA } from '../utils/programLayouts';\n\nimport { Card, Col, Row ,Table} from 'reactstrap';\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout ,RootBankCacheLayout, RootBankLayout} from '@blockworks-foundation/mango-client';\n\n\nexport const DisplayInfo = (props) => {\n\n   const ids = IDS['groups'][0]\n   const [fundData, setFundData] = useState(\"\");\n   const [mangoGroup, setMangoGroup] = useState({})\n   const [mangoAccount, setMangoAccount] = useState('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX')\n   const [mangoAccountData, setMangoAccountData] = useState({})\n   const [nodeBank, setNodeBank] = useState({})\n   const [rootBank, setRootBank] = useState({})\n   const walletProvider = GlobalState.useState(s => s.walletProvider);\n  \nconst programIdX = programId.toBase58();\nconst adminAccountX = adminAccount.toBase58();\n// const platformStateAccountX = platformStateAccount.toBase58();\n// const priceStateAccountX = priceStateAccount.toBase58();\n\nconst handleGetFundData = async () => {\n\n  if(!walletProvider) {\n    alert(\"connect wallet \")\n    return;\n  }\n  \n  // const key = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n  const key = walletProvider?.publicKey;  \n  if (!key ) {\n    alert(\"connect wallet \")\n    return;\n  }\n\n    const fundStateAcc = await PublicKey.createWithSeed(\n      key,\n      FUND_ACCOUNT_KEY,\n      programId,\n    );\n    console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58())\n\n    const fundDataAcc = await connection.getAccountInfo(fundStateAcc);\n    console.log(\"fundDataAcc::\",fundDataAcc);\n    if (fundDataAcc == null)\n    {\n       alert(\"fundDataAcc info not found\")\n      return;\n    }\n    const fundData = FUND_DATA.decode(fundDataAcc.data)\n    console.error(\"fundData::\",fundData);\n    setFundData(fundData);\n\n}\n\nconst getAllDecodeMangoData = async () => {\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n    let mangoGroupDecoded = {};\n    mangoGroupDecoded.admin = mangoGroup.admin.toBase58();\n    mangoGroupDecoded.dexProgramId = mangoGroup.dexProgramId.toBase58();\n    mangoGroupDecoded.insuranceVault = mangoGroup.insuranceVault.toBase58();\n    mangoGroupDecoded.mangoCache = mangoGroup.mangoCache.toBase58();\n\n    mangoGroupDecoded.msrmVault = mangoGroup.msrmVault.toBase58();\n    mangoGroupDecoded.numOracles = mangoGroup.numOracles.toString();\n\n    mangoGroupDecoded.oracles =  mangoGroup.oracles.map( i => i.toBase58());\n\n    mangoGroupDecoded.perpMarkets =  mangoGroup.perpMarkets.map( i => {\n      return {\n        baseLotSize: i.baseLotSize.toString(),\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        makerFee: i.makerFee.toString(),\n        perpMarket:  i.perpMarket.toBase58(),\n        quoteLotSize: i.quoteLotSize.toString(),\n        takerFee:  i.takerFee.toString(),\n      }\n    });\n\n    mangoGroupDecoded.spotMarkets =  mangoGroup.spotMarkets.map( i => {\n      return {\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        spotMarket:  i.spotMarket.toBase58(),\n      }\n    });\n\n    mangoGroupDecoded.tokens =  mangoGroup.tokens.map( i => {\n      return {\n        decimals: i.decimals,\n        mint: i.mint.toBase58(),\n        rootBank: i.rootBank.toBase58(),\n      }\n    });\n    setMangoGroup(mangoGroupDecoded)\n    console.error(\"mango group DECODED**:: \", mangoGroupDecoded)\n\n\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    console.log(\"nodebank:: \", nodeBank)\n    let nodeBankDecode = {\n      borrows:  nodeBank.borrows.toString(),\n      deposits: nodeBank.deposits.toString(),\n      vault: nodeBank.vault.toBase58()\n    }\n    setNodeBank(nodeBankDecode)\n    console.error(\"nodeBankDecode:: \", nodeBankDecode)\n\n    let rootBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].rootKey))\n    let rootBank = RootBankLayout.decode(rootBankInfo.data)\n    console.log(\"rootBank:: \", rootBank)\n    let rootBankDecode = {\n      optimalUtil:  rootBank.optimalUtil.toString(),\n      optimalRate: rootBank.optimalRate.toString(),\n      maxRate: rootBank.maxRate.toString(),\n      depositIndex:  rootBank.depositIndex.toString(),\n      borrowIndex: rootBank.borrowIndex.toString(),\n      lastUpdated: rootBank.lastUpdated.toString(),\n    }\n    setRootBank(rootBankDecode)\n    console.error(\"rootBankDecode:: \", rootBankDecode)\n\n    return;\n}\n\nconst getMangoAccountData = async () => {\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n  let mangoAcc = await client.getMangoAccount(new PublicKey(mangoAccount), ids.serumProgramId)\n  console.log(\"mangoAccount:: \", mangoAccount)\n\n  let mangoAccountDecoded = {};\n  mangoAccountDecoded.mangoGroup = mangoAcc.mangoGroup.toBase58();\n  mangoAccountDecoded.borrows = mangoAcc.borrows.map( i => i.toString());\n  mangoAccountDecoded.clientOrderIds = mangoAcc.clientOrderIds.map( i => i.toString());\n  mangoAccountDecoded.deposits = mangoAcc.deposits.map( i => i.toString());\n  mangoAccountDecoded.orders = mangoAcc.orders.map( i => i.toString());\n\n  mangoAccountDecoded.perpAccounts =  mangoAcc.perpAccounts.map( i => {\n    return {\n      asksQuantity: i.asksQuantity.toString(),\n      basePosition: i.basePosition.toString(),\n      bidsQuantity: i.bidsQuantity.toString(),\n      longSettledFunding: i.longSettledFunding.toString(),\n      mngoAccrued: i.mngoAccrued.toString(),\n      quotePosition: i.quotePosition.toString(),\n      shortSettledFunding: i.shortSettledFunding.toString(),\n      takerBase: i.takerBase.toString(),\n      takerQuote: i.takerQuote.toString(),\n    }\n  });\n  mangoAccountDecoded.spotOpenOrders = mangoAcc.spotOpenOrders.map( i => i.toBase58());\n  setMangoAccountData(mangoAccountDecoded)\n  console.error(\"mangoAccountDecoded DECODED**:: \", mangoAccountDecoded)\n\n}\n\n\n  return (\n    <div className=\"form-div\">\n    <h4>Accounts</h4>\n      <p> programID : {programIdX}</p>\n      <p> adminAccount : {adminAccountX}</p>\n\n   \n     <hr/>\n     <h4>FUND DATA </h4>\n     <button onClick={handleGetFundData}>GET FUND STATE</button>\n      {\n        fundData &&\n          <>\n            <p> signer_nonce  : {fundData.signer_nonce}</p>\n            <p> perp_market_index : {fundData.perp_market_index}</p>\n            <p> padding   : u8</p>\n            <p> no_of_investments : {fundData.no_of_investments}</p>\n           <br/>\n\n            <p> min_amount  : {fundData.min_amount.toString()}</p>\n            <p> min_return  : {fundData.min_return.toString()}</p>\n            <p> performance_fee_percentage  : {fundData.performance_fee_percentage}</p>\n            <p> total_amount in fund USDC  : {fundData.total_amount.toString()}</p>\n            <p> current_index  : {fundData.current_index}</p>\n            <br/>\n\n            <p> **deposits  : {fundData.deposits.toString()}</p>\n            <p> vault_balance  : {fundData.vault_balance.toString()}</p>\n\n            <p> manager_account  : {fundData.manager_account.toBase58()}</p>\n            <p> fund_pda  : {fundData.fund_pda.toBase58()}</p>\n            <p> delegate  : {fundData.delegate.toBase58()}</p>\n            <br/>\n\n            <p> vault_key  : {fundData.vault_key.toBase58()}</p>\n            <p> mngo_vault_key  : {fundData.mngo_vault_key.toBase58()}</p>\n            <p> mango_account  : {fundData.mango_account.toBase58()}</p>\n            <br/>\n\n            <p> mngo_per_share  : {fundData.mngo_per_share.toString()}</p>\n            <p> mngo_manager  : {fundData.mngo_manager.toString()}</p>\n            <p> mngo_accrued  : {fundData.mngo_accrued.toString()}</p>\n            <p> total_mngo_accrued  : {fundData.total_mngo_accrued.toString()}</p>\n          </>\n      }\n\n\n\n\n\n\n      {/* <hr/>\n        Mango account  ::: {' '}\n        <input type=\"text\" value={mangoAccount} onChange={(event) => setMangoAccount(event.target.value)} />\n        <button onClick={getMangoAccountData}>GET  MANGO ACC DATA </button>\n        <br />\n      {\n        mangoAccount && mangoAccountData &&\n        <>\n         <h4>MANGO ACC :{mangoAccount} </h4>\n            <p> mangoGroup : {mangoAccountData.admin}</p>\n            <b> borrows :</b>\n            <p>\n             { \n             mangoAccountData?.borrows?.length &&\n             mangoAccountData.borrows.map((i,x)=> <> {x} = {i} <b>_||_</b></>  )\n                }\n            </p>\n           <b> clientOrderIds :</b>\n           { mangoAccountData?.clientOrderIds && mangoAccountData?.clientOrderIds.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n           <b> deposits :</b>\n           { mangoAccountData?.deposits && mangoAccountData?.deposits.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n  \n           <b> orders :</b>\n           { mangoAccountData?.orders && mangoAccountData?.orders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n          \n           <b> spotOpenOrders :</b>\n           { mangoAccountData?.spotOpenOrders && mangoAccountData?.spotOpenOrders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n\n           <b>perpAccounts</b>\n            {\n                 mangoAccountData.perpAccounts?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>index</th>\n\n                                        <th style={{ width: \"15%\" }}>asksQuantity</th>\n                                          <th style={{ width: \"15%\" }}>basePosition</th>\n                                          <th style={{ width: \"15%\" }}>bidsQuantity</th>\n                                          <th style={{ width: \"15%\" }}>longSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>mngoAccrued</th>\n                                          <th style={{ width: \"15%\" }}>quotePosition</th>\n\n                                          <th style={{ width: \"15%\" }}>shortSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>takerBase</th>\n                                          <th style={{ width: \"15%\" }}>takerQuote</th>\n\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoAccountData.perpAccounts && \n                            mangoAccountData.perpAccounts.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{x}</td>\n\n                                <td >{i?.asksQuantity}</td>\n                                <td >{i?.basePosition}</td>\n                                <td >{i?.bidsQuantity}</td>\n                                <td >{i?.longSettledFunding}</td>\n                                <td >{i?.mngoAccrued}</td>\n                                <td >{i?.quotePosition}</td>\n\n                                <td >{i?.shortSettledFunding}</td>\n                                <td >{i?.takerBase}</td>\n                                <td >{i?.takerQuote}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n  \n        \n        </>\n      } */}\n\n\n\n\n\n      <hr/>\n      {/* <h4>MANGO GRP </h4>\n      <button onClick={getAllDecodeMangoData}>GET ALL MANGO DATA </button>\n      {\n        mangoGroup &&\n          <>\n           \n            <p> admin : {mangoGroup.admin}</p>\n            <p> dexProgramId : {mangoGroup.dexProgramId}</p>\n            <p> insuranceVault : {mangoGroup.insuranceVault}</p>\n            <p> mangoCache : {mangoGroup.mangoCache}</p>\n            <p> msrmVault : {mangoGroup.msrmVault}</p>\n\n            <p> numOracles : {mangoGroup.numOracles}</p>\n            <b>mangoGroup-oracles</b>\n            <ul>\n            {\n              mangoGroup.oracles &&\n              mangoGroup.oracles.map((i,x)=> <li key={x}> <b>{x}</b> {i}</li> )\n            }\n            </ul>\n\n            <b>spotMarkets</b>\n            {\n                 mangoGroup.spotMarkets?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>initAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>initLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>liquidationFee</th>\n                                          <th style={{ width: \"15%\" }}>maintAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>maintLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>spotMarket</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.spotMarkets && \n                            mangoGroup.spotMarkets.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.initAssetWeight}</td>\n                                <td >{i?.initLiabWeight}</td>\n                                <td >{i?.liquidationFee}</td>\n                                <td >{i?.maintAssetWeight}</td>\n                                <td >{i?.maintLiabWeight}</td>\n                                <td >{i?.spotMarket}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n            <b>TOKENS</b>\n             {\n                 mangoGroup.tokens?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                          <th style={{ width: \"15%\" }}>mint</th>\n                                          <th style={{ width: \"15%\" }}>rootBank</th>\n                                          <th style={{ width: \"15%\" }}>decimals</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.tokens && \n                            mangoGroup.tokens.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.mint}</td>\n                                <td >{i?.rootBank}</td>\n                                <td >{i?.decimals}</td>\n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n\n           </> \n      }\n      <h4>USDC NODE BANK {ids.tokens[0].nodeKeys[0]}</h4>\n      {nodeBank && \n        <>\n            <p> borrows : {nodeBank.borrows}</p>\n            <p> deposits : {nodeBank.deposits}</p>\n            <p> vault : {nodeBank.vault}</p>\n        </>\n      }\n      <h4>USDC ROOT BANK {ids.tokens[0].rootKey}</h4>\n      {rootBank && \n        <>\n            <p> depositIndex : {rootBank.depositIndex}</p>\n            <p> borrowIndex : {rootBank.borrowIndex}</p>\n            <p> lastUpdated : {rootBank.lastUpdated}</p>\n            <p> maxRate : {rootBank.maxRate}</p>\n            <p> optimalUtil : {rootBank.optimalUtil}</p>\n            <p> optimalRate : {rootBank.optimalRate}</p>\n\n        </>\n      } */}\n\n      \n   \n  </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}