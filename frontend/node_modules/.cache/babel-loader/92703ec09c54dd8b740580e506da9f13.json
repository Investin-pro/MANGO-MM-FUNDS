{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Withdraw = () => {\n  _s();\n\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\n  const ids = IDS['groups'][0];\n\n  const handleWithdraw = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n\n    if (!fundPDA) {\n      alert(\"no funds found\");\n      return;\n    }\n\n    const transaction = new Transaction();\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: investerStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, //fund State Account\n      {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: fundState.vault_key,\n        isSigner: false,\n        isWritable: true\n      }, // Router Base Token Account\n      {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(fundPDA),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].bidsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].asksKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].eventsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].rootKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: nodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: investorBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, // Investor Token Accounts\n      {\n        pubkey: mangoGroup.signerKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key, investerStateAccount);\n    transaction.partialSign(...signers);\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleFunds = async () => {\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n    let invFunds = [];\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      let invStateAccount = await PublicKey.createWithSeed(walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey, PDA[0].toBase58().substr(0, 31), programId);\n      let invState = await connection.getAccountInfo(invStateAccount);\n\n      if (invState == null) {\n        continue;\n      }\n\n      let invStateData = INVESTOR_DATA.decode(invState.data);\n      console.log(invStateData); // if (!invStateData.is_initialized) {\n      //   continue\n      // }\n\n      invFunds.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58()\n      });\n    }\n\n    console.log(invFunds);\n    setFunds(invFunds);\n  };\n\n  const handleFundSelect = async event => {\n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA);\n  };\n\n  const handleGetInvestments = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    if (!fundPDA) {\n      alert('no fund found');\n      return;\n    }\n\n    const investorStateAccount = await PublicKey.createWithSeed(key, fundPDA.substr(0, 31), programId);\n    let x = await connection.getAccountInfo(investorStateAccount);\n\n    if (x == null) {\n      alert(\"investor account not found for selected fund\");\n      return;\n    }\n\n    let invState = INVESTOR_DATA.decode(x.data); // if (!invState.is_initialized) {\n    //   alert(\"investor data not initialized!\")\n    //   return\n    // }\n\n    console.log(invState);\n    let y = await connection.getAccountInfo(new PublicKey(fundPDA));\n\n    if (y == null) {\n      alert(\"investor account not found\");\n      return;\n    }\n\n    let fundState = FUND_DATA.decode(y.data);\n    console.log(fundState);\n  };\n\n  const handleHarvestMngo = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n\n    if (!fundPDA) {\n      alert(\"no funds found\");\n      return;\n    }\n\n    if (fundPDA == '') {\n      alert(\"get fund info first!\");\n      return;\n    }\n\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey));\n    let perpMkt = PerpMarketLayout.decode(perpAcc.data);\n    console.log(\"perpmkt:: \", perpMkt);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const investorStateAccount = await PublicKey.createWithSeed(key, fundPDA.substr(0, 31), programId);\n    const transaction = new Transaction();\n    const investorMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 3\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: new PublicKey(fundPDA),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: investorStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: fundState.mngo_vault_key,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: investorMngoAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(fundPDA),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: perpMkt.mngoVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[1].rootKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: nodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.signerKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 285,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleFundSelect,\n      children: funds.map(fund => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, fund.fundPDA, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 294,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetInvestments,\n      children: \"Get Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 295,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdraw,\n      children: \"Withdraw from Fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleHarvestMngo,\n      children: \"Harvest Mngo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 301,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 303,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 284,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdraw, \"5NG+xoPnjtYKoS9WSHmtHpuzcHY=\");\n\n_c = Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","FUND_ACCOUNT_KEY","programId","TOKEN_PROGRAM_ID","struct","u32","createKeyIfNotExists","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","INVESTOR_DATA","FUND_DATA","createAccountInstruction","IDS","MangoClient","NodeBankLayout","PerpMarketLayout","Withdraw","fundPDA","setFundPDA","funds","setFunds","walletProvider","s","fundAccount","createFundPublicKey","ids","handleWithdraw","key","publicKey","alert","transaction","openOrdersLamports","getMinimumBalanceForRentExemption","span","signers","investerStateAccount","investorBaseTokenAccount","tokens","mintKey","fundStateInfo","getAccountInfo","fundState","decode","data","console","log","client","mangoProgramId","mangoGroup","getMangoGroup","nodeBankInfo","nodeKeys","nodeBank","dataLayout","Buffer","alloc","encode","instruction","keys","pubkey","isSigner","isWritable","vault_key","mango_account","mangoCache","perpMarkets","bidsKey","asksKey","eventsKey","rootKey","vault","signerKey","default","add","toBase58","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","sign","handleFunds","getProgramAccounts","filters","dataSize","fundData","map","f","account","invFunds","i","length","manager","manager_account","PDA","findProgramAddress","toBuffer","createWithSeed","invStateAccount","substr","invState","invStateData","push","fundManager","handleFundSelect","event","target","value","handleGetInvestments","investorStateAccount","x","y","handleHarvestMngo","perpAcc","perpMkt","investorMngoAccount","mngo_vault_key","mngoVault","fund"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { connection,  FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID} from '../utils/constants';\r\n\r\nimport { struct, u32 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\r\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\r\n\r\nexport const Withdraw = () => {\r\n\r\n  const [fundPDA, setFundPDA] = useState('')\r\n  const [funds, setFunds] = useState([]);\r\n\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\r\n  const ids = IDS['groups'][0]\r\n\r\n\r\n  const handleWithdraw = async () => {\r\n\r\n    const key = walletProvider?.publicKey;\r\n\r\n    if (!key) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    };\r\n\r\n    if(!fundPDA) {\r\n      alert(\"no funds found\")\r\n      return\r\n    }\r\n    \r\n    const transaction = new Transaction()\r\n\r\n    const openOrdersLamports =\r\n    await connection.getMinimumBalanceForRentExemption(\r\n      INVESTOR_DATA.span,\r\n      'singleGossip'\r\n    )\r\n    let signers = []\r\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\r\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n\r\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\r\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n    console.log(\"fundState:: \", fundState)\r\n\r\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n    console.log(\"mango group:: \", mangoGroup)\r\n\r\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\r\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n    console.log(\"nodebank:: \", nodeBank)\r\n\r\n\r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 2,\r\n      },\r\n      data\r\n    )\r\n\r\n    const instruction = new TransactionInstruction({\r\n      keys: [\r\n        { pubkey: fundPDA, isSigner: false, isWritable: true },\r\n        { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n        { pubkey: key, isSigner: true, isWritable: true },\r\n        { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\r\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n\r\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n        { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n        { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\r\n\r\n        { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\r\n        { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n        { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\r\n        { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n        { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n      ],\r\n      programId,\r\n      data\r\n    });\r\n\r\n    transaction.add(instruction);\r\n    console.log(`transaction ::: `, transaction)\r\n    console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n    transaction.feePayer = key;\r\n    let hash = await connection.getRecentBlockhash(\"finalized\");\r\n    console.log(\"blockhash\", hash);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n    transaction.setSigners(key, investerStateAccount)\r\n    transaction.partialSign(...signers)\r\n    const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    console.log(\"tx::: \", sign)\r\n  }\r\n  \r\n  const handleFunds = async () => {\r\n  \r\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\r\n    console.log(`funds :::: `, funds)\r\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\r\n\r\n    console.log(`decodedFunds ::: `, fundData)\r\n    let invFunds = []\r\n    for(let i=0; i<fundData.length; i++) {\r\n      let manager = fundData[i].manager_account;\r\n\r\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\r\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n\r\n      let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\r\n      let invState = await connection.getAccountInfo(invStateAccount);\r\n\r\n      if (invState == null) {\r\n        continue\r\n      }\r\n\r\n      let invStateData = INVESTOR_DATA.decode(invState.data)\r\n      console.log(invStateData)\r\n\r\n      // if (!invStateData.is_initialized) {\r\n      //   continue\r\n      // }\r\n      invFunds.push({\r\n        fundPDA: PDA[0].toBase58(),\r\n        fundManager: manager.toBase58(),\r\n      });\r\n    }\r\n    console.log(invFunds)\r\n    setFunds(invFunds);\r\n  }\r\n\r\n  const handleFundSelect = async(event) => {\r\n  \r\n    setFundPDA(event.target.value);\r\n    console.log(`setting fundPDA :::: `, fundPDA)\r\n  }\r\n  \r\n  const handleGetInvestments = async () => {\r\n    const key = walletProvider?.publicKey;  \r\n    if (!key ) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    }\r\n    if (!fundPDA) {\r\n      alert('no fund found')\r\n      return;\r\n    }\r\n    const investorStateAccount = await PublicKey.createWithSeed(\r\n      key,\r\n      fundPDA.substr(0, 31),\r\n      programId,\r\n    );\r\n\r\n    let x = await connection.getAccountInfo(investorStateAccount)\r\n    if (x == null)\r\n    {\r\n      alert(\"investor account not found for selected fund\")\r\n      return\r\n    }\r\n    let invState = INVESTOR_DATA.decode(x.data)\r\n    // if (!invState.is_initialized) {\r\n    //   alert(\"investor data not initialized!\")\r\n    //   return\r\n    // }\r\n    console.log(invState);\r\n    \r\n    let y = await connection.getAccountInfo(new PublicKey(fundPDA))\r\n    if (y == null)\r\n    {\r\n      alert(\"investor account not found\")\r\n      return\r\n    }\r\n    let fundState = FUND_DATA.decode(y.data);\r\n    console.log(fundState)\r\n  }\r\n\r\n  const handleHarvestMngo = async () => {\r\n    \r\n      const key = walletProvider?.publicKey;\r\n\r\n      if (!key) {\r\n        alert(\"connect wallet\")\r\n        return;\r\n      };\r\n  \r\n      if(!fundPDA) {\r\n        alert(\"no funds found\")\r\n        return\r\n      }\r\n\r\n    if (fundPDA == ''){\r\n      alert(\"get fund info first!\")\r\n      return\r\n    }\r\n    let fundStateInfo = await connection.getAccountInfo((new PublicKey(fundPDA)))\r\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n    console.log(\"fundState:: \", fundState)\r\n  \r\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n    console.log(\"mango group:: \", mangoGroup)\r\n  \r\n    let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey))\r\n    let perpMkt = PerpMarketLayout.decode(perpAcc.data)\r\n    console.log(\"perpmkt:: \", perpMkt)\r\n  \r\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\r\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n    console.log(\"nodebank:: \", nodeBank)\r\n\r\n    const investorStateAccount = await PublicKey.createWithSeed(\r\n      key,\r\n      fundPDA.substr(0, 31),\r\n      programId,\r\n    );\r\n  \r\n    const transaction = new Transaction()\r\n  \r\n    const investorMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\r\n  \r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 3\r\n      },\r\n      data\r\n    )\r\n  \r\n    const instruction = new TransactionInstruction({\r\n      keys: [\r\n        { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true },\r\n        { pubkey: investorStateAccount, isSigner: false, isWritable: true },\r\n        { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\r\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n        { pubkey: fundState.mngo_vault_key, isSigner: false, isWritable: true },\r\n        { pubkey: investorMngoAccount , isSigner: false, isWritable: true },\r\n  \r\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n        { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n        { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: false },\r\n        { pubkey: perpMkt.mngoVault, isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.tokens[1].rootKey), isSigner: false, isWritable: true },\r\n        { pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]), isSigner: false, isWritable: true },\r\n        { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n        { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n        { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n      ],\r\n      programId,\r\n      data\r\n    });\r\n  \r\n    transaction.add(instruction);\r\n    console.log(`transaction ::: `, transaction)\r\n    console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n    transaction.feePayer = key;\r\n    let hash = await connection.getRecentBlockhash(\"finalized\");\r\n    console.log(\"blockhash\", hash);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n  \r\n    const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    console.log(\"tx::: \", sign)\r\n}\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>Withdraw</h4>\r\n      \r\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\r\n        {\r\n          funds.map((fund) => {\r\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleFunds}>Load Investments</button>\r\n      <button onClick={handleGetInvestments}>Get Investments</button>\r\n\r\n      <br />\r\n      <br />\r\n     \r\n      <button onClick={handleWithdraw}>Withdraw from Fund</button>\r\n      <button onClick={handleHarvestMngo}>Harvest Mngo</button>\r\n  \r\n      <br />\r\n    </div>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}