{"ast":null,"code":"import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n  static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n    const simulate = async function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      const tx = txFn(...args);\n      const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n      let resp = undefined;\n\n      try {\n        resp = await provider.simulate(tx, ctx.signers, ctx.options);\n      } catch (err) {\n        console.log(\"Translating error\", err);\n        let translatedErr = ProgramError.parse(err, idlErrors);\n\n        if (translatedErr === null) {\n          throw err;\n        }\n\n        throw translatedErr;\n      }\n\n      if (resp === undefined) {\n        throw new Error(\"Unable to simulate transaction\");\n      }\n\n      if (resp.value.err) {\n        throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n      }\n\n      const logs = resp.value.logs;\n\n      if (!logs) {\n        throw new Error(\"Simulated logs not found\");\n      }\n\n      const events = [];\n\n      if (idl.events) {\n        let parser = new EventParser(coder, programId);\n        parser.parseLogs(logs, event => {\n          events.push(event);\n        });\n      }\n\n      return {\n        events,\n        raw: logs\n      };\n    };\n\n    return simulate;\n  }\n\n}","map":{"version":3,"sources":["../../../../src/program/namespace/simulate.ts"],"names":[],"mappings":"AAGA,SAAS,eAAT,QAAgC,YAAhC;AAEA,SAAS,WAAT,QAAmC,UAAnC;AAGA,SAAS,YAAT,QAA6B,aAA7B;AAEA,eAAc,MAAO,eAAP,CAAsB;AACf,SAAL,KAAK,CACjB,KADiB,EAEjB,IAFiB,EAGjB,SAHiB,EAIjB,QAJiB,EAKjB,KALiB,EAMjB,SANiB,EAOjB,GAPiB,EAOT;AAER,UAAM,QAAQ,GAAG,kBAAoD;AAAA,wCAA1C,IAA0C;AAA1C,QAAA,IAA0C;AAAA;;AACnE,YAAM,EAAE,GAAG,IAAI,CAAC,GAAG,IAAJ,CAAf;AACA,YAAM,GAAG,GAAH,IAAU,eAAe,CAAC,KAAD,EAAQ,CAAC,GAAG,IAAJ,CAAR,CAA/B;AACA,UAAI,IAAI,GAAG,SAAX;;AACA,UAAI;AACF,QAAA,IAAI,GAAG,MAAM,QAAQ,CAAC,QAAT,CAAkB,EAAlB,EAAsB,GAAG,CAAC,OAA1B,EAAmC,GAAG,CAAC,OAAvC,CAAb;AACD,OAFD,CAEE,OAAO,GAAP,EAAY;AACZ,QAAA,OAAO,CAAC,GAAR,CAAY,mBAAZ,EAAiC,GAAjC;AACA,YAAI,aAAa,GAAG,YAAY,CAAC,KAAb,CAAmB,GAAnB,EAAwB,SAAxB,CAApB;;AACA,YAAI,aAAa,KAAK,IAAtB,EAA4B;AAC1B,gBAAM,GAAN;AACD;;AACD,cAAM,aAAN;AACD;;AACD,UAAI,IAAI,KAAK,SAAb,EAAwB;AACtB,cAAM,IAAI,KAAJ,CAAU,gCAAV,CAAN;AACD;;AACD,UAAI,IAAI,CAAC,KAAL,CAAW,GAAf,EAAoB;AAClB,cAAM,IAAI,KAAJ,CAAU,mBAAmB,IAAI,CAAC,KAAL,CAAW,GAAX,CAAe,QAAf,EAAyB,EAAtD,CAAN;AACD;;AACD,YAAM,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,IAAxB;;AACA,UAAI,CAAC,IAAL,EAAW;AACT,cAAM,IAAI,KAAJ,CAAU,0BAAV,CAAN;AACD;;AAED,YAAM,MAAM,GAAG,EAAf;;AACA,UAAI,GAAG,CAAC,MAAR,EAAgB;AACd,YAAI,MAAM,GAAG,IAAI,WAAJ,CAAgB,KAAhB,EAAuB,SAAvB,CAAb;AACA,QAAA,MAAM,CAAC,SAAP,CAAiB,IAAjB,EAAwB,KAAD,IAAU;AAC/B,UAAA,MAAM,CAAC,IAAP,CAAY,KAAZ;AACD,SAFD;AAGD;;AACD,aAAO;AAAE,QAAA,MAAF;AAAU,QAAA,GAAG,EAAE;AAAf,OAAP;AACD,KAjCD;;AAmCA,WAAO,QAAP;AACD;;AA9CiC","sourceRoot":"","sourcesContent":["import { splitArgsAndCtx } from \"../context\";\nimport { EventParser } from \"../event\";\nimport { ProgramError } from \"../../error\";\nexport default class SimulateFactory {\n    static build(idlIx, txFn, idlErrors, provider, coder, programId, idl) {\n        const simulate = async (...args) => {\n            const tx = txFn(...args);\n            const [, ctx] = splitArgsAndCtx(idlIx, [...args]);\n            let resp = undefined;\n            try {\n                resp = await provider.simulate(tx, ctx.signers, ctx.options);\n            }\n            catch (err) {\n                console.log(\"Translating error\", err);\n                let translatedErr = ProgramError.parse(err, idlErrors);\n                if (translatedErr === null) {\n                    throw err;\n                }\n                throw translatedErr;\n            }\n            if (resp === undefined) {\n                throw new Error(\"Unable to simulate transaction\");\n            }\n            if (resp.value.err) {\n                throw new Error(`Simulate error: ${resp.value.err.toString()}`);\n            }\n            const logs = resp.value.logs;\n            if (!logs) {\n                throw new Error(\"Simulated logs not found\");\n            }\n            const events = [];\n            if (idl.events) {\n                let parser = new EventParser(coder, programId);\n                parser.parseLogs(logs, (event) => {\n                    events.push(event);\n                });\n            }\n            return { events, raw: logs };\n        };\n        return simulate;\n    }\n}\n//# sourceMappingURL=simulate.js.map"]},"metadata":{},"sourceType":"module"}