{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID, MANGO_GROUP_ACCOUNT, SOL_USDC_MARKET, SYSTEM_PROGRAM_ID, idsIndex, MARGIN_ACCOUNT_KEY_1, PERP_ACCOUNT_KEY_1, MANGO_PROGRAM_ID, MANGO_TOKENS, PERP_MARKETS, platformStateAccount } from '../utils/constants';\nimport { nu64, struct, u8, u32, ns64 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, MAX_LIMIT_ORDERS, PLATFORM_DATA } from '../utils/programLayouts';\nimport { MarginAccountLayout, selfTradeBehaviorLayout } from '../utils/MangoLayout';\nimport { devnet_pools, pools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { mangoClosePosition, mangoOpenPosition } from '../utils/mango';\nimport BN from 'bn.js';\nimport { i128, IDS, MangoAccountLayout, MangoClient, NodeBankLayout, perpAccountLayout, PerpMarketLayout, u64 } from '@blockworks-foundation/mango-client';\nimport { OpenOrders } from '@project-serum/serum';\nimport { Table } from 'reactstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MangoPlaceOrder = () => {\n  _s();\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][idsIndex];\n  const [size, setSize] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [lendAmount, setLendAmount] = useState(0);\n  const [orderPerpIndex, setOrderPerpIndex] = useState(0);\n  const [addRemovePerpIndex, setAddRemovePerpIndex] = useState(0);\n  const [addRemoveTokenIndex, setAddRemoveTokenIndex] = useState(0);\n  const [lendTokenIndex, setLendTokenIndex] = useState(0);\n  const [side, setSide] = useState(0);\n  const [funds, setFunds] = useState([]);\n\n  const handleMangoOpenOrders = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    const fundStateAccount = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    console.log(\"FUND STTE:: \", fundStateAccount.toBase58());\n    let fund_info = await connection.getAccountInfo(fundStateAccount);\n    const fund_data = FUND_DATA.decode(fund_info.data);\n    let pos_index = fund_data.no_of_margin_positions;\n    console.log(\"pos_index\", pos_index);\n    console.log(\"orderPerpIndex:: \", orderPerpIndex);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT); // open orders missing for this market; create a new one now\n\n    const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip');\n    let accInstr = await createKeyIfNotExists(walletProvider, \"\", mangoGroup.dexProgramId, key.toBase58().substr(0, 20) + pos_index.toString() + orderPerpIndex.toString(), openOrdersSpace, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handlePerpMarketOrder = async () => {\n    console.log(\"---** handleAddPerpMarketselected orderPerpIndex, size, side :\", orderPerpIndex, size, side);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction(); // const perpAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, PERP_ACCOUNT_KEY_1, perpAccountLayout.span, transaction)\n    // console.log(\"mangoAccount created::\",perpAccount.toBase58())\n    // const mango_token_index = \n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    const BTCBaseLotSize = 2; // baseLotSize / quoteLotSize\n\n    console.log(\"size::::\", size / PERP_MARKETS[orderPerpIndex].contractSize);\n    const maxSlippage = 0.15; // const price = \n\n    const priceAfterSlippage = price * (1 + (side === 0 ? 1 : -1) * maxSlippage);\n    const baseUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].baseDecimals);\n    const quoteUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].quoteDecimals);\n    console.log(\"PERP_MARKETS[orderPerpIndex]:\", PERP_MARKETS[orderPerpIndex]);\n    console.log(\"maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit ::\", maxSlippage, price, priceAfterSlippage, baseUnit, quoteUnit); // const nativePrice = new BN(priceAfterSlippage * quoteUnit)\n    //   .mul(new BN(PERP_MARKETS[orderPerpIndex].baseLotSize))\n    //   .div((new BN(PERP_MARKETS[orderPerpIndex].quoteLotSize)).mul(new BN(baseUnit)));\n\n    const nativePrice = priceAfterSlippage * quoteUnit * PERP_MARKETS[orderPerpIndex].baseLotSize / (PERP_MARKETS[orderPerpIndex].quoteLotSize * baseUnit);\n    console.log(\"nativePrice::\", nativePrice);\n    const dataLayout = struct([u8('instruction'), u8('perp_market_id'), u8('side'), nu64('price'), nu64('quantity')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 10,\n      perp_market_id: orderPerpIndex,\n      side: side,\n      price: nativePrice,\n      quantity: size / PERP_MARKETS[orderPerpIndex].contractSize\n    }, data);\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].bidsKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].asksKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].eventsKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handlePerpMarketOrder2 = async () => {\n    console.log(\"---** handleAddPerpMarketselected2 orderPerpIndex, size, side :\", orderPerpIndex, size, side);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction(); // const perpAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, PERP_ACCOUNT_KEY_1, perpAccountLayout.span, transaction)\n    // console.log(\"mangoAccount created::\",perpAccount.toBase58())\n    // const mango_token_index = \n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data); //  const BTCBaseLotSize = 2 // baseLotSize / quoteLotSize\n    //  console.log(\"size::::\",size/(PERP_MARKETS[orderPerpIndex].contractSize)  )\n    //  const maxSlippage = 0.15;\n    //  const priceAfterSlippage = price * (1 + (side === 0 ? 1 : -1) * maxSlippage)\n    //  const baseUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].baseDecimals);\n    //  const quoteUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].quoteDecimals);\n    //  console.log(\"maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit ::\",maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit)\n    // const nativePrice = new BN(priceAfterSlippage * quoteUnit)\n    //   .mul(new BN(PERP_MARKETS[orderPerpIndex].baseLotSize))\n    //   .div((new BN(PERP_MARKETS[orderPerpIndex].quoteLotSize)).mul(new BN(baseUnit)));\n    //  const nativePrice = (priceAfterSlippage * quoteUnit *  PERP_MARKETS[orderPerpIndex].baseLotSize )/(PERP_MARKETS[orderPerpIndex].quoteLotSize * baseUnit )\n    //  console.log(\"nativePrice::\",nativePrice)\n\n    const perpMaketInfo = PERP_MARKETS[2];\n    console.log(\"perpMaketInfo:\", perpMaketInfo);\n    const perpMarket = await client.getPerpMarket(new PublicKey(perpMaketInfo.publicKey), perpMaketInfo.baseDecimals, perpMaketInfo.quoteDecimals);\n    const maxQuoteQuantity = 100;\n    const maxBaseQuantity = 1;\n    const quantity = 1;\n    const price = 100;\n    const currentTime = new Date().getTime() / 1000;\n    console.log(\"currentTime:\", currentTime);\n    const [nativePrice, nativeQuantity] = perpMarket.uiToNativePriceQuantity(price, quantity);\n    const maxQuoteQuantityLots = perpMarket.uiQuoteToLots(maxQuoteQuantity);\n    const clientOrderId = Date.now();\n    const dataLayout = struct([u8('instruction'), u8('perp_market_id'), nu64('price'), nu64('max_base_quantity'), nu64('max_quote_quantity'), nu64('client_order_id'), nu64('expiry_timestamp'), u8('side'), u8('order_type'), u8('reduce_only'), u8('limit')]);\n    const data = Buffer.alloc(dataLayout.span);\n    const params = {\n      instruction: 28,\n      perp_market_id: 3,\n      price: nativePrice.toNumber(),\n      max_base_quantity: nativeQuantity.toNumber(),\n      max_quote_quantity: maxQuoteQuantityLots.toNumber(),\n      client_order_id: clientOrderId,\n      expiry_timestamp: 0,\n      side: side,\n      order_type: 0,\n      reduce_only: false,\n      limit: 5\n    };\n    console.log(\"params:\", params);\n    dataLayout.encode(params, data);\n    const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.bidsKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.asksKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.eventsKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: MANGO_REFERRER_ACCOUNT,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleCancelLimitOrderByClientOrderID = async () => {\n    console.log(\"---** handleCancelLimitOrderByClientOrderID orderPerpIndex, size, side :\", orderPerpIndex, size, side);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    const perpMaketInfo = PERP_MARKETS[2];\n    const dataLayout = struct([u8('instruction'), nu64('client_order_id')]);\n    const data = Buffer.alloc(dataLayout.span);\n    const params = {\n      instruction: 29,\n      client_order_id: 1649597769626\n    };\n    console.log(\"params:\", params);\n    dataLayout.encode(params, data);\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    //  { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n    {\n      pubkey: new PublicKey(perpMaketInfo.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.bidsKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(perpMaketInfo.asksKey),\n      isSigner: false,\n      isWritable: true\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleRepostLimitOrders = async () => {\n    console.log(\"**----handleRepostLimitOrders ::\");\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      console.log(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fund_data = FUND_PDA_DATA.decode(fundStateInfo.data);\n    console.log(\"fund_data:\", fund_data);\n    const transaction = new Transaction();\n    console.log(\"ids.mangoProgramId:: \", ids.mangoProgramId);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mangoGroup.mangoCache :: \", mangoGroup.mangoCache.toBase58()); //        perp_market_ai,     // write default_ai if no perp market for i^th index\n    //        bids_ai,            // write default_ai if no perp market for i^th index\n    //        asks_ai,            // write default_ai if no perp market for i^th index\n    //        event_queue_ai   //write default_ai if no perp market for i^th index\n\n    let perpKeys = [];\n\n    for (let i = 0; i < MAX_LIMIT_ORDERS; i++) {\n      const is_repost_processing = fund_data.limit_orders[i].is_repost_processing;\n      const marketIndex = fund_data.limit_orders[i].perp_market_id;\n      console.log(\"marketIndex:\", marketIndex, i);\n      const perpMaketInfo = PERP_MARKETS.find(i => i.perpMarketId == marketIndex);\n      console.log(\"found  perpMaketInfo::\", perpMaketInfo);\n\n      if (is_repost_processing) {\n        console.log(\"pusing:\", marketIndex, i);\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.publicKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.bidsKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.asksKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.eventsKey),\n          isSigner: false,\n          isWritable: true\n        });\n      } else {\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n    }\n\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 30\n    }, data);\n    const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: fund_data.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: MANGO_REFERRER_ACCOUNT,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }, ...perpKeys // 8 accs \n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleGetRepostProcessingFunds = async () => {\n    const managers = [];\n    const allFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_PDA_DATA.span\n      }, {\n        memcmp: {\n          offset: FUND_PDA_DATA.offsetOf('repost_processing'),\n          bytes: '2'\n        }\n      }]\n    });\n    console.log(\"-------1)funds nondecoded::\", allFunds);\n\n    for (const data of allFunds) {\n      const decodedData = FUND_PDA_DATA.decode(data.account.data); // const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n      // console.log(\"PDA_balance:\",PDA_balance)\n\n      managers.push({\n        fund_v3_index: decodedData.fund_v3_index,\n        fundState: decodedData,\n        fundPDA: decodedData.fund_pda.toBase58(),\n        fundManager: decodedData.manager_account.toBase58(),\n        fundStateAccount: data.pubkey.toBase58(),\n        repost_processing: decodedData.repost_processing // PDA_balance : PDA_balance,\n        // fundName: decodedData.fund_pda.toBase58(),\n        // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n\n      });\n    }\n\n    console.log(\"-----2) Processing Funds Decoded PDA funds:\", managers);\n    setFunds(managers);\n  };\n\n  const callFromKeeper = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    const sign = await client.cacheRootBanks(new PublicKey(ids.publicKey), mangoGroup.mangoCache, [new PublicKey(MANGO_TOKENS.USDC.rootKey), new PublicKey(MANGO_TOKENS.BTC.rootKey)], walletProvider);\n  };\n\n  const handleMangoPerpDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction(); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"lendAmount::::\", lendTokenIndex, lendAmount, ids.tokens[lendTokenIndex]); // console.log(\"fundStateAccount::::\",fundStateAccount.toBase58())\n\n    console.log(\"fundState.fund_pda::::\", fundState.fund_pda.toBase58());\n    console.log(\"nodeBank.vault::::\", nodeBank.vault.toBase58());\n    console.log(\"fundState.mango_positions.mango_account::::\", fundState.mango_positions.mango_account.toBase58());\n    console.log(\"mangoGroup.mangoCache::::\", mangoGroup.mangoCache.toBase58());\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n    if (!platformDataAcc) {\n      alert('platform state not initilaized');\n      return;\n    }\n\n    const platformState = PLATFORM_DATA.decode(platformDataAcc.data); //TODO :\n    // findTokenSlotIndex ids.tokens[lendTokenIndex].mintKey\n\n    let fundTokenSlot = -1;\n    console.log(\"check for mint:\", ids.tokens[lendTokenIndex].mintKey);\n\n    for (let i = 0; i < fundState.tokens.length; i++) {\n      var _platformState$token_, _platformState$token_2;\n\n      const t = fundState.tokens[i];\n      console.log(\"i - mint:\", i, (_platformState$token_ = platformState.token_list[t.index[t.mux]]) === null || _platformState$token_ === void 0 ? void 0 : _platformState$token_.mint.toBase58());\n\n      if (((_platformState$token_2 = platformState.token_list[t.index[t.mux]]) === null || _platformState$token_2 === void 0 ? void 0 : _platformState$token_2.mint.toBase58()) == ids.tokens[lendTokenIndex].mintKey) {\n        fundTokenSlot = i;\n        console.log(\"found:\", i);\n        break;\n      }\n    }\n\n    if (fundTokenSlot == -1) {\n      alert('token not whitelisted on fund');\n      return;\n    } // findMangoTokenIndex DONE\n    //should be dynamic based on token\n\n\n    const fundVault = fundState.tokens[fundTokenSlot].vault;\n    console.log(\"fundVault::::\", fundVault.toBase58());\n    const dataLayout = struct([u8('instruction'), u8('token_slot_index'), u8('mango_token_index'), nu64('quantity')]);\n    const data = Buffer.alloc(dataLayout.span);\n    console.log(\"fundTokenSlot:\", fundTokenSlot);\n    console.log(\"MANGO_TOKENS[lendTokenIndex].mangoTokenIndex:\", MANGO_TOKENS.USDC.mangoTokenIndex);\n    dataLayout.encode({\n      instruction: 9,\n      token_slot_index: fundTokenSlot,\n      mango_token_index: MANGO_TOKENS.USDC.mangoTokenIndex,\n      quantity: lendAmount * 10 ** ids.tokens[lendTokenIndex].decimals\n    }, data);\n    const keys = [{\n      pubkey: fundState.fund_pda,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, // { pubkey: fundState.fund_pda, isSigner: false, isWritable: true },\n    {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.tokens[lendTokenIndex].rootKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodeBank.vault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: fundVault,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleMangoPerpWithdraw = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n    if (!platformDataAcc) {\n      alert('platform state not initilaized');\n      return;\n    }\n\n    const platformState = PLATFORM_DATA.decode(platformDataAcc.data); //TODO :\n    // findTokenSlotIndex ids.tokens[lendTokenIndex].mintKey\n\n    let fundTokenSlot = -1;\n\n    for (let i = 0; i < fundState.tokens.length; i++) {\n      var _platformState$token_3;\n\n      if (((_platformState$token_3 = platformState.token_list[fundState.tokens[i].index[fundState.tokens[i].mux]]) === null || _platformState$token_3 === void 0 ? void 0 : _platformState$token_3.mint.toBase58()) === ids.tokens[lendTokenIndex].mintKey) {\n        fundTokenSlot = i;\n        break;\n      }\n    }\n\n    if (fundTokenSlot == -1) {\n      alert('token not whitelisted on fund');\n      return;\n    } // findMangoTokenIndex DONE\n    //should be dynamic based on token\n\n\n    const fundVault = fundState.tokens[fundTokenSlot].vault;\n    console.log(\"fundVault::::\", fundVault.toBase58());\n    const transaction = new Transaction();\n    console.log(\"fundTokenSlot:\", fundTokenSlot);\n    const dataLayout = struct([u8('instruction'), u8('token_slot_index'), u8('mango_token_index'), nu64('quantity')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 13,\n      token_slot_index: fundTokenSlot,\n      mango_token_index: MANGO_TOKENS.USDC.mangoTokenIndex,\n      quantity: lendAmount * 10 ** ids.tokens[lendTokenIndex].decimals\n    }, data);\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.tokens[lendTokenIndex].rootKey),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: nodeBank.vault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundVault,\n      isSigner: false,\n      isWritable: true\n    }, // Fund Vault\n    {\n      pubkey: mangoGroup.signerKey,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleConsumeEvents = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const fundStateAccount = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    let fundStateInfo = await connection.getAccountInfo(fundStateAccount);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    const transaction = new Transaction();\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let perpMarketX = await client.getPerpMarket(new PublicKey(ids.perpMarkets[1].publicKey)); // client.consumeEvents(mangoGroup,perpMarketX )\n    //   const dataLayout = struct([u8('instruction'),u8('limit')])\n    //   const data = Buffer.alloc(dataLayout.span)\n    //   dataLayout.encode(\n    //       {\n    //           instruction: 15,\n    //           limit: 2,\n    //       },\n    //       data\n    //   )\n    //   const keys = [\n    //     // { pubkey: key, isSigner: true, isWritable: true },\n    //     // { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n    //     { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: false },\n    //     { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n    //     { pubkey: new PublicKey(ids.perpMarkets[1].publicKey), isSigner: false, isWritable: true },\n    //     { pubkey: new PublicKey(ids.perpMarkets[1].eventsKey) , isSigner: false, isWritable: true }, \n    //     { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n    // ]\n    // for(let i=0; i<keys.length;i++) {\n    //   console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    // }\n    //   const instruction = new TransactionInstruction({\n    //       keys: keys,\n    //       programId: programId,\n    //       data\n    //   });\n    //   transaction.add(instruction);\n    //   console.log(`transaction ::: `, transaction)\n    //   transaction.feePayer = key;\n    //   let hash = await connection.getRecentBlockhash(\"finalized\");\n    //   console.log(\"blockhash\", hash);\n    //   transaction.recentBlockhash = hash.blockhash;\n    //   const sign = await signAndSendTransaction(walletProvider, transaction);\n    //   console.log(\"tx::: \", sign)\n    //   console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n  };\n\n  const handleRemovePerpMarket = async () => {\n    const perpMarketId = addRemovePerpIndex;\n    console.log(\"handleRemovePerpMarket::\", addRemovePerpIndex);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:\", fundState);\n    const transaction = new Transaction();\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    const dataLayout = struct([u8('instruction'), u8('perp_market_id')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 11,\n      perp_market_id: perpMarketId\n    }, data);\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: MANGO_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: MANGO_GROUP_ACCOUNT,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: new PublicKey(fundsAddress), isSigner: false, isWritable: false },\n    {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"LEND TOKENS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 947,\n      columnNumber: 9\n    }, this), \"Amount :::  \", /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: lendAmount,\n      onChange: event => setLendAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 948,\n      columnNumber: 23\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onChange: event => setLendTokenIndex(event.target.value),\n      children: ids.tokens.map((i, index) => /*#__PURE__*/_jsxDEV(\"option\", {\n        value: index,\n        children: i.symbol\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 951,\n        columnNumber: 45\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 949,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoPerpDeposit,\n      children: \"DEPOSIT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 954,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoPerpWithdraw,\n      children: \"WITHDRAW\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 955,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 959,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"ADD/REMOVE PERP\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 960,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onChange: event => setAddRemovePerpIndex(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"MNGO-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 962,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"BTC-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 963,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 2,\n        children: \"ETH-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 964,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 3,\n        children: \"SOL-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 965,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 4,\n        children: \"SRM-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 966,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 5,\n        children: \"RAY-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 967,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 6,\n        children: \"FTT-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 968,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 7,\n        children: \"ADA-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 969,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 961,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRemovePerpMarket,\n      children: \"REMOVE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 972,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 16\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 974,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Mango Place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 976,\n      columnNumber: 13\n    }, this), \"Size ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: size,\n      onChange: event => setSize(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 978,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 979,\n      columnNumber: 13\n    }, this), \"Price ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: price,\n      onChange: event => setPrice(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 981,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 982,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"side\",\n      children: \"Buy/Sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 983,\n      columnNumber: 51\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onChange: event => setSide(parseInt(event.target.value)),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 986,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 987,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 985,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onChange: event => setOrderPerpIndex(parseInt(event.target.value)),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"MNGO-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 991,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"BTC-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 992,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 2,\n        children: \"ETH-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 993,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 3,\n        children: \"SOL-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 994,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 4,\n        children: \"SRM-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 995,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 5,\n        children: \"RAY-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 996,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 6,\n        children: \"FTT-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 997,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 7,\n        children: \"ADA-PERP\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 998,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 990,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePerpMarketOrder,\n      children: \"ORDER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1001,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handlePerpMarketOrder2,\n      children: \"LIMIT ORDER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1003,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleCancelLimitOrderByClientOrderID,\n      children: \"CANCEL LIMIT ORDER\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1005,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1007,\n      columnNumber: 17\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoOpenOrders,\n      children: \"Open order init\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1008,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1009,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleConsumeEvents,\n      children: \" Consume Events \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1010,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1011,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: callFromKeeper,\n      children: \" KEEPER \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1013,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1015,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"h5\", {\n      children: \"Funds in reposting stage\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1016,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetRepostProcessingFunds,\n      children: \" GET PROCESSING FUNDS \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1017,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleRepostLimitOrders,\n      children: \" REPOST LIMIT ORDERS \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1019,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(Table, {\n      className: \"tablesorter\",\n      responsive: true,\n      style: {\n        overflow: 'hidden !important',\n        textAlign: 'center'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        className: \"text-primary\",\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"index\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1025,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"fund_v3_index\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1026,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"fundManager\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1027,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"fundPDA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1028,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"fundStateAccount\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1029,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            style: {\n              width: \"15%\"\n            },\n            children: \"repost_processing\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 1030,\n            columnNumber: 33\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 1024,\n          columnNumber: 29\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1023,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: funds && funds.map((i, x) => {\n          return /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: x\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1038,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: i === null || i === void 0 ? void 0 : i.fund_v3_index\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1039,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: i === null || i === void 0 ? void 0 : i.fundManager\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1040,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: i === null || i === void 0 ? void 0 : i.fundPDA\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1041,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: i === null || i === void 0 ? void 0 : i.fundStateAccount\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1042,\n              columnNumber: 35\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: i === null || i === void 0 ? void 0 : i.repost_processing\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 1043,\n              columnNumber: 35\n            }, this)]\n          }, x, true, {\n            fileName: _jsxFileName,\n            lineNumber: 1037,\n            columnNumber: 40\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 25\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1022,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1052,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 945,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MangoPlaceOrder, \"K6QZSpfwbUk+yeqtfHZ06RRWS7E=\");\n\n_c = MangoPlaceOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"MangoPlaceOrder\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","programId","TOKEN_PROGRAM_ID","MANGO_GROUP_ACCOUNT","SOL_USDC_MARKET","SYSTEM_PROGRAM_ID","idsIndex","MARGIN_ACCOUNT_KEY_1","PERP_ACCOUNT_KEY_1","MANGO_PROGRAM_ID","MANGO_TOKENS","PERP_MARKETS","platformStateAccount","nu64","struct","u8","u32","ns64","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","FUND_DATA","FUND_PDA_DATA","INVESTOR_DATA","MAX_LIMIT_ORDERS","PLATFORM_DATA","MarginAccountLayout","selfTradeBehaviorLayout","devnet_pools","pools","updatePoolPrices","mangoClosePosition","mangoOpenPosition","BN","i128","IDS","MangoAccountLayout","MangoClient","NodeBankLayout","perpAccountLayout","PerpMarketLayout","u64","OpenOrders","Table","MangoPlaceOrder","walletProvider","s","ids","size","setSize","price","setPrice","lendAmount","setLendAmount","orderPerpIndex","setOrderPerpIndex","addRemovePerpIndex","setAddRemovePerpIndex","addRemoveTokenIndex","setAddRemoveTokenIndex","lendTokenIndex","setLendTokenIndex","side","setSide","funds","setFunds","handleMangoOpenOrders","key","publicKey","alert","transaction","fundStateAccount","createWithSeed","console","log","toBase58","fund_info","getAccountInfo","fund_data","decode","data","pos_index","no_of_margin_positions","client","mangoProgramId","mangoGroup","getMangoGroup","openOrdersSpace","getLayout","dexProgramId","span","openOrdersLamports","getMinimumBalanceForRentExemption","accInstr","substr","toString","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handlePerpMarketOrder","fundPDA","findProgramAddress","toBuffer","fundStateInfo","fundState","nodeBankInfo","tokens","nodeKeys","nodeBank","BTCBaseLotSize","contractSize","maxSlippage","priceAfterSlippage","baseUnit","Math","pow","baseDecimals","quoteUnit","quoteDecimals","nativePrice","baseLotSize","quoteLotSize","dataLayout","Buffer","alloc","encode","instruction","perp_market_id","quantity","keys","pubkey","isSigner","isWritable","mango_positions","mango_account","mangoCache","perpMarkets","bidsKey","asksKey","eventsKey","default","i","length","add","handlePerpMarketOrder2","perpMaketInfo","perpMarket","getPerpMarket","maxQuoteQuantity","maxBaseQuantity","currentTime","Date","getTime","nativeQuantity","uiToNativePriceQuantity","maxQuoteQuantityLots","uiQuoteToLots","clientOrderId","now","params","toNumber","max_base_quantity","max_quote_quantity","client_order_id","expiry_timestamp","order_type","reduce_only","limit","MANGO_REFERRER_ACCOUNT","handleCancelLimitOrderByClientOrderID","handleRepostLimitOrders","perpKeys","is_repost_processing","limit_orders","marketIndex","find","perpMarketId","push","handleGetRepostProcessingFunds","managers","allFunds","getProgramAccounts","filters","dataSize","memcmp","offset","offsetOf","bytes","decodedData","account","fund_v3_index","fund_pda","fundManager","manager_account","repost_processing","callFromKeeper","cacheRootBanks","USDC","rootKey","BTC","handleMangoPerpDeposit","vault","platformDataAcc","platformState","fundTokenSlot","mintKey","t","token_list","index","mux","mint","fundVault","mangoTokenIndex","token_slot_index","mango_token_index","decimals","handleMangoPerpWithdraw","signerKey","handleConsumeEvents","perpMarketX","handleRemovePerpMarket","event","target","value","map","symbol","parseInt","overflow","textAlign","width","x"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID , MANGO_GROUP_ACCOUNT, SOL_USDC_MARKET, SYSTEM_PROGRAM_ID, idsIndex, MARGIN_ACCOUNT_KEY_1, PERP_ACCOUNT_KEY_1, MANGO_PROGRAM_ID, MANGO_TOKENS, PERP_MARKETS, platformStateAccount} from '../utils/constants';\nimport { nu64, struct, u8 ,u32, ns64, } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, MAX_LIMIT_ORDERS, PLATFORM_DATA } from '../utils/programLayouts';\nimport { MarginAccountLayout, selfTradeBehaviorLayout } from '../utils/MangoLayout';\nimport { devnet_pools, pools } from '../utils/pools'\nimport { updatePoolPrices } from './updatePrices';\n\nimport {mangoClosePosition, mangoOpenPosition} from '../utils/mango'\nimport BN from 'bn.js';\nimport { i128, IDS, MangoAccountLayout, MangoClient, NodeBankLayout, perpAccountLayout, PerpMarketLayout, u64 } from '@blockworks-foundation/mango-client';\nimport { OpenOrders } from '@project-serum/serum';\nimport { Table } from 'reactstrap';\n\nexport const MangoPlaceOrder = () => {\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const ids= IDS['groups'][idsIndex];\n\n    const [size, setSize] = useState(0);\n    const [price, setPrice] = useState(0)\n    const [lendAmount, setLendAmount] = useState(0)\n    const [orderPerpIndex, setOrderPerpIndex] = useState(0);\n    const [addRemovePerpIndex, setAddRemovePerpIndex] = useState(0);\n    const [addRemoveTokenIndex, setAddRemoveTokenIndex] = useState(0);\n\n    const [lendTokenIndex, setLendTokenIndex] = useState(0)\n    const [side, setSide] = useState(0);\n\n    const [funds, setFunds] = useState([])\n    \n\n    const handleMangoOpenOrders = async () => {\n    \n      const key = walletProvider?.publicKey;\n\n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    };\n    const transaction = new Transaction()\n\n    const fundStateAccount = await PublicKey.createWithSeed(\n      key,\n      FUND_ACCOUNT_KEY,\n      programId,\n    );\n\n    console.log(\"FUND STTE:: \", fundStateAccount.toBase58())\n    let fund_info = await connection.getAccountInfo(fundStateAccount);\n    const fund_data = FUND_DATA.decode(fund_info.data);\n\n    let pos_index = fund_data.no_of_margin_positions;\n    console.log(\"pos_index\", pos_index)\n    console.log(\"orderPerpIndex:: \", orderPerpIndex)\n  \n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT)\n\n        // open orders missing for this market; create a new one now\n        const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n        const openOrdersLamports =\n          await connection.getMinimumBalanceForRentExemption(\n            openOrdersSpace,\n            'singleGossip'\n          )\n        let accInstr = await createKeyIfNotExists(\n          walletProvider,\n          \"\",\n          mangoGroup.dexProgramId,\n          key.toBase58().substr(0,20) + pos_index.toString() + orderPerpIndex.toString(),\n          openOrdersSpace,\n          transaction\n        )\n      transaction.feePayer = key;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"signature tx:: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n     }\n\n    const handlePerpMarketOrder = async () => {\n       console.log(\"---** handleAddPerpMarketselected orderPerpIndex, size, side :\", orderPerpIndex, size, side)\n        const key = walletProvider?.publicKey;\n        if (!key) {\n            alert(\"connect wallet\")\n            return;\n        };\n        const transaction = new Transaction()\n\n        // const perpAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, PERP_ACCOUNT_KEY_1, perpAccountLayout.span, transaction)\n        // console.log(\"mangoAccount created::\",perpAccount.toBase58())\n        // const mango_token_index = \n\n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        // const fundStateAccount = await PublicKey.createWithSeed(\n        //     key,\n        //     FUND_ACCOUNT_KEY,\n        //     programId,\n        // );\n        let fundStateInfo = await connection.getAccountInfo((fundPDA[0]))\n        let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \n    \n        let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n        let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n        let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n        let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    \n        \n        const BTCBaseLotSize = 2 // baseLotSize / quoteLotSize\n        console.log(\"size::::\",size/(PERP_MARKETS[orderPerpIndex].contractSize)  )\n\n\n        const maxSlippage = 0.15;\n        // const price = \n        const priceAfterSlippage = price * (1 + (side === 0 ? 1 : -1) * maxSlippage)\n        const baseUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].baseDecimals);\n        const quoteUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].quoteDecimals);\n\n        console.log(\"PERP_MARKETS[orderPerpIndex]:\",PERP_MARKETS[orderPerpIndex])\n\n        console.log(\"maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit ::\",maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit)\n\n        // const nativePrice = new BN(priceAfterSlippage * quoteUnit)\n        //   .mul(new BN(PERP_MARKETS[orderPerpIndex].baseLotSize))\n        //   .div((new BN(PERP_MARKETS[orderPerpIndex].quoteLotSize)).mul(new BN(baseUnit)));\n\n        const nativePrice = (priceAfterSlippage * quoteUnit *  PERP_MARKETS[orderPerpIndex].baseLotSize )/(PERP_MARKETS[orderPerpIndex].quoteLotSize * baseUnit )\n        console.log(\"nativePrice::\",nativePrice)\n\n        const dataLayout = struct([u8('instruction'), u8('perp_market_id'), u8('side'), nu64('price'), nu64('quantity')])\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n                instruction: 10,\n                perp_market_id: orderPerpIndex,\n                side : side,\n                price: nativePrice,\n                quantity: size/(PERP_MARKETS[orderPerpIndex].contractSize) \n            },\n            data\n        )\n          \n        const keys = [\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n          { pubkey: key, isSigner: true, isWritable: true },\n         \n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n         \n          // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n          { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n          \n          { pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].publicKey), isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].bidsKey), isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].asksKey) , isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.perpMarkets[orderPerpIndex].eventsKey) , isSigner: false, isWritable: true }, \n          \n          { pubkey: PublicKey.default, isSigner: false, isWritable: false },\n      ]\n    \n      for(let i=0; i<keys.length;i++) {\n        console.log(\"key:\",i, keys[i].pubkey.toBase58())\n      }\n        const instruction = new TransactionInstruction({\n            keys: keys,\n            programId: programId,\n            data\n        });\n    \n        transaction.add(instruction);\n        console.log(`transaction ::: `, transaction)\n        transaction.feePayer = key;\n        let hash = await connection.getRecentBlockhash(\"finalized\");\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n    \n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"tx::: \", sign)\n        console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n    \n        \n     }\n\n    const handlePerpMarketOrder2 = async () => {\n      console.log(\"---** handleAddPerpMarketselected2 orderPerpIndex, size, side :\", orderPerpIndex, size, side)\n       const key = walletProvider?.publicKey;\n       if (!key) {\n           alert(\"connect wallet\")\n           return;\n       };\n       const transaction = new Transaction()\n\n       // const perpAccount = await createKeyIfNotExists(walletProvider, \"\", MANGO_PROGRAM_ID, PERP_ACCOUNT_KEY_1, perpAccountLayout.span, transaction)\n       // console.log(\"mangoAccount created::\",perpAccount.toBase58())\n       // const mango_token_index = \n\n       const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n       // const fundStateAccount = await PublicKey.createWithSeed(\n       //     key,\n       //     FUND_ACCOUNT_KEY,\n       //     programId,\n       // );\n       let fundStateInfo = await connection.getAccountInfo((fundPDA[0]))\n       let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \n   \n       let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n       let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n       let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n       let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n   \n       \n      //  const BTCBaseLotSize = 2 // baseLotSize / quoteLotSize\n      //  console.log(\"size::::\",size/(PERP_MARKETS[orderPerpIndex].contractSize)  )\n\n\n      //  const maxSlippage = 0.15;\n      //  const priceAfterSlippage = price * (1 + (side === 0 ? 1 : -1) * maxSlippage)\n      //  const baseUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].baseDecimals);\n      //  const quoteUnit = Math.pow(10, PERP_MARKETS[orderPerpIndex].quoteDecimals);\n      //  console.log(\"maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit ::\",maxSlippage,price,priceAfterSlippage ,baseUnit,quoteUnit)\n\n      \n      \n      // const nativePrice = new BN(priceAfterSlippage * quoteUnit)\n      //   .mul(new BN(PERP_MARKETS[orderPerpIndex].baseLotSize))\n      //   .div((new BN(PERP_MARKETS[orderPerpIndex].quoteLotSize)).mul(new BN(baseUnit)));\n      \n      //  const nativePrice = (priceAfterSlippage * quoteUnit *  PERP_MARKETS[orderPerpIndex].baseLotSize )/(PERP_MARKETS[orderPerpIndex].quoteLotSize * baseUnit )\n      //  console.log(\"nativePrice::\",nativePrice)\n\n      const perpMaketInfo = PERP_MARKETS[2];\n      console.log(\"perpMaketInfo:\",perpMaketInfo)\n       const perpMarket = await client.getPerpMarket(new PublicKey(perpMaketInfo.publicKey),perpMaketInfo.baseDecimals,perpMaketInfo.quoteDecimals)\n\n       const maxQuoteQuantity = 100;\n       const maxBaseQuantity = 1;\n       const quantity = 1;\n       const price = 100;\n     \n       const currentTime = (new Date().getTime() / 1000);\n       console.log(\"currentTime:\",currentTime)\n\n       const [nativePrice, nativeQuantity] = perpMarket.uiToNativePriceQuantity(\n        price,\n        quantity,\n      );\n      const maxQuoteQuantityLots = perpMarket.uiQuoteToLots(maxQuoteQuantity);\n    \n      const clientOrderId = Date.now()\n\n       const dataLayout = struct([\n         u8('instruction'),\n         u8('perp_market_id'),\n         nu64('price'),\n         nu64('max_base_quantity'),\n         nu64('max_quote_quantity'),\n         nu64('client_order_id'),\n         nu64('expiry_timestamp'),\n         u8('side'), \n         u8('order_type'), \n         u8('reduce_only'), \n         u8('limit')\n       ])\n\n       const data = Buffer.alloc(dataLayout.span)\n       const params= {\n            instruction: 28,\n            perp_market_id: 3,\n            price: nativePrice.toNumber(),\n            max_base_quantity: nativeQuantity.toNumber(),\n            max_quote_quantity: maxQuoteQuantityLots.toNumber(),\n            client_order_id : clientOrderId,\n            expiry_timestamp : 0,\n            side : side,\n            order_type : 0,\n            reduce_only : false,\n            limit : 5,\n        }\n        console.log(\"params:\",params)\n       dataLayout.encode(\n           params,\n           data\n       )\n       const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\n\n       const keys = [\n         { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n         { pubkey: key, isSigner: true, isWritable: true },\n        \n         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n         { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n        \n         // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n         { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n         \n         { pubkey: new PublicKey(perpMaketInfo.publicKey), isSigner: false, isWritable: true },\n         { pubkey: new PublicKey(perpMaketInfo.bidsKey), isSigner: false, isWritable: true },\n         { pubkey: new PublicKey(perpMaketInfo.asksKey) , isSigner: false, isWritable: true },\n         { pubkey: new PublicKey(perpMaketInfo.eventsKey) , isSigner: false, isWritable: true }, \n         \n         { pubkey: MANGO_REFERRER_ACCOUNT, isSigner: false, isWritable: true},\n         \n         { pubkey: PublicKey.default, isSigner: false, isWritable: false },\n     ]\n   \n     for(let i=0; i<keys.length;i++) {\n       console.log(\"key:\",i, keys[i].pubkey.toBase58())\n     }\n       const instruction = new TransactionInstruction({\n           keys: keys,\n           programId: programId,\n           data\n       });\n   \n       transaction.add(instruction);\n       console.log(`transaction ::: `, transaction)\n       transaction.feePayer = key;\n       let hash = await connection.getRecentBlockhash(\"finalized\");\n       console.log(\"blockhash\", hash);\n       transaction.recentBlockhash = hash.blockhash;\n   \n       const sign = await signAndSendTransaction(walletProvider, transaction);\n       console.log(\"tx::: \", sign)\n       console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n   \n       \n    }\n\n    const handleCancelLimitOrderByClientOrderID = async () => {\n      console.log(\"---** handleCancelLimitOrderByClientOrderID orderPerpIndex, size, side :\", orderPerpIndex, size, side)\n       const key = walletProvider?.publicKey;\n       if (!key) {\n           alert(\"connect wallet\")\n           return;\n       };\n       const transaction = new Transaction()\n       const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n       let fundStateInfo = await connection.getAccountInfo((fundPDA[0]))\n       let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \n   \n       let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n       let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n       let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n       let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n       const perpMaketInfo = PERP_MARKETS[2];\n\n       const dataLayout = struct([\n         u8('instruction'),\n         nu64('client_order_id')\n       ])\n\n       const data = Buffer.alloc(dataLayout.span)\n       const params= {\n            instruction: 29,\n            client_order_id: 1649597769626\n        }\n        console.log(\"params:\",params)\n       dataLayout.encode(\n           params,\n           data\n       )\n\n       const keys = [\n         { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n         { pubkey: key, isSigner: true, isWritable: true },\n        \n         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n         { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n        \n         // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n        //  { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n         \n         { pubkey: new PublicKey(perpMaketInfo.publicKey), isSigner: false, isWritable: true },\n         { pubkey: new PublicKey(perpMaketInfo.bidsKey), isSigner: false, isWritable: true },\n         { pubkey: new PublicKey(perpMaketInfo.asksKey) , isSigner: false, isWritable: true },\n         \n     ]\n   \n     for(let i=0; i<keys.length;i++) {\n       console.log(\"key:\",i, keys[i].pubkey.toBase58())\n     }\n       const instruction = new TransactionInstruction({\n           keys: keys,\n           programId: programId,\n           data\n       });\n   \n       transaction.add(instruction);\n       console.log(`transaction ::: `, transaction)\n       transaction.feePayer = key;\n       let hash = await connection.getRecentBlockhash();\n       console.log(\"blockhash\", hash);\n       transaction.recentBlockhash = hash.blockhash;\n   \n       const sign = await signAndSendTransaction(walletProvider, transaction);\n       console.log(\"tx::: \", sign)\n       console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n   \n       \n    }\n\n    const handleRepostLimitOrders = async () => {\n\n      console.log(\"**----handleRepostLimitOrders ::\")\n  \n      const key = walletProvider?.publicKey;\n      if (!key) {\n        console.log(\"connect wallet\")\n        return;\n      };\n      \n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n      \n      let fundStateInfo = await connection.getAccountInfo(fundPDA[0])\n      let fund_data = FUND_PDA_DATA.decode(fundStateInfo.data) \n    \n     \n      console.log(\"fund_data:\",fund_data)\n    \n      const transaction = new Transaction()\n     \n  \n      console.log(\"ids.mangoProgramId:: \", ids.mangoProgramId)\n      let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n      console.log(\"mangoGroup.mangoCache :: \", mangoGroup.mangoCache.toBase58())\n  \n  \n      //        perp_market_ai,     // write default_ai if no perp market for i^th index\n      //        bids_ai,            // write default_ai if no perp market for i^th index\n      //        asks_ai,            // write default_ai if no perp market for i^th index\n      //        event_queue_ai   //write default_ai if no perp market for i^th index\n      let perpKeys = []\n      for(let i=0; i<MAX_LIMIT_ORDERS;i++){\n            const is_repost_processing = fund_data.limit_orders[i].is_repost_processing\n            const marketIndex = fund_data.limit_orders[i].perp_market_id;\n            console.log(\"marketIndex:\",marketIndex,i)\n            const perpMaketInfo = PERP_MARKETS.find((i) => i.perpMarketId==marketIndex )\n            console.log(\"found  perpMaketInfo::\",perpMaketInfo)\n            \n            if(is_repost_processing) {\n               console.log(\"pusing:\",marketIndex,i)\n  \n              perpKeys.push(\n                { pubkey:  new PublicKey(perpMaketInfo.publicKey), isSigner: false, isWritable: true },\n               )\n               perpKeys.push(\n                { pubkey:  new PublicKey(perpMaketInfo.bidsKey), isSigner: false, isWritable: true },\n               )\n               perpKeys.push(\n                { pubkey:  new PublicKey(perpMaketInfo.asksKey), isSigner: false, isWritable: true },\n               )\n               perpKeys.push(\n                { pubkey:  new PublicKey(perpMaketInfo.eventsKey), isSigner: false, isWritable: true },\n               )\n            \n            } else {\n  \n              perpKeys.push(\n                { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\n               )\n               perpKeys.push(\n                { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\n               )\n               perpKeys.push(\n                { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\n               )\n               perpKeys.push(\n                { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\n               )\n             \n            }\n      }\n    \n      const dataLayout = struct([u8('instruction')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 30\n        },\n        data\n      )\n      const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\n  \n      const keys = [\n       \n        { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n  \n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n        { pubkey: fund_data.mango_positions.mango_account , isSigner: false, isWritable: true },\n       \n        { pubkey: MANGO_REFERRER_ACCOUNT, isSigner: false, isWritable: true},\n         \n        { pubkey: PublicKey.default, isSigner: false, isWritable: false },\n  \n         ...perpKeys, // 8 accs \n      ];\n  \n      for(let i=0; i<keys.length;i++) {\n        console.log(\"key:\",i, keys[i].pubkey.toBase58())\n      }\n    \n      const instruction = new TransactionInstruction({\n        keys: keys,\n        programId,\n        data\n      });\n      transaction.add(instruction);\n      transaction.feePayer = key;\n      let hash = await connection.getRecentBlockhash(\"finalized\");\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n    \n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"tx::: \", sign);\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n  \n    }\n\n    const handleGetRepostProcessingFunds = async () => {\n      const managers = []\n      \n      const allFunds = await connection.getProgramAccounts(programId, { filters: [\n        { dataSize: FUND_PDA_DATA.span },\n        {\n        memcmp: { offset: FUND_PDA_DATA.offsetOf('repost_processing'), bytes: '2' }\n        }\n      ] });\n      console.log(\"-------1)funds nondecoded::\",allFunds)\n      for (const data of allFunds) {\n          const decodedData = FUND_PDA_DATA.decode(data.account.data);\n          // const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n          // console.log(\"PDA_balance:\",PDA_balance)\n        \n              managers.push({\n                  fund_v3_index : decodedData.fund_v3_index,\n                  fundState : decodedData,\n                  fundPDA: decodedData.fund_pda.toBase58(),\n                  fundManager: decodedData.manager_account.toBase58(),\n                  fundStateAccount: data.pubkey.toBase58(),\n                  repost_processing: decodedData.repost_processing,\n                  // PDA_balance : PDA_balance,\n                  // fundName: decodedData.fund_pda.toBase58(),\n                  // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n              });\n\n      }\n      console.log(\"-----2) Processing Funds Decoded PDA funds:\",managers);\n\n      setFunds(managers);\n    }\n\n     const callFromKeeper = async () => {\n      const key = walletProvider?.publicKey;\n      if (!key) {\n          alert(\"connect wallet\")\n          return;\n      };\n\n      let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n\n     const sign =  await client.cacheRootBanks(new PublicKey(ids.publicKey),\n          mangoGroup.mangoCache,\n          [new PublicKey(MANGO_TOKENS.USDC.rootKey),new PublicKey(MANGO_TOKENS.BTC.rootKey)],\n          walletProvider\n       )\n     }\n\n    const handleMangoPerpDeposit = async () => {\n\n      const key = walletProvider?.publicKey;\n      if (!key) {\n          alert(\"connect wallet\")\n          return;\n      };\n      const transaction = new Transaction()\n      // const fundStateAccount = await PublicKey.createWithSeed(\n      //     key,\n      //     FUND_ACCOUNT_KEY,\n      //     programId,\n      // );\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n      let fundStateInfo = await connection.getAccountInfo(fundPDA[0])\n      let fundState = FUND_PDA_DATA.decode(fundStateInfo.data)\n  \n      let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n     \n      let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]))\n      let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  \n      console.log(\"lendAmount::::\",lendTokenIndex, lendAmount,ids.tokens[lendTokenIndex])\n      // console.log(\"fundStateAccount::::\",fundStateAccount.toBase58())\n      console.log(\"fundState.fund_pda::::\",fundState.fund_pda.toBase58())\n\n      console.log(\"nodeBank.vault::::\",nodeBank.vault.toBase58())\n\n      console.log(\"fundState.mango_positions.mango_account::::\",fundState.mango_positions.mango_account.toBase58())\n      console.log(\"mangoGroup.mangoCache::::\",mangoGroup.mangoCache.toBase58())\n\n     \n\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n      if(!platformDataAcc){\n        alert('platform state not initilaized');\n        return;\n      }\n      const platformState = PLATFORM_DATA.decode(platformDataAcc.data)\n\n      //TODO :\n      // findTokenSlotIndex ids.tokens[lendTokenIndex].mintKey\n      let fundTokenSlot = -1;\n      console.log(\"check for mint:\",ids.tokens[lendTokenIndex].mintKey)\n      for(let i=0; i<fundState.tokens.length;i++){\n        const t = fundState.tokens[i];\n        console.log(\"i - mint:\",i,platformState.token_list[t.index[t.mux]]?.mint.toBase58())\n        if(platformState.token_list[t.index[t.mux]]?.mint.toBase58()==(ids.tokens[lendTokenIndex].mintKey)){\n          fundTokenSlot=i;\n          console.log(\"found:\",i)\n          break;\n        }\n      }\n      if(fundTokenSlot==-1){\n        alert('token not whitelisted on fund');\n        return;\n      } \n      // findMangoTokenIndex DONE\n\n       //should be dynamic based on token\n       const fundVault = fundState.tokens[fundTokenSlot].vault;\n       console.log(\"fundVault::::\",fundVault.toBase58())\n\n      const dataLayout = struct([u8('instruction'),u8('token_slot_index'), u8('mango_token_index'), nu64('quantity')])\n      const data = Buffer.alloc(dataLayout.span)\n      console.log(\"fundTokenSlot:\",fundTokenSlot)\n      console.log(\"MANGO_TOKENS[lendTokenIndex].mangoTokenIndex:\",MANGO_TOKENS.USDC.mangoTokenIndex)\n\n      dataLayout.encode(\n          {\n              instruction: 9,\n              token_slot_index: fundTokenSlot,\n              mango_token_index: MANGO_TOKENS.USDC.mangoTokenIndex,\n              quantity: lendAmount * 10 ** ids.tokens[lendTokenIndex].decimals\n          },\n          data\n      )\n\n      const keys = [\n        { pubkey: fundState.fund_pda, isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        // { pubkey: fundState.fund_pda, isSigner: false, isWritable: true },\n\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n\n        { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.tokens[lendTokenIndex].rootKey), isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]), isSigner: false, isWritable: true },\n        { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        { pubkey: fundVault, isSigner: false, isWritable: true },\n       ]\n    \n    for(let i=0; i<keys.length;i++) {\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    }\n   \n      const instruction = new TransactionInstruction({\n          keys: keys,\n          programId: programId,\n          data\n      });\n  \n      transaction.add(instruction);\n      console.log(`transaction ::: `, transaction)\n      transaction.feePayer = key;\n      let hash = await connection.getRecentBlockhash(\"finalized\");\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n  \n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"tx::: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n    }\n\n   const handleMangoPerpWithdraw = async ( ) => {\n\n    const key = walletProvider?.publicKey;\n    if (!key) {\n        alert(\"connect wallet\")\n        return;\n    };\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0])\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n    if(!platformDataAcc){\n      alert('platform state not initilaized');\n      return;\n    }\n    const platformState = PLATFORM_DATA.decode(platformDataAcc.data)\n\n    //TODO :\n    // findTokenSlotIndex ids.tokens[lendTokenIndex].mintKey\n    let fundTokenSlot = -1;\n    for(let i=0; i<fundState.tokens.length;i++){\n      if(platformState.token_list[fundState.tokens[i].index[fundState.tokens[i].mux]]?.mint.toBase58() === ids.tokens[lendTokenIndex].mintKey){\n        fundTokenSlot = i; \n        break;\n      }\n    }\n    if(fundTokenSlot==-1){\n      alert('token not whitelisted on fund');\n      return;\n    }\n    // findMangoTokenIndex DONE\n\n    //should be dynamic based on token\n      const fundVault = fundState.tokens[fundTokenSlot].vault;\n      console.log(\"fundVault::::\",fundVault.toBase58())\n\n    const transaction = new Transaction()\n    console.log(\"fundTokenSlot:\",fundTokenSlot)\n    const dataLayout = struct([u8('instruction'),u8('token_slot_index'),u8('mango_token_index'),nu64('quantity')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n        {\n            instruction: 13,\n            token_slot_index: fundTokenSlot,\n            mango_token_index: MANGO_TOKENS.USDC.mangoTokenIndex,\n            quantity: lendAmount * 10 ** ids.tokens[lendTokenIndex].decimals\n        },\n        data\n    )\n      \n    const keys = [\n      { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n      // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.tokens[lendTokenIndex].rootKey), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.tokens[lendTokenIndex].nodeKeys[0]), isSigner: false, isWritable: true },\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n      { pubkey: fundVault, isSigner: false, isWritable: true }, // Fund Vault\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: false },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: PublicKey.default, isSigner: false, isWritable: false },\n  ]\n\n  for(let i=0; i<keys.length;i++) {\n    console.log(\"key:\",i, keys[i].pubkey.toBase58())\n  }\n    const instruction = new TransactionInstruction({\n        keys: keys,\n        programId: programId,\n        data\n    });\n\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction)\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n    }\n\n    const handleConsumeEvents = async () => {\n\n      const key = walletProvider?.publicKey;\n      if (!key) {\n          alert(\"connect wallet\")\n          return;\n      };\n\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n      const fundStateAccount = await PublicKey.createWithSeed(\n          key,\n          FUND_ACCOUNT_KEY,\n          programId,\n      );\n      let fundStateInfo = await connection.getAccountInfo((fundStateAccount))\n      let fundState = FUND_DATA.decode(fundStateInfo.data) \n  \n\n      const transaction = new Transaction()\n\n      let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n      let perpMarketX = await client.getPerpMarket(new PublicKey(ids.perpMarkets[1].publicKey))\n\n      // client.consumeEvents(mangoGroup,perpMarketX )\n    \n\n    //   const dataLayout = struct([u8('instruction'),u8('limit')])\n    //   const data = Buffer.alloc(dataLayout.span)\n    //   dataLayout.encode(\n    //       {\n    //           instruction: 15,\n    //           limit: 2,\n    //       },\n    //       data\n    //   )\n\n    //   const keys = [\n       \n    //     // { pubkey: key, isSigner: true, isWritable: true },\n    //     // { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n    //     { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: false },\n    //     { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\n    //     { pubkey: new PublicKey(ids.perpMarkets[1].publicKey), isSigner: false, isWritable: true },\n    //     { pubkey: new PublicKey(ids.perpMarkets[1].eventsKey) , isSigner: false, isWritable: true }, \n    //     { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n\n    // ]\n  \n    // for(let i=0; i<keys.length;i++) {\n    //   console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    // }\n    //   const instruction = new TransactionInstruction({\n    //       keys: keys,\n    //       programId: programId,\n    //       data\n    //   });\n  \n    //   transaction.add(instruction);\n    //   console.log(`transaction ::: `, transaction)\n    //   transaction.feePayer = key;\n    //   let hash = await connection.getRecentBlockhash(\"finalized\");\n    //   console.log(\"blockhash\", hash);\n    //   transaction.recentBlockhash = hash.blockhash;\n  \n    //   const sign = await signAndSendTransaction(walletProvider, transaction);\n    //   console.log(\"tx::: \", sign)\n    //   console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n    }\n\n   const handleRemovePerpMarket = async () => {\n\n\n      const perpMarketId = addRemovePerpIndex;\n      console.log(\"handleRemovePerpMarket::\",addRemovePerpIndex)\n\n      const key = walletProvider?.publicKey;\n      if (!key) {\n          alert(\"connect wallet\")\n          return;\n      };\n\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n      let fundStateInfo = await connection.getAccountInfo((fundPDA[0]))\n      let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \n      console.log(\"fundState:\",fundState)\n\n      const transaction = new Transaction()\n      \n      \n      let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    \n      const dataLayout = struct([u8('instruction'),u8('perp_market_id')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n          {\n              instruction: 11,\n              perp_market_id: perpMarketId\n          },\n          data\n      )\n        \n      const keys = [\n        { pubkey: fundPDA[0] , isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: MANGO_PROGRAM_ID, isSigner: false, isWritable: false },\n        { pubkey: MANGO_GROUP_ACCOUNT, isSigner: false, isWritable: true },\n        { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\n        // { pubkey: new PublicKey(fundsAddress), isSigner: false, isWritable: false },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },  \n     ]\n    \n    for(let i=0; i<keys.length;i++) {\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    }\n      const instruction = new TransactionInstruction({\n          keys: keys,\n          programId: programId,\n          data\n      });\n    \n      transaction.add(instruction);\n      console.log(`transaction ::: `, transaction)\n      transaction.feePayer = key;\n      let hash = await connection.getRecentBlockhash(\"finalized\");\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n  \n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"tx::: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n      \n    }\n\n\n    return (\n        <div className=\"form-div\">\n\n        <h4>LEND TOKENS</h4>\n          Amount :::  <input type=\"number\" value={lendAmount} onChange={(event) => setLendAmount(event.target.value)} />\n          <select name=\"side\" width = \"100px\" onChange={(event) => setLendTokenIndex(event.target.value)}>\n              {\n               ids.tokens.map( (i,index) => <option value={index}>{i.symbol}</option> )\n              }\n            </select>\n          <button onClick={handleMangoPerpDeposit}>DEPOSIT</button>\n          <button onClick={handleMangoPerpWithdraw}>WITHDRAW</button>\n\n\n\n          <br/><hr/><br/>\n          <h4>ADD/REMOVE PERP</h4>\n          <select name=\"side\" width = \"100px\" onChange={(event) => setAddRemovePerpIndex(event.target.value)}>\n              <option value={0}>MNGO-PERP</option>\n              <option value={1}>BTC-PERP</option>\n              <option value={2}>ETH-PERP</option>\n              <option value={3}>SOL-PERP</option>\n              <option value={4}>SRM-PERP</option>\n              <option value={5}>RAY-PERP</option>\n              <option value={6}>FTT-PERP</option>\n              <option value={7}>ADA-PERP</option>\n            </select>\n          {/* <button onClick={handleAddPerpMarket}>ADD</button> */}\n          <button onClick={handleRemovePerpMarket}>REMOVE</button>\n\n          <br/><hr/><br/>\n\n            <h4>Mango Place</h4> \n            Size ::: {' '}\n            <input type=\"number\" value={size} onChange={(event) => setSize(event.target.value)} />\n            <br />\n            Price ::: {' '}\n            <input type=\"number\" value={price} onChange={(event) => setPrice(event.target.value)} />\n            <br />\n            <label htmlFor=\"side\">Buy/Sell</label><br/>\n\n            <select name=\"side\" width = \"100px\" onChange={(event) => setSide(parseInt(event.target.value))}>\n              <option value={0}>Buy</option>\n              <option value={1}>Sell</option>\n            </select>\n\n            <select name=\"side\" width = \"100px\" onChange={(event) => setOrderPerpIndex(parseInt(event.target.value))}>\n              <option value={0}>MNGO-PERP</option>\n              <option value={1}>BTC-PERP</option>\n              <option value={2}>ETH-PERP</option>\n              <option value={3}>SOL-PERP</option>\n              <option value={4}>SRM-PERP</option>\n              <option value={5}>RAY-PERP</option>\n              <option value={6}>FTT-PERP</option>\n              <option value={7}>ADA-PERP</option>\n            </select>\n\n          <button onClick={handlePerpMarketOrder}>ORDER</button>\n\n          <button onClick={handlePerpMarketOrder2}>LIMIT ORDER</button>\n          \n          <button onClick={handleCancelLimitOrderByClientOrderID}>CANCEL LIMIT ORDER</button>\n          \n          <br /><br />\n          <button onClick={handleMangoOpenOrders}>Open order init</button>\n          <br />\n          <button onClick={handleConsumeEvents}> Consume Events </button>\n          <br />\n\n          <button onClick={callFromKeeper}> KEEPER </button>\n\n          <hr/>\n          <h5>Funds in reposting stage</h5>\n          <button onClick={handleGetRepostProcessingFunds}> GET PROCESSING FUNDS </button>\n\n          <button onClick={handleRepostLimitOrders}> REPOST LIMIT ORDERS </button>\n\n\n          <Table  className=\"tablesorter\" responsive style={{ overflow: 'hidden !important', textAlign: 'center' }}>\n            <thead className=\"text-primary\">\n                            <tr>\n                                <th style={{ width: \"15%\" }}>index</th>\n                                <th style={{ width: \"15%\" }}>fund_v3_index</th>\n                                <th style={{ width: \"15%\" }}>fundManager</th>\n                                <th style={{ width: \"15%\" }}>fundPDA</th>\n                                <th style={{ width: \"15%\" }}>fundStateAccount</th>\n                                <th style={{ width: \"15%\" }}>repost_processing</th>\n                            </tr>\n                          </thead>\n                        <tbody>\n                          {\n                              funds && \n                              funds.map((i,x)=>{\n                                return <tr key={x}>\n                                  <td >{x}</td>\n                                  <td >{i?.fund_v3_index}</td>\n                                  <td >{i?.fundManager}</td>\n                                  <td >{i?.fundPDA}</td>\n                                  <td >{i?.fundStateAccount}</td>\n                                  <td >{i?.repost_processing}</td>\n                                </tr>\n                              })\n                          }\n                       </tbody>\n          </Table>\n\n\n          \n          <br />\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}