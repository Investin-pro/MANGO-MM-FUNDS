{"ast":null,"code":"import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { connection, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, priceStateAccount, programId } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { signAndSendTransaction } from '../utils/web3';\nimport { devnet_pools, raydiumPools } from '../utils/pools';\n\nconst getPoolAccounts = poolInfo => {\n  return poolInfo.map(p => {\n    if (p.programId == LIQUIDITY_POOL_PROGRAM_ID_V4) {\n      return [{\n        pubkey: new PublicKey(p.poolCoinTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(p.poolPcTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(p.ammOpenOrders),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(p.ammId),\n        isSigner: false,\n        isWritable: false\n      }];\n    } else {\n      return [{\n        pubkey: new PublicKey(p.poolCoinTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(p.poolPcTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n  });\n};\n\nexport async function updatePoolPrices(transaction, poolInfo) {\n  const dataLayout = struct([u8('instruction'), u8('count')]);\n  console.log(\"poolInfo length:: \", poolInfo.length);\n\n  if (poolInfo.length == 0) {\n    return;\n  }\n\n  const data = Buffer.alloc(dataLayout.span);\n  dataLayout.encode({\n    instruction: 19,\n    count: poolInfo.length\n  }, data);\n  const keys = [{\n    pubkey: platformStateAccount,\n    isSigner: false,\n    isWritable: true\n  }, {\n    pubkey: SYSVAR_CLOCK_PUBKEY,\n    isSigner: false,\n    isWritable: true\n  }, ...getPoolAccounts(poolInfo).flat()];\n\n  for (let i = 0; i < keys.length; i++) {\n    console.log(\"updatePoolPrices key:\", i, keys[i].pubkey.toBase58());\n  }\n\n  const instruction = new TransactionInstruction({\n    keys,\n    programId: programId,\n    data\n  });\n  transaction.add(instruction);\n}","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/updatePrices.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","connection","LIQUIDITY_POOL_PROGRAM_ID_V4","platformStateAccount","priceStateAccount","programId","nu64","struct","u8","signAndSendTransaction","devnet_pools","raydiumPools","getPoolAccounts","poolInfo","map","p","pubkey","poolCoinTokenAccount","isSigner","isWritable","poolPcTokenAccount","ammOpenOrders","ammId","updatePoolPrices","transaction","dataLayout","console","log","length","data","Buffer","alloc","span","encode","instruction","count","keys","flat","i","toBase58","add"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { connection, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, priceStateAccount, programId } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { signAndSendTransaction } from '../utils/web3'\nimport { devnet_pools, raydiumPools } from '../utils/pools';\n\n\nconst getPoolAccounts = (poolInfo) => {\n    return poolInfo.map((p) => {\n      if(p.programId == LIQUIDITY_POOL_PROGRAM_ID_V4) {\n        return [\n          { pubkey: new PublicKey(p.poolCoinTokenAccount), isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(p.poolPcTokenAccount), isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(p.ammOpenOrders), isSigner: false, isWritable: false},\n          { pubkey: new PublicKey(p.ammId), isSigner: false, isWritable: false}\n        ]\n      } else {\n        return [\n          { pubkey: new PublicKey(p.poolCoinTokenAccount), isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(p.poolPcTokenAccount), isSigner: false, isWritable: true }\n        ]\n      }\n    })\n  }\n\nexport async function updatePoolPrices (transaction,  poolInfo) {\n    \n    const dataLayout = struct([u8('instruction'), u8('count')])\n    console.log(\"poolInfo length:: \", poolInfo.length)\n\n    if (poolInfo.length == 0) {\n      return\n    }\n\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n        {\n            instruction: 19,\n            count: poolInfo.length\n        },\n        data\n    )\n    const keys = [\n      { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n      { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true },\n      ...getPoolAccounts(poolInfo).flat()\n    ]\n\n    for(let i=0; i<keys.length;i++) {\n      console.log(\"updatePoolPrices key:\",i, keys[i].pubkey.toBase58())\n    }\n    const instruction = new TransactionInstruction({\n        keys,\n        programId: programId,\n        data\n    });\n    transaction.add(instruction)\n    \n}"]},"metadata":{},"sourceType":"module"}