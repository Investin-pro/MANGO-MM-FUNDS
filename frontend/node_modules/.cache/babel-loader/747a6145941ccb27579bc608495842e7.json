{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Settlement.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3';\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32 } from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client';\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Settlement = () => {\n  _s();\n\n  const [fundAddress, setFundAddress] = useState('');\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handlePauseForSettlement = async () => {\n    const transaction = new Transaction();\n    let ids = IDS['groups'][0];\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span);\n    console.log(`fundPDA::: `, fundPDA[0].toBase58());\n    const accountNumBN = new BN(0);\n    const mango_account_ai = await PublicKey.findProgramAddress([mango_group_ai.toBytes(), fundPDA[0].toBytes(), accountNumBN.toArrayLike(Buffer, 'le', 8)], new PublicKey(ids.mangoProgramId));\n    const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')]);\n    const data = Buffer.alloc(dataLayout.span);\n    console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\", min_amount * 10 ** ids.tokens[0].decimals);\n    console.log(\"platform_fee_percentage * 100::\", platform_fee_percentage * 100);\n    dataLayout.encode({\n      instruction: 0,\n      min_amount: min_amount * 10 ** ids.tokens[0].decimals,\n      performance_fee_percentage: platform_fee_percentage * 100\n    }, data);\n    const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction); // const fundBaseVault = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n\n    console.log(\"fundBaseVault:\", fundBaseVault.toBase58());\n    console.log('data', data);\n    const keys = [{\n      pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundBaseVault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mango_account_ai[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSTEM_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', keys[i].pubkey.toBase58());\n    }\n\n    console.log(\"IDS:: \", ids);\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    console.log(\"programId::\", programId.toBase58());\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash; // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('init e: ', error);\n    }\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA[0];\n    });\n  };\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [\"Fund  ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: mangoAccount,\n      onChange: event => setFundAddress(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: hand,\n      children: \"initialise fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 129,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Settlement, \"aJj6Dgl0Wgejr0ASgulT/OaJ6P4=\");\n\n_c = Settlement;\n\nvar _c;\n\n$RefreshReg$(_c, \"Settlement\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Settlement.js"],"names":["React","useEffect","useState","createAssociatedTokenAccount","createAssociatedTokenAccountIfNotExist","createKeyIfNotExists","createTokenAccountIfNotExist","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","connection","delegate","FUND_ACCOUNT_KEY","MARGIN_ACCOUNT_KEY_1","platformStateAccount","PLATFORM_ACCOUNT_KEY","programId","SYSTEM_PROGRAM_ID","GlobalState","nu64","struct","u8","u32","PublicKey","SystemProgram","Transaction","TransactionInstruction","TOKEN_PROGRAM_ID","FUND_DATA","PLATFORM_DATA","u64","U64F64","Badge","IDS","MangoAccountLayout","MangoClient","BN","sendSignedTransactionAndNotify","Settlement","fundAddress","setFundAddress","walletProvider","s","handlePauseForSettlement","transaction","ids","fundPDA","findProgramAddress","publicKey","toBuffer","mango_group_ai","client","mangoProgramId","mangoGroup","getMangoGroup","console","log","span","toBase58","accountNumBN","mango_account_ai","toBytes","toArrayLike","Buffer","dataLayout","data","alloc","min_amount","tokens","decimals","platform_fee_percentage","encode","instruction","performance_fee_percentage","fundBaseVault","mintKey","keys","pubkey","isSigner","isWritable","i","length","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","successMessage","failMessage","wallet","error","update","createFundPublicKey","setMin_amount","setPlatform_fee_percentage","mangoAccount","event","target","value","hand"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Settlement = () => {\n\n   const [fundAddress, setFundAddress] = useState('')\n\n\n  \n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handlePauseForSettlement = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA[0].toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA[0].toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n\n      const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\",min_amount * (10 ** ids.tokens[0].decimals));\n      console.log(\"platform_fee_percentage * 100::\",platform_fee_percentage * 100)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          min_amount: min_amount * (10 ** ids.tokens[0].decimals),\n          performance_fee_percentage: platform_fee_percentage * 100,\n        },\n        data\n      )\n\n      const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction);\n      \n      // const fundBaseVault = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n\n      console.log(\"fundBaseVault:\",fundBaseVault.toBase58())\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n          { pubkey: fundBaseVault, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: delegate, isSigner: false, isWritable: false},\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false}\n\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      // const sign = await signAndSendTransaction(walletProvider, transaction);\n      // console.log(\"signature tx:: \", sign)\n      try {\n        await sendSignedTransactionAndNotify({\n            connection,\n            transaction: transaction,\n            successMessage: \"Investment successful\",\n            failMessage: \"Investment unsuccessful\",\n            wallet: walletProvider\n        })\n      } catch (error) {\n          console.error('init e: ', error);\n      }\n  \n\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA[0];\n    })\n  }\n\n  \n\n\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      Fund  ::: {' '}\n        <input type=\"text\" value={mangoAccount} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      <br />\n      <button onClick={hand}>initialise fund</button>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}