{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst big_js_1 = require(\"big.js\");\n\nconst _1 = require(\".\");\n\nconst fixednum_1 = require(\"./fixednum\");\n\nconst layout_1 = require(\"./layout\");\n\nconst PerpMarket_1 = __importDefault(require(\"./PerpMarket\"));\n\nconst RootBank_1 = __importDefault(require(\"./RootBank\"));\n\nconst utils_1 = require(\"./utils\");\n\nclass MangoGroup {\n  constructor(publicKey, decoded) {\n    this.publicKey = publicKey;\n    Object.assign(this, decoded);\n    this.oracles = this.oracles.filter(o => !o.equals(utils_1.zeroKey));\n    this.rootBankAccounts = new Array(layout_1.MAX_TOKENS).fill(undefined);\n  }\n\n  getOracleIndex(oracle) {\n    for (let i = 0; i < this.numOracles; i++) {\n      if (this.oracles[i].equals(oracle)) {\n        return i;\n      }\n    }\n\n    throw new Error('This Oracle does not belong to this MangoGroup');\n  }\n\n  getSpotMarketIndex(spotMarketPk) {\n    for (let i = 0; i < this.numOracles; i++) {\n      if (this.spotMarkets[i].spotMarket.equals(spotMarketPk)) {\n        return i;\n      }\n    }\n\n    throw new Error('This Market does not belong to this MangoGroup');\n  }\n\n  getPerpMarketIndex(perpMarketPk) {\n    for (let i = 0; i < this.numOracles; i++) {\n      if (this.perpMarkets[i].perpMarket.equals(perpMarketPk)) {\n        return i;\n      }\n    }\n\n    throw new Error('This PerpMarket does not belong to this MangoGroup');\n  }\n\n  getTokenIndex(token) {\n    for (let i = 0; i < this.tokens.length; i++) {\n      if (this.tokens[i].mint.equals(token)) {\n        return i;\n      }\n    }\n\n    throw new Error('This token does not belong in this MangoGroup');\n  }\n\n  getRootBankIndex(rootBank) {\n    for (let i = 0; i < this.tokens.length; i++) {\n      if (this.tokens[i].rootBank.equals(rootBank)) {\n        return i;\n      }\n    }\n\n    throw new Error('This root bank does not belong in this MangoGroup');\n  }\n\n  getBorrowRate(tokenIndex) {\n    const rootBank = this.rootBankAccounts[tokenIndex];\n    if (!rootBank) throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n    return rootBank.getBorrowRate(this);\n  }\n\n  getDepositRate(tokenIndex) {\n    const rootBank = this.rootBankAccounts[tokenIndex];\n    if (!rootBank) throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n    return rootBank.getDepositRate(this);\n  }\n  /**\n   * Return the decimals in TokenInfo;\n   * If it's not QUOTE_INDEX and there is an oracle for this index but no SPL-Token, this will default to 6\n   * Otherwise throw error\n   */\n\n\n  getTokenDecimals(tokenIndex) {\n    const tokenInfo = this.tokens[tokenIndex];\n\n    if (tokenInfo.isEmpty()) {\n      if (this.oracles[tokenIndex].equals(utils_1.zeroKey)) {\n        throw new Error('No oracle for this tokenIndex');\n      } else {\n        return 6;\n      }\n    } else {\n      return tokenInfo.decimals;\n    }\n  }\n\n  cachePriceToUi(price, tokenIndex) {\n    const decimalAdj = new big_js_1.Big(10).pow(this.getTokenDecimals(tokenIndex) - this.getTokenDecimals(layout_1.QUOTE_INDEX));\n    return price.toBig().mul(decimalAdj).toNumber();\n  }\n\n  getPrice(tokenIndex, mangoCache) {\n    var _a;\n\n    if (tokenIndex === layout_1.QUOTE_INDEX) return fixednum_1.ONE_I80F48;\n    const decimalAdj = new big_js_1.Big(10).pow(this.getTokenDecimals(tokenIndex) - this.getTokenDecimals(layout_1.QUOTE_INDEX));\n    return fixednum_1.I80F48.fromBig((_a = mangoCache.priceCache[tokenIndex]) === null || _a === void 0 ? void 0 : _a.price.toBig().mul(decimalAdj));\n  }\n\n  getPriceNative(tokenIndex, mangoCache) {\n    if (tokenIndex === layout_1.QUOTE_INDEX) return fixednum_1.ONE_I80F48;\n    return mangoCache.priceCache[tokenIndex].price;\n  }\n\n  getUiTotalDeposit(tokenIndex) {\n    const rootBank = this.rootBankAccounts[tokenIndex];\n    if (!rootBank) throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n    return rootBank.getUiTotalDeposit(this);\n  }\n\n  getUiTotalBorrow(tokenIndex) {\n    const rootBank = this.rootBankAccounts[tokenIndex];\n    if (!rootBank) throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n    return rootBank.getUiTotalBorrow(this);\n  }\n\n  loadCache(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const account = yield connection.getAccountInfo(this.mangoCache);\n      if (!account || !(account === null || account === void 0 ? void 0 : account.data)) throw new Error('Unable to load cache');\n      const decoded = layout_1.MangoCacheLayout.decode(account.data);\n      return new layout_1.MangoCache(this.mangoCache, decoded);\n    });\n  }\n\n  loadRootBanks(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const rootBankPks = this.tokens.map(t => t.rootBank).filter(rB => !rB.equals(utils_1.zeroKey));\n      const rootBankAccts = yield utils_1.getMultipleAccounts(connection, rootBankPks);\n      const parsedRootBanks = rootBankAccts.map(acc => {\n        const decoded = layout_1.RootBankLayout.decode(acc.accountInfo.data);\n        return new RootBank_1.default(acc.publicKey, decoded);\n      });\n      const nodeBankPks = parsedRootBanks.map(bank => bank.nodeBanks.filter(key => !key.equals(utils_1.zeroKey)));\n      const nodeBankAccts = yield utils_1.getMultipleAccounts(connection, nodeBankPks.flat());\n      const nodeBankAccounts = nodeBankAccts.map(acc => {\n        const decoded = _1.NodeBankLayout.decode(acc.accountInfo.data);\n\n        return new _1.NodeBank(acc.publicKey, decoded);\n      });\n      let nodeBankIndex = 0;\n\n      for (let i = 0; i < parsedRootBanks.length; i++) {\n        const rootBank = parsedRootBanks[i];\n        const numNodeBanks = rootBank.nodeBanks.filter(pk => !pk.equals(utils_1.zeroKey)).length;\n        rootBank.nodeBankAccounts = nodeBankAccounts.slice(nodeBankIndex, nodeBankIndex + numNodeBanks);\n        nodeBankIndex += numNodeBanks;\n      }\n\n      this.rootBankAccounts = this.tokens.map(t => {\n        const rootBank = parsedRootBanks.find(rB => rB.publicKey.equals(t.rootBank));\n        return rootBank !== null && rootBank !== void 0 ? rootBank : undefined;\n      });\n      return this.rootBankAccounts;\n    });\n  }\n\n  loadPerpMarket(connection, marketIndex, baseDecimals, quoteDecimals) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const pk = this.perpMarkets[marketIndex].perpMarket;\n      const acc = yield connection.getAccountInfo(pk);\n      const decoded = layout_1.PerpMarketLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data);\n      return new PerpMarket_1.default(pk, baseDecimals, quoteDecimals, decoded);\n    });\n  }\n\n  getQuoteTokenInfo() {\n    return this.tokens[this.tokens.length - 1];\n  }\n\n}\n\nexports.default = MangoGroup;","map":{"version":3,"sources":["../../src/MangoGroup.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst big_js_1 = require(\"big.js\");\nconst _1 = require(\".\");\nconst fixednum_1 = require(\"./fixednum\");\nconst layout_1 = require(\"./layout\");\nconst PerpMarket_1 = __importDefault(require(\"./PerpMarket\"));\nconst RootBank_1 = __importDefault(require(\"./RootBank\"));\nconst utils_1 = require(\"./utils\");\nclass MangoGroup {\n    constructor(publicKey, decoded) {\n        this.publicKey = publicKey;\n        Object.assign(this, decoded);\n        this.oracles = this.oracles.filter((o) => !o.equals(utils_1.zeroKey));\n        this.rootBankAccounts = new Array(layout_1.MAX_TOKENS).fill(undefined);\n    }\n    getOracleIndex(oracle) {\n        for (let i = 0; i < this.numOracles; i++) {\n            if (this.oracles[i].equals(oracle)) {\n                return i;\n            }\n        }\n        throw new Error('This Oracle does not belong to this MangoGroup');\n    }\n    getSpotMarketIndex(spotMarketPk) {\n        for (let i = 0; i < this.numOracles; i++) {\n            if (this.spotMarkets[i].spotMarket.equals(spotMarketPk)) {\n                return i;\n            }\n        }\n        throw new Error('This Market does not belong to this MangoGroup');\n    }\n    getPerpMarketIndex(perpMarketPk) {\n        for (let i = 0; i < this.numOracles; i++) {\n            if (this.perpMarkets[i].perpMarket.equals(perpMarketPk)) {\n                return i;\n            }\n        }\n        throw new Error('This PerpMarket does not belong to this MangoGroup');\n    }\n    getTokenIndex(token) {\n        for (let i = 0; i < this.tokens.length; i++) {\n            if (this.tokens[i].mint.equals(token)) {\n                return i;\n            }\n        }\n        throw new Error('This token does not belong in this MangoGroup');\n    }\n    getRootBankIndex(rootBank) {\n        for (let i = 0; i < this.tokens.length; i++) {\n            if (this.tokens[i].rootBank.equals(rootBank)) {\n                return i;\n            }\n        }\n        throw new Error('This root bank does not belong in this MangoGroup');\n    }\n    getBorrowRate(tokenIndex) {\n        const rootBank = this.rootBankAccounts[tokenIndex];\n        if (!rootBank)\n            throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n        return rootBank.getBorrowRate(this);\n    }\n    getDepositRate(tokenIndex) {\n        const rootBank = this.rootBankAccounts[tokenIndex];\n        if (!rootBank)\n            throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n        return rootBank.getDepositRate(this);\n    }\n    /**\n     * Return the decimals in TokenInfo;\n     * If it's not QUOTE_INDEX and there is an oracle for this index but no SPL-Token, this will default to 6\n     * Otherwise throw error\n     */\n    getTokenDecimals(tokenIndex) {\n        const tokenInfo = this.tokens[tokenIndex];\n        if (tokenInfo.isEmpty()) {\n            if (this.oracles[tokenIndex].equals(utils_1.zeroKey)) {\n                throw new Error('No oracle for this tokenIndex');\n            }\n            else {\n                return 6;\n            }\n        }\n        else {\n            return tokenInfo.decimals;\n        }\n    }\n    cachePriceToUi(price, tokenIndex) {\n        const decimalAdj = new big_js_1.Big(10).pow(this.getTokenDecimals(tokenIndex) - this.getTokenDecimals(layout_1.QUOTE_INDEX));\n        return price.toBig().mul(decimalAdj).toNumber();\n    }\n    getPrice(tokenIndex, mangoCache) {\n        var _a;\n        if (tokenIndex === layout_1.QUOTE_INDEX)\n            return fixednum_1.ONE_I80F48;\n        const decimalAdj = new big_js_1.Big(10).pow(this.getTokenDecimals(tokenIndex) - this.getTokenDecimals(layout_1.QUOTE_INDEX));\n        return fixednum_1.I80F48.fromBig((_a = mangoCache.priceCache[tokenIndex]) === null || _a === void 0 ? void 0 : _a.price.toBig().mul(decimalAdj));\n    }\n    getPriceNative(tokenIndex, mangoCache) {\n        if (tokenIndex === layout_1.QUOTE_INDEX)\n            return fixednum_1.ONE_I80F48;\n        return mangoCache.priceCache[tokenIndex].price;\n    }\n    getUiTotalDeposit(tokenIndex) {\n        const rootBank = this.rootBankAccounts[tokenIndex];\n        if (!rootBank)\n            throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n        return rootBank.getUiTotalDeposit(this);\n    }\n    getUiTotalBorrow(tokenIndex) {\n        const rootBank = this.rootBankAccounts[tokenIndex];\n        if (!rootBank)\n            throw new Error(`Root bank at index ${tokenIndex} is not loaded`);\n        return rootBank.getUiTotalBorrow(this);\n    }\n    loadCache(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const account = yield connection.getAccountInfo(this.mangoCache);\n            if (!account || !(account === null || account === void 0 ? void 0 : account.data))\n                throw new Error('Unable to load cache');\n            const decoded = layout_1.MangoCacheLayout.decode(account.data);\n            return new layout_1.MangoCache(this.mangoCache, decoded);\n        });\n    }\n    loadRootBanks(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const rootBankPks = this.tokens\n                .map((t) => t.rootBank)\n                .filter((rB) => !rB.equals(utils_1.zeroKey));\n            const rootBankAccts = yield utils_1.getMultipleAccounts(connection, rootBankPks);\n            const parsedRootBanks = rootBankAccts.map((acc) => {\n                const decoded = layout_1.RootBankLayout.decode(acc.accountInfo.data);\n                return new RootBank_1.default(acc.publicKey, decoded);\n            });\n            const nodeBankPks = parsedRootBanks.map((bank) => bank.nodeBanks.filter((key) => !key.equals(utils_1.zeroKey)));\n            const nodeBankAccts = yield utils_1.getMultipleAccounts(connection, nodeBankPks.flat());\n            const nodeBankAccounts = nodeBankAccts.map((acc) => {\n                const decoded = _1.NodeBankLayout.decode(acc.accountInfo.data);\n                return new _1.NodeBank(acc.publicKey, decoded);\n            });\n            let nodeBankIndex = 0;\n            for (let i = 0; i < parsedRootBanks.length; i++) {\n                const rootBank = parsedRootBanks[i];\n                const numNodeBanks = rootBank.nodeBanks.filter((pk) => !pk.equals(utils_1.zeroKey)).length;\n                rootBank.nodeBankAccounts = nodeBankAccounts.slice(nodeBankIndex, nodeBankIndex + numNodeBanks);\n                nodeBankIndex += numNodeBanks;\n            }\n            this.rootBankAccounts = this.tokens.map((t) => {\n                const rootBank = parsedRootBanks.find((rB) => rB.publicKey.equals(t.rootBank));\n                return rootBank !== null && rootBank !== void 0 ? rootBank : undefined;\n            });\n            return this.rootBankAccounts;\n        });\n    }\n    loadPerpMarket(connection, marketIndex, baseDecimals, quoteDecimals) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const pk = this.perpMarkets[marketIndex].perpMarket;\n            const acc = yield connection.getAccountInfo(pk);\n            const decoded = layout_1.PerpMarketLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data);\n            return new PerpMarket_1.default(pk, baseDecimals, quoteDecimals, decoded);\n        });\n    }\n    getQuoteTokenInfo() {\n        return this.tokens[this.tokens.length - 1];\n    }\n}\nexports.default = MangoGroup;\n//# sourceMappingURL=MangoGroup.js.map"]},"metadata":{},"sourceType":"script"}