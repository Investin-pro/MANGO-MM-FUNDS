{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessDeposits.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction, create } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ProcessDeposits = () => {\n  _s();\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleprocesDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    console.log('fundPDA', fundPDA);\n    console.log('selected investment::', selectedInvestmentStateAcc);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    const transaction = new Transaction();\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2\n    }, data);\n    const keys = [{\n      pubkey: new PublicKey(fundPDA),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    // { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n    {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: investorBaseTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, // Investor Base Token Account\n    {\n      pubkey: fundState.usdc_vault_key,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers); // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('handleMakeInvestment: ', error);\n    }\n  };\n\n  const handleGetInvestors = async () => {\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\", fundPDA.toBase58());\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('fund'),\n          bytes: fundPDA.toString()\n        } // memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : 0}\n\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    console.log(`found investments :::: `, investments);\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58());\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, investmentsData); // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n\n    setInvestments(investmentStateAccs);\n  };\n\n  const handleSelectInvestment = async event => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `, event.target.value, selectedInvestmentStateAcc);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Process Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Investment Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 152,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleSelectInvestment,\n      children: investments.map(i => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: i,\n          children: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 157,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleprocesDeposit,\n      children: \" Process Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetInvestors,\n      children: \"Load Investments of my fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 148,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ProcessDeposits, \"9tdW7uLc2wP7wZeTw3jc42xN1yw=\");\n\n_c = ProcessDeposits;\n\nvar _c;\n\n$RefreshReg$(_c, \"ProcessDeposits\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessDeposits.js"],"names":["PublicKey","Transaction","TransactionInstruction","create","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","INVESTOR_DATA","awaitTransactionSignatureConfirmation","IDS","MangoClient","sendSignedTransactionAndNotify","ProcessDeposits","selectedInvestmentStateAcc","setSelectedInvestmentStateAcc","investments","setInvestments","walletProvider","s","ids","handleprocesDeposit","key","publicKey","alert","fundPDA","findProgramAddress","toBuffer","console","log","fundStateInfo","getAccountInfo","fundState","decode","data","transaction","openOrdersLamports","getMinimumBalanceForRentExemption","span","signers","investorBaseTokenAccount","tokens","mintKey","dataLayout","Buffer","alloc","encode","instruction","keys","pubkey","isSigner","isWritable","usdc_vault_key","i","length","toBase58","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","successMessage","failMessage","wallet","error","handleGetInvestors","getProgramAccounts","filters","memcmp","offset","offsetOf","bytes","toString","dataSize","investmentStateAccs","map","f","investmentsData","account","handleSelectInvestment","event","target","value"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const ProcessDeposits = () => {\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n\n    console.log('fundPDA', fundPDA)\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    let signers = [];\n    \n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 2,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      // { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          // memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : 0}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n  const handleSelectInvestment = async(event) => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Process Deposit</h4>\n      \n      <br />\n      <label htmlFor=\"funds\">Select Investment Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\n        {\n          investments.map((i) => {\n            return (<option key={i} value={i}>{i}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleprocesDeposit}> Process Deposit</button>\n      <button onClick={handleGetInvestors}>Load Investments of my fund</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}