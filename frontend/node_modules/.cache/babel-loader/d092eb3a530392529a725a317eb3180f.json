{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Withdraw = () => {\n  _s();\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\n  const ids = IDS['groups'][0]; // const handleWithdraw = async () => {\n  //   const key = walletProvider?.publicKey;\n  //   if (!key) {\n  //     alert(\"connect wallet\")\n  //     return;\n  //   };\n  //   if(!fundPDA) {\n  //     alert(\"no funds found\")\n  //     return\n  //   }\n  //   const transaction = new Transaction()\n  //   const openOrdersLamports =\n  //   await connection.getMinimumBalanceForRentExemption(\n  //     INVESTOR_DATA.span,\n  //     'singleGossip'\n  //   )\n  //   let signers = []\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\n  //   console.log(\"fundState:: \", fundState)\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n  //   console.log(\"mango group:: \", mangoGroup)\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  //   console.log(\"nodebank:: \", nodeBank)\n  //   const dataLayout = struct([u32('instruction')])\n  //   const data = Buffer.alloc(dataLayout.span)\n  //   dataLayout.encode(\n  //     {\n  //       instruction: 2,\n  //     },\n  //     data\n  //   )\n  //   const instruction = new TransactionInstruction({\n  //     keys: [\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\n  //       { pubkey: key, isSigner: true, isWritable: true },\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n  //     ],\n  //     programId,\n  //     data\n  //   });\n  //   transaction.add(instruction);\n  //   console.log(`transaction ::: `, transaction)\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n  //   transaction.feePayer = key;\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\n  //   console.log(\"blockhash\", hash);\n  //   transaction.recentBlockhash = hash.blockhash;\n  //   transaction.setSigners(key, investerStateAccount)\n  //   transaction.partialSign(...signers)\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\n  //   console.log(\"tx::: \", sign)\n  // }\n  // const handleFunds = async () => {\n  //   let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n  //   console.log(`funds :::: `, funds)\n  //   const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n  //   console.log(`decodedFunds ::: `, fundData)\n  //   let invFunds = []\n  //   for(let i=0; i<fundData.length; i++) {\n  //     let manager = fundData[i].manager_account;\n  //     let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n  //     let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n  //     let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\n  //     let invState = await connection.getAccountInfo(invStateAccount);\n  //     if (invState == null) {\n  //       continue\n  //     }\n  //     let invStateData = INVESTOR_DATA.decode(invState.data)\n  //     console.log(invStateData)\n  //     // if (!invStateData.is_initialized) {\n  //     //   continue\n  //     // }\n  //     invFunds.push({\n  //       fundPDA: PDA[0].toBase58(),\n  //       fundManager: manager.toBase58(),\n  //     });\n  //   }\n  //   console.log(invFunds)\n  //   setFunds(invFunds);\n  // }\n  // const handleFundSelect = async(event) => {\n  //   setFundPDA(event.target.value);\n  //   console.log(`setting fundPDA :::: `, event.target.value, fundPDA)\n  // }\n\n  const handleSelectInvestment = async event => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `, event.target.value, selectedInvestmentStateAcc);\n  };\n\n  const handleGetInvestments = async () => {\n    const investorAccount = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"Investor::\", investorAccount.toBase58());\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('owner'),\n          bytes: investorAccount.toString()\n        },\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('investment_status'),\n          bytes: bs58.encode(new BN(2, 'le').toArray())\n        }\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    console.log(`found investments :::: `, investments);\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58());\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data));\n    console.log(`decodedInvestments ::: `, investmentsData); // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n\n    setInvestments(investmentStateAccs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetInvestments,\n      children: \"Get Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Investment Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleSelectInvestment,\n      children: investments.map(i => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: i,\n          children: i\n        }, i, false, {\n          fileName: _jsxFileName,\n          lineNumber: 205,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 216,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 195,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdraw, \"9u+NjkmGVYRSrA2PFQsphEAJS5Q=\");\n\n_c = Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","FUND_ACCOUNT_KEY","programId","TOKEN_PROGRAM_ID","struct","u32","createKeyIfNotExists","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","INVESTOR_DATA","FUND_DATA","createAccountInstruction","IDS","MangoClient","NodeBankLayout","PerpMarketLayout","bs58","BN","Withdraw","selectedInvestmentStateAcc","setSelectedInvestmentStateAcc","investments","setInvestments","walletProvider","s","fundAccount","createFundPublicKey","ids","handleSelectInvestment","event","target","value","console","log","handleGetInvestments","investorAccount","publicKey","toBase58","getProgramAccounts","filters","memcmp","offset","offsetOf","bytes","toString","encode","toArray","dataSize","span","investmentStateAccs","map","f","pubkey","investmentsData","decode","account","data","i"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { connection,  FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID} from '../utils/constants';\r\n\r\nimport { struct, u32 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\r\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\r\nimport bs58 from 'bs58';\r\nimport BN from 'bn.js';\r\n\r\nexport const Withdraw = () => {\r\n\r\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\r\n  const [investments, setInvestments] = useState([]);\r\n\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\r\n  const ids = IDS['groups'][0]\r\n\r\n\r\n  // const handleWithdraw = async () => {\r\n\r\n  //   const key = walletProvider?.publicKey;\r\n\r\n  //   if (!key) {\r\n  //     alert(\"connect wallet\")\r\n  //     return;\r\n  //   };\r\n\r\n  //   if(!fundPDA) {\r\n  //     alert(\"no funds found\")\r\n  //     return\r\n  //   }\r\n    \r\n  //   const transaction = new Transaction()\r\n\r\n  //   const openOrdersLamports =\r\n  //   await connection.getMinimumBalanceForRentExemption(\r\n  //     INVESTOR_DATA.span,\r\n  //     'singleGossip'\r\n  //   )\r\n  //   let signers = []\r\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\r\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n\r\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\r\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n  //   console.log(\"fundState:: \", fundState)\r\n\r\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n  //   console.log(\"mango group:: \", mangoGroup)\r\n\r\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\r\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n  //   console.log(\"nodebank:: \", nodeBank)\r\n\r\n\r\n  //   const dataLayout = struct([u32('instruction')])\r\n  //   const data = Buffer.alloc(dataLayout.span)\r\n  //   dataLayout.encode(\r\n  //     {\r\n  //       instruction: 2,\r\n  //     },\r\n  //     data\r\n  //   )\r\n\r\n  //   const instruction = new TransactionInstruction({\r\n  //     keys: [\r\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\r\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n  //       { pubkey: key, isSigner: true, isWritable: true },\r\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\r\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n\r\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\r\n\r\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\r\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\r\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n  //     ],\r\n  //     programId,\r\n  //     data\r\n  //   });\r\n\r\n  //   transaction.add(instruction);\r\n  //   console.log(`transaction ::: `, transaction)\r\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n  //   transaction.feePayer = key;\r\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\r\n  //   console.log(\"blockhash\", hash);\r\n  //   transaction.recentBlockhash = hash.blockhash;\r\n  //   transaction.setSigners(key, investerStateAccount)\r\n  //   transaction.partialSign(...signers)\r\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\r\n  //   console.log(\"tx::: \", sign)\r\n  // }\r\n  \r\n  // const handleFunds = async () => {\r\n  \r\n  //   let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\r\n  //   console.log(`funds :::: `, funds)\r\n  //   const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\r\n\r\n  //   console.log(`decodedFunds ::: `, fundData)\r\n  //   let invFunds = []\r\n  //   for(let i=0; i<fundData.length; i++) {\r\n  //     let manager = fundData[i].manager_account;\r\n\r\n  //     let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\r\n  //     let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n\r\n  //     let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\r\n  //     let invState = await connection.getAccountInfo(invStateAccount);\r\n\r\n  //     if (invState == null) {\r\n  //       continue\r\n  //     }\r\n\r\n  //     let invStateData = INVESTOR_DATA.decode(invState.data)\r\n  //     console.log(invStateData)\r\n\r\n  //     // if (!invStateData.is_initialized) {\r\n  //     //   continue\r\n  //     // }\r\n  //     invFunds.push({\r\n  //       fundPDA: PDA[0].toBase58(),\r\n  //       fundManager: manager.toBase58(),\r\n  //     });\r\n  //   }\r\n  //   console.log(invFunds)\r\n  //   setFunds(invFunds);\r\n  // }\r\n\r\n  // const handleFundSelect = async(event) => {\r\n  \r\n  //   setFundPDA(event.target.value);\r\n  //   console.log(`setting fundPDA :::: `, event.target.value, fundPDA)\r\n  // }\r\n\r\n  const handleSelectInvestment = async(event) => {\r\n    setSelectedInvestmentStateAcc(event.target.value);\r\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\r\n  }\r\n  \r\n  const handleGetInvestments = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"Investor::\",investorAccount.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(2, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>Withdraw</h4>\r\n      <br />\r\n      <button onClick={handleGetInvestments}>Get Investments</button>\r\n      <br />\r\n      <label htmlFor=\"funds\">Select Investment Address:</label>\r\n\r\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\r\n        {\r\n          investments.map((i) => {\r\n            return (<option key={i} value={i}>{i}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      {/* <button onClick={handleFunds}>Load Investments</button> */}\r\n\r\n      <br />\r\n     \r\n      {/* <button onClick={handleWithdraw}>Withdraw from Fund</button>\r\n      <button onClick={handleHarvestMngo}>Harvest Mngo</button> */}\r\n  \r\n      <br />\r\n    </div>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}