{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3';\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId } from '../utils/constants';\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32 } from 'buffer-layout';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout } from '@blockworks-foundation/mango-client';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InitialisedFund = () => {\n  _s();\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitializeFund = async () => {\n    const transaction = new Transaction();\n    let ids = IDS['groups'][0];\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span);\n    console.log(`fundPDA::: `, fundPDA[0].toBase58());\n    const accountNumBN = new BN(0);\n    const mango_account_ai = await PublicKey.findProgramAddress([mango_group_ai.toBytes(), fundPDA[0].toBytes(), accountNumBN.toArrayLike(Buffer, 'le', 8)], new PublicKey(ids.mangoProgramId));\n    const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')]);\n    const data = Buffer.alloc(dataLayout.span);\n    console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\", min_amount * 10 ** ids.tokens[0].decimals);\n    console.log(\"platform_fee_percentage * 100::\", platform_fee_percentage * 100);\n    dataLayout.encode({\n      instruction: 0,\n      min_amount: min_amount * 10 ** ids.tokens[0].decimals,\n      performance_fee_percentage: platform_fee_percentage * 100\n    }, data); // const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction);\n\n    const fundBaseVault = findAssociatedTokenAddress(walletProvider.publicKey, new PublicKey(ids.tokens[0].mintKey));\n    console.log('data', data);\n    const keys = [{\n      pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundBaseVault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mango_account_ai[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: delegate,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', keys[i].pubkey.toBase58());\n    }\n\n    console.log(\"IDS:: \", ids);\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    console.log(\"programId::\", programId.toBase58());\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign); // GlobalState.update(s => {\n    //   s.createFundPublicKey = fundPDA[0];\n    // })\n  };\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Initialise Fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), \"min_amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: min_amount,\n      onChange: event => setMin_amount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this), \"platform_fee_percentage ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: platform_fee_percentage,\n      onChange: event => setPlatform_fee_percentage(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInitializeFund,\n      children: \"initialise fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 102,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InitialisedFund, \"Y5OaHQmwGmIOIamXnlfzAn5uT7g=\");\n\n_c = InitialisedFund;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitialisedFund\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js"],"names":["React","useEffect","useState","createAssociatedTokenAccount","createAssociatedTokenAccountIfNotExist","createKeyIfNotExists","createTokenAccountIfNotExist","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","connection","delegate","FUND_ACCOUNT_KEY","MARGIN_ACCOUNT_KEY_1","platformStateAccount","PLATFORM_ACCOUNT_KEY","programId","GlobalState","nu64","struct","u8","u32","PublicKey","Transaction","TransactionInstruction","TOKEN_PROGRAM_ID","FUND_DATA","PLATFORM_DATA","u64","U64F64","Badge","IDS","MangoAccountLayout","BN","InitialisedFund","walletProvider","s","handleInitializeFund","transaction","ids","fundPDA","findProgramAddress","publicKey","toBuffer","mango_group_ai","console","log","span","toBase58","accountNumBN","mango_account_ai","toBytes","toArrayLike","Buffer","mangoProgramId","dataLayout","data","alloc","min_amount","tokens","decimals","platform_fee_percentage","encode","instruction","performance_fee_percentage","fundBaseVault","mintKey","keys","pubkey","isSigner","isWritable","i","length","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","setMin_amount","setPlatform_fee_percentage","event","target","value"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,SAASC,4BAAT,EAAuCC,sCAAvC,EAA+EC,oBAA/E,EAAqGC,4BAArG,EAAmIC,0BAAnI,EAA+JC,oBAA/J,EAAqLC,sBAArL,QAAmN,eAAnN;AACA,SAASC,UAAT,EAAqBC,QAArB,EAA+BC,gBAA/B,EAAiDC,oBAAjD,EAAuEC,oBAAvE,EAA6FC,oBAA7F,EAAmHC,SAAnH,QAAoI,oBAApI;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,EAAvB,EAA2BC,GAA3B,QAAqC,eAArC;AACA,SAASC,SAAT,EAAoBC,WAApB,EAAiCC,sBAAjC,QAA+D,iBAA/D;AACA,SAASC,gBAAT,QAAiC,6CAAjC;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,GAAnC,EAAwCC,MAAxC,QAAsD,yBAAtD;AACA,SAASC,KAAT,QAAsB,YAAtB;AACA,SAASC,GAAT,EAAcC,kBAAd,QAAwC,qCAAxC;AACA,OAAOC,EAAP,MAAe,OAAf;;AAEA,OAAO,MAAMC,eAAe,GAAG,MAAM;AAAA;;AAEnC,QAAMC,cAAc,GAAGlB,WAAW,CAACf,QAAZ,CAAqBkC,CAAC,IAAIA,CAAC,CAACD,cAA5B,CAAvB;;AAEA,QAAME,oBAAoB,GAAG,YAAY;AAEvC,UAAMC,WAAW,GAAG,IAAIf,WAAJ,EAApB;AACA,QAAIgB,GAAG,GAAGR,GAAG,CAAC,QAAD,CAAH,CAAc,CAAd,CAAV;AAGA,UAAMS,OAAO,GAAG,MAAMlB,SAAS,CAACmB,kBAAV,CAA6B,CAACN,cAAD,aAACA,cAAD,uBAACA,cAAc,CAAEO,SAAhB,CAA0BC,QAA1B,EAAD,CAA7B,EAAqE3B,SAArE,CAAtB;AAEA,UAAM4B,cAAc,GAAG,IAAItB,SAAJ,CAAciB,GAAG,CAACG,SAAlB,CAAvB;AAEAG,IAAAA,OAAO,CAACC,GAAR,CAAa,sBAAb,EAAoCpB,SAAS,CAACqB,IAA9C;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAb,EAA2BN,OAAO,CAAC,CAAD,CAAP,CAAWQ,QAAX,EAA3B;AAEA,UAAMC,YAAY,GAAG,IAAIhB,EAAJ,CAAO,CAAP,CAArB;AAEA,UAAMiB,gBAAgB,GAAG,MAAM5B,SAAS,CAACmB,kBAAV,CAA6B,CAC1DG,cAAc,CAACO,OAAf,EAD0D,EAE1DX,OAAO,CAAC,CAAD,CAAP,CAAWW,OAAX,EAF0D,EAG1DF,YAAY,CAACG,WAAb,CAAyBC,MAAzB,EAAiC,IAAjC,EAAuC,CAAvC,CAH0D,CAA7B,EAK/B,IAAI/B,SAAJ,CAAciB,GAAG,CAACe,cAAlB,CAL+B,CAA/B;AAOE,UAAMC,UAAU,GAAGpC,MAAM,CAAC,CAACE,GAAG,CAAC,aAAD,CAAJ,EAAqBH,IAAI,CAAC,YAAD,CAAzB,EAAyCA,IAAI,CAAC,4BAAD,CAA7C,CAAD,CAAzB;AAEA,UAAMsC,IAAI,GAAGH,MAAM,CAACI,KAAP,CAAaF,UAAU,CAACR,IAAxB,CAAb;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAY,8CAAZ,EAA2DY,UAAU,GAAI,MAAMnB,GAAG,CAACoB,MAAJ,CAAW,CAAX,EAAcC,QAA7F;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,iCAAZ,EAA8Ce,uBAAuB,GAAG,GAAxE;AACAN,IAAAA,UAAU,CAACO,MAAX,CACE;AACEC,MAAAA,WAAW,EAAE,CADf;AAEEL,MAAAA,UAAU,EAAEA,UAAU,GAAI,MAAMnB,GAAG,CAACoB,MAAJ,CAAW,CAAX,EAAcC,QAFhD;AAGEI,MAAAA,0BAA0B,EAAEH,uBAAuB,GAAG;AAHxD,KADF,EAMEL,IANF,EA3BqC,CAoCrC;;AAEA,UAAMS,aAAa,GAAG1D,0BAA0B,CAAC4B,cAAc,CAACO,SAAhB,EAA2B,IAAIpB,SAAJ,CAAciB,GAAG,CAACoB,MAAJ,CAAW,CAAX,EAAcO,OAA5B,CAA3B,CAAhD;AAEArB,IAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ,EAAoBU,IAApB;AACE,UAAMW,IAAI,GAAG,CACX;AAAEC,MAAAA,MAAM,EAAEjC,cAAF,aAAEA,cAAF,uBAAEA,cAAc,CAAEO,SAA1B;AAAqC2B,MAAAA,QAAQ,EAAE,IAA/C;AAAqDC,MAAAA,UAAU,EAAE;AAAjE,KADW,EAEX;AAAEF,MAAAA,MAAM,EAAE5B,OAAO,CAAC,CAAD,CAAjB;AAAsB6B,MAAAA,QAAQ,EAAE,KAAhC;AAAuCC,MAAAA,UAAU,EAAE;AAAnD,KAFW,EAIX;AAAEF,MAAAA,MAAM,EAAEH,aAAV;AAAyBI,MAAAA,QAAQ,EAAE,KAAnC;AAA0CC,MAAAA,UAAU,EAAE;AAAtD,KAJW,EAKX;AAAEF,MAAAA,MAAM,EAAE,IAAI9C,SAAJ,CAAciB,GAAG,CAACe,cAAlB,CAAV;AAA6Ce,MAAAA,QAAQ,EAAE,KAAvD;AAA8DC,MAAAA,UAAU,EAAE;AAA1E,KALW,EAMX;AAAEF,MAAAA,MAAM,EAAE,IAAI9C,SAAJ,CAAciB,GAAG,CAACG,SAAlB,CAAV;AAAwC2B,MAAAA,QAAQ,EAAE,KAAlD;AAAyDC,MAAAA,UAAU,EAAE;AAArE,KANW,EAOX;AAAEF,MAAAA,MAAM,EAAElB,gBAAgB,CAAC,CAAD,CAA1B;AAA+BmB,MAAAA,QAAQ,EAAE,KAAzC;AAAgDC,MAAAA,UAAU,EAAE;AAA5D,KAPW,EAQX;AAAEF,MAAAA,MAAM,EAAEzD,QAAV;AAAoB0D,MAAAA,QAAQ,EAAE,KAA9B;AAAqCC,MAAAA,UAAU,EAAE;AAAjD,KARW,CAAb;;AAYA,SAAI,IAAIC,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAACJ,IAAI,CAACK,MAAtB,EAA8BD,CAAC,EAA/B,EAAkC;AAChC1B,MAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAkBqB,IAAI,CAACI,CAAD,CAAJ,CAAQH,MAAR,CAAepB,QAAf,EAAlB;AACD;;AAIHH,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBP,GAAtB;AACA,UAAMwB,WAAW,GAAG,IAAIvC,sBAAJ,CAA2B;AAC7C2C,MAAAA,IAD6C;AAE7CnD,MAAAA,SAF6C;AAG7CwC,MAAAA;AAH6C,KAA3B,CAApB;AAKAX,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ,EAA0B9B,SAAS,CAACgC,QAAV,EAA1B;AACAV,IAAAA,WAAW,CAACmC,GAAZ,CAAgBV,WAAhB;AACAzB,IAAAA,WAAW,CAACoC,QAAZ,GAAuBvC,cAAvB,aAAuBA,cAAvB,uBAAuBA,cAAc,CAAEO,SAAvC;AACA,QAAIiC,IAAI,GAAG,MAAMjE,UAAU,CAACkE,kBAAX,EAAjB;AACA/B,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB6B,IAAzB;AACArC,IAAAA,WAAW,CAACuC,eAAZ,GAA8BF,IAAI,CAACG,SAAnC;AAEA,UAAMC,IAAI,GAAG,MAAMtE,sBAAsB,CAAC0B,cAAD,EAAiBG,WAAjB,CAAzC;AACAO,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BiC,IAA/B,EAzEqC,CA4EvC;AACA;AACA;AACD,GA/ED;;AAiFA,QAAM,CAACrB,UAAD,EAAasB,aAAb,IAA8B9E,QAAQ,CAAC,CAAD,CAA5C;AACA,QAAM,CAAC2D,uBAAD,EAA0BoB,0BAA1B,IAAwD/E,QAAQ,CAAC,CAAD,CAAtE;AAEA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,qBAEkB,GAFlB,eAGE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAEwD,UAA5B;AAAwC,MAAA,QAAQ,EAAGwB,KAAD,IAAWF,aAAa,CAACE,KAAK,CAACC,MAAN,CAAaC,KAAd;AAA1E;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,kCAK+B,GAL/B,eAME;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAEvB,uBAA5B;AAAqD,MAAA,QAAQ,EAAGqB,KAAD,IAAWD,0BAA0B,CAACC,KAAK,CAACC,MAAN,CAAaC,KAAd;AAApG;AAAA;AAAA;AAAA;AAAA,YANF,eAOE;AAAA;AAAA;AAAA;AAAA,YAPF,eAQE;AAAQ,MAAA,OAAO,EAAE/C,oBAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YARF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAYD,CApGM;;GAAMH,e;;KAAAA,e","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\n\nexport const InitialisedFund = () => {\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitializeFund = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA[0].toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA[0].toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n      const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\",min_amount * (10 ** ids.tokens[0].decimals));\n      console.log(\"platform_fee_percentage * 100::\",platform_fee_percentage * 100)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          min_amount: min_amount * (10 ** ids.tokens[0].decimals),\n          performance_fee_percentage: platform_fee_percentage * 100,\n        },\n        data\n      )\n\n      // const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction);\n      \n      const fundBaseVault = findAssociatedTokenAddress(walletProvider.publicKey, new PublicKey(ids.tokens[0].mintKey))\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n          { pubkey: fundBaseVault, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: delegate, isSigner: false, isWritable: false}\n\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n      \n\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"signature tx:: \", sign)\n\n\n    // GlobalState.update(s => {\n    //   s.createFundPublicKey = fundPDA[0];\n    // })\n  }\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Initialise Fund</h4>\n      min_amount ::: {' '}\n      <input type=\"number\" value={min_amount} onChange={(event) => setMin_amount(event.target.value)} />\n      <br />\n      platform_fee_percentage ::: {' '}\n      <input type=\"number\" value={platform_fee_percentage} onChange={(event) => setPlatform_fee_percentage(event.target.value)} />\n      <br />\n      <button onClick={handleInitializeFund}>initialise fund</button>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}