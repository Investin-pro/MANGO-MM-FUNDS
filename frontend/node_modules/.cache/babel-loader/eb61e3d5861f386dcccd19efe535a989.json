{"ast":null,"code":"export class TransactionWithSignature {\n  constructor(signature, confirmedTransaction) {}\n\n}\nexport async function getTransactions(connection, address) {\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(address);\n  const transactions = [];\n\n  for (let i = 0; i < transSignatures.length; i++) {\n    const signature = transSignatures[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(signature);\n    console.log(`confirmedTransaction ::: `, confirmedTransaction);\n\n    if (confirmedTransaction) {\n      const transWithSignature = {\n        signature,\n        confirmedTransaction\n      };\n      transactions.push(transWithSignature);\n    }\n  }\n\n  return transactions;\n}","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/utils/getTransactions.js"],"names":["TransactionWithSignature","constructor","signature","confirmedTransaction","getTransactions","connection","address","transSignatures","getConfirmedSignaturesForAddress2","transactions","i","length","getConfirmedTransaction","console","log","transWithSignature","push"],"mappings":"AAAA,OAAO,MAAMA,wBAAN,CAA+B;AACpCC,EAAAA,WAAW,CACTC,SADS,EAETC,oBAFS,EAGT,CAAG;;AAJ+B;AAOtC,OAAO,eAAeC,eAAf,CACLC,UADK,EAELC,OAFK,EAGL;AACA,QAAMC,eAAe,GAAG,MAAMF,UAAU,CAACG,iCAAX,CAC5BF,OAD4B,CAA9B;AAIA,QAAMG,YAAY,GAAG,EAArB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,eAAe,CAACI,MAApC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAMR,SAAS,GAAGK,eAAe,CAACG,CAAD,CAAf,CAAmBR,SAArC;AACA,UAAMC,oBAAoB,GAAG,MAAME,UAAU,CAACO,uBAAX,CACjCV,SADiC,CAAnC;AAGAW,IAAAA,OAAO,CAACC,GAAR,CAAa,2BAAb,EAAyCX,oBAAzC;;AACA,QAAIA,oBAAJ,EAA0B;AACxB,YAAMY,kBAAkB,GAAG;AACzBb,QAAAA,SADyB;AAEzBC,QAAAA;AAFyB,OAA3B;AAIAM,MAAAA,YAAY,CAACO,IAAb,CAAkBD,kBAAlB;AACD;AACF;;AACD,SAAON,YAAP;AACD","sourcesContent":["export class TransactionWithSignature {\n  constructor(\n    signature,\n    confirmedTransaction\n  ) { }\n}\n\nexport async function getTransactions(\n  connection,\n  address\n) {\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(\n    address\n  );\n\n  const transactions = [];\n  for (let i = 0; i < transSignatures.length; i++) {\n    const signature = transSignatures[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(\n      signature\n    );\n    console.log(`confirmedTransaction ::: `, confirmedTransaction)\n    if (confirmedTransaction) {\n      const transWithSignature = {\n        signature,\n        confirmedTransaction\n      };\n      transactions.push(transWithSignature);\n    }\n  }\n  return transactions;\n}\n"]},"metadata":{},"sourceType":"module"}