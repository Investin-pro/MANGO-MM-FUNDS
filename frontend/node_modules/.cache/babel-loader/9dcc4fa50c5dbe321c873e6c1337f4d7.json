{"ast":null,"code":"import EventEmitter from 'eventemitter3';\nexport class PhantomWalletAdapter extends EventEmitter {\n  constructor() {\n    var _this;\n\n    super();\n    _this = this;\n\n    this._handleConnect = function () {\n      _this.emit('connect', _this.publicKey);\n    };\n\n    this._handleDisconnect = function () {\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      _this.emit('disconnect', ...args);\n    };\n\n    this.connect = this.connect.bind(this);\n  }\n\n  get _provider() {\n    var _window, _window$solana;\n\n    if ((_window = window) !== null && _window !== void 0 && (_window$solana = _window.solana) !== null && _window$solana !== void 0 && _window$solana.isPhantom) {\n      return window.solana;\n    }\n\n    return undefined;\n  }\n\n  get connected() {\n    var _this$_provider;\n\n    return ((_this$_provider = this._provider) === null || _this$_provider === void 0 ? void 0 : _this$_provider.isConnected) || false;\n  }\n\n  get autoApprove() {\n    var _this$_provider2;\n\n    return ((_this$_provider2 = this._provider) === null || _this$_provider2 === void 0 ? void 0 : _this$_provider2.autoApprove) || false;\n  } // eslint-disable-next-line\n\n\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions;\n    }\n\n    return this._provider.signAllTransactions(transactions);\n  }\n\n  get publicKey() {\n    var _this$_provider3;\n\n    return (_this$_provider3 = this._provider) === null || _this$_provider3 === void 0 ? void 0 : _this$_provider3.publicKey;\n  } // eslint-disable-next-line\n\n\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction;\n    }\n\n    return this._provider.signTransaction(transaction);\n  }\n\n  connect() {\n    var _this$_provider4;\n\n    if (!this._provider) {\n      return;\n    }\n\n    if (!this._provider.listeners('connect').length) {\n      this._provider.on('connect', () => this._handleConnect());\n    }\n\n    if (!this._provider.listeners('disconnect').length) {\n      this._provider.on('disconnect', () => this._handleDisconnect());\n    }\n\n    return (_this$_provider4 = this._provider) === null || _this$_provider4 === void 0 ? void 0 : _this$_provider4.connect(); //  this.emit('')\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect();\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/utils/wallets/PhantomWallet.js"],"names":["EventEmitter","PhantomWalletAdapter","constructor","_handleConnect","emit","publicKey","_handleDisconnect","args","connect","bind","_provider","window","solana","isPhantom","undefined","connected","isConnected","autoApprove","signAllTransactions","transactions","signTransaction","transaction","listeners","length","on","disconnect"],"mappings":"AAAA,OAAOA,YAAP,MAAyB,eAAzB;AAEA,OAAO,MAAMC,oBAAN,SAAmCD,YAAnC,CAAgD;AACrDE,EAAAA,WAAW,GAAG;AAAA;;AACZ,WADY;AAAA;;AAAA,SAYdC,cAZc,GAYG,YAAa;AAC5B,MAAA,KAAI,CAACC,IAAL,CAAU,SAAV,EAAqB,KAAI,CAACC,SAA1B;AACD,KAda;;AAAA,SAgBdC,iBAhBc,GAgBM,YAAa;AAAA,wCAATC,IAAS;AAATA,QAAAA,IAAS;AAAA;;AAC/B,MAAA,KAAI,CAACH,IAAL,CAAU,YAAV,EAAwB,GAAGG,IAA3B;AACD,KAlBa;;AAEZ,SAAKC,OAAL,GAAe,KAAKA,OAAL,CAAaC,IAAb,CAAkB,IAAlB,CAAf;AACD;;AAEY,MAATC,SAAS,GAAG;AAAA;;AACd,mBAAKC,MAAL,sDAAI,QAAUC,MAAd,2CAAI,eAAkBC,SAAtB,EAAiC;AAC/B,aAAQF,MAAD,CAASC,MAAhB;AACD;;AACD,WAAOE,SAAP;AACD;;AAUY,MAATC,SAAS,GAAG;AAAA;;AACd,WAAO,yBAAKL,SAAL,oEAAgBM,WAAhB,KAA+B,KAAtC;AACD;;AAEc,MAAXC,WAAW,GAAG;AAAA;;AAChB,WAAO,0BAAKP,SAAL,sEAAgBO,WAAhB,KAA+B,KAAtC;AACD,GA3BoD,CA6BrD;;;AACyB,QAAnBC,mBAAmB,CAACC,YAAD,EAAe;AACtC,QAAI,CAAC,KAAKT,SAAV,EAAqB;AACnB,aAAOS,YAAP;AACD;;AAED,WAAO,KAAKT,SAAL,CAAeQ,mBAAf,CAAmCC,YAAnC,CAAP;AACD;;AAEY,MAATd,SAAS,GAAG;AAAA;;AACd,+BAAO,KAAKK,SAAZ,qDAAO,iBAAgBL,SAAvB;AACD,GAxCoD,CA0CrD;;;AACqB,QAAfe,eAAe,CAACC,WAAD,EAAc;AACjC,QAAI,CAAC,KAAKX,SAAV,EAAqB;AACnB,aAAOW,WAAP;AACD;;AAED,WAAO,KAAKX,SAAL,CAAeU,eAAf,CAA+BC,WAA/B,CAAP;AACD;;AAEDb,EAAAA,OAAO,GAAG;AAAA;;AACR,QAAI,CAAC,KAAKE,SAAV,EAAqB;AACnB;AACD;;AACD,QAAI,CAAC,KAAKA,SAAL,CAAeY,SAAf,CAAyB,SAAzB,EAAoCC,MAAzC,EAAiD;AAC/C,WAAKb,SAAL,CAAec,EAAf,CAAkB,SAAlB,EAA6B,MAAM,KAAKrB,cAAL,EAAnC;AACD;;AACD,QAAI,CAAC,KAAKO,SAAL,CAAeY,SAAf,CAAyB,YAAzB,EAAuCC,MAA5C,EAAoD;AAClD,WAAKb,SAAL,CAAec,EAAf,CAAkB,YAAlB,EAAgC,MAAM,KAAKlB,iBAAL,EAAtC;AACD;;AACD,+BAAO,KAAKI,SAAZ,qDAAO,iBAAgBF,OAAhB,EAAP,CAVQ,CAWR;AACD;;AAEDiB,EAAAA,UAAU,GAAG;AACX,QAAI,KAAKf,SAAT,EAAoB;AAClB,WAAKA,SAAL,CAAee,UAAf;AACD;AACF;;AArEoD","sourcesContent":["import EventEmitter from 'eventemitter3'\n\nexport class PhantomWalletAdapter extends EventEmitter {\n  constructor() {\n    super()\n    this.connect = this.connect.bind(this)\n  }\n\n  get _provider() {\n    if ((window)?.solana?.isPhantom) {\n      return (window).solana\n    }\n    return undefined\n  }\n\n  _handleConnect = (...args) => {\n    this.emit('connect', this.publicKey)\n  }\n\n  _handleDisconnect = (...args) => {\n    this.emit('disconnect', ...args)\n  }\n\n  get connected() {\n    return this._provider?.isConnected || false\n  }\n\n  get autoApprove() {\n    return this._provider?.autoApprove || false\n  }\n\n  // eslint-disable-next-line\n  async signAllTransactions(transactions) {\n    if (!this._provider) {\n      return transactions\n    }\n\n    return this._provider.signAllTransactions(transactions)\n  }\n\n  get publicKey() {\n    return this._provider?.publicKey\n  }\n\n  // eslint-disable-next-line\n  async signTransaction(transaction) {\n    if (!this._provider) {\n      return transaction\n    }\n\n    return this._provider.signTransaction(transaction)\n  }\n\n  connect() {\n    if (!this._provider) {\n      return\n    }\n    if (!this._provider.listeners('connect').length) {\n      this._provider.on('connect', () => this._handleConnect())\n    }\n    if (!this._provider.listeners('disconnect').length) {\n      this._provider.on('disconnect', () => this._handleDisconnect())\n    }\n    return this._provider?.connect()\n    //  this.emit('')\n  }\n\n  disconnect() {\n    if (this._provider) {\n      this._provider.disconnect()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}