{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport * as bs58 from \"bs58\";\nimport { IdlCoder } from \"./idl\";\nimport { sighash } from \"./common\";\n/**\n * Namespace for state method function signatures.\n */\n\nexport const SIGHASH_STATE_NAMESPACE = \"state\";\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */\n\nexport const SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */\n\nexport class InstructionCoder {\n  constructor(idl) {\n    this.idl = idl;\n    this.ixLayout = InstructionCoder.parseIxLayout(idl);\n    const sighashLayouts = new Map();\n    idl.instructions.forEach(ix => {\n      const sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);\n      sighashLayouts.set(bs58.encode(sh), {\n        layout: this.ixLayout.get(ix.name),\n        name: ix.name\n      });\n    });\n\n    if (idl.state) {\n      idl.state.methods.map(ix => {\n        const sh = sighash(SIGHASH_STATE_NAMESPACE, ix.name);\n        sighashLayouts.set(bs58.encode(sh), {\n          layout: this.ixLayout.get(ix.name),\n          name: ix.name\n        });\n      });\n    }\n\n    this.sighashLayouts = sighashLayouts;\n  }\n  /**\n   * Encodes a program instruction.\n   */\n\n\n  encode(ixName, ix) {\n    return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);\n  }\n  /**\n   * Encodes a program state instruction.\n   */\n\n\n  encodeState(ixName, ix) {\n    return this._encode(SIGHASH_STATE_NAMESPACE, ixName, ix);\n  }\n\n  _encode(nameSpace, ixName, ix) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const methodName = camelCase(ixName);\n    const len = this.ixLayout.get(methodName).encode(ix, buffer);\n    const data = buffer.slice(0, len);\n    return Buffer.concat([sighash(nameSpace, ixName), data]);\n  }\n\n  static parseIxLayout(idl) {\n    const stateMethods = idl.state ? idl.state.methods : [];\n    const ixLayouts = stateMethods.map(m => {\n      let fieldLayouts = m.args.map(arg => {\n        return IdlCoder.fieldLayout(arg, idl.types);\n      });\n      const name = camelCase(m.name);\n      return [name, borsh.struct(fieldLayouts, name)];\n    }).concat(idl.instructions.map(ix => {\n      let fieldLayouts = ix.args.map(arg => IdlCoder.fieldLayout(arg, idl.types));\n      const name = camelCase(ix.name);\n      return [name, borsh.struct(fieldLayouts, name)];\n    })); // @ts-ignore\n\n    return new Map(ixLayouts);\n  }\n  /**\n   * Dewcodes a program instruction.\n   */\n\n\n  decode(ix) {\n    if (typeof ix === \"string\") {\n      ix = bs58.decode(ix);\n    }\n\n    let sighash = bs58.encode(ix.slice(0, 8));\n    let data = ix.slice(8);\n    const decoder = this.sighashLayouts.get(sighash);\n\n    if (!decoder) {\n      return null;\n    }\n\n    return {\n      data: decoder.layout.decode(data),\n      name: decoder.name\n    };\n  }\n  /**\n   * Returns a formatted table of all the fields in the given instruction data.\n   */\n\n\n  format(ix, accountMetas) {\n    return InstructionFormatter.format(ix, accountMetas, this.idl);\n  }\n\n}\n\nclass InstructionFormatter {\n  static format(ix, accountMetas, idl) {\n    const idlIx = idl.instructions.filter(i => ix.name === i.name)[0];\n\n    if (idlIx === undefined) {\n      console.error(\"Invalid instruction given\");\n      return null;\n    }\n\n    const args = idlIx.args.map(idlField => {\n      return {\n        name: idlField.name,\n        type: InstructionFormatter.formatIdlType(idlField.type),\n        data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types)\n      };\n    });\n    const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n    const accounts = accountMetas.map((meta, idx) => {\n      if (idx < flatIdlAccounts.length) {\n        return {\n          name: flatIdlAccounts[idx].name,\n          ...meta\n        };\n      } // \"Remaining accounts\" are unnamed in Anchor.\n      else {\n        return {\n          name: undefined,\n          ...meta\n        };\n      }\n    });\n    return {\n      args,\n      accounts\n    };\n  }\n\n  static formatIdlType(idlType) {\n    if (typeof idlType === \"string\") {\n      return idlType;\n    } // @ts-ignore\n\n\n    if (idlType.vec) {\n      // @ts-ignore\n      return `Vec<${this.formatIdlType(idlType.vec)}>`;\n    } // @ts-ignore\n\n\n    if (idlType.option) {\n      // @ts-ignore\n      return `Option<${this.formatIdlType(idlType.option)}>`;\n    } // @ts-ignore\n\n\n    if (idlType.defined) {\n      // @ts-ignore\n      return idlType.defined;\n    }\n  }\n\n  static formatIdlData(idlField, data, types) {\n    if (typeof idlField.type === \"string\") {\n      return data.toString();\n    } // @ts-ignore\n\n\n    if (idlField.type.vec) {\n      // @ts-ignore\n      return \"[\" + data // @ts-ignore\n      .map(d => this.formatIdlData( // @ts-ignore\n      {\n        name: \"\",\n        type: idlField.type.vec\n      }, d)).join(\", \") + \"]\";\n    } // @ts-ignore\n\n\n    if (idlField.type.option) {\n      // @ts-ignore\n      return data === null ? \"null\" : this.formatIdlData( // @ts-ignore\n      {\n        name: \"\",\n        type: idlField.type.option\n      }, data);\n    } // @ts-ignore\n\n\n    if (idlField.type.defined) {\n      if (types === undefined) {\n        throw new Error(\"User defined types not provided\");\n      } // @ts-ignore\n\n\n      const filtered = types.filter(t => t.name === idlField.type.defined);\n\n      if (filtered.length !== 1) {\n        // @ts-ignore\n        throw new Error(`Type not found: ${idlField.type.defined}`);\n      }\n\n      return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n    }\n\n    return \"unknown\";\n  }\n\n  static formatIdlDataDefined(typeDef, data, types) {\n    if (typeDef.type.kind === \"struct\") {\n      const fields = Object.keys(data).map(k => {\n        const f = typeDef.type.fields.filter(f => f.name === k)[0];\n\n        if (f === undefined) {\n          throw new Error(\"Unable to find type\");\n        }\n\n        return k + \": \" + InstructionFormatter.formatIdlData(f, data[k], types);\n      }).join(\", \");\n      return \"{ \" + fields + \" }\";\n    } else {\n      if (typeDef.type.variants.length === 0) {\n        return \"{}\";\n      } // Struct enum.\n\n\n      if (typeDef.type.variants[0].name) {\n        const variant = Object.keys(data)[0];\n        const enumType = data[variant];\n        const namedFields = Object.keys(enumType).map(f => {\n          var _a;\n\n          const fieldData = enumType[f];\n          const idlField = (_a = typeDef.type.variants[variant]) === null || _a === void 0 ? void 0 : _a.filter(v => v.name === f)[0];\n\n          if (idlField === undefined) {\n            throw new Error(\"Unable to find variant\");\n          }\n\n          return f + \": \" + InstructionFormatter.formatIdlData(idlField, fieldData, types);\n        }).join(\", \");\n        const variantName = camelCase(variant, {\n          pascalCase: true\n        });\n\n        if (namedFields.length === 0) {\n          return variantName;\n        }\n\n        return `${variantName} { ${namedFields} }`;\n      } // Tuple enum.\n      else {\n        // TODO.\n        return \"Tuple formatting not yet implemented\";\n      }\n    }\n  }\n\n  static flattenIdlAccounts(accounts, prefix) {\n    // @ts-ignore\n    return accounts.map(account => {\n      const accName = sentenceCase(account.name); // @ts-ignore\n\n      if (account.accounts) {\n        const newPrefix = prefix ? `${prefix} > ${accName}` : accName; // @ts-ignore\n\n        return InstructionFormatter.flattenIdlAccounts( // @ts-ignore\n        account.accounts, newPrefix);\n      } else {\n        return { ...account,\n          name: prefix ? `${prefix} > ${accName}` : accName\n        };\n      }\n    }).flat();\n  }\n\n}\n\nfunction sentenceCase(field) {\n  const result = field.replace(/([A-Z])/g, \" $1\");\n  return result.charAt(0).toUpperCase() + result.slice(1);\n}","map":{"version":3,"sources":["../../../src/coder/instruction.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as borsh from \"@project-serum/borsh\";\nimport * as bs58 from \"bs58\";\nimport { IdlCoder } from \"./idl\";\nimport { sighash } from \"./common\";\n/**\n * Namespace for state method function signatures.\n */\nexport const SIGHASH_STATE_NAMESPACE = \"state\";\n/**\n * Namespace for global instruction function signatures (i.e. functions\n * that aren't namespaced by the state or any of its trait implementations).\n */\nexport const SIGHASH_GLOBAL_NAMESPACE = \"global\";\n/**\n * Encodes and decodes program instructions.\n */\nexport class InstructionCoder {\n    constructor(idl) {\n        this.idl = idl;\n        this.ixLayout = InstructionCoder.parseIxLayout(idl);\n        const sighashLayouts = new Map();\n        idl.instructions.forEach((ix) => {\n            const sh = sighash(SIGHASH_GLOBAL_NAMESPACE, ix.name);\n            sighashLayouts.set(bs58.encode(sh), {\n                layout: this.ixLayout.get(ix.name),\n                name: ix.name,\n            });\n        });\n        if (idl.state) {\n            idl.state.methods.map((ix) => {\n                const sh = sighash(SIGHASH_STATE_NAMESPACE, ix.name);\n                sighashLayouts.set(bs58.encode(sh), {\n                    layout: this.ixLayout.get(ix.name),\n                    name: ix.name,\n                });\n            });\n        }\n        this.sighashLayouts = sighashLayouts;\n    }\n    /**\n     * Encodes a program instruction.\n     */\n    encode(ixName, ix) {\n        return this._encode(SIGHASH_GLOBAL_NAMESPACE, ixName, ix);\n    }\n    /**\n     * Encodes a program state instruction.\n     */\n    encodeState(ixName, ix) {\n        return this._encode(SIGHASH_STATE_NAMESPACE, ixName, ix);\n    }\n    _encode(nameSpace, ixName, ix) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const methodName = camelCase(ixName);\n        const len = this.ixLayout.get(methodName).encode(ix, buffer);\n        const data = buffer.slice(0, len);\n        return Buffer.concat([sighash(nameSpace, ixName), data]);\n    }\n    static parseIxLayout(idl) {\n        const stateMethods = idl.state ? idl.state.methods : [];\n        const ixLayouts = stateMethods\n            .map((m) => {\n            let fieldLayouts = m.args.map((arg) => {\n                return IdlCoder.fieldLayout(arg, idl.types);\n            });\n            const name = camelCase(m.name);\n            return [name, borsh.struct(fieldLayouts, name)];\n        })\n            .concat(idl.instructions.map((ix) => {\n            let fieldLayouts = ix.args.map((arg) => IdlCoder.fieldLayout(arg, idl.types));\n            const name = camelCase(ix.name);\n            return [name, borsh.struct(fieldLayouts, name)];\n        }));\n        // @ts-ignore\n        return new Map(ixLayouts);\n    }\n    /**\n     * Dewcodes a program instruction.\n     */\n    decode(ix) {\n        if (typeof ix === \"string\") {\n            ix = bs58.decode(ix);\n        }\n        let sighash = bs58.encode(ix.slice(0, 8));\n        let data = ix.slice(8);\n        const decoder = this.sighashLayouts.get(sighash);\n        if (!decoder) {\n            return null;\n        }\n        return {\n            data: decoder.layout.decode(data),\n            name: decoder.name,\n        };\n    }\n    /**\n     * Returns a formatted table of all the fields in the given instruction data.\n     */\n    format(ix, accountMetas) {\n        return InstructionFormatter.format(ix, accountMetas, this.idl);\n    }\n}\nclass InstructionFormatter {\n    static format(ix, accountMetas, idl) {\n        const idlIx = idl.instructions.filter((i) => ix.name === i.name)[0];\n        if (idlIx === undefined) {\n            console.error(\"Invalid instruction given\");\n            return null;\n        }\n        const args = idlIx.args.map((idlField) => {\n            return {\n                name: idlField.name,\n                type: InstructionFormatter.formatIdlType(idlField.type),\n                data: InstructionFormatter.formatIdlData(idlField, ix.data[idlField.name], idl.types),\n            };\n        });\n        const flatIdlAccounts = InstructionFormatter.flattenIdlAccounts(idlIx.accounts);\n        const accounts = accountMetas.map((meta, idx) => {\n            if (idx < flatIdlAccounts.length) {\n                return {\n                    name: flatIdlAccounts[idx].name,\n                    ...meta,\n                };\n            }\n            // \"Remaining accounts\" are unnamed in Anchor.\n            else {\n                return {\n                    name: undefined,\n                    ...meta,\n                };\n            }\n        });\n        return {\n            args,\n            accounts,\n        };\n    }\n    static formatIdlType(idlType) {\n        if (typeof idlType === \"string\") {\n            return idlType;\n        }\n        // @ts-ignore\n        if (idlType.vec) {\n            // @ts-ignore\n            return `Vec<${this.formatIdlType(idlType.vec)}>`;\n        }\n        // @ts-ignore\n        if (idlType.option) {\n            // @ts-ignore\n            return `Option<${this.formatIdlType(idlType.option)}>`;\n        }\n        // @ts-ignore\n        if (idlType.defined) {\n            // @ts-ignore\n            return idlType.defined;\n        }\n    }\n    static formatIdlData(idlField, data, types) {\n        if (typeof idlField.type === \"string\") {\n            return data.toString();\n        }\n        // @ts-ignore\n        if (idlField.type.vec) {\n            // @ts-ignore\n            return (\"[\" +\n                data\n                    // @ts-ignore\n                    .map((d) => this.formatIdlData(\n                // @ts-ignore\n                { name: \"\", type: idlField.type.vec }, d))\n                    .join(\", \") +\n                \"]\");\n        }\n        // @ts-ignore\n        if (idlField.type.option) {\n            // @ts-ignore\n            return data === null\n                ? \"null\"\n                : this.formatIdlData(\n                // @ts-ignore\n                { name: \"\", type: idlField.type.option }, data);\n        }\n        // @ts-ignore\n        if (idlField.type.defined) {\n            if (types === undefined) {\n                throw new Error(\"User defined types not provided\");\n            }\n            // @ts-ignore\n            const filtered = types.filter((t) => t.name === idlField.type.defined);\n            if (filtered.length !== 1) {\n                // @ts-ignore\n                throw new Error(`Type not found: ${idlField.type.defined}`);\n            }\n            return InstructionFormatter.formatIdlDataDefined(filtered[0], data, types);\n        }\n        return \"unknown\";\n    }\n    static formatIdlDataDefined(typeDef, data, types) {\n        if (typeDef.type.kind === \"struct\") {\n            const fields = Object.keys(data)\n                .map((k) => {\n                const f = typeDef.type.fields.filter((f) => f.name === k)[0];\n                if (f === undefined) {\n                    throw new Error(\"Unable to find type\");\n                }\n                return (k + \": \" + InstructionFormatter.formatIdlData(f, data[k], types));\n            })\n                .join(\", \");\n            return \"{ \" + fields + \" }\";\n        }\n        else {\n            if (typeDef.type.variants.length === 0) {\n                return \"{}\";\n            }\n            // Struct enum.\n            if (typeDef.type.variants[0].name) {\n                const variant = Object.keys(data)[0];\n                const enumType = data[variant];\n                const namedFields = Object.keys(enumType)\n                    .map((f) => {\n                    var _a;\n                    const fieldData = enumType[f];\n                    const idlField = (_a = typeDef.type.variants[variant]) === null || _a === void 0 ? void 0 : _a.filter((v) => v.name === f)[0];\n                    if (idlField === undefined) {\n                        throw new Error(\"Unable to find variant\");\n                    }\n                    return (f +\n                        \": \" +\n                        InstructionFormatter.formatIdlData(idlField, fieldData, types));\n                })\n                    .join(\", \");\n                const variantName = camelCase(variant, { pascalCase: true });\n                if (namedFields.length === 0) {\n                    return variantName;\n                }\n                return `${variantName} { ${namedFields} }`;\n            }\n            // Tuple enum.\n            else {\n                // TODO.\n                return \"Tuple formatting not yet implemented\";\n            }\n        }\n    }\n    static flattenIdlAccounts(accounts, prefix) {\n        // @ts-ignore\n        return accounts\n            .map((account) => {\n            const accName = sentenceCase(account.name);\n            // @ts-ignore\n            if (account.accounts) {\n                const newPrefix = prefix ? `${prefix} > ${accName}` : accName;\n                // @ts-ignore\n                return InstructionFormatter.flattenIdlAccounts(\n                // @ts-ignore\n                account.accounts, newPrefix);\n            }\n            else {\n                return {\n                    ...account,\n                    name: prefix ? `${prefix} > ${accName}` : accName,\n                };\n            }\n        })\n            .flat();\n    }\n}\nfunction sentenceCase(field) {\n    const result = field.replace(/([A-Z])/g, \" $1\");\n    return result.charAt(0).toUpperCase() + result.slice(1);\n}\n//# sourceMappingURL=instruction.js.map"]},"metadata":{},"sourceType":"module"}