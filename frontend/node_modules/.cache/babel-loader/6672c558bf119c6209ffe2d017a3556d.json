{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/utils/solanaWeb3.js\";\nimport { toast } from 'react-toastify';\nimport React from 'react';\nimport { getUnixTs } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const TRX_URL = 'https://explorer.solana.com/tx/';\nexport async function sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\nexport const doSomething = async _ref => {\n  let {\n    connection,\n    transaction,\n    wallet,\n    enableSigning = true\n  } = _ref;\n\n  if (!transaction.recentBlockhash) {\n    let hash = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = hash.blockhash;\n  }\n\n  if (enableSigning) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n\n  const rawTransaction = transaction.serialize();\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true\n  });\n  return {\n    txid,\n    rawTransaction\n  };\n};\nexport const sendRawTransaction = async function (_ref2) {\n  let {\n    connection,\n    txid,\n    rawTransaction\n  } = _ref2;\n  let confirmLevel = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : \"confirmed\";\n  const timeout = 120000;\n  const startTime = getUnixTs();\n  let done = false;\n\n  (async () => {\n    await sleep(1000);\n\n    while (!done && getUnixTs() - startTime < timeout) {\n      console.log(\"resending trx...\");\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true\n      });\n      await sleep(1000);\n    }\n  })();\n\n  try {\n    await awaitTransactionSignatureConfirmation2(connection, txid, timeout, confirmLevel); // notify(successMessage);\n  } catch (err) {\n    if (err.timeout) {\n      throw new Error(\"Transaction timed out\"); // notify(txid+\" \"+ \" - Timed out\", \"error\");\n    }\n\n    throw new Error(\"Transaction Failed\"); // notify(txid+\" \"+failMessage, \"error\");\n  } finally {\n    done = true;\n  }\n};\nexport const sendSignedTransactionAndNotify = async _ref3 => {\n  let {\n    connection,\n    transaction,\n    successMessage,\n    failMessage,\n    wallet,\n    signature,\n    confirmLevel = 'confirmed',\n    enableSigning = true\n  } = _ref3;\n  const {\n    txid,\n    rawTransaction\n  } = await doSomething({\n    connection,\n    transaction,\n    wallet,\n    enableSigning\n  }); // const txid = '5hQVbhaG5Ybv7GvVSUrzXnSzyVZihQ6ZZZvQj1DFbbABN8cE9mnaxi4ngzFF48FpMDK623rWSeyFmt47zs4pietL';\n  // await notifyTrx(txid);\n  // const resolveWithSomeData = new Promise(resolve => setTimeout(() => resolve(\"world\"), 5000));\n\n  console.log(\"trx :\", `${TRX_URL}${txid}`);\n  await new Promise(function (resolve, reject) {\n    toast.promise((async () => {\n      try {\n        await sendRawTransaction({\n          connection,\n          txid,\n          rawTransaction\n        }, confirmLevel); // await resolveWithSomeData;\n\n        resolve(true);\n      } catch (error) {\n        reject(error);\n        throw error;\n      }\n    })(), {\n      pending: {\n        render() {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processing-transaction\",\n            children: /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: [\"Processing transction ...\", `  `]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 90,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                href: `${TRX_URL}${txid}`,\n                children: \" View on explorer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 91,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 89,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 20\n          }, this);\n        }\n\n      },\n      success: {\n        render(_ref4) {\n          let {\n            data\n          } = _ref4;\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processing-transaction\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon green\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"iconify\",\n                  \"data-icon\": \"teenyicons:tick-circle-solid\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 101,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 100,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 99,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: successMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 105,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                href: `${TRX_URL}${txid}`,\n                children: \" View on explorer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 106,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 104,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 98,\n            columnNumber: 20\n          }, this);\n        },\n\n        icon: false\n      },\n      error: {\n        render(_ref5) {\n          var _data$message;\n\n          let {\n            data\n          } = _ref5;\n          // When the promise reject, data will contains the error\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"processing-transaction\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                className: \"icon red\",\n                children: /*#__PURE__*/_jsxDEV(\"span\", {\n                  className: \"iconify\",\n                  \"data-icon\": \"akar-icons:circle-x-fill\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 118,\n                  columnNumber: 17\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 117,\n                columnNumber: 17\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 116,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: JSON.stringify((_data$message = data === null || data === void 0 ? void 0 : data.message) !== null && _data$message !== void 0 ? _data$message : {}).includes('timed') ? data.message : failMessage\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 122,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n                target: \"_blank\",\n                rel: \"noopener noreferrer\",\n                href: `${TRX_URL}${txid}`,\n                children: \" View on explorer\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 123,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 121,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 115,\n            columnNumber: 20\n          }, this);\n        },\n\n        icon: false\n      }\n    }, {\n      position: \"bottom-left\",\n      autoClose: 4000,\n      className: 'processing-transaction'\n    });\n  }); // console.log('Latency', txid, getUnixTs() - startTime);\n\n  return txid;\n};\nexport async function awaitTransactionSignatureConfirmation2(connection, txid, timeout) {\n  let confirmLevel = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 'confirmed';\n  let done = false;\n  const confirmLevels = ['finalized'];\n\n  if (confirmLevel === 'confirmed') {\n    confirmLevels.push('confirmed');\n  } else if (confirmLevel === 'processed') {\n    confirmLevels.push('confirmed');\n    confirmLevels.push('processed');\n  }\n\n  const result = await new Promise((resolve, reject) => {\n    (async () => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n\n        done = true; // console.log('Timed out for txid', txid);\n\n        reject({\n          timeout: true\n        });\n      }, timeout);\n\n      try {\n        connection.onSignature(txid, result => {\n          // console.log('WS confirmed', txid, result);\n          done = true;\n\n          if (result.err) {\n            reject(result.err);\n          } else {\n            resolve(result);\n          }\n        }, 'processed'); // console.log('Set up WS connection', txid);\n      } catch (e) {\n        done = true; // console.log('WS error in setup', txid, e);\n      }\n\n      while (!done) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([txid]);\n            const result = signatureStatuses && signatureStatuses.value[0];\n\n            if (!done) {\n              if (!result) {// console.log('REST null result for', txid, result);\n              } else if (result.err) {\n                // console.log('REST error for', txid, result);\n                done = true;\n                reject(result.err);\n              } else if (!(result.confirmations || confirmLevels.includes(result.confirmationStatus))) {// console.log('REST not confirmed', txid, result);\n              } else {\n                // console.log('REST confirmed', txid, result);\n                done = true;\n                resolve(result);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n\n        await sleep(1000);\n      }\n    })();\n  });\n  done = true;\n  return result;\n}","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/utils/solanaWeb3.js"],"names":["toast","React","getUnixTs","TRX_URL","sleep","ms","Promise","resolve","setTimeout","doSomething","connection","transaction","wallet","enableSigning","recentBlockhash","hash","getRecentBlockhash","blockhash","signTransaction","rawTransaction","serialize","txid","sendRawTransaction","skipPreflight","confirmLevel","timeout","startTime","done","console","log","awaitTransactionSignatureConfirmation2","err","Error","sendSignedTransactionAndNotify","successMessage","failMessage","signature","reject","promise","error","pending","render","success","data","icon","JSON","stringify","message","includes","position","autoClose","className","confirmLevels","push","result","onSignature","e","signatureStatuses","getSignatureStatuses","value","confirmations","confirmationStatus"],"mappings":"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","sourcesContent":["\n\nimport { toast } from 'react-toastify';\nimport React from 'react';\nimport { getUnixTs } from '@blockworks-foundation/mango-client';\n\nexport const TRX_URL = 'https://explorer.solana.com/tx/';\n\nexport async function sleep(ms) {\n  return new Promise((resolve) => setTimeout(resolve, ms))\n}\n\nexport const doSomething = async ({connection, transaction, wallet, enableSigning = true}) => {\n \n  if(!transaction.recentBlockhash) {\n    let hash = await connection.getRecentBlockhash();\n    transaction.recentBlockhash = hash.blockhash;\n  }\n  if(enableSigning) {\n    transaction = await wallet.signTransaction(transaction);\n  }\n  const rawTransaction = transaction.serialize();\n\n  const txid = await connection.sendRawTransaction(\n    rawTransaction,\n    {\n      skipPreflight: true,\n    },\n  );\n  return {txid, rawTransaction};\n}\n\nexport const sendRawTransaction = async ({ connection, txid, rawTransaction }, confirmLevel=\"confirmed\") => {\n  const timeout = 120000;\n  const startTime = getUnixTs();\n  let done = false;\n  (async () => {\n    await sleep(1000);\n    while (!done && getUnixTs() - startTime < timeout) {\n      console.log(\"resending trx...\")\n      connection.sendRawTransaction(rawTransaction, {\n        skipPreflight: true,\n      });\n      await sleep(1000);\n    }\n  })();\n  try {\n    await awaitTransactionSignatureConfirmation2(\n      connection,\n      txid,\n      timeout,\n      confirmLevel,\n    );\n    // notify(successMessage);\n  } catch (err) {\n    if (err.timeout) {\n      throw new Error(\"Transaction timed out\");\n      // notify(txid+\" \"+ \" - Timed out\", \"error\");\n    }\n    throw new Error(\"Transaction Failed\");\n    // notify(txid+\" \"+failMessage, \"error\");\n  } finally {\n    done = true;\n  }\n}\n\nexport const sendSignedTransactionAndNotify = async ({ connection, transaction, successMessage, failMessage, wallet, signature, confirmLevel = 'confirmed', enableSigning = true}) => {\n  const {txid, rawTransaction} = await doSomething({connection, transaction, wallet, enableSigning});\n  // const txid = '5hQVbhaG5Ybv7GvVSUrzXnSzyVZihQ6ZZZvQj1DFbbABN8cE9mnaxi4ngzFF48FpMDK623rWSeyFmt47zs4pietL';\n  // await notifyTrx(txid);\n  // const resolveWithSomeData = new Promise(resolve => setTimeout(() => resolve(\"world\"), 5000));\n  console.log(\"trx :\", `${TRX_URL}${txid}`)\n  await new Promise(function (resolve, reject) {\n    toast.promise(\n      (async () => {\n       try {\n          await sendRawTransaction({connection, txid, rawTransaction}, confirmLevel)\n          // await resolveWithSomeData;\n          resolve(true)\n       } catch (error) {\n         reject(error)\n         throw error\n       }\n      })(),\n      {\n        pending: {\n          render(){\n            return <div className=\"processing-transaction\">\n              <div>\n                <h2>Processing transction ...{`  `}</h2>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${TRX_URL}${txid}`}> View on explorer</a>\n              </div>\n            </div>\n          },\n        },\n        success: {\n          render({ data }) {\n            return <div className=\"processing-transaction\">\n              <div>\n                <span className=\"icon green\">\n                <span className=\"iconify\" data-icon=\"teenyicons:tick-circle-solid\"></span>\n                </span>\n              </div>\n              <div>\n                <h2>{successMessage}</h2>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${TRX_URL}${txid}`}> View on explorer</a>\n              </div>\n            </div>\n          },\n          icon: false\n        },\n        error: {\n          render({data}){\n            // When the promise reject, data will contains the error\n            return <div className=\"processing-transaction\">\n              <div>\n                <span className=\"icon red\">\n                <span className=\"iconify\" data-icon=\"akar-icons:circle-x-fill\"></span>\n                </span>\n              </div>\n              <div>\n                <h2>{JSON.stringify(data?.message ?? {}).includes('timed') ? data.message : failMessage}</h2>\n                <a target=\"_blank\" rel=\"noopener noreferrer\" href={`${TRX_URL}${txid}`}> View on explorer</a>\n              </div>\n            </div>\n          },\n          icon: false\n        }\n      },\n      {\n        position: \"bottom-left\",\n        autoClose: 4000,\n        className: 'processing-transaction'\n      }\n    )\n  })\n  // console.log('Latency', txid, getUnixTs() - startTime);\n  return txid;\n}\n\n\nexport async function awaitTransactionSignatureConfirmation2(connection, txid, timeout, confirmLevel = 'confirmed') {\n  let done = false;\n\n  const confirmLevels = ['finalized'];\n\n  if (confirmLevel === 'confirmed') {\n    confirmLevels.push('confirmed');\n  } else if (confirmLevel === 'processed') {\n    confirmLevels.push('confirmed');\n    confirmLevels.push('processed');\n  }\n  const result = await new Promise((resolve, reject) => {\n    (async () => {\n      setTimeout(() => {\n        if (done) {\n          return;\n        }\n        done = true;\n        // console.log('Timed out for txid', txid);\n        reject({ timeout: true });\n      }, timeout);\n      try {\n        connection.onSignature(\n          txid,\n          (result) => {\n            // console.log('WS confirmed', txid, result);\n            done = true;\n            if (result.err) {\n              reject(result.err);\n            } else {\n              resolve(result);\n            }\n          },\n          'processed',\n        );\n        // console.log('Set up WS connection', txid);\n      } catch (e) {\n        done = true;\n        // console.log('WS error in setup', txid, e);\n      }\n      while (!done) {\n        // eslint-disable-next-line no-loop-func\n        (async () => {\n          try {\n            const signatureStatuses = await connection.getSignatureStatuses([txid]);\n            const result = signatureStatuses && signatureStatuses.value[0];\n            if (!done) {\n              if (!result) {\n                // console.log('REST null result for', txid, result);\n              } else if (result.err) {\n                // console.log('REST error for', txid, result);\n                done = true;\n                reject(result.err);\n              } else if (!(result.confirmations || confirmLevels.includes(result.confirmationStatus))) {\n                // console.log('REST not confirmed', txid, result);\n              } else {\n                // console.log('REST confirmed', txid, result);\n                done = true;\n                resolve(result);\n              }\n            }\n          } catch (e) {\n            if (!done) {\n              console.log('REST connection error: txid', txid, e);\n            }\n          }\n        })();\n        await sleep(1000);\n      }\n    })();\n  });\n\n  done = true;\n  return result;\n}"]},"metadata":{},"sourceType":"module"}