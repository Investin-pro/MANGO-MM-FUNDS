{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/OrcaSwap.js\",\n    _s = $RefreshSig$();\n\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport React, { useState, useEffect } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, idsIndex } from '../utils/constants';\nimport { devnet_pools, raydiumPools } from '../utils/pools';\nimport { AMM_INFO_LAYOUT_V4, FUND_DATA, PLATFORM_DATA } from '../utils/programLayouts';\nimport { TokenAmount } from '../utils/safe-math';\nimport { NATIVE_SOL, TEST_TOKENS, TOKENS } from '../utils/tokens';\nimport { createAssociatedTokenAccountIfNotExist, createTokenAccountIfNotExist, findAssociatedTokenAddress, sendNewTransaction, signAndSendTransaction } from '../utils/web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const OrcaSwap = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n\n  const swapInstruction = async (poolProgramId, // tokenProgramId,\n  // amm\n  ammId, ammAuthority, ammOpenOrders, ammTargetOrders, poolCoinTokenAccount, poolPcTokenAccount, // serum\n  serumProgramId, serumMarket, serumBids, serumAsks, serumEventQueue, serumCoinVaultAccount, serumPcVaultAccount, serumVaultSigner, // user\n  userSourceTokenAccount, userDestTokenAccount, userOwner, manager, amountIn, minAmountOut) => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    const dataLayout = struct([u8('instruction1'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')]);\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundStateAcc,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: manager,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: poolProgramId,\n      isSigner: false,\n      isWritable: true\n    }, // spl token\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: true\n    }, // amm\n    {\n      pubkey: ammId,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammAuthority,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammOpenOrders,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammTargetOrders,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolCoinTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolPcTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, // serum\n    {\n      pubkey: serumProgramId,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumMarket,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumBids,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumAsks,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumEventQueue,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumCoinVaultAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumPcVaultAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumVaultSigner,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userSourceTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userDestTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userOwner,\n      isSigner: false,\n      isWritable: true\n    }];\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction1: 5,\n      instruction: 9,\n      amountIn,\n      minAmountOut\n    }, data);\n    console.log(\"prog_id:: \", programId);\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  };\n\n  const swapTokens = async (connection, wallet, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amount, slippage, tradeSide) => {\n    const transaction = new Transaction();\n    const signers = [];\n    const owner = wallet.publicKey;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const { amountIn, amountOut } = getSwapOutAmount(poolInfo, fromCoinMint, toCoinMint, amount, slippage)\n\n    let amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false);\n    let amountOut = new TokenAmount(1, poolInfo.coin.decimals);\n\n    if (tradeSide === \"sell\") {\n      amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false);\n      amountOut = new TokenAmount(1, poolInfo.coin.decimals);\n    } else {\n      amountIn = new TokenAmount(amount, poolInfo.pc.decimals, false);\n      amountOut = new TokenAmount(1, poolInfo.pc.decimals);\n    }\n\n    let fromMint = fromCoinMint;\n    let toMint = toCoinMint;\n\n    if (fromMint === NATIVE_SOL.mintAddress) {\n      fromMint = ids.tokens[4].mintAddress;\n    }\n\n    if (toMint === NATIVE_SOL.mintAddress) {\n      toMint = ids.tokens[4].mintAddress;\n    }\n\n    const newFromTokenAccount = fromTokenAccount;\n    const newToTokenAccount = toTokenAccount;\n    let instruction = await swapInstruction(poolInfo.programId, new PublicKey(poolInfo.ammId), new PublicKey(poolInfo.ammAuthority), new PublicKey(poolInfo.ammOpenOrders), new PublicKey(poolInfo.ammTargetOrders), new PublicKey(poolInfo.poolCoinTokenAccount), new PublicKey(poolInfo.poolPcTokenAccount), poolInfo.serumProgramId, new PublicKey(poolInfo.serumMarket), new PublicKey(poolInfo.serumBids), new PublicKey(poolInfo.serumAsks), new PublicKey(poolInfo.serumEventQueue), new PublicKey(poolInfo.serumCoinVaultAccount), new PublicKey(poolInfo.serumPcVaultAccount), new PublicKey(poolInfo.serumVaultSigner), newFromTokenAccount, newToTokenAccount, fundPDA[0], owner, Math.floor(amountIn.toWei().toNumber()), Math.floor(amountOut.toWei().toNumber()));\n    transaction.add(instruction);\n    transaction.feePayer = owner;\n    console.log(\"trnsaction:: \", transaction);\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`); //return await sendNewTransaction(connection, wallet, transaction, signers)\n  };\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const [amountIn, setAmountIn] = useState(0); //const [selectedFirstToken, setSelectedFirstToken] = useState('RAY-USDT');\n\n  const [selectedFirstToken, setSelectedFirstToken] = useState('SRM-USDC');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [platformData, setPlatformData] = useState(0);\n  const [fundData, setFundData] = useState(0);\n  const [tokenList, setTokenList] = useState([]);\n  const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('');\n  useEffect(() => {\n    (async () => {\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n      if (!platformDataAcc) {\n        alert('platform not initialized');\n        return;\n      }\n\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data);\n      console.log(\"platformData::\", platformData);\n      setPlatformData(platformData);\n      const platformTokens = platformData === null || platformData === void 0 ? void 0 : platformData.token_list; // console.log(\"platformTokens::\",platformTokens);\n\n      let pt = [];\n\n      if (platformTokens !== null && platformTokens !== void 0 && platformTokens.length) {\n        pt = platformTokens.map(i => {\n          var _i$decimals;\n\n          return {\n            symbol: ids.tokens.find(k => k.mintAddress === i.mint.toBase58()),\n            mintAddress: i.mint.toBase58(),\n            decimals: (_i$decimals = i.decimals) === null || _i$decimals === void 0 ? void 0 : _i$decimals.toString()\n          };\n        });\n      } // console.log(\"platform tokens::\",pt);\n\n\n      const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n      if (!key) {\n        // alert(\"connect wallet\")\n        return;\n      }\n\n      const fundStateAcc = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n      console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58());\n      setFundStateAccount(fundStateAcc.toBase58());\n      const fundDataAcc = await connection.getAccountInfo(fundStateAcc);\n      console.log(\"fundDataAcc::\", fundDataAcc);\n\n      if (fundDataAcc == null) {\n        alert(\"fundDataAcc info not found\");\n        return;\n      }\n\n      const fundData = FUND_DATA.decode(fundDataAcc.data);\n      console.log(\"fundData::\", fundData);\n      setFundData(fundData);\n      const fundTokens = fundData === null || fundData === void 0 ? void 0 : fundData.tokens;\n      console.log(\"fundTokens ::\", fundTokens);\n      let t = [];\n\n      if (fundTokens !== null && fundTokens !== void 0 && fundTokens.length) {\n        t = fundTokens.map(i => pt[i.index]);\n      }\n\n      console.log(\"fundTokens tokens::\", t);\n      setTokenList(t);\n    })();\n  }, [walletProvider]);\n\n  const handleBuy = async () => {\n    // const ammInfo = await connection.getAccountInfo(new PublicKey('6Xec3XR8NqNWbn6CFtGr9DbdKqSunzbXFFRiRpmxPxF2'))\n    // const ammData = AMM_INFO_LAYOUT_V4.decode(ammInfo.data)\n    // console.log(\"amm info:: \", ammData)\n    const poolInfo = raydiumPools.find(p => p.name === selectedFirstToken);\n\n    if (!poolInfo) {\n      alert(\"poolInfo not found\");\n      return;\n    }\n\n    const fromCoinMint = poolInfo.pc.mintAddress;\n    const toCoinMint = poolInfo.coin.mintAddress;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    console.log(`fundPDA :::: `, fundPDA);\n    const fromTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(fromCoinMint));\n    const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoinMint));\n    console.log(`poolInfo ::: `, poolInfo);\n    console.log(`fromCoinMint ::: `, fromCoinMint);\n    console.log(`toCoinMint ::: `, toCoinMint);\n    console.log(`fromTokenAccount ::: `, fromTokenAccount);\n    console.log(`toTokenAccount ::: `, fromTokenAccount);\n    const txId = await swapTokens(connection, walletProvider, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amountIn, 1, \"buy\");\n    console.log(`txId :::: `, txId);\n  };\n\n  const handleSell = async () => {\n    const poolInfo = raydiumPools.find(p => p.name === selectedFirstToken);\n\n    if (!poolInfo) {\n      alert(\"poolInfo not found\");\n      return;\n    }\n\n    console.log(\"pool info:: \", poolInfo);\n    const toCoinMint = poolInfo.pc.mintAddress;\n    const fromCoinMint = poolInfo.coin.mintAddress;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    console.log(`fundPDA :::: `, fundPDA);\n    const fromTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(fromCoinMint));\n    const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoinMint));\n    console.log(`poolInfo ::: `, poolInfo);\n    console.log(`fromCoinMint ::: `, fromCoinMint);\n    console.log(`toCoinMint ::: `, toCoinMint);\n    console.log(`fromTokenAccount ::: `, fromTokenAccount);\n    console.log(`toTokenAccount ::: `, fromTokenAccount);\n    const txId = await swapTokens(connection, walletProvider, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amountIn, 1, \"sell\");\n    console.log(`txId :::: `, txId);\n  };\n\n  const handleFirstTokenSelect = event => {\n    setSelectedFirstToken(`${event.target.value}-USDC`);\n    console.log(`${event.target.value}-USDC :::: `, `${event.target.value}-USDC`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Orca Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 334,\n      columnNumber: 7\n    }, this), \"fundStateAccount : \", fundStateAccount, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), \"Swap ::: \", selectedFirstToken, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 338,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"tokens\",\n      children: \"From Token:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 349,\n      columnNumber: 7\n    }, this), \"amount : \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amountIn,\n      onChange: e => setAmountIn(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 352,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      \"margin-right\": \"10px\",\n      onClick: handleBuy,\n      children: \"Buy\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 354,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSell,\n      children: \"Sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 355,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 333,\n    columnNumber: 5\n  }, this);\n};\n\n_s(OrcaSwap, \"oBHae27qswOyOz/qVcfkVcdBw1s=\");\n\n_c = OrcaSwap;\n\nvar _c;\n\n$RefreshReg$(_c, \"OrcaSwap\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/OrcaSwap.js"],"names":["IDS","PublicKey","Transaction","TransactionInstruction","nu64","struct","u8","React","useState","useEffect","GlobalState","connection","programId","TOKEN_PROGRAM_ID","FUND_ACCOUNT_KEY","LIQUIDITY_POOL_PROGRAM_ID_V4","platformStateAccount","idsIndex","devnet_pools","raydiumPools","AMM_INFO_LAYOUT_V4","FUND_DATA","PLATFORM_DATA","TokenAmount","NATIVE_SOL","TEST_TOKENS","TOKENS","createAssociatedTokenAccountIfNotExist","createTokenAccountIfNotExist","findAssociatedTokenAddress","sendNewTransaction","signAndSendTransaction","OrcaSwap","ids","swapInstruction","poolProgramId","ammId","ammAuthority","ammOpenOrders","ammTargetOrders","poolCoinTokenAccount","poolPcTokenAccount","serumProgramId","serumMarket","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceTokenAccount","userDestTokenAccount","userOwner","manager","amountIn","minAmountOut","key","walletProvider","publicKey","alert","fundStateAcc","createWithSeed","dataLayout","keys","pubkey","isSigner","isWritable","data","Buffer","alloc","span","encode","instruction1","instruction","console","log","swapTokens","wallet","poolInfo","fromCoinMint","toCoinMint","fromTokenAccount","toTokenAccount","amount","slippage","tradeSide","transaction","signers","owner","fundPDA","findProgramAddress","toBuffer","coin","decimals","amountOut","pc","fromMint","toMint","mintAddress","tokens","newFromTokenAccount","newToTokenAccount","Math","floor","toWei","toNumber","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","s","setAmountIn","selectedFirstToken","setSelectedFirstToken","fundStateAccount","setFundStateAccount","platformData","setPlatformData","fundData","setFundData","tokenList","setTokenList","selectedTokenSymbol","setSelectedTokenSymbol","platformDataAcc","getAccountInfo","decode","platformTokens","token_list","pt","length","map","i","symbol","find","k","mint","toBase58","toString","fundDataAcc","fundTokens","t","index","handleBuy","p","name","txId","handleSell","handleFirstTokenSelect","event","target","value","e"],"mappings":"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","sourcesContent":["import { IDS } from '@blockworks-foundation/mango-client'\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js'\nimport { nu64, struct, u8 } from 'buffer-layout'\nimport React, { useState , useEffect} from 'react'\nimport { GlobalState } from '../store/globalState'\nimport { connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, idsIndex } from '../utils/constants'\nimport { devnet_pools, raydiumPools } from '../utils/pools'\nimport { AMM_INFO_LAYOUT_V4, FUND_DATA, PLATFORM_DATA } from '../utils/programLayouts'\nimport { TokenAmount } from '../utils/safe-math'\nimport { NATIVE_SOL, TEST_TOKENS, TOKENS } from '../utils/tokens'\nimport { createAssociatedTokenAccountIfNotExist, createTokenAccountIfNotExist, findAssociatedTokenAddress, sendNewTransaction, signAndSendTransaction } from '../utils/web3'\n\nexport const OrcaSwap = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n  const swapInstruction = async (\n    poolProgramId,\n    // tokenProgramId,\n    // amm\n    ammId,\n    ammAuthority,\n    ammOpenOrders,\n    ammTargetOrders,\n    poolCoinTokenAccount,\n    poolPcTokenAccount,\n    // serum\n    serumProgramId,\n    serumMarket,\n    serumBids,\n    serumAsks,\n    serumEventQueue,\n    serumCoinVaultAccount,\n    serumPcVaultAccount,\n    serumVaultSigner,\n    // user\n    userSourceTokenAccount,\n    userDestTokenAccount,\n    userOwner,\n    manager,\n\n    amountIn,\n    minAmountOut\n  ) => {\n\n    const key = walletProvider?.publicKey;  \n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(\n      key,\n      FUND_ACCOUNT_KEY,\n      programId,\n    );\n\n    const dataLayout = struct([u8('instruction1'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')])\n\n    const keys = [\n      { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n      { pubkey: fundStateAcc, isSigner: false, isWritable: true },\n      { pubkey: manager, isSigner: true, isWritable: true },\n\n      { pubkey: poolProgramId, isSigner: false, isWritable: true },\n\n      // spl token\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n      // amm\n      { pubkey: ammId, isSigner: false, isWritable: true },\n      { pubkey: ammAuthority, isSigner: false, isWritable: true },\n      { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\n      { pubkey: ammTargetOrders, isSigner: false, isWritable: true },\n      { pubkey: poolCoinTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: poolPcTokenAccount, isSigner: false, isWritable: true },\n      // serum\n      { pubkey: serumProgramId, isSigner: false, isWritable: true },\n      { pubkey: serumMarket, isSigner: false, isWritable: true },\n      { pubkey: serumBids, isSigner: false, isWritable: true },\n      { pubkey: serumAsks, isSigner: false, isWritable: true },\n      { pubkey: serumEventQueue, isSigner: false, isWritable: true },\n      { pubkey: serumCoinVaultAccount, isSigner: false, isWritable: true },\n      { pubkey: serumPcVaultAccount, isSigner: false, isWritable: true },\n      { pubkey: serumVaultSigner, isSigner: false, isWritable: true },\n\n      { pubkey: userSourceTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: userDestTokenAccount, isSigner: false, isWritable: true },\n      { pubkey: userOwner, isSigner: false, isWritable: true }\n    ]\n\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction1: 5,\n        instruction: 9,\n        amountIn,\n        minAmountOut\n      },\n      data\n    )\n\n    console.log(\"prog_id:: \", programId)\n\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    })\n  }\n\n  const swapTokens = async (\n    connection,\n    wallet,\n    poolInfo,\n    fromCoinMint,\n    toCoinMint,\n    fromTokenAccount,\n    toTokenAccount,\n    amount,\n    slippage,\n    tradeSide\n  ) => {\n    const transaction = new Transaction()\n    const signers = []\n\n    const owner = wallet.publicKey\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    // const { amountIn, amountOut } = getSwapOutAmount(poolInfo, fromCoinMint, toCoinMint, amount, slippage)\n    let amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false)\n    let amountOut = new TokenAmount(1, poolInfo.coin.decimals)\n    if (tradeSide === \"sell\") {\n      amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false)\n      amountOut = new TokenAmount(1, poolInfo.coin.decimals)\n    } else {\n      amountIn = new TokenAmount(amount, poolInfo.pc.decimals, false)\n      amountOut = new TokenAmount(1, poolInfo.pc.decimals)\n    }\n\n    let fromMint = fromCoinMint\n    let toMint = toCoinMint\n\n    if (fromMint === NATIVE_SOL.mintAddress) {\n      fromMint = ids.tokens[4].mintAddress\n    }\n    if (toMint === NATIVE_SOL.mintAddress) {\n      toMint = ids.tokens[4].mintAddress\n    }\n\n    const newFromTokenAccount = fromTokenAccount\n    const newToTokenAccount = toTokenAccount\n\n    let instruction = await\n      swapInstruction(\n        poolInfo.programId,\n        new PublicKey(poolInfo.ammId),\n        new PublicKey(poolInfo.ammAuthority),\n        new PublicKey(poolInfo.ammOpenOrders),\n        new PublicKey(poolInfo.ammTargetOrders),\n        new PublicKey(poolInfo.poolCoinTokenAccount),\n        new PublicKey(poolInfo.poolPcTokenAccount),\n        poolInfo.serumProgramId,\n        new PublicKey(poolInfo.serumMarket),\n        new PublicKey(poolInfo.serumBids),\n        new PublicKey(poolInfo.serumAsks),\n        new PublicKey(poolInfo.serumEventQueue),\n        new PublicKey(poolInfo.serumCoinVaultAccount),\n        new PublicKey(poolInfo.serumPcVaultAccount),\n        new PublicKey(poolInfo.serumVaultSigner),\n        newFromTokenAccount,\n        newToTokenAccount,\n        fundPDA[0],\n        owner,\n        Math.floor(amountIn.toWei().toNumber()),\n        Math.floor(amountOut.toWei().toNumber())\n      )\n    transaction.add(instruction)\n    transaction.feePayer = owner;\n    console.log(\"trnsaction:: \", transaction)\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n    //return await sendNewTransaction(connection, wallet, transaction, signers)\n  }\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n\n  const [amountIn, setAmountIn] = useState(0);\n  //const [selectedFirstToken, setSelectedFirstToken] = useState('RAY-USDT');\n  const [selectedFirstToken, setSelectedFirstToken] = useState('SRM-USDC');\n\n   const [fundStateAccount, setFundStateAccount] = useState('');\n   const [platformData, setPlatformData] = useState(0)\n\n  const [fundData, setFundData] = useState(0)\n  const [tokenList, setTokenList] = useState([])\n  const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('')\n   useEffect(  ()=> {\n     (async () => {\n\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n      if(!platformDataAcc){\n        alert('platform not initialized')\n        return;\n      }\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data)\n      console.log(\"platformData::\",platformData);\n      setPlatformData(platformData)\n      const platformTokens = platformData?.token_list;\n      // console.log(\"platformTokens::\",platformTokens);\n\n      let pt = []; \n      if(platformTokens?.length) {\n        pt = platformTokens.map( (i) => {\n          return {\n            symbol: ids.tokens.find( k => k.mintAddress ===i.mint.toBase58()),\n            mintAddress: i.mint.toBase58(),\n            decimals: i.decimals?.toString()\n          }\n        })\n      } \n      // console.log(\"platform tokens::\",pt);\n\n\n      const key = walletProvider?.publicKey;  \n        if (!key ) {\n          // alert(\"connect wallet\")\n          return;\n        }\n        const fundStateAcc = await PublicKey.createWithSeed(\n          key,\n          FUND_ACCOUNT_KEY,\n          programId,\n        );\n        console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58())\n        setFundStateAccount(fundStateAcc.toBase58())\n\n        const fundDataAcc = await connection.getAccountInfo(fundStateAcc);\n        console.log(\"fundDataAcc::\",fundDataAcc);\n        if (fundDataAcc == null)\n        {\n           alert(\"fundDataAcc info not found\")\n           return;\n        }\n         const fundData = FUND_DATA.decode(fundDataAcc.data)\n         console.log(\"fundData::\",fundData);\n         setFundData(fundData)\n         const fundTokens = fundData?.tokens;\n         console.log(\"fundTokens ::\",fundTokens);\n\n         let t = []; \n         if(fundTokens?.length){\n           t = fundTokens.map( (i) => pt[i.index] )\n         } \n         console.log(\"fundTokens tokens::\",t);\n\n         setTokenList(t)\n     })()\n     \n   },[walletProvider])\n\n  const handleBuy = async () => {\n    // const ammInfo = await connection.getAccountInfo(new PublicKey('6Xec3XR8NqNWbn6CFtGr9DbdKqSunzbXFFRiRpmxPxF2'))\n    // const ammData = AMM_INFO_LAYOUT_V4.decode(ammInfo.data)\n\n    // console.log(\"amm info:: \", ammData)\n\n\n    const poolInfo = raydiumPools.find(p => p.name === selectedFirstToken);\n    if(!poolInfo){\n      alert(\"poolInfo not found\")\n      return;\n    }\n    const fromCoinMint = poolInfo.pc.mintAddress;\n    const toCoinMint = poolInfo.coin.mintAddress;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    console.log(`fundPDA :::: `, fundPDA)\n    const fromTokenAccount = await findAssociatedTokenAddress( fundPDA[0], new PublicKey(fromCoinMint));\n    const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoinMint));\n\n    console.log(`poolInfo ::: `, poolInfo)\n    console.log(`fromCoinMint ::: `, fromCoinMint)\n    console.log(`toCoinMint ::: `, toCoinMint)\n    console.log(`fromTokenAccount ::: `, fromTokenAccount)\n    console.log(`toTokenAccount ::: `, fromTokenAccount)\n\n    const txId = await swapTokens(connection, walletProvider, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amountIn, 1, \"buy\");\n\n    console.log(`txId :::: `, txId)\n  }\n\n  const handleSell = async () => {\n\n    const poolInfo = raydiumPools.find(p => p.name === selectedFirstToken);\n    if(!poolInfo){\n      alert(\"poolInfo not found\")\n      return;\n    }\n\n    console.log(\"pool info:: \", poolInfo)\n    const toCoinMint = poolInfo.pc.mintAddress;\n    const fromCoinMint = poolInfo.coin.mintAddress;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    console.log(`fundPDA :::: `, fundPDA)\n    const fromTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(fromCoinMint));\n    const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoinMint));\n\n    console.log(`poolInfo ::: `, poolInfo)\n    console.log(`fromCoinMint ::: `, fromCoinMint)\n    console.log(`toCoinMint ::: `, toCoinMint)\n    console.log(`fromTokenAccount ::: `, fromTokenAccount)\n    console.log(`toTokenAccount ::: `, fromTokenAccount)\n\n    const txId = await swapTokens(connection, walletProvider, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amountIn, 1, \"sell\");\n\n    console.log(`txId :::: `, txId)\n  }\n\n  const handleFirstTokenSelect = (event) => {\n    setSelectedFirstToken(`${event.target.value}-USDC`);\n    console.log(`${event.target.value}-USDC :::: `, `${event.target.value}-USDC`)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Orca Swap</h4>\n      fundStateAccount : {fundStateAccount}\n      <br />\n      Swap ::: {selectedFirstToken}  \n      <br />\n\n      <label htmlFor=\"tokens\">From Token:</label>\n\n      {/* <select name=\"tokens\" onChange={handleFirstTokenSelect}>\n         {\n          tokenList.map((i,index) => {\n            return (<option key={index} value={i.symbol}>{i.symbol}</option>)\n          })\n        }\n      </select> */}\n      <br />\n\n      amount : {' '}<input type=\"number\" value={amountIn} onChange={(e) => setAmountIn(e.target.value)} />\n      <br />\n    \n      <button margin-right=\"10px\" onClick={handleBuy} >Buy</button>\n      <button onClick={handleSell} >Sell</button>\n    </div>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}