{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst _1 = require(\".\");\n\nconst fixednum_1 = require(\"./fixednum\");\n\nconst big_js_1 = __importDefault(require(\"big.js\"));\n\nconst ZERO = new big_js_1.default(0);\nconst NEG_ONE = new big_js_1.default(-1);\n\nclass PerpAccount {\n  constructor(decoded) {\n    Object.assign(this, decoded);\n  }\n  /**\n   * Get average entry price of current position. Returned value is UI number.\n   * Does not include fees.\n   * Events are sorted latest event first\n   */\n\n\n  getAverageOpenPrice(mangoAccount, // circular import?\n  perpMarket, events) {\n    if (this.basePosition.isZero()) {\n      return ZERO;\n    }\n\n    const basePos = perpMarket.baseLotsToNumber(this.basePosition);\n    const userPk = mangoAccount.publicKey.toString();\n    let currBase = new big_js_1.default(basePos);\n    let openingQuote = ZERO;\n\n    for (const event of events) {\n      let price, baseChange;\n\n      if ('liqor' in event) {\n        const le = event;\n        price = new big_js_1.default(le.price);\n        let quantity = new big_js_1.default(le.quantity);\n\n        if (userPk === le.liqee.toString()) {\n          quantity = quantity.mul(NEG_ONE);\n        }\n\n        if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n          // liquidation that opens\n          baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n        } else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n          // liquidation that opens\n          baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n        } else {\n          // liquidation that closes\n          continue;\n        }\n      } else {\n        const fe = event; // TODO - verify this gives proper UI number\n\n        price = new big_js_1.default(fe.price);\n        let quantity = new big_js_1.default(fe.quantity);\n\n        if (userPk === fe.taker.toString() && fe.takerSide === 'sell' || userPk === fe.maker.toString() && fe.takerSide === 'buy') {\n          quantity = quantity.mul(NEG_ONE);\n        }\n\n        if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n          // Means we are opening long\n          baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n        } else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n          // means we are opening short\n          baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n        } else {\n          // ignore closing trades\n          continue;\n        }\n      }\n\n      openingQuote = openingQuote.sub(baseChange.mul(price));\n      currBase = currBase.sub(baseChange);\n\n      if (currBase.eq(ZERO)) {\n        return openingQuote.div(basePos).abs();\n      }\n    } // If we haven't returned yet, there was an error or missing data\n    // TODO - consider failing silently\n\n\n    throw new Error('Trade history incomplete');\n  }\n  /**\n   * Get price at which you break even. Includes fees.\n   */\n\n\n  getBreakEvenPrice(mangoAccount, // circular import?\n  perpMarket, events) {\n    if (this.basePosition.isZero()) {\n      return ZERO;\n    }\n\n    const basePos = perpMarket.baseLotsToNumber(this.basePosition);\n    const userPk = mangoAccount.publicKey.toString();\n    let currBase = new big_js_1.default(basePos);\n    let totalQuoteChange = ZERO;\n\n    for (const event of events) {\n      let price, baseChange;\n\n      if ('liqor' in event) {\n        // TODO - build cleaner way to distinguish events\n        const le = event;\n        price = new big_js_1.default(le.price);\n        let quantity = new big_js_1.default(le.quantity);\n\n        if (userPk === le.liqee.toString()) {\n          quantity = quantity.mul(NEG_ONE);\n        }\n\n        if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n          // liquidation that opens\n          baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n        } else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n          // liquidation that opens\n          baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n        } else {\n          // liquidation that closes\n          baseChange = quantity;\n        }\n      } else {\n        const fe = event; // TODO - verify this gives proper UI number\n\n        price = new big_js_1.default(fe.price);\n        let quantity = new big_js_1.default(fe.quantity);\n\n        if (userPk === fe.taker.toString() && fe.takerSide === 'sell' || userPk === fe.maker.toString() && fe.takerSide === 'buy') {\n          quantity = quantity.mul(NEG_ONE);\n        }\n\n        if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n          // Means we are opening long\n          baseChange = currBase.lt(quantity) ? currBase : quantity; // get min value\n        } else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n          // means we are opening short\n          baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n        } else {\n          baseChange = quantity;\n        }\n      }\n\n      totalQuoteChange = totalQuoteChange.sub(baseChange.mul(price));\n      currBase = currBase.sub(baseChange);\n\n      if (currBase.eq(ZERO)) {\n        return totalQuoteChange.mul(NEG_ONE).div(basePos);\n      }\n    } // If we haven't returned yet, there was an error or missing data\n    // TODO - consider failing silently\n\n\n    throw new Error('Trade history incomplete');\n  }\n\n  getPnl(perpMarketInfo, perpMarketCache, price) {\n    return fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize)).mul(price).add(this.getQuotePosition(perpMarketCache));\n  }\n\n  getUnsettledFunding(perpMarketCache) {\n    if (this.basePosition.isNeg()) {\n      return fixednum_1.I80F48.fromI64(this.basePosition).mul(perpMarketCache.shortFunding.sub(this.shortSettledFunding));\n    } else {\n      return fixednum_1.I80F48.fromI64(this.basePosition).mul(perpMarketCache.longFunding.sub(this.longSettledFunding));\n    }\n  }\n  /**\n   * Return the quote position after adjusting for unsettled funding\n   */\n\n\n  getQuotePosition(perpMarketCache) {\n    return this.quotePosition.sub(this.getUnsettledFunding(perpMarketCache));\n  }\n\n  simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, baseChange) {\n    const newBase = this.basePosition.add(baseChange);\n    let health = this.quotePosition.sub(fixednum_1.I80F48.fromI64(baseChange.mul(perpMarketInfo.baseLotSize)).mul(price));\n\n    if (newBase.gt(_1.ZERO_BN)) {\n      health = health.add(fixednum_1.I80F48.fromI64(newBase.mul(perpMarketInfo.baseLotSize)).mul(price).mul(assetWeight));\n    } else {\n      health = health.add(fixednum_1.I80F48.fromI64(newBase.mul(perpMarketInfo.baseLotSize)).mul(price).mul(liabWeight));\n    }\n\n    return health;\n  }\n\n  getHealth(perpMarketInfo, price, assetWeight, liabWeight, longFunding, shortFunding) {\n    const bidsHealth = this.simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, this.bidsQuantity);\n    const asksHealth = this.simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, this.asksQuantity.neg());\n    const health = bidsHealth.lt(asksHealth) ? bidsHealth : asksHealth;\n    let x;\n\n    if (this.basePosition.gt(_1.ZERO_BN)) {\n      x = health.sub(longFunding.sub(this.longSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    } else {\n      x = health.add(shortFunding.sub(this.shortSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    }\n\n    return x;\n  }\n\n  getLiabsVal(perpMarketInfo, price, shortFunding, longFunding) {\n    let liabsVal = fixednum_1.ZERO_I80F48;\n\n    if (this.basePosition.lt(_1.ZERO_BN)) {\n      liabsVal = liabsVal.add(fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize)).mul(price));\n    }\n\n    let realQuotePosition = this.quotePosition;\n\n    if (this.basePosition.gt(_1.ZERO_BN)) {\n      realQuotePosition = this.quotePosition.sub(longFunding.sub(this.longSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    } else if (this.basePosition.lt(_1.ZERO_BN)) {\n      realQuotePosition = this.quotePosition.sub(shortFunding.sub(this.shortSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    }\n\n    if (realQuotePosition.lt(fixednum_1.ZERO_I80F48)) {\n      liabsVal = liabsVal.add(realQuotePosition);\n    }\n\n    return liabsVal.neg();\n  }\n\n  getAssetVal(perpMarketInfo, price, shortFunding, longFunding) {\n    let assetsVal = fixednum_1.ZERO_I80F48;\n\n    if (this.basePosition.gt(_1.ZERO_BN)) {\n      assetsVal = assetsVal.add(fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize)).mul(price));\n    }\n\n    let realQuotePosition = this.quotePosition;\n\n    if (this.basePosition.gt(_1.ZERO_BN)) {\n      realQuotePosition = this.quotePosition.sub(longFunding.sub(this.longSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    } else if (this.basePosition.lt(_1.ZERO_BN)) {\n      realQuotePosition = this.quotePosition.sub(shortFunding.sub(this.shortSettledFunding).mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n    }\n\n    if (realQuotePosition.gt(fixednum_1.ZERO_I80F48)) {\n      assetsVal = assetsVal.add(realQuotePosition);\n    }\n\n    return assetsVal;\n  }\n\n  getBasePositionUi(perpMarket) {\n    return perpMarket.baseLotsToNumber(this.basePosition);\n  }\n\n}\n\nexports.default = PerpAccount;","map":{"version":3,"sources":["../../src/PerpAccount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst _1 = require(\".\");\nconst fixednum_1 = require(\"./fixednum\");\nconst big_js_1 = __importDefault(require(\"big.js\"));\nconst ZERO = new big_js_1.default(0);\nconst NEG_ONE = new big_js_1.default(-1);\nclass PerpAccount {\n    constructor(decoded) {\n        Object.assign(this, decoded);\n    }\n    /**\n     * Get average entry price of current position. Returned value is UI number.\n     * Does not include fees.\n     * Events are sorted latest event first\n     */\n    getAverageOpenPrice(mangoAccount, // circular import?\n    perpMarket, events) {\n        if (this.basePosition.isZero()) {\n            return ZERO;\n        }\n        const basePos = perpMarket.baseLotsToNumber(this.basePosition);\n        const userPk = mangoAccount.publicKey.toString();\n        let currBase = new big_js_1.default(basePos);\n        let openingQuote = ZERO;\n        for (const event of events) {\n            let price, baseChange;\n            if ('liqor' in event) {\n                const le = event;\n                price = new big_js_1.default(le.price);\n                let quantity = new big_js_1.default(le.quantity);\n                if (userPk === le.liqee.toString()) {\n                    quantity = quantity.mul(NEG_ONE);\n                }\n                if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n                    // liquidation that opens\n                    baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n                }\n                else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n                    // liquidation that opens\n                    baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n                }\n                else {\n                    // liquidation that closes\n                    continue;\n                }\n            }\n            else {\n                const fe = event;\n                // TODO - verify this gives proper UI number\n                price = new big_js_1.default(fe.price);\n                let quantity = new big_js_1.default(fe.quantity);\n                if ((userPk === fe.taker.toString() && fe.takerSide === 'sell') ||\n                    (userPk === fe.maker.toString() && fe.takerSide === 'buy')) {\n                    quantity = quantity.mul(NEG_ONE);\n                }\n                if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n                    // Means we are opening long\n                    baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n                }\n                else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n                    // means we are opening short\n                    baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n                }\n                else {\n                    // ignore closing trades\n                    continue;\n                }\n            }\n            openingQuote = openingQuote.sub(baseChange.mul(price));\n            currBase = currBase.sub(baseChange);\n            if (currBase.eq(ZERO)) {\n                return openingQuote.div(basePos).abs();\n            }\n        }\n        // If we haven't returned yet, there was an error or missing data\n        // TODO - consider failing silently\n        throw new Error('Trade history incomplete');\n    }\n    /**\n     * Get price at which you break even. Includes fees.\n     */\n    getBreakEvenPrice(mangoAccount, // circular import?\n    perpMarket, events) {\n        if (this.basePosition.isZero()) {\n            return ZERO;\n        }\n        const basePos = perpMarket.baseLotsToNumber(this.basePosition);\n        const userPk = mangoAccount.publicKey.toString();\n        let currBase = new big_js_1.default(basePos);\n        let totalQuoteChange = ZERO;\n        for (const event of events) {\n            let price, baseChange;\n            if ('liqor' in event) {\n                // TODO - build cleaner way to distinguish events\n                const le = event;\n                price = new big_js_1.default(le.price);\n                let quantity = new big_js_1.default(le.quantity);\n                if (userPk === le.liqee.toString()) {\n                    quantity = quantity.mul(NEG_ONE);\n                }\n                if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n                    // liquidation that opens\n                    baseChange = quantity.lt(currBase) ? quantity : currBase; // get min value\n                }\n                else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n                    // liquidation that opens\n                    baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n                }\n                else {\n                    // liquidation that closes\n                    baseChange = quantity;\n                }\n            }\n            else {\n                const fe = event;\n                // TODO - verify this gives proper UI number\n                price = new big_js_1.default(fe.price);\n                let quantity = new big_js_1.default(fe.quantity);\n                if ((userPk === fe.taker.toString() && fe.takerSide === 'sell') ||\n                    (userPk === fe.maker.toString() && fe.takerSide === 'buy')) {\n                    quantity = quantity.mul(NEG_ONE);\n                }\n                if (currBase.gt(ZERO) && quantity.gt(ZERO)) {\n                    // Means we are opening long\n                    baseChange = currBase.lt(quantity) ? currBase : quantity; // get min value\n                }\n                else if (currBase.lt(ZERO) && quantity.lt(ZERO)) {\n                    // means we are opening short\n                    baseChange = currBase.gt(quantity) ? currBase : quantity; // get max value\n                }\n                else {\n                    baseChange = quantity;\n                }\n            }\n            totalQuoteChange = totalQuoteChange.sub(baseChange.mul(price));\n            currBase = currBase.sub(baseChange);\n            if (currBase.eq(ZERO)) {\n                return totalQuoteChange.mul(NEG_ONE).div(basePos);\n            }\n        }\n        // If we haven't returned yet, there was an error or missing data\n        // TODO - consider failing silently\n        throw new Error('Trade history incomplete');\n    }\n    getPnl(perpMarketInfo, perpMarketCache, price) {\n        return fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize))\n            .mul(price)\n            .add(this.getQuotePosition(perpMarketCache));\n    }\n    getUnsettledFunding(perpMarketCache) {\n        if (this.basePosition.isNeg()) {\n            return fixednum_1.I80F48.fromI64(this.basePosition).mul(perpMarketCache.shortFunding.sub(this.shortSettledFunding));\n        }\n        else {\n            return fixednum_1.I80F48.fromI64(this.basePosition).mul(perpMarketCache.longFunding.sub(this.longSettledFunding));\n        }\n    }\n    /**\n     * Return the quote position after adjusting for unsettled funding\n     */\n    getQuotePosition(perpMarketCache) {\n        return this.quotePosition.sub(this.getUnsettledFunding(perpMarketCache));\n    }\n    simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, baseChange) {\n        const newBase = this.basePosition.add(baseChange);\n        let health = this.quotePosition.sub(fixednum_1.I80F48.fromI64(baseChange.mul(perpMarketInfo.baseLotSize)).mul(price));\n        if (newBase.gt(_1.ZERO_BN)) {\n            health = health.add(fixednum_1.I80F48.fromI64(newBase.mul(perpMarketInfo.baseLotSize))\n                .mul(price)\n                .mul(assetWeight));\n        }\n        else {\n            health = health.add(fixednum_1.I80F48.fromI64(newBase.mul(perpMarketInfo.baseLotSize))\n                .mul(price)\n                .mul(liabWeight));\n        }\n        return health;\n    }\n    getHealth(perpMarketInfo, price, assetWeight, liabWeight, longFunding, shortFunding) {\n        const bidsHealth = this.simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, this.bidsQuantity);\n        const asksHealth = this.simPositionHealth(perpMarketInfo, price, assetWeight, liabWeight, this.asksQuantity.neg());\n        const health = bidsHealth.lt(asksHealth) ? bidsHealth : asksHealth;\n        let x;\n        if (this.basePosition.gt(_1.ZERO_BN)) {\n            x = health.sub(longFunding\n                .sub(this.longSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        else {\n            x = health.add(shortFunding\n                .sub(this.shortSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        return x;\n    }\n    getLiabsVal(perpMarketInfo, price, shortFunding, longFunding) {\n        let liabsVal = fixednum_1.ZERO_I80F48;\n        if (this.basePosition.lt(_1.ZERO_BN)) {\n            liabsVal = liabsVal.add(fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize)).mul(price));\n        }\n        let realQuotePosition = this.quotePosition;\n        if (this.basePosition.gt(_1.ZERO_BN)) {\n            realQuotePosition = this.quotePosition.sub(longFunding\n                .sub(this.longSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        else if (this.basePosition.lt(_1.ZERO_BN)) {\n            realQuotePosition = this.quotePosition.sub(shortFunding\n                .sub(this.shortSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        if (realQuotePosition.lt(fixednum_1.ZERO_I80F48)) {\n            liabsVal = liabsVal.add(realQuotePosition);\n        }\n        return liabsVal.neg();\n    }\n    getAssetVal(perpMarketInfo, price, shortFunding, longFunding) {\n        let assetsVal = fixednum_1.ZERO_I80F48;\n        if (this.basePosition.gt(_1.ZERO_BN)) {\n            assetsVal = assetsVal.add(fixednum_1.I80F48.fromI64(this.basePosition.mul(perpMarketInfo.baseLotSize)).mul(price));\n        }\n        let realQuotePosition = this.quotePosition;\n        if (this.basePosition.gt(_1.ZERO_BN)) {\n            realQuotePosition = this.quotePosition.sub(longFunding\n                .sub(this.longSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        else if (this.basePosition.lt(_1.ZERO_BN)) {\n            realQuotePosition = this.quotePosition.sub(shortFunding\n                .sub(this.shortSettledFunding)\n                .mul(fixednum_1.I80F48.fromI64(this.basePosition)));\n        }\n        if (realQuotePosition.gt(fixednum_1.ZERO_I80F48)) {\n            assetsVal = assetsVal.add(realQuotePosition);\n        }\n        return assetsVal;\n    }\n    getBasePositionUi(perpMarket) {\n        return perpMarket.baseLotsToNumber(this.basePosition);\n    }\n}\nexports.default = PerpAccount;\n//# sourceMappingURL=PerpAccount.js.map"]},"metadata":{},"sourceType":"script"}