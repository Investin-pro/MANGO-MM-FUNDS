{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/MigrateFundState.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, priceStateAccount, connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, idsIndex, SYSTEM_PROGRAM_ID, platformStateAccount } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { TEST_TOKENS } from '../utils/tokens';\nimport { FUND_DATA, FUND_PDA_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MigrateState = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const [fundPDA, setFundPDA] = useState(''); // const [fundStateAccount, setFundStateAccount] = useState('');\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const [funds, setFunds] = useState([]);\n  const [oldFunds, setOldFunds] = useState([]);\n\n  const handleGetAllMigratedFunds = async () => {\n    const managers = [];\n    const allFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_PDA_DATA.span\n      } //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n      ]\n    });\n    console.log(\"allFunds::\", allFunds);\n\n    for (const data of allFunds) {\n      const decodedData = FUND_PDA_DATA.decode(data.account.data);\n      const PDA_balance = await connection.getBalance(decodedData.fund_pda, \"max\");\n      console.log(\"PDA_balance:\", PDA_balance);\n      managers.push({\n        fund_v3_index: decodedData.fund_v3_index,\n        fundState: decodedData,\n        fundPDA: decodedData.fund_pda.toBase58(),\n        fundManager: decodedData.manager_account.toBase58(),\n        fundStateAccount: data.pubkey.toBase58(),\n        PDA_balance: PDA_balance // fundName: decodedData.fund_pda.toBase58(),\n        // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n\n      });\n    }\n\n    console.log(\"-----PDA funds:\", managers);\n    setFunds(managers);\n  };\n\n  const handleGetAllNonMigratedFunds = async () => {\n    const managers = [];\n    const allFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      } //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n      ]\n    });\n    console.log(\"All OLD FUND_STATE Funds::\", allFunds);\n\n    for (const data of allFunds) {\n      const decodedData = FUND_DATA.decode(data.account.data);\n      const PDA_balance = await connection.getBalance(decodedData.fund_pda, \"max\");\n      console.log(\"PDA_balance:\", PDA_balance);\n\n      if (decodedData.is_initialized) {\n        managers.push({\n          fund_v3_index: decodedData.fund_v3_index,\n          fundState: decodedData,\n          fundPDA: decodedData.fund_pda.toBase58(),\n          fundManager: decodedData.manager_account.toBase58(),\n          fundStateAccount: data.pubkey.toBase58(),\n          PDA_balance: PDA_balance // fundName: decodedData.fund_pda.toBase58(),\n          // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n\n        });\n      }\n    }\n\n    console.log(\"OLD funds:\", managers);\n    setOldFunds(managers);\n  };\n\n  const handleMigrate = async () => {\n    if (funds.length == 0 || oldFunds.length == 0) {\n      alert(\"first get funds\");\n      return;\n    }\n\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey; // const managerPubkey = new PublicKey('Gyj8YbcA1vENNzhYdtGmJCFi4DELeUCEjhhontbmqZQk');\n    // const fundPDA = await PublicKey.findProgramAddress([managerPubkey.toBuffer()], programId);\n    // const fundStateAccount = await PublicKey.createWithSeed(\n    //   managerPubkey,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n    // let x = await connection.getAccountInfo(fundStateAccount)\n    // if (x == null)\n    // {\n    //   alert(\"fund account not found\")\n    //   return\n    // }\n    // if (fundStateAccount == ''){\n    //   alert(\"get info first!\")\n    //   return\n    // }\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundStateAndPDAS = [// 1\n    {\n      pubkey: new PublicKey('CRpFgJZU1edZMck4ek32CyZ3sRucgVfwCmkrvk88kHSq'),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(''),\n      isSigner: false,\n      isWritable: true\n    }, // 2\n    {\n      pubkey: new PublicKey(''),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(''),\n      isSigner: false,\n      isWritable: true\n    } // // 3\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 4\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 5\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 6\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 7\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 8\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 9\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // // 10\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n    ];\n    const transaction = new Transaction();\n    const dataLayout = struct([u8('instruction'), u8('count')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 23,\n      count: 2\n    }, data);\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SYSTEM_PROGRAM_ID,\n      isSigner: false,\n      isWritable: true\n    }, // {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n    // {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n    ...fundStateAndPDAS];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const migrate_instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(migrate_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx perf: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Migrate State \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMigrate,\n      children: \"Migrate\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 206,\n      columnNumber: 11\n    }, this), \"New State :: \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MigrateState, \"qLUTDV7Tf+76x3shQ9vNCA4239I=\");\n\n_c = MigrateState;\n\nvar _c;\n\n$RefreshReg$(_c, \"MigrateState\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/MigrateFundState.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","priceStateAccount","connection","programId","TOKEN_PROGRAM_ID","FUND_ACCOUNT_KEY","idsIndex","SYSTEM_PROGRAM_ID","platformStateAccount","nu64","struct","u8","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","TEST_TOKENS","FUND_DATA","FUND_PDA_DATA","devnet_pools","updatePoolPrices","IDS","MigrateState","ids","fundPDA","setFundPDA","walletProvider","s","funds","setFunds","oldFunds","setOldFunds","handleGetAllMigratedFunds","managers","allFunds","getProgramAccounts","filters","dataSize","span","console","log","data","decodedData","decode","account","PDA_balance","getBalance","fund_pda","push","fund_v3_index","fundState","toBase58","fundManager","manager_account","fundStateAccount","pubkey","handleGetAllNonMigratedFunds","is_initialized","handleMigrate","length","alert","key","publicKey","fundStateAndPDAS","isSigner","isWritable","transaction","dataLayout","Buffer","alloc","encode","instruction","count","keys","i","migrate_instruction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, priceStateAccount, connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, idsIndex, SYSTEM_PROGRAM_ID, platformStateAccount } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { TEST_TOKENS } from '../utils/tokens'\nimport { FUND_DATA, FUND_PDA_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools'\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\n\nexport const MigrateState = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n    const [fundPDA, setFundPDA] = useState('');\n    // const [fundStateAccount, setFundStateAccount] = useState('');\n\n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n    const [funds, setFunds] = useState([])\n    const [oldFunds, setOldFunds] = useState([])\n\n    const handleGetAllMigratedFunds = async () => {\n      const managers = []\n      const allFunds = await connection.getProgramAccounts(programId, { filters: [\n        { dataSize: FUND_PDA_DATA.span },\n        //  {\n        //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n        // }\n      ] });\n      console.log(\"allFunds::\",allFunds)\n      for (const data of allFunds) {\n          const decodedData = FUND_PDA_DATA.decode(data.account.data);\n          const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n          console.log(\"PDA_balance:\",PDA_balance)\n  \n         \n              managers.push({\n                  fund_v3_index : decodedData.fund_v3_index,\n                  fundState : decodedData,\n                  fundPDA: decodedData.fund_pda.toBase58(),\n                  fundManager: decodedData.manager_account.toBase58(),\n                  fundStateAccount: data.pubkey.toBase58(),\n                  PDA_balance : PDA_balance,\n                  // fundName: decodedData.fund_pda.toBase58(),\n                  // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n              });\n      }\n      console.log(\"-----PDA funds:\",managers);\n  \n      setFunds(managers);\n    }\n\n    const handleGetAllNonMigratedFunds = async () => {\n      const managers = []\n      const allFunds = await connection.getProgramAccounts(programId, { filters: [\n        { dataSize: FUND_DATA.span },\n        //  {\n        //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n        // }\n      ] });\n      console.log(\"All OLD FUND_STATE Funds::\",allFunds)\n    \n      for (const data of allFunds) {\n           const decodedData = FUND_DATA.decode(data.account.data);\n  \n           const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n           console.log(\"PDA_balance:\",PDA_balance)\n\n          if (decodedData.is_initialized) {\n              managers.push({\n                  fund_v3_index : decodedData.fund_v3_index,\n                  fundState : decodedData,\n                  fundPDA: decodedData.fund_pda.toBase58(),\n                  fundManager: decodedData.manager_account.toBase58(),\n                  fundStateAccount: data.pubkey.toBase58(),\n                  PDA_balance : PDA_balance,\n                  // fundName: decodedData.fund_pda.toBase58(),\n                  // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n              });\n          }\n      }\n      console.log(\"OLD funds:\",managers);  \n      setOldFunds(managers);\n    }\n\n\n  const handleMigrate = async () => {\n\n      if(funds.length==0 || oldFunds.length==0){\n        alert(\"first get funds\")\n        return;\n      }\n    \n        const key = walletProvider?.publicKey;\n        // const managerPubkey = new PublicKey('Gyj8YbcA1vENNzhYdtGmJCFi4DELeUCEjhhontbmqZQk');\n        // const fundPDA = await PublicKey.findProgramAddress([managerPubkey.toBuffer()], programId);\n        // const fundStateAccount = await PublicKey.createWithSeed(\n        //   managerPubkey,\n        //   FUND_ACCOUNT_KEY,\n        //   programId,\n        // );\n        // let x = await connection.getAccountInfo(fundStateAccount)\n        // if (x == null)\n        // {\n        //   alert(\"fund account not found\")\n        //   return\n        // }\n        // if (fundStateAccount == ''){\n        //   alert(\"get info first!\")\n        //   return\n        // }\n\n        if (!key) {\n          alert(\"connect wallet\")\n          return;\n        };\n\n        \n      \n        const fundStateAndPDAS = [\n          // 1\n          {pubkey: new PublicKey('CRpFgJZU1edZMck4ek32CyZ3sRucgVfwCmkrvk88kHSq'), isSigner: false, isWritable: true },\n          {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // 2\n          {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 3\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 4\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 5\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 6\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 7\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 8\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 9\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // // 10\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n          // {pubkey: new PublicKey(''), isSigner: false, isWritable: true },\n        ]\n\n        const transaction = new Transaction()\n        const dataLayout = struct([u8('instruction'),u8('count')])\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode({\n          instruction: 23,\n          count : 2\n        },data)\n\n        \n        \n        const keys = [\n        {pubkey: platformStateAccount, isSigner: false, isWritable: true },\n        {pubkey: key, isSigner: true, isWritable: true },\n        {pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: true},\n\n        // {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n        // {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n        ...fundStateAndPDAS\n      ]\n\n      for(let i=0; i<keys.length;i++) {\n        console.log(\"key:\",i, keys[i].pubkey.toBase58())\n      }\n        \n        const migrate_instruction = new TransactionInstruction({\n          keys,\n          programId,\n          data\n        });\n    \n        transaction.add(migrate_instruction);\n        transaction.feePayer = key;\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"tx perf: \", sign)\n        console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n  }\n \n\n\n    return (\n        <div className=\"form-div\">\n            <h4>Migrate State </h4>\n         \n          <br />\n          <button onClick={handleMigrate}>Migrate</button>\n          <br />\n          New State :: {}\n\n        </div>\n      )\n}\n\n    "]},"metadata":{},"sourceType":"module"}