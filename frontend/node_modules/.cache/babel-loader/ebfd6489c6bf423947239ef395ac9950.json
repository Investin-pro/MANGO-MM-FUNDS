{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, SOL_USDC_MARKET, connection, platformStateAccount, priceStateAccount, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID, CLOCK_PROGRAM_ID, MANGO_PROGRAM_ID_V2, MANGO_GROUP_ACCOUNT, MARGIN_ACCOUNT_KEY, ORACLE_BTC_DEVNET, ORACLE_ETH_DEVNET, ORACLE_SOL_DEVNET, ORACLE_SRM_DEVNET, idsIndex, MANGO_TOKENS, PERP_MARKETS } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { devnet_pools, DEV_TOKENS, orcaPools, raydiumPools } from '../utils/pools';\nimport { keyBy } from 'lodash';\nimport { INVESTOR_DATA, PLATFORM_DATA, FUND_DATA, FUND_PDA_DATA } from '../utils/programLayouts';\nimport { updatePoolPrices } from './updatePrices';\nimport { MarginAccountLayout, NUM_MARKETS, MangoGroupLayout } from '../utils/MangoLayout';\nimport { mangoWithdrawInvestor, placeOrder, placeOrder2 } from '../utils/mango';\nimport { TOKENS } from '../utils/tokens';\nimport { IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { closeAccount } from '@project-serum/serum/lib/token-instructions';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nconst getPoolAccounts = () => {\n  return raydiumPools.map(p => {\n    return [{\n      pubkey: new PublicKey(p.poolCoinTokenAccount),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(p.poolPcTokenAccount),\n      isSigner: false,\n      isWritable: true\n    }];\n  });\n};\n\nexport const Withdraw = () => {\n  _s();\n\n  var _investments$investme15, _investments$investme16, _investments$investme17, _investments$investme18, _investments$investme19, _investments$investme20, _investments$investme21, _investments$investme22, _investments$investme23, _investments$investme24, _investments$investme25, _investments$investme26, _investments$investme27, _investments$investme28, _investments$investme29, _investments$investme30, _investments$investme31, _investments$investme32, _investments$investme33;\n\n  const ids = IDS['groups'][idsIndex];\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const [amount, setAmount] = useState(0);\n  const [investments, setInvestments] = useState([]);\n  const [investmentIndex, setInvestmentIndex] = useState(0); // const [investorAddr, setInvestorAddr] = useState('')\n  // const [investorStateAcc, setInvestorStateAcc] = useState('')\n\n  const handleGetAllInvestments = async () => {\n    //  const userkey = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: INVESTOR_DATA.span\n      }, {\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('owner'),\n          bytes: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58()\n        }\n      }]\n    }); // console.log(\"investments::\",investments)\n\n    const newInvestors = [];\n\n    for (const investment of investments) {\n      const invStateData = INVESTOR_DATA.decode(investment.account.data);\n      invStateData['ivnStatePubKey'] = investment.pubkey; //   if (invStateData.is_initialized && invStateData.owner.toBase58() == key.toBase58()) {\n\n      newInvestors.push(invStateData); //   }\n    }\n\n    console.log(\"newInvestors::\", newInvestors);\n    setInvestments(newInvestors);\n  };\n\n  const handleWithdrawSettle = async () => {\n    var _investments$investme, _investments$investme2, _investments$investme3, _investments$investme4;\n\n    const investorStateAcc = (_investments$investme = investments[investmentIndex].ivnStatePubKey) === null || _investments$investme === void 0 ? void 0 : _investments$investme.toBase58();\n    const investorAddr = (_investments$investme2 = investments[investmentIndex].owner) === null || _investments$investme2 === void 0 ? void 0 : _investments$investme2.toBase58();\n    console.log(\"**----handleWithdrawSettle investorStateAcc, investorAddr::\", investorStateAcc, investorAddr);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      console.log(\"connect wallet\");\n      return;\n    }\n\n    ;\n\n    if (((_investments$investme3 = investments[investmentIndex]) === null || _investments$investme3 === void 0 ? void 0 : (_investments$investme4 = _investments$investme3.owner) === null || _investments$investme4 === void 0 ? void 0 : _investments$investme4.toBase58()) != (walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58())) {\n      alert('web3 not done only manager investments');\n      return;\n    }\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n    // console.log(\"fundStateAccount:\",fundStateAccount.toBase58())\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fund_data = FUND_PDA_DATA.decode(fundStateInfo.data);\n    console.log(\"fund_data:\", fund_data);\n    const transaction = new Transaction();\n    let filt_pools = [];\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n    let platData = await connection.getAccountInfo(platformStateAccount);\n    let platform_data = PLATFORM_DATA.decode(platData.data);\n    console.log(\"plat info:: \", platform_data);\n\n    for (let i = 1; i < 8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint; // if(mint.toBase58() === TOKENS.WSOL.mintAddress){\n        //   WSOLWhitelisted=true;\n        // } \n        // else if(mint.toBase58() === TOKENS.MSOL.mintAddress){\n        //   MSOLWhitelisted=true;\n        // }\n\n        if (fund_data.tokens[i].mux === 0) {\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        }\n      }\n    } //send WSOL everytime \n    // if(!WSOLWhitelisted){\n    //   const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n    //   console.log(\"pushing WSOL pool\")\n    //   filt_pools.push(wsol_usdc_pool)\n    // }\n    // if(!MSOLWhitelisted){\n    //   const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n    //   console.log(\"pushing MSOL pool\")\n    //   filt_pools.push(msol_usdc_pool)\n    // }\n\n\n    console.log(\"filt_pools:\", filt_pools);\n    updatePoolPrices(transaction, filt_pools);\n    console.log(\"ids.mangoProgramId:: \", ids.mangoProgramId);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mangoGroup.mangoCache :: \", mangoGroup.mangoCache.toBase58()); // [      perp_market_ai,     // write default_ai if no perp market for i^th index\n    //        bids_ai,            // write default_ai if no perp market for i^th index\n    //        asks_ai,            // write default_ai if no perp market for i^th index\n    //        event_queue_ai,]   //write default_ai if no perp market for i^th index\n\n    let perpKeys = [];\n\n    for (let i = 0; i < 3; i++) {\n      const marketIndex = fund_data.mango_positions.perp_markets[i];\n      console.log(\"marketIndex:\", marketIndex, i);\n      const perpMaketInfo = PERP_MARKETS.find(i => i.perpMarketId == marketIndex);\n      console.log(\"found  perpMaketInfo::\", perpMaketInfo);\n\n      if (marketIndex != 255) {\n        console.log(\"pusing:\", marketIndex, i);\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.publicKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.bidsKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.asksKey),\n          isSigner: false,\n          isWritable: true\n        });\n        perpKeys.push({\n          pubkey: new PublicKey(perpMaketInfo.eventsKey),\n          isSigner: false,\n          isWritable: true\n        });\n      } else {\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n        perpKeys.push({\n          pubkey: PublicKey.default,\n          isSigner: false,\n          isWritable: false\n        });\n      }\n    }\n\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 4\n    }, data);\n    const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    // { pubkey: fundStateAccount, isSigner: false, isWritable: true },\n    {\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(investorStateAcc),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: fund_data.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: MANGO_REFERRER_ACCOUNT,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }, ...perpKeys // 16 accs \n    ];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const isMangoWithdrawRequired = async () => {\n    var _investments$investme5, _investments$investme6;\n\n    const investorStateAcc = (_investments$investme5 = investments[investmentIndex].ivnStatePubKey) === null || _investments$investme5 === void 0 ? void 0 : _investments$investme5.toBase58();\n    const investorAddr = (_investments$investme6 = investments[investmentIndex].owner) === null || _investments$investme6 === void 0 ? void 0 : _investments$investme6.toBase58();\n    console.log(\"**----isMangoWithdrawRequired investorStateAcc,investorAddr::\", investorStateAcc, investorAddr);\n    let investorStateData = await connection.getAccountInfo(investorStateAcc);\n    investorStateData = INVESTOR_DATA.decode(investorStateData.data); // const user_other_token_deposit_debt = investorStateData.margin_debt[1]\n    // zero debts\n    // IMP but rare senario :: when it gets liquidated after partial withdraw \n\n    return !investorStateData.margin_debt[0] && !investorStateData.margin_debt[1];\n  };\n\n  const handleWithdrawFromMango = async () => {\n    var _investments$investme7, _investments$investme8, _investments$investme9, _investments$investme10, _investments$investme11, _investments$investme12;\n\n    const investorStateAcc = (_investments$investme7 = investments[investmentIndex].ivnStatePubKey) === null || _investments$investme7 === void 0 ? void 0 : _investments$investme7.toBase58();\n    const investorAddr = (_investments$investme8 = investments[investmentIndex].owner) === null || _investments$investme8 === void 0 ? void 0 : _investments$investme8.toBase58();\n    console.log(\"**----handleWithdrawFromMango investorStateAcc,investorAddr::\", investorStateAcc, investorAddr);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n\n    if (((_investments$investme9 = investments[investmentIndex]) === null || _investments$investme9 === void 0 ? void 0 : (_investments$investme10 = _investments$investme9.owner) === null || _investments$investme10 === void 0 ? void 0 : _investments$investme10.toBase58()) != (walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58())) {\n      alert('web3 not done only manager investments');\n      return;\n    }\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0]);\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:\", fundState); // let investorStateData = await connection.getAccountInfo(investorStateAcc);\n    // investorStateData = INVESTOR_DATA.decode(investorStateData.data)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let usdcnodeBankInfo = await connection.getAccountInfo(new PublicKey(\"BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh\"));\n    console.log(\"usdcnodeBankInfo:\", usdcnodeBankInfo);\n    let usdcnodeBank = NodeBankLayout.decode(usdcnodeBankInfo.data);\n    const deposit_index = parseInt((_investments$investme11 = investments[investmentIndex]) === null || _investments$investme11 === void 0 ? void 0 : _investments$investme11.margin_position_id[1].toString());\n    const user_other_token_deposit_debt = (_investments$investme12 = investments[investmentIndex]) === null || _investments$investme12 === void 0 ? void 0 : _investments$investme12.margin_debt[1];\n    console.log(\"deposit_index::::\", deposit_index);\n    console.log(\"user_other_token_deposit_debt::::\", user_other_token_deposit_debt);\n    const transaction = new Transaction();\n    const usdcInvestorTokenAcc = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(MANGO_TOKENS.USDC.mintAddress), walletProvider.publicKey, transaction);\n    console.log(\"usdcInvestorTokenAcc::::\", usdcInvestorTokenAcc.toBase58());\n    let otherDespoitTokenKeys = [];\n\n    if (user_other_token_deposit_debt != 0) {\n      //getting token info if the deposit_index token at mango\n      const deposit_index_token_info = Object.values(MANGO_TOKENS).find(t => t.mangoTokenIndex == deposit_index);\n      console.log(\"deposit_index_token_info:\", deposit_index_token_info);\n      const despositTokenInvestortokenAcc = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(deposit_index_token_info.mintKey), walletProvider.publicKey, transaction);\n      console.log(\"despositTokenInvestortokenAcc::::\", despositTokenInvestortokenAcc.toBase58());\n      let tokennodeBankInfo = await connection.getAccountInfo(new PublicKey(deposit_index_token_info.nodeKeys[0]));\n      let tokennodeBank = NodeBankLayout.decode(tokennodeBankInfo.data);\n      otherDespoitTokenKeys.push({\n        pubkey: new PublicKey(deposit_index_token_info.rootKey),\n        isSigner: false,\n        isWritable: false\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: new PublicKey(deposit_index_token_info.nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: tokennodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: despositTokenInvestortokenAcc,\n        isSigner: false,\n        isWritable: true\n      });\n    } else {\n      otherDespoitTokenKeys.push({\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: false\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: false\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: false\n      });\n      otherDespoitTokenKeys.push({\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 14\n    }, data);\n    const keys = [{\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(investorStateAcc),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_positions.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(MANGO_TOKENS.USDC.rootKey),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(MANGO_TOKENS.USDC.nodeKeys[0]),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: usdcnodeBank.vault,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: usdcInvestorTokenAcc,\n      isSigner: false,\n      isWritable: true\n    }, ...otherDespoitTokenKeys, {\n      pubkey: mangoGroup.signerKey,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: PublicKey.default,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleWithdrawFromFund = async () => {\n    var _investments$investme13, _investments$investme14;\n\n    const investorStateAcc = (_investments$investme13 = investments[investmentIndex].ivnStatePubKey) === null || _investments$investme13 === void 0 ? void 0 : _investments$investme13.toBase58();\n    const investorAddr = (_investments$investme14 = investments[investmentIndex].owner) === null || _investments$investme14 === void 0 ? void 0 : _investments$investme14.toBase58();\n    console.log(\"**----handleWithdrawFromFund investorStateAcc::\", investorStateAcc);\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      console.log(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); //  const fundStateAccount = await PublicKey.createWithSeed(\n    //         key,\n    //         FUND_ACCOUNT_KEY,\n    //         programId,\n    //     );\n    // if (!fundStateAccount) {\n    //   console.log(\"no funds found\")\n    //   return\n    // }\n\n    const transaction = new Transaction(); // const accountInfo = await connection.getAccountInfo(new PublicKey(fundStateAccount));\n    // const fund_data = FUND_DATA.decode(accountInfo.data);\n\n    const RPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const investerStateAccount = new PublicKey(investorStateAcc);\n    const routerAssociatedTokenAddress = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), RPDA[0], transaction);\n    const investorBaseTokenAccounts = [];\n    const fundAssociatedTokenAddresses = [];\n    const investorTokens = investments[investmentIndex].token_indexes;\n    console.log(\"investorTokens:\", investorTokens);\n    const investorTokenDebts = investments[investmentIndex].token_debts;\n    console.log(\"investorTokenDebts:\", investorTokenDebts);\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n    if (!platformDataAcc) {\n      alert('platform state not initilaized');\n      return;\n    }\n\n    const platformState = PLATFORM_DATA.decode(platformDataAcc.data);\n    let wsolTokenAccount;\n\n    for (let i = 0; i < investments[investmentIndex].token_indexes.length; i++) {\n      var _platformState$token_;\n\n      // if wsol then save to close account\n      if (((_platformState$token_ = platformState.token_list[investorTokens[i]]) === null || _platformState$token_ === void 0 ? void 0 : _platformState$token_.mint.toBase58()) === TOKENS.WSOL.mintAddress && investorTokenDebts[i] > 0) {\n        wsolTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(TOKENS.WSOL.mintAddress));\n      } // const invAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, key, transaction);\n\n\n      investorBaseTokenAccounts.push({\n        pubkey: investorTokenDebts[i] > 0 || i === 0 ? await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, key, transaction) : PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      }); // const fundAssToken = await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, new PublicKey(fundPDA), transaction) ;\n\n      fundAssociatedTokenAddresses.push({\n        pubkey: investorTokenDebts[i] > 0 || i === 0 ? await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, fundPDA[0], transaction) : PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      });\n    }\n\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 3\n    }, data);\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: investerStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: routerAssociatedTokenAddress,\n      isSigner: false,\n      isWritable: true\n    }, // Router Base Token Account\n    // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n    {\n      pubkey: RPDA[0],\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, ...investorBaseTokenAccounts, ...fundAssociatedTokenAddresses];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys: keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n\n    if (wsolTokenAccount) {\n      transaction.add(closeAccount({\n        source: wsolTokenAccount,\n        destination: key,\n        owner: key\n      }));\n    }\n\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"WITHDRAW INVESTOR\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onChange: e => setInvestmentIndex(e.target.value),\n      children: investments.map((i, index) => {\n        var _i$ivnStatePubKey, _i$amount;\n\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: index,\n          children: [i === null || i === void 0 ? void 0 : (_i$ivnStatePubKey = i.ivnStatePubKey) === null || _i$ivnStatePubKey === void 0 ? void 0 : _i$ivnStatePubKey.toBase58(), \"|| \", (i === null || i === void 0 ? void 0 : (_i$amount = i.amount) === null || _i$amount === void 0 ? void 0 : _i$amount.toString()) / 10 ** 6]\n        }, index, true, {\n          fileName: _jsxFileName,\n          lineNumber: 509,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 506,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetAllInvestments,\n      children: \"Load Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 516,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this), investments && investments.length && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" ivnStatePubKey:  \", (_investments$investme15 = investments[investmentIndex]) === null || _investments$investme15 === void 0 ? void 0 : (_investments$investme16 = _investments$investme15.ivnStatePubKey) === null || _investments$investme16 === void 0 ? void 0 : _investments$investme16.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 521,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" manager : \", (_investments$investme17 = investments[investmentIndex]) === null || _investments$investme17 === void 0 ? void 0 : (_investments$investme18 = _investments$investme17.manager) === null || _investments$investme18 === void 0 ? void 0 : _investments$investme18.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 522,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" owner : \", (_investments$investme19 = investments[investmentIndex]) === null || _investments$investme19 === void 0 ? void 0 : (_investments$investme20 = _investments$investme19.owner) === null || _investments$investme20 === void 0 ? void 0 : _investments$investme20.toBase58()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 523,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\" amount : \", ((_investments$investme21 = investments[investmentIndex]) === null || _investments$investme21 === void 0 ? void 0 : (_investments$investme22 = _investments$investme21.amount) === null || _investments$investme22 === void 0 ? void 0 : _investments$investme22.toString()) / 10 ** 6]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 524,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"amount_in_router : \", ((_investments$investme23 = investments[investmentIndex]) === null || _investments$investme23 === void 0 ? void 0 : (_investments$investme24 = _investments$investme23.amount_in_router) === null || _investments$investme24 === void 0 ? void 0 : _investments$investme24.toString()) / 10 ** 6]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 525,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"start_performance : \", (_investments$investme25 = investments[investmentIndex]) === null || _investments$investme25 === void 0 ? void 0 : (_investments$investme26 = _investments$investme25.start_performance) === null || _investments$investme26 === void 0 ? void 0 : _investments$investme26.toString()]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 526,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"is_initialized : \", (_investments$investme27 = investments[investmentIndex]) === null || _investments$investme27 === void 0 ? void 0 : _investments$investme27.is_initialized]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 527,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"has_withdrawn :\", (_investments$investme28 = investments[investmentIndex]) === null || _investments$investme28 === void 0 ? void 0 : _investments$investme28.has_withdrawn]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 528,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"withdrawn_from_margin : \", (_investments$investme29 = investments[investmentIndex]) === null || _investments$investme29 === void 0 ? void 0 : _investments$investme29.withdrawn_from_margin]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"margin_debt :\", `${(_investments$investme30 = investments[investmentIndex]) === null || _investments$investme30 === void 0 ? void 0 : _investments$investme30.margin_debt[0]} <==>  ${(_investments$investme31 = investments[investmentIndex]) === null || _investments$investme31 === void 0 ? void 0 : _investments$investme31.margin_debt[1]}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"margin_position_id:\", `${(_investments$investme32 = investments[investmentIndex]) === null || _investments$investme32 === void 0 ? void 0 : _investments$investme32.margin_position_id[0]} <==>  ${(_investments$investme33 = investments[investmentIndex]) === null || _investments$investme33 === void 0 ? void 0 : _investments$investme33.margin_position_id[1]}`]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 531,\n        columnNumber: 18\n      }, this)]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdrawSettle,\n      children: \"withdraw_settle_1\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 537,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdrawFromMango,\n      children: \"withdraw_from_margin_2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdrawFromFund,\n      children: \"withdraw_from_fund_3\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 539,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 503,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdraw, \"hZGqqOQRBTBq14eWgt5vs6tStNs=\");\n\n_c = Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","SOL_USDC_MARKET","connection","platformStateAccount","priceStateAccount","FUND_ACCOUNT_KEY","programId","TOKEN_PROGRAM_ID","CLOCK_PROGRAM_ID","MANGO_PROGRAM_ID_V2","MANGO_GROUP_ACCOUNT","MARGIN_ACCOUNT_KEY","ORACLE_BTC_DEVNET","ORACLE_ETH_DEVNET","ORACLE_SOL_DEVNET","ORACLE_SRM_DEVNET","idsIndex","MANGO_TOKENS","PERP_MARKETS","nu64","struct","u8","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccount","createAssociatedTokenAccountIfNotExist","devnet_pools","DEV_TOKENS","orcaPools","raydiumPools","keyBy","INVESTOR_DATA","PLATFORM_DATA","FUND_DATA","FUND_PDA_DATA","updatePoolPrices","MarginAccountLayout","NUM_MARKETS","MangoGroupLayout","mangoWithdrawInvestor","placeOrder","placeOrder2","TOKENS","IDS","MangoClient","NodeBankLayout","closeAccount","getPoolAccounts","map","p","pubkey","poolCoinTokenAccount","isSigner","isWritable","poolPcTokenAccount","Withdraw","ids","walletProvider","s","amount","setAmount","investments","setInvestments","investmentIndex","setInvestmentIndex","handleGetAllInvestments","getProgramAccounts","filters","dataSize","span","memcmp","offset","offsetOf","bytes","publicKey","toBase58","newInvestors","investment","invStateData","decode","account","data","push","console","log","handleWithdrawSettle","investorStateAcc","ivnStatePubKey","investorAddr","owner","key","alert","fundPDA","findProgramAddress","toBuffer","fundStateInfo","getAccountInfo","fund_data","transaction","filt_pools","WSOLWhitelisted","MSOLWhitelisted","platData","platform_data","i","tokens","balance","mint","token_list","index","mux","x","find","coin","mintAddress","mangoProgramId","client","mangoGroup","getMangoGroup","mangoCache","perpKeys","marketIndex","mango_positions","perp_markets","perpMaketInfo","perpMarketId","bidsKey","asksKey","eventsKey","default","dataLayout","Buffer","alloc","encode","instruction","MANGO_REFERRER_ACCOUNT","keys","mango_account","length","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","isMangoWithdrawRequired","investorStateData","margin_debt","handleWithdrawFromMango","fundState","usdcnodeBankInfo","usdcnodeBank","deposit_index","parseInt","margin_position_id","toString","user_other_token_deposit_debt","usdcInvestorTokenAcc","USDC","otherDespoitTokenKeys","deposit_index_token_info","Object","values","t","mangoTokenIndex","despositTokenInvestortokenAcc","mintKey","tokennodeBankInfo","nodeKeys","tokennodeBank","rootKey","vault","signerKey","handleWithdrawFromFund","RPDA","from","investerStateAccount","routerAssociatedTokenAddress","investorBaseTokenAccounts","fundAssociatedTokenAddresses","investorTokens","token_indexes","investorTokenDebts","token_debts","platformDataAcc","platformState","wsolTokenAccount","WSOL","source","destination","e","target","value","manager","amount_in_router","start_performance","is_initialized","has_withdrawn","withdrawn_from_margin"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { adminAccount, SOL_USDC_MARKET, connection,  platformStateAccount, priceStateAccount, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID , CLOCK_PROGRAM_ID, MANGO_PROGRAM_ID_V2, MANGO_GROUP_ACCOUNT, MARGIN_ACCOUNT_KEY, ORACLE_BTC_DEVNET, ORACLE_ETH_DEVNET, ORACLE_SOL_DEVNET, ORACLE_SRM_DEVNET, idsIndex, MANGO_TOKENS, PERP_MARKETS} from '../utils/constants';\r\n\r\nimport { nu64, struct, u8 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { devnet_pools, DEV_TOKENS, orcaPools, raydiumPools } from '../utils/pools';\r\nimport { keyBy } from 'lodash';\r\nimport { INVESTOR_DATA, PLATFORM_DATA, FUND_DATA, FUND_PDA_DATA } from '../utils/programLayouts';\r\n\r\nimport { updatePoolPrices } from './updatePrices';\r\nimport { MarginAccountLayout, NUM_MARKETS, MangoGroupLayout } from '../utils/MangoLayout';\r\n\r\nimport { mangoWithdrawInvestor, placeOrder, placeOrder2 } from '../utils/mango';\r\nimport { TOKENS } from '../utils/tokens';\r\nimport { IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\r\n\r\nimport { closeAccount } from '@project-serum/serum/lib/token-instructions'\r\n\r\nconst getPoolAccounts = () => {\r\n  return raydiumPools.map((p) => {\r\n    return [\r\n      { pubkey: new PublicKey(p.poolCoinTokenAccount), isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(p.poolPcTokenAccount), isSigner: false, isWritable: true }\r\n    ]\r\n  })\r\n}\r\n\r\nexport const Withdraw = () => {\r\n  \r\n  const ids= IDS['groups'][idsIndex];\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  \r\n  const [amount, setAmount] = useState(0);\r\n  const [investments, setInvestments] = useState([])\r\n  const [investmentIndex, setInvestmentIndex] = useState(0)\r\n  // const [investorAddr, setInvestorAddr] = useState('')\r\n  // const [investorStateAcc, setInvestorStateAcc] = useState('')\r\n\r\n  \r\n  const handleGetAllInvestments = async () => {\r\n\r\n    //  const userkey = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\r\n    let investments = await connection.getProgramAccounts(programId, { filters: [\r\n      { dataSize: INVESTOR_DATA.span },\r\n      {\r\n        memcmp: { offset: INVESTOR_DATA.offsetOf('owner'), bytes: walletProvider?.publicKey.toBase58() }\r\n      }\r\n    ] });\r\n    // console.log(\"investments::\",investments)\r\n    const newInvestors = []\r\n    for (const investment of investments) {\r\n      const invStateData = INVESTOR_DATA.decode(investment.account.data)\r\n      invStateData['ivnStatePubKey'] = investment.pubkey;\r\n    //   if (invStateData.is_initialized && invStateData.owner.toBase58() == key.toBase58()) {\r\n        newInvestors.push(invStateData)\r\n    //   }\r\n    }\r\n    console.log(\"newInvestors::\",newInvestors)\r\n    setInvestments(newInvestors);\r\n  }\r\n\r\n  const handleWithdrawSettle = async () => {\r\n\r\n    const investorStateAcc = investments[investmentIndex].ivnStatePubKey?.toBase58()\r\n    const investorAddr = investments[investmentIndex].owner?.toBase58()\r\n\r\n    console.log(\"**----handleWithdrawSettle investorStateAcc, investorAddr::\",investorStateAcc,investorAddr)\r\n\r\n    const key = walletProvider?.publicKey;\r\n    if (!key) {\r\n      console.log(\"connect wallet\")\r\n      return;\r\n    };\r\n    if(investments[investmentIndex]?.owner?.toBase58()!= walletProvider?.publicKey.toBase58())\r\n    {\r\n      alert('web3 not done only manager investments')\r\n      return;\r\n    }\r\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\r\n    // const fundStateAccount = await PublicKey.createWithSeed(\r\n    //     key,\r\n    //     FUND_ACCOUNT_KEY,\r\n    //     programId,\r\n    // );\r\n    // console.log(\"fundStateAccount:\",fundStateAccount.toBase58())\r\n    let fundStateInfo = await connection.getAccountInfo(fundPDA[0])\r\n    let fund_data = FUND_PDA_DATA.decode(fundStateInfo.data) \r\n  \r\n   \r\n    console.log(\"fund_data:\",fund_data)\r\n  \r\n    const transaction = new Transaction()\r\n  \r\n    let filt_pools = []\r\n    let WSOLWhitelisted = false;\r\n    let MSOLWhitelisted = false;\r\n    let platData = await connection.getAccountInfo(platformStateAccount)\r\n    let platform_data = PLATFORM_DATA.decode(platData.data)\r\n    console.log(\"plat info:: \", platform_data)\r\n\r\n    for (let i = 1; i<8; i++) {\r\n      if (fund_data.tokens[i].balance > 0) {\r\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\r\n        // if(mint.toBase58() === TOKENS.WSOL.mintAddress){\r\n        //   WSOLWhitelisted=true;\r\n        // } \r\n        // else if(mint.toBase58() === TOKENS.MSOL.mintAddress){\r\n        //   MSOLWhitelisted=true;\r\n        // }\r\n        if(fund_data.tokens[i].mux === 0){\r\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58())\r\n          filt_pools.push(x)\r\n        } else {\r\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58())\r\n          filt_pools.push(x)\r\n        }\r\n      }  \r\n    }\r\n    //send WSOL everytime \r\n    // if(!WSOLWhitelisted){\r\n    //   const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\r\n    //   console.log(\"pushing WSOL pool\")\r\n    //   filt_pools.push(wsol_usdc_pool)\r\n    // }\r\n    // if(!MSOLWhitelisted){\r\n    //   const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\r\n    //   console.log(\"pushing MSOL pool\")\r\n    //   filt_pools.push(msol_usdc_pool)\r\n    // }\r\n    console.log(\"filt_pools:\",filt_pools)\r\n    updatePoolPrices(transaction, filt_pools)\r\n\r\n    console.log(\"ids.mangoProgramId:: \", ids.mangoProgramId)\r\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n    console.log(\"mangoGroup.mangoCache :: \", mangoGroup.mangoCache.toBase58())\r\n\r\n\r\n    // [      perp_market_ai,     // write default_ai if no perp market for i^th index\r\n    //        bids_ai,            // write default_ai if no perp market for i^th index\r\n    //        asks_ai,            // write default_ai if no perp market for i^th index\r\n    //        event_queue_ai,]   //write default_ai if no perp market for i^th index\r\n    let perpKeys = []\r\n    for(let i=0; i<3;i++){\r\n          const marketIndex = fund_data.mango_positions.perp_markets[i];\r\n          console.log(\"marketIndex:\",marketIndex,i)\r\n          const perpMaketInfo = PERP_MARKETS.find((i) => i.perpMarketId==marketIndex )\r\n          console.log(\"found  perpMaketInfo::\",perpMaketInfo)\r\n          \r\n          if(marketIndex!=255){\r\n             console.log(\"pusing:\",marketIndex,i)\r\n\r\n            perpKeys.push(\r\n              { pubkey:  new PublicKey(perpMaketInfo.publicKey), isSigner: false, isWritable: true },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  new PublicKey(perpMaketInfo.bidsKey), isSigner: false, isWritable: true },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  new PublicKey(perpMaketInfo.asksKey), isSigner: false, isWritable: true },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  new PublicKey(perpMaketInfo.eventsKey), isSigner: false, isWritable: true },\r\n             )\r\n          \r\n          } else {\r\n\r\n            perpKeys.push(\r\n              { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\r\n             )\r\n             perpKeys.push(\r\n              { pubkey:  PublicKey.default, isSigner: false, isWritable: false },\r\n             )\r\n           \r\n          }\r\n    }\r\n  \r\n    const dataLayout = struct([u8('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 4\r\n      },\r\n      data\r\n    )\r\n    const MANGO_REFERRER_ACCOUNT = new PublicKey('EP33BnzZc9gyVwKWzMpr28SYZkr8JGbMqHYKHMJp3H9P');\r\n\r\n    const keys = [\r\n      { pubkey: platformStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n      // { pubkey: fundStateAccount, isSigner: false, isWritable: true },\r\n      { pubkey: fundPDA[0], isSigner: false, isWritable: true },\r\n\r\n      { pubkey: new PublicKey(investorStateAcc), isSigner: false, isWritable: true }, //fund State Account\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n\r\n      { pubkey: fund_data.mango_positions.mango_account , isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n      { pubkey: MANGO_REFERRER_ACCOUNT, isSigner: false, isWritable: true},\r\n       \r\n      { pubkey: PublicKey.default, isSigner: false, isWritable: false },\r\n\r\n       ...perpKeys, // 16 accs \r\n    ];\r\n\r\n    for(let i=0; i<keys.length;i++) {\r\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\r\n    }\r\n  \r\n    const instruction = new TransactionInstruction({\r\n      keys: keys,\r\n      programId,\r\n      data\r\n    });\r\n    transaction.add(instruction);\r\n    transaction.feePayer = key;\r\n    let hash = await connection.getRecentBlockhash(\"finalized\");\r\n    console.log(\"blockhash\", hash);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n  \r\n    const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    console.log(\"tx::: \", sign);\r\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \r\n\r\n  }\r\n\r\n\r\n  const isMangoWithdrawRequired = async () => {\r\n    \r\n    const investorStateAcc = investments[investmentIndex].ivnStatePubKey?.toBase58()\r\n    const investorAddr = investments[investmentIndex].owner?.toBase58()\r\n    console.log(\"**----isMangoWithdrawRequired investorStateAcc,investorAddr::\",investorStateAcc,investorAddr)\r\n\r\n    let investorStateData = await connection.getAccountInfo(investorStateAcc);\r\n    investorStateData = INVESTOR_DATA.decode(investorStateData.data)\r\n\r\n    // const user_other_token_deposit_debt = investorStateData.margin_debt[1]\r\n\r\n    // zero debts\r\n    // IMP but rare senario :: when it gets liquidated after partial withdraw \r\n    return ( !investorStateData.margin_debt[0] && !investorStateData.margin_debt[1] ) \r\n\r\n  }\r\n\r\n  const handleWithdrawFromMango = async ( ) => {\r\n\r\n    const investorStateAcc = investments[investmentIndex].ivnStatePubKey?.toBase58()\r\n    const investorAddr = investments[investmentIndex].owner?.toBase58()\r\n    console.log(\"**----handleWithdrawFromMango investorStateAcc,investorAddr::\",investorStateAcc,investorAddr)\r\n    const key = walletProvider?.publicKey;\r\n    if (!key) {\r\n        alert(\"connect wallet\")\r\n        return;\r\n    };\r\n    if (investments[investmentIndex]?.owner?.toBase58()!= walletProvider?.publicKey.toBase58()) {\r\n        alert('web3 not done only manager investments')\r\n        return;\r\n    }\r\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\r\n    // const fundStateAccount = await PublicKey.createWithSeed(\r\n    //     key,\r\n    //     FUND_ACCOUNT_KEY,\r\n    //     programId,\r\n    // );\r\n    let fundStateInfo = await connection.getAccountInfo((fundPDA[0]))\r\n    let fundState = FUND_PDA_DATA.decode(fundStateInfo.data) \r\n    console.log(\"fundState:\",fundState)\r\n\r\n    // let investorStateData = await connection.getAccountInfo(investorStateAcc);\r\n    // investorStateData = INVESTOR_DATA.decode(investorStateData.data)\r\n\r\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n\r\n    let usdcnodeBankInfo = await connection.getAccountInfo(new PublicKey(\"BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh\"))\r\n    console.log(\"usdcnodeBankInfo:\",usdcnodeBankInfo)\r\n    let usdcnodeBank = NodeBankLayout.decode(usdcnodeBankInfo.data)\r\n\r\n      const deposit_index = parseInt(investments[investmentIndex]?.margin_position_id[1].toString());\r\n      const user_other_token_deposit_debt = investments[investmentIndex]?.margin_debt[1]\r\n      console.log(\"deposit_index::::\",deposit_index)\r\n      console.log(\"user_other_token_deposit_debt::::\",user_other_token_deposit_debt)\r\n\r\n      const transaction = new Transaction()\r\n\r\n      const usdcInvestorTokenAcc = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(MANGO_TOKENS.USDC.mintAddress), walletProvider.publicKey, transaction)\r\n      console.log(\"usdcInvestorTokenAcc::::\",usdcInvestorTokenAcc.toBase58())\r\n\r\n\r\n    let otherDespoitTokenKeys = [];\r\n    if (user_other_token_deposit_debt != 0) {\r\n\r\n      //getting token info if the deposit_index token at mango\r\n      const deposit_index_token_info = Object.values(MANGO_TOKENS).find( t => t.mangoTokenIndex==deposit_index )\r\n      console.log(\"deposit_index_token_info:\",deposit_index_token_info)\r\n\r\n      const despositTokenInvestortokenAcc =  await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(deposit_index_token_info.mintKey), walletProvider.publicKey, transaction)\r\n      console.log(\"despositTokenInvestortokenAcc::::\",despositTokenInvestortokenAcc.toBase58())\r\n\r\n      let tokennodeBankInfo = await connection.getAccountInfo(new PublicKey(deposit_index_token_info.nodeKeys[0]))\r\n      let tokennodeBank = NodeBankLayout.decode(tokennodeBankInfo.data)\r\n        otherDespoitTokenKeys.push({ pubkey: new PublicKey(deposit_index_token_info.rootKey), isSigner: false, isWritable: false } )\r\n        otherDespoitTokenKeys.push({ pubkey: new PublicKey(deposit_index_token_info.nodeKeys[0]), isSigner: false, isWritable: true } )\r\n        otherDespoitTokenKeys.push({ pubkey: tokennodeBank.vault, isSigner: false, isWritable: true } )\r\n        otherDespoitTokenKeys.push({ pubkey: despositTokenInvestortokenAcc, isSigner: false, isWritable: true } )\r\n    } else {\r\n        otherDespoitTokenKeys.push( { pubkey:PublicKey.default, isSigner: false, isWritable: false  } )\r\n        otherDespoitTokenKeys.push( { pubkey:PublicKey.default, isSigner: false, isWritable: false  } )\r\n        otherDespoitTokenKeys.push( { pubkey:PublicKey.default, isSigner: false, isWritable: false  } )\r\n        otherDespoitTokenKeys.push( { pubkey:PublicKey.default, isSigner: false, isWritable: false  } )\r\n    }\r\n\r\n\r\n    const dataLayout = struct([u8('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n        {\r\n            instruction: 14,\r\n        },\r\n        data\r\n    )\r\n      \r\n    const keys = [\r\n      { pubkey: fundPDA[0], isSigner: false, isWritable: true },\r\n      { pubkey: new PublicKey(investorStateAcc), isSigner: false, isWritable: true },\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n\r\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n      { pubkey: fundState.mango_positions.mango_account , isSigner: false, isWritable: true },\r\n      // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\r\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: false },\r\n\r\n      { pubkey: new PublicKey(MANGO_TOKENS.USDC.rootKey), isSigner: false, isWritable: false },\r\n      { pubkey: new PublicKey(MANGO_TOKENS.USDC.nodeKeys[0]), isSigner: false, isWritable: true },\r\n      { pubkey: usdcnodeBank.vault, isSigner: false, isWritable: true },\r\n      { pubkey: usdcInvestorTokenAcc, isSigner: false, isWritable: true }, \r\n\r\n      ...otherDespoitTokenKeys,\r\n\r\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: false },\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n      { pubkey: PublicKey.default, isSigner: false, isWritable: false },\r\n  ]\r\n\r\n  for(let i=0; i<keys.length;i++) {\r\n    console.log(\"key:\",i, keys[i].pubkey.toBase58())\r\n  }\r\n    const instruction = new TransactionInstruction({\r\n        keys: keys,\r\n        programId: programId,\r\n        data\r\n    });\r\n\r\n    transaction.add(instruction);\r\n    console.log(`transaction ::: `, transaction)\r\n    transaction.feePayer = key;\r\n    let hash = await connection.getRecentBlockhash(\"finalized\");\r\n    console.log(\"blockhash\", hash);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n\r\n    const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    console.log(\"tx::: \", sign)\r\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \r\n\r\n  }\r\n\r\n  const handleWithdrawFromFund =  async () => {\r\n\r\n    const investorStateAcc = investments[investmentIndex].ivnStatePubKey?.toBase58()\r\n    const investorAddr = investments[investmentIndex].owner?.toBase58()\r\n\r\n\r\n    console.log(\"**----handleWithdrawFromFund investorStateAcc::\",investorStateAcc)\r\n\r\n    const key = walletProvider?.publicKey;\r\n    if (!key) {\r\n      console.log(\"connect wallet\")\r\n      return;\r\n    };\r\n     const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\r\n    //  const fundStateAccount = await PublicKey.createWithSeed(\r\n    //         key,\r\n    //         FUND_ACCOUNT_KEY,\r\n    //         programId,\r\n    //     );\r\n    // if (!fundStateAccount) {\r\n    //   console.log(\"no funds found\")\r\n    //   return\r\n    // }\r\n    const transaction = new Transaction()\r\n\r\n  \r\n    // const accountInfo = await connection.getAccountInfo(new PublicKey(fundStateAccount));\r\n    // const fund_data = FUND_DATA.decode(accountInfo.data);\r\n  \r\n    const RPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\r\n    const investerStateAccount = new PublicKey(investorStateAcc);\r\n    const routerAssociatedTokenAddress = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), RPDA[0], transaction);\r\n  \r\n    const investorBaseTokenAccounts = [];\r\n    const fundAssociatedTokenAddresses = []\r\n  \r\n    const investorTokens = investments[investmentIndex].token_indexes;\r\n    console.log(\"investorTokens:\",investorTokens)\r\n    const investorTokenDebts = investments[investmentIndex].token_debts;\r\n    console.log(\"investorTokenDebts:\",investorTokenDebts)\r\n  \r\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\r\n      if(!platformDataAcc){\r\n        alert('platform state not initilaized');\r\n        return;\r\n      }\r\n      const platformState = PLATFORM_DATA.decode(platformDataAcc.data)\r\n      let wsolTokenAccount;\r\n  \r\n    for (let i = 0; i < investments[investmentIndex].token_indexes.length; i++) {\r\n  \r\n      // if wsol then save to close account\r\n      if (platformState.token_list[investorTokens[i]]?.mint.toBase58() === TOKENS.WSOL.mintAddress && investorTokenDebts[i] > 0) {\r\n        wsolTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(TOKENS.WSOL.mintAddress))\r\n      }\r\n  \r\n      // const invAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, key, transaction);\r\n      investorBaseTokenAccounts.push({\r\n        pubkey: investorTokenDebts[i] > 0 || i === 0 ? await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, key, transaction) : PublicKey.default,\r\n        isSigner: false,\r\n        isWritable: true\r\n      })\r\n      // const fundAssToken = await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, new PublicKey(fundPDA), transaction) ;\r\n      fundAssociatedTokenAddresses.push({\r\n        pubkey: investorTokenDebts[i] > 0 || i === 0 ? await createAssociatedTokenAccountIfNotExist(walletProvider, platformState.token_list[investorTokens[i]].mint, fundPDA[0], transaction) : PublicKey.default,\r\n        isSigner: false,\r\n        isWritable: true\r\n      })\r\n    }\r\n  \r\n    const dataLayout = struct([u8('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 3,\r\n      },\r\n      data\r\n    )\r\n      const keys = [\r\n        { pubkey: platformStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n        { pubkey: fundPDA[0], isSigner: false, isWritable: true },\r\n        { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n        { pubkey: key, isSigner: true, isWritable: true },\r\n  \r\n        { pubkey: routerAssociatedTokenAddress, isSigner: false, isWritable: true }, // Router Base Token Account\r\n        // { pubkey: fundPDA[0], isSigner: false, isWritable: false },\r\n        { pubkey: RPDA[0], isSigner: false, isWritable: false },\r\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\r\n\r\n        ...investorBaseTokenAccounts,\r\n        ...fundAssociatedTokenAddresses\r\n      ];\r\n\r\n    for(let i=0; i<keys.length;i++) {\r\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\r\n    }\r\n  \r\n    const instruction = new TransactionInstruction({\r\n      keys: keys,\r\n      programId,\r\n      data\r\n    });\r\n  \r\n    transaction.add(instruction);\r\n  \r\n    if (wsolTokenAccount) {\r\n      transaction.add(\r\n        closeAccount({\r\n          source: wsolTokenAccount,\r\n          destination: key,\r\n          owner: key\r\n        })\r\n      )\r\n    }\r\n    transaction.feePayer = key;\r\n    let hash = await connection.getRecentBlockhash(\"finalized\");\r\n    console.log(\"blockhash\", hash);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n  \r\n    const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    console.log(\"tx::: \", sign);\r\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \r\n  }\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>WITHDRAW INVESTOR</h4>\r\n      \r\n      <select name=\"funds\" width = \"100px\"  onChange={ (e) => setInvestmentIndex(e.target.value)}>\r\n        {\r\n          investments.map((i, index) => {\r\n            return (<option key={index} value={index}>\r\n                     {i?.ivnStatePubKey?.toBase58()} \r\n                      || {i?.amount?.toString()/10**6}\r\n                    </option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleGetAllInvestments}>Load Investments</button>\r\n      <br />\r\n      {\r\n        investments && investments.length &&\r\n        <>\r\n                 <p > ivnStatePubKey:  {investments[investmentIndex]?.ivnStatePubKey?.toBase58()}</p>\r\n                 <p > manager : {investments[investmentIndex]?.manager?.toBase58()}</p>\r\n                 <p > owner : {investments[investmentIndex]?.owner?.toBase58()}</p>\r\n                 <p> amount : {investments[investmentIndex]?.amount?.toString()/10**6}</p>\r\n                 <p>amount_in_router : {investments[investmentIndex]?.amount_in_router?.toString()/10**6}</p>\r\n                 <p>start_performance : {investments[investmentIndex]?.start_performance?.toString()}</p>\r\n                 <p>is_initialized : {investments[investmentIndex]?.is_initialized}</p>\r\n                 <p>has_withdrawn :{investments[investmentIndex]?.has_withdrawn}</p>\r\n                 <p>withdrawn_from_margin : {investments[investmentIndex]?.withdrawn_from_margin}</p>\r\n                 <p>margin_debt :{`${investments[investmentIndex]?.margin_debt[0]} <==>  ${investments[investmentIndex]?.margin_debt[1]}`}</p>\r\n                 <p>margin_position_id:{`${investments[investmentIndex]?.margin_position_id[0]} <==>  ${investments[investmentIndex]?.margin_position_id[1]}`}</p>\r\n        </>\r\n      }\r\n\r\n               \r\n      {/* <button onClick={handleUpdateTokenPrices}>updatePoolPrices</button> */}\r\n      <button onClick={handleWithdrawSettle}>withdraw_settle_1</button>\r\n      <button onClick={handleWithdrawFromMango}>withdraw_from_margin_2</button>\r\n      <button onClick={handleWithdrawFromFund}>withdraw_from_fund_3</button>\r\n      \r\n      \r\n    </div>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}