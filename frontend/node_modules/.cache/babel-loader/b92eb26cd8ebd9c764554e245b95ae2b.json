{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Deposit = () => {\n  _s();\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [funds, setFunds] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundStateAccount));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    const transaction = new Transaction();\n    const invBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n    const investerStateAccount = await createKeyIfNotExists(walletProvider, null, programId, fundPDA.substr(0, 31), INVESTOR_DATA.span, transaction);\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    const dataLayout = struct([u32('instruction'), nu64('amount')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amount: amount * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: new PublicKey(fundStateAccount),\n        isSigner: false,\n        isWritable: true\n      }, //fund State Account\n      {\n        pubkey: investerStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: invBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, // Investor Base Token Account\n      {\n        pubkey: fundState.vault_key,\n        isSigner: false,\n        isWritable: true\n      }, // Router Base Token Account\n      {\n        pubkey: new PublicKey('2C7AtpEbcdfmDzh5g4cFBzCXbgZJmxhY2bWPMi7QKqBH'),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign); // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n    // transaction.add(deposit_instruction);\n    // transaction.feePayer = key;\n    // let hash = await connection.getRecentBlockhash();\n    // console.log(\"blockhash\", hash);\n    // transaction.recentBlockhash = hash.blockhash;\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // const investorDataAcc = await connection.getAccountInfo(investerStateAccount);\n    // const investorData = INVESTOR_DATA.decode(investorDataAcc.data);\n  };\n\n  const handleFunds = async () => {\n    let managers = [];\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n\n    console.log(managers);\n    setFunds(managers);\n  };\n\n  const handleFundSelect = async event => {\n    setFundPDA(event.target.value);\n    funds.forEach(fund => {\n      if (fund.fundPDA == event.target.value) {\n        setFundStateAccount(fund.fundStateAccount);\n        console.log(\"set fundStateAcoount\");\n      }\n    });\n    console.log(`setting fundPDA :::: `, fundPDA);\n    console.log(`setting fundStateAccount :::: `, fundStateAccount);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), \"amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: event => setAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Fund Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleFundSelect,\n      children: funds.map(fund => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, fund.fundPDA, false, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load Funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 143,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Deposit, \"1XKKpOiGiYT3LIbyDng3CtkvK2c=\");\n\n_c = Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","FUND_DATA","INVESTOR_DATA","IDS","MangoClient","Deposit","amount","setAmount","fundPDA","setFundPDA","fundStateAccount","setFundStateAccount","funds","setFunds","walletProvider","s","ids","handleDeposit","key","publicKey","alert","fundStateInfo","getAccountInfo","fundState","decode","data","console","log","client","mangoProgramId","mangoGroup","getMangoGroup","transaction","invBaseTokenAccount","tokens","mintKey","investerStateAccount","substr","span","dataLayout","Buffer","alloc","encode","instruction","decimals","keys","pubkey","isSigner","isWritable","vault_key","mango_account","mangoCache","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handleFunds","managers","getProgramAccounts","filters","dataSize","fundData","map","f","account","i","length","manager","manager_account","PDA","findProgramAddress","toBuffer","createWithSeed","push","toBase58","fundManager","handleFundSelect","event","target","value","forEach","fund"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { IDS, MangoClient } from '@blockworks-foundation/mango-client';\n\nexport const Deposit = () => {\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [funds, setFunds] = useState([]);\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundStateAccount))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n\n    const transaction = new Transaction()\n  \n    const invBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n    const investerStateAccount = await createKeyIfNotExists(walletProvider, null, programId, fundPDA.substr(0, 31), INVESTOR_DATA.span, transaction)\n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('amount')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** ids.tokens[0].decimals)\n      },\n      data\n    )\n\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: new PublicKey(fundStateAccount), isSigner: false, isWritable: true }, //fund State Account\n        { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: invBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n        { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\n        { pubkey: new PublicKey('2C7AtpEbcdfmDzh5g4cFBzCXbgZJmxhY2bWPMi7QKqBH'), isSigner: false, isWritable: true },\n\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n\n\n        \n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true }\n      ],\n      programId,\n      data\n    });\n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n    \n    // transaction.add(deposit_instruction);\n    // transaction.feePayer = key;\n    // let hash = await connection.getRecentBlockhash();\n    // console.log(\"blockhash\", hash);\n    // transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n\n\n  // const investorDataAcc = await connection.getAccountInfo(investerStateAccount);\n  // const investorData = INVESTOR_DATA.decode(investorDataAcc.data);\n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n  const handleFundSelect = async(event) => {\n  \n    setFundPDA(event.target.value);\n    funds.forEach(fund => {\n      if (fund.fundPDA == event.target.value) \n      {setFundStateAccount(fund.fundStateAccount)\n       console.log(\"set fundStateAcoount\")}\n    });\n    console.log(`setting fundPDA :::: `, fundPDA)\n    console.log(`setting fundStateAccount :::: `, fundStateAccount)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\n        {\n          funds.map((fund) => {\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load Funds</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}