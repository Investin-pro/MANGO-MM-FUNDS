{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Withdraw = () => {\n  _s();\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\n  const ids = IDS['groups'][0]; // const handleWithdraw = async () => {\n  //   const key = walletProvider?.publicKey;\n  //   if (!key) {\n  //     alert(\"connect wallet\")\n  //     return;\n  //   };\n  //   if(!fundPDA) {\n  //     alert(\"no funds found\")\n  //     return\n  //   }\n  //   const transaction = new Transaction()\n  //   const openOrdersLamports =\n  //   await connection.getMinimumBalanceForRentExemption(\n  //     INVESTOR_DATA.span,\n  //     'singleGossip'\n  //   )\n  //   let signers = []\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\n  //   console.log(\"fundState:: \", fundState)\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n  //   console.log(\"mango group:: \", mangoGroup)\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  //   console.log(\"nodebank:: \", nodeBank)\n  //   const dataLayout = struct([u32('instruction')])\n  //   const data = Buffer.alloc(dataLayout.span)\n  //   dataLayout.encode(\n  //     {\n  //       instruction: 2,\n  //     },\n  //     data\n  //   )\n  //   const instruction = new TransactionInstruction({\n  //     keys: [\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\n  //       { pubkey: key, isSigner: true, isWritable: true },\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n  //     ],\n  //     programId,\n  //     data\n  //   });\n  //   transaction.add(instruction);\n  //   console.log(`transaction ::: `, transaction)\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n  //   transaction.feePayer = key;\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\n  //   console.log(\"blockhash\", hash);\n  //   transaction.recentBlockhash = hash.blockhash;\n  //   transaction.setSigners(key, investerStateAccount)\n  //   transaction.partialSign(...signers)\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\n  //   console.log(\"tx::: \", sign)\n  // }\n\n  const handleFunds = async () => {\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n    let invFunds = [];\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      let invStateAccount = await PublicKey.createWithSeed(walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey, PDA[0].toBase58().substr(0, 31), programId);\n      let invState = await connection.getAccountInfo(invStateAccount);\n\n      if (invState == null) {\n        continue;\n      }\n\n      let invStateData = INVESTOR_DATA.decode(invState.data);\n      console.log(invStateData); // if (!invStateData.is_initialized) {\n      //   continue\n      // }\n\n      invFunds.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58()\n      });\n    }\n\n    console.log(invFunds);\n    setFunds(invFunds);\n  };\n\n  const handleFundSelect = async event => {\n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, event.target.value, fundPDA);\n  };\n\n  const handleGetInvestments = async () => {\n    const investorAccount = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"fundPDA::\", fundPDA.toBase58());\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('owner'),\n          bytes: investorAccount.toString()\n        },\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('investment_status'),\n          bytes: bs58.encode(new BN(2, 'le').toArray())\n        }\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    console.log(`found investments :::: `, investments);\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58());\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data));\n    console.log(`decodedInvestments ::: `, investmentsData); // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n\n    setInvestments(investmentStateAccs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 190,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetInvestments,\n      children: \"Get Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleFundSelect,\n      children: funds.map(fund => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, fund.fundPDA, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 193,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load Investments\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdraw,\n      children: \"Withdraw from Fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleHarvestMngo,\n      children: \"Harvest Mngo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 188,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Withdraw, \"9u+NjkmGVYRSrA2PFQsphEAJS5Q=\");\n\n_c = Withdraw;\n\nvar _c;\n\n$RefreshReg$(_c, \"Withdraw\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","FUND_ACCOUNT_KEY","programId","TOKEN_PROGRAM_ID","struct","u32","createKeyIfNotExists","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","INVESTOR_DATA","FUND_DATA","createAccountInstruction","IDS","MangoClient","NodeBankLayout","PerpMarketLayout","Withdraw","selectedInvestmentStateAcc","setSelectedInvestmentStateAcc","investments","setInvestments","walletProvider","s","fundAccount","createFundPublicKey","ids","handleFunds","funds","getProgramAccounts","filters","dataSize","span","console","log","fundData","map","f","decode","account","data","invFunds","i","length","manager","manager_account","PDA","findProgramAddress","toBuffer","fundState","createWithSeed","invStateAccount","publicKey","toBase58","substr","invState","getAccountInfo","invStateData","push","fundPDA","fundManager","setFunds","handleFundSelect","event","setFundPDA","target","value","handleGetInvestments","investorAccount","memcmp","offset","offsetOf","bytes","toString","bs58","encode","BN","toArray","investmentStateAccs","pubkey","investmentsData","fund","handleWithdraw","handleHarvestMngo"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { connection,  FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID} from '../utils/constants';\r\n\r\nimport { struct, u32 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\r\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\r\n\r\nexport const Withdraw = () => {\r\n\r\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\r\n  const [investments, setInvestments] = useState([]);\r\n\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\r\n  const ids = IDS['groups'][0]\r\n\r\n\r\n  // const handleWithdraw = async () => {\r\n\r\n  //   const key = walletProvider?.publicKey;\r\n\r\n  //   if (!key) {\r\n  //     alert(\"connect wallet\")\r\n  //     return;\r\n  //   };\r\n\r\n  //   if(!fundPDA) {\r\n  //     alert(\"no funds found\")\r\n  //     return\r\n  //   }\r\n    \r\n  //   const transaction = new Transaction()\r\n\r\n  //   const openOrdersLamports =\r\n  //   await connection.getMinimumBalanceForRentExemption(\r\n  //     INVESTOR_DATA.span,\r\n  //     'singleGossip'\r\n  //   )\r\n  //   let signers = []\r\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\r\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n\r\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\r\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n  //   console.log(\"fundState:: \", fundState)\r\n\r\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n  //   console.log(\"mango group:: \", mangoGroup)\r\n\r\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\r\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n  //   console.log(\"nodebank:: \", nodeBank)\r\n\r\n\r\n  //   const dataLayout = struct([u32('instruction')])\r\n  //   const data = Buffer.alloc(dataLayout.span)\r\n  //   dataLayout.encode(\r\n  //     {\r\n  //       instruction: 2,\r\n  //     },\r\n  //     data\r\n  //   )\r\n\r\n  //   const instruction = new TransactionInstruction({\r\n  //     keys: [\r\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\r\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n  //       { pubkey: key, isSigner: true, isWritable: true },\r\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\r\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n\r\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\r\n\r\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\r\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\r\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n  //     ],\r\n  //     programId,\r\n  //     data\r\n  //   });\r\n\r\n  //   transaction.add(instruction);\r\n  //   console.log(`transaction ::: `, transaction)\r\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n  //   transaction.feePayer = key;\r\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\r\n  //   console.log(\"blockhash\", hash);\r\n  //   transaction.recentBlockhash = hash.blockhash;\r\n  //   transaction.setSigners(key, investerStateAccount)\r\n  //   transaction.partialSign(...signers)\r\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\r\n  //   console.log(\"tx::: \", sign)\r\n  // }\r\n  \r\n  const handleFunds = async () => {\r\n  \r\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\r\n    console.log(`funds :::: `, funds)\r\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\r\n\r\n    console.log(`decodedFunds ::: `, fundData)\r\n    let invFunds = []\r\n    for(let i=0; i<fundData.length; i++) {\r\n      let manager = fundData[i].manager_account;\r\n\r\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\r\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n\r\n      let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\r\n      let invState = await connection.getAccountInfo(invStateAccount);\r\n\r\n      if (invState == null) {\r\n        continue\r\n      }\r\n\r\n      let invStateData = INVESTOR_DATA.decode(invState.data)\r\n      console.log(invStateData)\r\n\r\n      // if (!invStateData.is_initialized) {\r\n      //   continue\r\n      // }\r\n      invFunds.push({\r\n        fundPDA: PDA[0].toBase58(),\r\n        fundManager: manager.toBase58(),\r\n      });\r\n    }\r\n    console.log(invFunds)\r\n    setFunds(invFunds);\r\n  }\r\n\r\n  const handleFundSelect = async(event) => {\r\n  \r\n    setFundPDA(event.target.value);\r\n    console.log(`setting fundPDA :::: `, event.target.value, fundPDA)\r\n  }\r\n  \r\n  const handleGetInvestments = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"fundPDA::\",fundPDA.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(2, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>Withdraw</h4>\r\n      <br />\r\n      <button onClick={handleGetInvestments}>Get Investments</button>\r\n      <br />\r\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\r\n        {\r\n          funds.map((fund) => {\r\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleFunds}>Load Investments</button>\r\n\r\n      <br />\r\n     \r\n      <button onClick={handleWithdraw}>Withdraw from Fund</button>\r\n      <button onClick={handleHarvestMngo}>Harvest Mngo</button>\r\n  \r\n      <br />\r\n    </div>\r\n  )\r\n\r\n}"]},"metadata":{},"sourceType":"module"}