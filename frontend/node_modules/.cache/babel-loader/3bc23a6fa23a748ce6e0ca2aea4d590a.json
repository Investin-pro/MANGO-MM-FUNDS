{"ast":null,"code":"import _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport * as nacl from 'tweetnacl';\nimport nacl__default from 'tweetnacl';\nimport { Buffer } from 'buffer';\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport { sha256 } from 'crypto-hash';\nimport { serialize, deserialize, deserializeUnchecked } from 'borsh';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport { coerce, instance, string, tuple, literal, unknown, union, type, optional, any, number, array, nullable, create, boolean, record, assert as assert$1 } from 'superstruct';\nimport { Client } from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport secp256k1 from 'secp256k1';\nimport { keccak_256 } from 'js-sha3';\n\nconst toBuffer = arr => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n\nclass Struct {\n  constructor(properties) {\n    Object.assign(this, properties);\n  }\n\n  encode() {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data) {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data) {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n\n} // Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\n\n\nclass Enum extends Struct {\n  constructor(properties) {\n    super(properties);\n\n    _defineProperty(this, \"enum\", '');\n\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n\n}\n\nconst SOLANA_SCHEMA = new Map();\n/**\n * Maximum length of derived pubkey seed\n */\n\nconst MAX_SEED_LENGTH = 32;\n\nfunction isPublicKeyData(value) {\n  return value._bn !== undefined;\n}\n/**\n * A public key\n */\n\n\nclass PublicKey extends Struct {\n  /** @internal */\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value) {\n    super({});\n\n    _defineProperty(this, \"_bn\", void 0);\n\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n  /**\n   * Default public key value. (All zeros)\n   */\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n\n\n  equals(publicKey) {\n    return this._bn.eq(publicKey._bn);\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toBase58() {\n    return bs58.encode(this.toBytes());\n  }\n  /**\n   * Return the byte array representation of the public key\n   */\n\n\n  toBytes() {\n    return this.toBuffer();\n  }\n  /**\n   * Return the Buffer representation of the public key\n   */\n\n\n  toBuffer() {\n    const b = this._bn.toArrayLike(Buffer);\n\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n  /**\n   * Return the base-58 representation of the public key\n   */\n\n\n  toString() {\n    return this.toBase58();\n  }\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n\n\n  static async createWithSeed(fromPublicKey, seed, programId) {\n    const buffer = Buffer.concat([fromPublicKey.toBuffer(), Buffer.from(seed), programId.toBuffer()]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n\n\n  static async createProgramAddress(seeds, programId) {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([buffer, programId.toBuffer(), Buffer.from('ProgramDerivedAddress')]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n\n    return new PublicKey(publicKeyBytes);\n  }\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n\n\n  static async findProgramAddress(seeds, programId) {\n    let nonce = 255;\n    let address;\n\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n\n        nonce--;\n        continue;\n      }\n\n      return [address, nonce];\n    }\n\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n\n\n  static isOnCurve(pubkey) {\n    return is_on_curve(pubkey) == 1;\n  }\n\n}\n\n_defineProperty(PublicKey, \"default\", new PublicKey('11111111111111111111111111111111'));\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']]\n}); // @ts-ignore\n\nlet naclLowLevel = nacl__default.lowlevel; // Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\n\nfunction is_on_curve(p) {\n  var r = [naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf(), naclLowLevel.gf()];\n  var t = naclLowLevel.gf(),\n      chk = naclLowLevel.gf(),\n      num = naclLowLevel.gf(),\n      den = naclLowLevel.gf(),\n      den2 = naclLowLevel.gf(),\n      den4 = naclLowLevel.gf(),\n      den6 = naclLowLevel.gf();\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\n\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7, 0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83]);\n\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n      d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\n\n\nclass Account {\n  /** @internal */\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey) {\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * The public key for this account\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The **unencrypted** secret key for this account\n   */\n\n\n  get secretKey() {\n    return toBuffer(this._keypair.secretKey);\n  }\n\n}\n\nconst BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey('BPFLoader1111111111111111111111111111111111');\n/**\n * Layout for a public key\n */\n\nconst publicKey = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'publicKey';\n  return BufferLayout.blob(32, property);\n};\n/**\n * Layout for a Rust String type\n */\n\n\nconst rustString = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'string';\n  const rsl = BufferLayout.struct([BufferLayout.u32('length'), BufferLayout.u32('lengthPadding'), BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars')], property);\n\n  const _decode = rsl.decode.bind(rsl);\n\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8')\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return BufferLayout.u32().span + BufferLayout.u32().span + Buffer.from(str, 'utf8').length;\n  };\n\n  return rsl;\n};\n/**\n * Layout for an Authorized object\n */\n\n\nconst authorized = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'authorized';\n  return BufferLayout.struct([publicKey('staker'), publicKey('withdrawer')], property);\n};\n/**\n * Layout for a Lockup object\n */\n\n\nconst lockup = function () {\n  let property = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'lockup';\n  return BufferLayout.struct([BufferLayout.ns64('unixTimestamp'), BufferLayout.ns64('epoch'), publicKey('custodian')], property);\n};\n\nfunction getAlloc(type, fields) {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n\nfunction decodeLength(bytes) {\n  let len = 0;\n  let size = 0;\n\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << size * 7;\n    size += 1;\n\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n\n  return len;\n}\n\nfunction encodeLength(bytes, len) {\n  let rem_len = len;\n\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n/**\n * The message header, identifying signed and read-only account\n */\n\n\nconst PUBKEY_LENGTH = 32;\n/**\n * List of instructions to be processed atomically\n */\n\nclass Message {\n  constructor(args) {\n    _defineProperty(this, \"header\", void 0);\n\n    _defineProperty(this, \"accountKeys\", void 0);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"instructions\", void 0);\n\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index) {\n    return index < this.header.numRequiredSignatures - this.header.numReadonlySignedAccounts || index >= this.header.numRequiredSignatures && index < this.accountKeys.length - this.header.numReadonlyUnsignedAccounts;\n  }\n\n  serialize() {\n    const numKeys = this.accountKeys.length;\n    let keyCount = [];\n    encodeLength(keyCount, numKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        accounts,\n        programIdIndex\n      } = instruction;\n      const data = bs58.decode(instruction.data);\n      let keyIndicesCount = [];\n      encodeLength(keyIndicesCount, accounts.length);\n      let dataCount = [];\n      encodeLength(dataCount, data.length);\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data\n      };\n    });\n    let instructionCount = [];\n    encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([BufferLayout.u8('programIdIndex'), BufferLayout.blob(instruction.keyIndicesCount.length, 'keyIndicesCount'), BufferLayout.seq(BufferLayout.u8('keyIndex'), instruction.keyIndices.length, 'keyIndices'), BufferLayout.blob(instruction.dataLength.length, 'dataLength'), BufferLayout.seq(BufferLayout.u8('userdatum'), instruction.data.length, 'data')]);\n      const length = instructionLayout.encode(instruction, instructionBuffer, instructionBufferLength);\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n    const signDataLayout = BufferLayout.struct([BufferLayout.blob(1, 'numRequiredSignatures'), BufferLayout.blob(1, 'numReadonlySignedAccounts'), BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'), BufferLayout.blob(keyCount.length, 'keyCount'), BufferLayout.seq(publicKey('key'), numKeys, 'keys'), publicKey('recentBlockhash')]);\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([this.header.numReadonlySignedAccounts]),\n      numReadonlyUnsignedAccounts: Buffer.from([this.header.numReadonlyUnsignedAccounts]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash)\n    };\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n  /**\n   * Decode a compiled message into a Message object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n    const accountCount = decodeLength(byteArray);\n    let accountKeys = [];\n\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n    const instructionCount = decodeLength(byteArray);\n    let instructions = [];\n\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift();\n      const accountCount = decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions\n    };\n    return new Message(messageArgs);\n  }\n\n}\n\nfunction assert(condition, message) {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\n\n\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\n\nconst PACKET_DATA_SIZE = 1280 - 40 - 8;\nconst SIGNATURE_LENGTH = 64;\n/**\n * Account metadata used to define instructions\n */\n\n/**\n * Transaction Instruction class\n */\n\nclass TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n\n  /**\n   * Program Id to execute\n   */\n\n  /**\n   * Program input\n   */\n  constructor(opts) {\n    _defineProperty(this, \"keys\", void 0);\n\n    _defineProperty(this, \"programId\", void 0);\n\n    _defineProperty(this, \"data\", Buffer.alloc(0));\n\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n}\n/**\n * Pair of signature and corresponding public key\n */\n\n/**\n * Transaction class\n */\n\n\nclass Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature() {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n\n    return null;\n  }\n  /**\n   * The transaction fee payer\n   */\n\n  /**\n   * Construct an empty Transaction\n   */\n\n\n  constructor(opts) {\n    _defineProperty(this, \"signatures\", []);\n\n    _defineProperty(this, \"feePayer\", void 0);\n\n    _defineProperty(this, \"instructions\", []);\n\n    _defineProperty(this, \"recentBlockhash\", void 0);\n\n    _defineProperty(this, \"nonceInfo\", void 0);\n\n    opts && Object.assign(this, opts);\n  }\n  /**\n   * Add one or more instructions to this Transaction\n   */\n\n\n  add() {\n    for (var _len = arguments.length, items = new Array(_len), _key = 0; _key < _len; _key++) {\n      items[_key] = arguments[_key];\n    }\n\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach(item => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n  /**\n   * Compile transaction data\n   */\n\n\n  compileMessage() {\n    const {\n      nonceInfo\n    } = this;\n\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n\n    const {\n      recentBlockhash\n    } = this;\n\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer;\n\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(`Transaction instruction index ${i} has undefined program id`);\n      }\n    }\n\n    const programIds = [];\n    const accountMetas = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({ ...accountMeta\n        });\n      });\n      const programId = instruction.programId.toString();\n\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    }); // Append programID account metas\n\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false\n      });\n    }); // Sort. Prioritizing first by signer, then by writable\n\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable = x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    }); // Cull duplicate account metas\n\n    const uniqueMetas = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable = uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    }); // Move fee payer to the front\n\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true\n      });\n    } // Disallow unknown signers\n\n\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn('Transaction references a signature that is unnecessary, ' + 'only the fee payer and instruction signer accounts should sign a transaction. ' + 'This behavior is deprecated and will throw an error in the next major version release.');\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0; // Split out signing from non-signing keys and count header values\n\n    const signedKeys = [];\n    const unsignedKeys = [];\n    uniqueMetas.forEach(_ref => {\n      let {\n        pubkey,\n        isSigner,\n        isWritable\n      } = _ref;\n\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions = this.instructions.map(instruction => {\n      const {\n        data,\n        programId\n      } = instruction;\n      return {\n        programIdIndex: accountKeys.indexOf(programId.toString()),\n        accounts: instruction.keys.map(meta => accountKeys.indexOf(meta.pubkey.toString())),\n        data: bs58.encode(data)\n      };\n    });\n    instructions.forEach(instruction => {\n      assert(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => assert(keyIndex >= 0));\n    });\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions\n    });\n  }\n  /**\n   * @internal\n   */\n\n\n  _compile() {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(0, message.header.numRequiredSignatures);\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n    return message;\n  }\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n\n\n  serializeMessage() {\n    return this._compile().serialize();\n  }\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n\n\n  setSigners() {\n    for (var _len2 = arguments.length, signers = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n      signers[_key2] = arguments[_key2];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers.filter(publicKey => {\n      const key = publicKey.toString();\n\n      if (seen.has(key)) {\n        return false;\n      } else {\n        seen.add(key);\n        return true;\n      }\n    }).map(publicKey => ({\n      signature: null,\n      publicKey\n    }));\n  }\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n\n\n  sign() {\n    for (var _len3 = arguments.length, signers = new Array(_len3), _key3 = 0; _key3 < _len3; _key3++) {\n      signers[_key3] = arguments[_key3];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey\n    }));\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n\n    this._verifySignatures(message.serialize(), true);\n  }\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n\n\n  partialSign() {\n    for (var _len4 = arguments.length, signers = new Array(_len4), _key4 = 0; _key4 < _len4; _key4++) {\n      signers[_key4] = arguments[_key4];\n    }\n\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    } // Dedupe signers\n\n\n    const seen = new Set();\n    const uniqueSigners = [];\n\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n\n    this._partialSign(message, ...uniqueSigners);\n  }\n  /**\n   * @internal\n   */\n\n\n  _partialSign(message) {\n    const signData = message.serialize();\n\n    for (var _len5 = arguments.length, signers = new Array(_len5 > 1 ? _len5 - 1 : 0), _key5 = 1; _key5 < _len5; _key5++) {\n      signers[_key5 - 1] = arguments[_key5];\n    }\n\n    signers.forEach(signer => {\n      const signature = nacl__default.sign.detached(signData, signer.secretKey);\n\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n\n\n  addSignature(pubkey, signature) {\n    this._compile(); // Ensure signatures array is populated\n\n\n    this._addSignature(pubkey, signature);\n  }\n  /**\n   * @internal\n   */\n\n\n  _addSignature(pubkey, signature) {\n    assert(signature.length === 64);\n    const index = this.signatures.findIndex(sigpair => pubkey.equals(sigpair.publicKey));\n\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n\n\n  verifySignatures() {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n  /**\n   * @internal\n   */\n\n\n  _verifySignatures(signData, requireAllSignatures) {\n    for (const {\n      signature,\n      publicKey\n    } of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!nacl__default.sign.detached.verify(signData, signature, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n\n\n  serialize(config) {\n    const {\n      requireAllSignatures,\n      verifySignatures\n    } = Object.assign({\n      requireAllSignatures: true,\n      verifySignatures: true\n    }, config);\n    const signData = this.serializeMessage();\n\n    if (verifySignatures && !this._verifySignatures(signData, requireAllSignatures)) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n  /**\n   * @internal\n   */\n\n\n  _serialize(signData) {\n    const {\n      signatures\n    } = this;\n    const signatureCount = [];\n    encodeLength(signatureCount, signatures.length);\n    const transactionLength = signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    assert(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach((_ref2, index) => {\n      let {\n        signature\n      } = _ref2;\n\n      if (signature !== null) {\n        assert(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(wireTransaction, signatureCount.length + index * 64);\n      }\n    });\n    signData.copy(wireTransaction, signatureCount.length + signatures.length * 64);\n    assert(wireTransaction.length <= PACKET_DATA_SIZE, `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`);\n    return wireTransaction;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get keys() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get programId() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n  /**\n   * Deprecated method\n   * @internal\n   */\n\n\n  get data() {\n    assert(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n\n\n  static from(buffer) {\n    // Slice up wire data\n    let byteArray = [...buffer];\n    const signatureCount = decodeLength(byteArray);\n    let signatures = [];\n\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n  /**\n   * Populate Transaction object from message and signatures\n   */\n\n\n  static populate(message, signatures) {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature: signature == bs58.encode(DEFAULT_SIGNATURE) ? null : bs58.decode(signature),\n        publicKey: message.accountKeys[index]\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(keyObj => keyObj.publicKey.toString() === pubkey.toString()),\n          isWritable: message.isAccountWritable(account)\n        };\n      });\n      transaction.instructions.push(new TransactionInstruction({\n        keys,\n        programId: message.accountKeys[instruction.programIdIndex],\n        data: bs58.decode(instruction.data)\n      }));\n    });\n    return transaction;\n  }\n\n}\n\nconst SYSVAR_CLOCK_PUBKEY = new PublicKey('SysvarC1ock11111111111111111111111111111111');\nconst SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey('SysvarRecentB1ockHashes11111111111111111111');\nconst SYSVAR_RENT_PUBKEY = new PublicKey('SysvarRent111111111111111111111111111111111');\nconst SYSVAR_REWARDS_PUBKEY = new PublicKey('SysvarRewards111111111111111111111111111111');\nconst SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey('SysvarStakeHistory1111111111111111111111111');\nconst SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey('Sysvar1nstructions1111111111111111111111111');\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\nasync function sendAndConfirmTransaction(connection, transaction, signers, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendTransaction(transaction, signers, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n} // zzz\n\n\nfunction sleep(ms) {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n/**\n * @internal\n */\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\n\n\nfunction encodeData(type, fields) {\n  const allocLength = type.layout.span >= 0 ? type.layout.span : getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({\n    instruction: type.index\n  }, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\n\n\nfunction decodeData(type, buffer) {\n  let data;\n\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(`invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`);\n  }\n\n  return data;\n}\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\n\n\nconst FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n/**\n * Calculator for transaction fees.\n */\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\n\nconst NonceAccountLayout = BufferLayout.struct([BufferLayout.u32('version'), BufferLayout.u32('state'), publicKey('authorizedPubkey'), publicKey('nonce'), BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator')]);\nconst NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n/**\n * NonceAccount class\n */\n\nclass NonceAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    _defineProperty(this, \"authorizedPubkey\", void 0);\n\n    _defineProperty(this, \"nonce\", void 0);\n\n    _defineProperty(this, \"feeCalculator\", void 0);\n\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator\n    });\n  }\n\n}\n/**\n * Create account system transaction params\n */\n\n/**\n * System Instruction class\n */\n\n\nclass SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateAccount(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Create, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransfer(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Transfer, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeTransferWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      space\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Allocate, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space\n    };\n  }\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAllocateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssign(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.Assign, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAssignWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n    const {\n      base,\n      seed,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed, instruction.data);\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeCreateWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      base,\n      seed,\n      lamports,\n      space,\n      programId\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed, instruction.data);\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId)\n    };\n  }\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAdvance(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n\n\n  static decodeNonceAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized\n    } = decodeData(SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount, instruction.data);\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized)\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid SystemInstructionType's\n */\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\n\n\nconst SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('programId')])\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('lamports'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('authorized')])\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('space')])\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), BufferLayout.ns64('space'), publicKey('programId')])\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('base'), rustString('seed'), publicKey('programId')])\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports'), rustString('seed'), publicKey('programId')])\n  }\n});\n/**\n * Factory class for transactions to interact with the System program\n */\n\nclass SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the System program\n   */\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n\n\n  static createAccount(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.newAccountPubkey,\n        isSigner: true,\n        isWritable: true\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n\n\n  static transfer(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {\n        lamports: params.lamports\n      });\n      keys = [{\n        pubkey: params.fromPubkey,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n\n\n  static assign(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer())\n    });\n    let keys = [{\n      pubkey: params.fromPubkey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: params.newAccountPubkey,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      });\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n\n\n  static createNonceAccount(params) {\n    const transaction = new Transaction();\n\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    } else {\n      transaction.add(SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId\n      }));\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey\n    };\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n\n\n  static nonceInitialize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer())\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n\n\n  static nonceAdvance(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n\n\n  static nonceWithdraw(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {\n      lamports: params.lamports\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.toPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n\n\n  static nonceAuthorize(params) {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer())\n    });\n    return new TransactionInstruction({\n      keys: [{\n        pubkey: params.noncePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n\n\n  static allocate(params) {\n    let data;\n    let keys;\n\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer())\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: params.basePubkey,\n        isSigner: true,\n        isWritable: false\n      }];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space\n      });\n      keys = [{\n        pubkey: params.accountPubkey,\n        isSigner: true,\n        isWritable: true\n      }];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\n_defineProperty(SystemProgram, \"programId\", new PublicKey('11111111111111111111111111111111')); // rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\n\n\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n/**\n * Program loader interface\n */\n\nclass Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n\n\n  static getMinNumSignatures(dataLength) {\n    return 2 * ( // Every transaction requires two signatures (payer + program)\n    Math.ceil(dataLength / Loader.chunkSize) + 1 + // Add one for Create transaction\n    1) // Add one for Finalize transaction\n    ;\n  }\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static async load(connection, payer, program, programId, data) {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(data.length); // Fetch program account info to check if it has already been created\n\n      const programInfo = await connection.getAccountInfo(program.publicKey, 'confirmed');\n      let transaction = null;\n\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.allocate({\n            accountPubkey: program.publicKey,\n            space: data.length\n          }));\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.assign({\n            accountPubkey: program.publicKey,\n            programId\n          }));\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(SystemProgram.transfer({\n            fromPubkey: payer.publicKey,\n            toPubkey: program.publicKey,\n            lamports: balanceNeeded - programInfo.lamports\n          }));\n        }\n      } else {\n        transaction = new Transaction().add(SystemProgram.createAccount({\n          fromPubkey: payer.publicKey,\n          newAccountPubkey: program.publicKey,\n          lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n          space: data.length,\n          programId\n        }));\n      } // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n\n\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed'\n        });\n      }\n    }\n    const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.u32('offset'), BufferLayout.u32('bytesLength'), BufferLayout.u32('bytesLengthPadding'), BufferLayout.seq(BufferLayout.u8('byte'), BufferLayout.offset(BufferLayout.u32(), -8), 'bytes')]);\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode({\n        instruction: 0,\n        // Load instruction\n        offset,\n        bytes\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }],\n        programId,\n        data\n      });\n      transactions.push(sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      })); // Delay between sends in an attempt to reduce rate limit errors\n\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n\n    await Promise.all(transactions); // Finalize the account loaded with program data for execution\n\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 1 // Finalize instruction\n\n      }, data);\n      const transaction = new Transaction().add({\n        keys: [{\n          pubkey: program.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false\n        }],\n        programId,\n        data\n      });\n      await sendAndConfirmTransaction(connection, transaction, [payer, program], {\n        commitment: 'confirmed'\n      });\n    } // success\n\n    return true;\n  }\n\n}\n\n_defineProperty(Loader, \"chunkSize\", CHUNK_SIZE);\n\nconst BPF_LOADER_PROGRAM_ID = new PublicKey('BPFLoader2111111111111111111111111111111111');\n/**\n * Factory class for transactions to interact with a program loader\n */\n\nclass BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength) {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n\n\n  static load(connection, payer, program, elf, loaderProgramId) {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n\n}\n\nvar browser = {\n  exports: {}\n};\n\n(function (module, exports) {\n  // ref: https://github.com/tc39/proposal-global\n  var getGlobal = function () {\n    // the only reliable means to get the global object is\n    // `Function('return this')()`\n    // However, this causes CSP violations in Chrome apps.\n    if (typeof self !== 'undefined') {\n      return self;\n    }\n\n    if (typeof window !== 'undefined') {\n      return window;\n    }\n\n    if (typeof global !== 'undefined') {\n      return global;\n    }\n\n    throw new Error('unable to locate global object');\n  };\n\n  var global = getGlobal();\n  module.exports = exports = global.fetch; // Needed for TypeScript and Webpack.\n\n  if (global.fetch) {\n    exports.default = global.fetch.bind(global);\n  }\n\n  exports.Headers = global.Headers;\n  exports.Request = global.Request;\n  exports.Response = global.Response;\n})(browser, browser.exports);\n\nvar fetch = browser.exports;\nconst MINIMUM_SLOT_PER_EPOCH = 32; // Returns the number of trailing zeros in the binary representation of self.\n\nfunction trailingZeros(n) {\n  let trailingZeros = 0;\n\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n\n  return trailingZeros;\n} // Returns the smallest power of two greater than or equal to n\n\n\nfunction nextPowerOfTwo(n) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\n\n\nclass EpochSchedule {\n  /** The maximum number of slots in each epoch */\n\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n\n  /** Indicates whether epochs start short and grow */\n\n  /** The first epoch with `slotsPerEpoch` slots */\n\n  /** The first slot of `firstNormalEpoch` */\n  constructor(slotsPerEpoch, leaderScheduleSlotOffset, warmup, firstNormalEpoch, firstNormalSlot) {\n    _defineProperty(this, \"slotsPerEpoch\", void 0);\n\n    _defineProperty(this, \"leaderScheduleSlotOffset\", void 0);\n\n    _defineProperty(this, \"warmup\", void 0);\n\n    _defineProperty(this, \"firstNormalEpoch\", void 0);\n\n    _defineProperty(this, \"firstNormalSlot\", void 0);\n\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot) {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot) {\n    if (slot < this.firstNormalSlot) {\n      const epoch = trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) - trailingZeros(MINIMUM_SLOT_PER_EPOCH) - 1;\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch) {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (epoch - this.firstNormalEpoch) * this.slotsPerEpoch + this.firstNormalSlot;\n    }\n  }\n\n  getLastSlotInEpoch(epoch) {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n\n}\n\nclass SendTransactionError extends Error {\n  constructor(message, logs) {\n    super(message);\n\n    _defineProperty(this, \"logs\", void 0);\n\n    this.logs = logs;\n  }\n\n} // TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\n\n\nconst NUM_TICKS_PER_SECOND = 160;\n/**\n * @internal\n */\n\nconst DEFAULT_TICKS_PER_SLOT = 64;\n/**\n * @internal\n */\n\nconst NUM_SLOTS_PER_SECOND = NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n/**\n * @internal\n */\n\nconst MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n\nfunction promiseTimeout(promise, timeoutMs) {\n  let timeoutId;\n  const timeoutPromise = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n  return Promise.race([promise, timeoutPromise]).then(result => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n\nfunction makeWebsocketUrl(endpoint) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = ''; // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n\n  return url.toString();\n}\n\nconst PublicKeyFromString = coerce(instance(PublicKey), string(), value => new PublicKey(value));\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\nconst BufferFromRawAccountData = coerce(instance(Buffer), RawAccountDataResult, value => Buffer.from(value[0], 'base64'));\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\n\nconst BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n/**\n * @internal\n */\n\nfunction createRpcResult(result) {\n  return union([type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    result\n  }), type({\n    jsonrpc: literal('2.0'),\n    id: string(),\n    error: type({\n      code: unknown(),\n      message: string(),\n      data: optional(any())\n    })\n  })]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n/**\n * @internal\n */\n\nfunction jsonRpcResult(schema) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return { ...value,\n        result: create(value.result, schema)\n      };\n    }\n  });\n}\n/**\n * @internal\n */\n\n\nfunction jsonRpcResultAndContext(value) {\n  return jsonRpcResult(type({\n    context: type({\n      slot: number()\n    }),\n    value\n  }));\n}\n/**\n * @internal\n */\n\n\nfunction notificationResultAndContext(value) {\n  return type({\n    context: type({\n      slot: number()\n    }),\n    value\n  });\n}\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\n\n\nconst GetInflationGovernorResult = type({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number()\n});\n/**\n * The inflation reward for an epoch\n */\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\n\nconst GetInflationRewardResult = jsonRpcResult(array(nullable(type({\n  epoch: number(),\n  effectiveSlot: number(),\n  amount: number(),\n  postBalance: number()\n}))));\n/**\n * Information about the current epoch\n */\n\nconst GetEpochInfoResult = type({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number())\n});\nconst GetEpochScheduleResult = type({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number()\n});\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n/**\n * Transaction error or null\n */\n\nconst TransactionErrorResult = nullable(union([type({}), string()]));\n/**\n * Signature status for a transaction\n */\n\nconst SignatureStatusResult = type({\n  err: TransactionErrorResult\n});\n/**\n * Transaction signature received notification\n */\n\nconst SignatureReceivedResult = literal('receivedSignature');\n/**\n * Version info for a node\n */\n\nconst VersionResult = type({\n  'solana-core': string(),\n  'feature-set': optional(number())\n});\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(type({\n  err: nullable(union([type({}), string()])),\n  logs: nullable(array(string()))\n}));\n\nfunction createRpcClient(url, useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit) {\n  let fetchWithMiddleware;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url, options) => {\n      return new Promise((resolve, reject) => {\n        fetchMiddleware(url, options, async (url, options) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign({\n        'Content-Type': 'application/json'\n      }, httpHeaders || {})\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res;\n      let waitTime = 500;\n\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429\n        /* Too many requests */\n        ) {\n          break;\n        }\n\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n\n        too_many_requests_retries -= 1;\n\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n\n        console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`);\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {}\n  }, {});\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client) {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client) {\n  return requests => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n      const batch = requests.map(params => {\n        return client.request(params.methodName, params.args);\n      });\n      client.request(batch, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n\n        resolve(response);\n      });\n    });\n  };\n}\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\n\n\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\n\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\n\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\n\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\n\nconst SlotRpcResult = jsonRpcResult(number());\n/**\n * Supply\n */\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\n\nconst GetSupplyRpcResult = jsonRpcResultAndContext(type({\n  total: number(),\n  circulating: number(),\n  nonCirculating: number(),\n  nonCirculatingAccounts: array(PublicKeyFromString)\n}));\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\n\n/**\n * Expected JSON RPC structure for token amounts\n */\n\nconst TokenAmountResult = type({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n});\n/**\n * Token address and balance.\n */\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\n\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(array(type({\n  address: PublicKeyFromString,\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string())\n})));\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\n\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: BufferFromRawAccountData,\n    rentEpoch: number()\n  })\n})));\nconst ParsedAccountDataResult = type({\n  program: string(),\n  parsed: unknown(),\n  space: number()\n});\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\n\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(array(type({\n  pubkey: PublicKeyFromString,\n  account: type({\n    executable: boolean(),\n    owner: PublicKeyFromString,\n    lamports: number(),\n    data: ParsedAccountDataResult,\n    rentEpoch: number()\n  })\n})));\n/**\n * Pair of an account address and its balance\n */\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\n\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(array(type({\n  lamports: number(),\n  address: PublicKeyFromString\n})));\n/**\n * @internal\n */\n\nconst AccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number()\n});\n/**\n * @internal\n */\n\nconst KeyedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\nconst ParsedOrRawAccountData = coerce(union([instance(Buffer), ParsedAccountDataResult]), union([RawAccountDataResult, ParsedAccountDataResult]), value => {\n  if (Array.isArray(value)) {\n    return create(value, BufferFromRawAccountData);\n  } else {\n    return value;\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedAccountInfoResult = type({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number()\n});\nconst KeyedParsedAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult\n});\n/**\n * @internal\n */\n\nconst StakeActivationResult = type({\n  state: union([literal('active'), literal('inactive'), literal('activating'), literal('deactivating')]),\n  active: number(),\n  inactive: number()\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\n\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(array(type({\n  signature: string(),\n  slot: number(),\n  err: TransactionErrorResult,\n  memo: nullable(string()),\n  blockTime: optional(nullable(number()))\n})));\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\n\nconst AccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst ProgramAccountInfoResult = type({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult\n});\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\n\nconst ProgramAccountNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult)\n});\n/**\n * @internal\n */\n\nconst SlotInfoResult = type({\n  parent: number(),\n  slot: number(),\n  root: number()\n});\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\n\nconst SlotNotificationResult = type({\n  subscription: number(),\n  result: SlotInfoResult\n});\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\n\n/**\n * @internal\n */\n\nconst SlotUpdateResult = union([type({\n  type: union([literal('firstShredReceived'), literal('completed'), literal('optimisticConfirmation'), literal('root')]),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('createdBank'),\n  parent: number(),\n  slot: number(),\n  timestamp: number()\n}), type({\n  type: literal('frozen'),\n  slot: number(),\n  timestamp: number(),\n  stats: type({\n    numTransactionEntries: number(),\n    numSuccessfulTransactions: number(),\n    numFailedTransactions: number(),\n    maxTransactionsPerEntry: number()\n  })\n}), type({\n  type: literal('dead'),\n  slot: number(),\n  timestamp: number(),\n  err: string()\n})]);\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\n\nconst SlotUpdateNotificationResult = type({\n  subscription: number(),\n  result: SlotUpdateResult\n});\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\n\nconst SignatureNotificationResult = type({\n  subscription: number(),\n  result: notificationResultAndContext(union([SignatureStatusResult, SignatureReceivedResult]))\n});\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\n\nconst RootNotificationResult = type({\n  subscription: number(),\n  result: number()\n});\nconst ContactInfoResult = type({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string())\n});\nconst VoteAccountInfoResult = type({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number())\n});\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\n\nconst GetVoteAccounts = jsonRpcResult(type({\n  current: array(VoteAccountInfoResult),\n  delinquent: array(VoteAccountInfoResult)\n}));\nconst ConfirmationStatus = union([literal('processed'), literal('confirmed'), literal('finalized')]);\nconst SignatureStatusResponse = type({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus)\n});\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\n\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(array(nullable(SignatureStatusResponse)));\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\n\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\nconst ConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(string()),\n    header: type({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number()\n    }),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    })),\n    recentBlockhash: string()\n  })\n});\nconst ParsedInstructionResult = type({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString\n});\nconst RawInstructionResult = type({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString\n});\nconst InstructionResult = union([RawInstructionResult, ParsedInstructionResult]);\nconst UnknownInstructionResult = union([type({\n  parsed: unknown(),\n  program: string(),\n  programId: string()\n}), type({\n  accounts: array(string()),\n  data: string(),\n  programId: string()\n})]);\nconst ParsedOrRawInstruction = coerce(InstructionResult, UnknownInstructionResult, value => {\n  if ('accounts' in value) {\n    return create(value, RawInstructionResult);\n  } else {\n    return create(value, ParsedInstructionResult);\n  }\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionResult = type({\n  signatures: array(string()),\n  message: type({\n    accountKeys: array(type({\n      pubkey: PublicKeyFromString,\n      signer: boolean(),\n      writable: boolean()\n    })),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string()\n  })\n});\nconst TokenBalanceResult = type({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult\n});\n/**\n * @internal\n */\n\nconst ConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(type({\n      accounts: array(number()),\n      data: string(),\n      programIdIndex: number()\n    }))\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * @internal\n */\n\nconst ParsedConfirmedTransactionMetaResult = type({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(nullable(array(type({\n    index: number(),\n    instructions: array(ParsedOrRawInstruction)\n  })))),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult)))\n});\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\n\nconst GetConfirmedBlockRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  transactions: array(type({\n    transaction: ConfirmedTransactionResult,\n    meta: nullable(ConfirmedTransactionMetaResult)\n  })),\n  rewards: optional(array(type({\n    pubkey: string(),\n    lamports: number(),\n    postBalance: nullable(number()),\n    rewardType: nullable(string())\n  }))),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\n\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(nullable(type({\n  blockhash: string(),\n  previousBlockhash: string(),\n  parentSlot: number(),\n  signatures: array(string()),\n  blockTime: nullable(number())\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  meta: ConfirmedTransactionMetaResult,\n  blockTime: optional(nullable(number())),\n  transaction: ConfirmedTransactionResult\n})));\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\n\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(nullable(type({\n  slot: number(),\n  transaction: ParsedConfirmedTransactionResult,\n  meta: nullable(ParsedConfirmedTransactionMetaResult),\n  blockTime: optional(nullable(number()))\n})));\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\n\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(type({\n  blockhash: string(),\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n}));\nconst PerfSampleResult = type({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number()\n});\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\n\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(array(PerfSampleResult));\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\n\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(nullable(type({\n  feeCalculator: type({\n    lamportsPerSignature: number()\n  })\n})));\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\n\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\n\nconst SendTransactionRpcResult = jsonRpcResult(string());\n/**\n * Information about the latest slot being processed by a node\n */\n\n/**\n * @internal\n */\n\nconst LogsResult = type({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string()\n});\n/**\n * Logs result.\n */\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\n\nconst LogsNotificationResult = type({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number()\n});\n/**\n * Filter for log subscriptions.\n */\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\n\nclass Connection {\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /** @internal */\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(endpoint, commitmentOrConfig) {\n    _defineProperty(this, \"_commitment\", void 0);\n\n    _defineProperty(this, \"_rpcEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcWsEndpoint\", void 0);\n\n    _defineProperty(this, \"_rpcClient\", void 0);\n\n    _defineProperty(this, \"_rpcRequest\", void 0);\n\n    _defineProperty(this, \"_rpcBatchRequest\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocket\", void 0);\n\n    _defineProperty(this, \"_rpcWebSocketConnected\", false);\n\n    _defineProperty(this, \"_rpcWebSocketHeartbeat\", null);\n\n    _defineProperty(this, \"_rpcWebSocketIdleTimeout\", null);\n\n    _defineProperty(this, \"_disableBlockhashCaching\", false);\n\n    _defineProperty(this, \"_pollingBlockhash\", false);\n\n    _defineProperty(this, \"_blockhashInfo\", {\n      recentBlockhash: null,\n      lastFetch: 0,\n      transactionSignatures: [],\n      simulatedSignatures: []\n    });\n\n    _defineProperty(this, \"_accountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_accountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_programAccountChangeSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_programAccountChangeSubscriptions\", {});\n\n    _defineProperty(this, \"_rootSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_rootSubscriptions\", {});\n\n    _defineProperty(this, \"_signatureSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_signatureSubscriptions\", {});\n\n    _defineProperty(this, \"_slotSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotSubscriptions\", {});\n\n    _defineProperty(this, \"_logsSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_logsSubscriptions\", {});\n\n    _defineProperty(this, \"_slotUpdateSubscriptionCounter\", 0);\n\n    _defineProperty(this, \"_slotUpdateSubscriptions\", {});\n\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n    this._rpcClient = createRpcClient(url.toString(), useHttps, httpHeaders, fetchMiddleware, disableRetryOnRateLimit);\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n    this._rpcWebSocket = new Client(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity\n    });\n\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n\n    this._rpcWebSocket.on('accountNotification', this._wsOnAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('programNotification', this._wsOnProgramAccountNotification.bind(this));\n\n    this._rpcWebSocket.on('slotNotification', this._wsOnSlotNotification.bind(this));\n\n    this._rpcWebSocket.on('slotsUpdatesNotification', this._wsOnSlotUpdatesNotification.bind(this));\n\n    this._rpcWebSocket.on('signatureNotification', this._wsOnSignatureNotification.bind(this));\n\n    this._rpcWebSocket.on('rootNotification', this._wsOnRootNotification.bind(this));\n\n    this._rpcWebSocket.on('logsNotification', this._wsOnLogsNotification.bind(this));\n  }\n  /**\n   * The default commitment used for requests\n   */\n\n\n  get commitment() {\n    return this._commitment;\n  }\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n\n\n  async getBalanceAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get balance for ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the balance for the specified public key\n   */\n\n\n  async getBalance(publicKey, commitment) {\n    return await this.getBalanceAndContext(publicKey, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get balance of account ' + publicKey.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Fetch the estimated production time of a block\n   */\n\n\n  async getBlockTime(slot) {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n\n    if ('error' in res) {\n      throw new Error('failed to get block time for slot ' + slot + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n\n\n  async getMinimumLedgerSlot() {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get minimum ledger slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n\n\n  async getFirstAvailableBlock() {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get first available block: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch information about the current supply\n   */\n\n\n  async getSupply(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current supply of a token mint\n   */\n\n\n  async getTokenSupply(tokenMintAddress, commitment) {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current balance of a token account\n   */\n\n\n  async getTokenAccountBalance(tokenAddress, commitment) {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get token account balance: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n\n\n  async getTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n\n\n  async getParsedTokenAccountsByOwner(ownerAddress, filter, commitment) {\n    let _args = [ownerAddress.toBase58()];\n\n    if ('mint' in filter) {\n      _args.push({\n        mint: filter.mint.toBase58()\n      });\n    } else {\n      _args.push({\n        programId: filter.programId.toBase58()\n      });\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n\n    if ('error' in res) {\n      throw new Error('failed to get token accounts owned by account ' + ownerAddress.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n\n\n  async getLargestAccounts(config) {\n    const arg = { ...config,\n      commitment: config && config.commitment || this.commitment\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n\n\n  async getTokenLargestAccounts(mintAddress, commitment) {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get token largest accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n\n\n  async getAccountInfoAndContext(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(AccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n\n\n  async getParsedAccountInfo(publicKey, commitment) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the account info for the specified public key\n   */\n\n\n  async getAccountInfo(publicKey, commitment) {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get info about account ' + publicKey.toBase58() + ': ' + e);\n    }\n  }\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n\n\n  async getStakeActivation(publicKey, commitment, epoch) {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, undefined, epoch !== undefined ? {\n      epoch\n    } : undefined);\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n\n    if ('error' in res) {\n      throw new Error(`failed to get Stake Activation ${publicKey.toBase58()}: ${res.error.message}`);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n\n\n  async getProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n    let encoding;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, encoding || 'base64', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n\n\n  async getParsedProgramAccounts(programId, configOrCommitment) {\n    const extra = {};\n    let commitment;\n\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs([programId.toBase58()], commitment, 'jsonParsed', extra);\n\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedParsedAccountInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get accounts owned by program ' + programId.toBase58() + ': ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n\n\n  async confirmTransaction(signature, commitment) {\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n    let subscriptionId;\n    let response = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(signature, (result, context) => {\n          subscriptionId = undefined;\n          response = {\n            context,\n            value: result\n          };\n          resolve(null);\n        }, subscriptionCommitment);\n      } catch (err) {\n        reject(err);\n      }\n    });\n    let timeoutMs = 60 * 1000;\n\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip':\n        {\n          timeoutMs = 30 * 1000;\n          break;\n        }\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(`Transaction was not confirmed in ${duration.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`);\n    }\n\n    return response;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getClusterNodes() {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n\n\n  async getVoteAccounts(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot that the node is processing\n   */\n\n\n  async getSlot(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n\n\n  async getSlotLeader(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n\n\n  async getSlotLeaders(startSlot, limit) {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current status of a signature\n   */\n\n\n  async getSignatureStatus(signature, config) {\n    const {\n      context,\n      value: values\n    } = await this.getSignatureStatuses([signature], config);\n    assert(values.length === 1);\n    const value = values[0];\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n\n\n  async getSignatureStatuses(signatures, config) {\n    const params = [signatures];\n\n    if (config) {\n      params.push(config);\n    }\n\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n\n\n  async getTransactionCount(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n\n\n  async getTotalSupply(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n\n    return res.result.value.total;\n  }\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n\n\n  async getInflationGovernor(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n\n\n  async getInflationReward(addresses, epoch, commitment) {\n    const args = this._buildArgs([addresses.map(pubkey => pubkey.toBase58())], commitment, undefined, {\n      epoch\n    });\n\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Info parameters\n   */\n\n\n  async getEpochInfo(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n\n\n  async getEpochSchedule() {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n\n    const epochSchedule = res.result;\n    return new EpochSchedule(epochSchedule.slotsPerEpoch, epochSchedule.leaderScheduleSlotOffset, epochSchedule.warmup, epochSchedule.firstNormalEpoch, epochSchedule.firstNormalSlot);\n  }\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n\n\n  async getLeaderSchedule() {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n\n\n  async getMinimumBalanceForRentExemption(dataLength, commitment) {\n    const args = this._buildArgs([dataLength], commitment);\n\n    const unsafeRes = await this._rpcRequest('getMinimumBalanceForRentExemption', args);\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n\n\n  async getRecentBlockhashAndContext(commitment) {\n    const args = this._buildArgs([], commitment);\n\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n\n\n  async getRecentPerformanceSamples(limit) {\n    const args = this._buildArgs(limit ? [limit] : []);\n\n    const unsafeRes = await this._rpcRequest('getRecentPerformanceSamples', args);\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get recent performance samples: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n\n\n  async getFeeCalculatorForBlockhash(blockhash, commitment) {\n    const args = this._buildArgs([blockhash], commitment);\n\n    const unsafeRes = await this._rpcRequest('getFeeCalculatorForBlockhash', args);\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n\n    const {\n      context,\n      value\n    } = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null\n    };\n  }\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n\n\n  async getRecentBlockhash(commitment) {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n  /**\n   * Fetch the node version\n   */\n\n\n  async getVersion() {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch a processed block from the cluster.\n   */\n\n\n  async getBlock(slot, opts) {\n    const args = this._buildArgsAtLeastConfirmed([slot], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transactions: result.transactions.map(_ref3 => {\n        let {\n          transaction,\n          meta\n        } = _ref3;\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: { ...transaction,\n            message\n          }\n        };\n      })\n    };\n  }\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n\n\n  async getTransaction(signature, opts) {\n    const args = this._buildArgsAtLeastConfirmed([signature], opts && opts.commitment);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n    return { ...result,\n      transaction: { ...result.transaction,\n        message: new Message(result.transaction.message)\n      }\n    };\n  }\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n\n\n  async getConfirmedBlock(slot, commitment) {\n    const result = await this.getBlock(slot, {\n      commitment\n    });\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return { ...result,\n      transactions: result.transactions.map(_ref4 => {\n        let {\n          transaction,\n          meta\n        } = _ref4;\n        return {\n          meta,\n          transaction: Transaction.populate(transaction.message, transaction.signatures)\n        };\n      })\n    };\n  }\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n\n\n  async getConfirmedBlockSignatures(slot, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment, undefined, {\n      transactionDetails: 'signatures',\n      rewards: false\n    });\n\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return result;\n  }\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n\n\n  async getConfirmedTransaction(signature, commitment) {\n    const result = await this.getTransaction(signature, {\n      commitment\n    });\n    if (!result) return result;\n    const {\n      message,\n      signatures\n    } = result.transaction;\n    return { ...result,\n      transaction: Transaction.populate(message, signatures)\n    };\n  }\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n\n\n  async getParsedConfirmedTransaction(signature, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n\n\n  async getParsedConfirmedTransactions(signatures, commitment) {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed([signature], commitment, 'jsonParsed');\n\n      return {\n        methodName: 'getConfirmedTransaction',\n        args\n      };\n    });\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map(unsafeRes => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n\n      if ('error' in res) {\n        throw new Error('failed to get confirmed transactions: ' + res.error.message);\n      }\n\n      return res.result;\n    });\n    return res;\n  }\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n\n\n  async getConfirmedSignaturesForAddress(address, startSlot, endSlot) {\n    let options = {};\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n\n    while (!('until' in options)) {\n      startSlot--;\n\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(startSlot, 'finalized');\n\n        if (block.signatures.length > 0) {\n          options.until = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n\n    while (!('before' in options)) {\n      endSlot++;\n\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n\n        if (block.signatures.length > 0) {\n          options.before = block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(address, options);\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getConfirmedSignaturesForAddress2(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getConfirmedSignaturesForAddress2', args);\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n\n\n  async getSignaturesForAddress(address, options, commitment) {\n    const args = this._buildArgsAtLeastConfirmed([address.toBase58()], commitment, undefined, options);\n\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get signatures for address: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n\n\n  async getNonceAndContext(nonceAccount, commitment) {\n    const {\n      context,\n      value: accountInfo\n    } = await this.getAccountInfoAndContext(nonceAccount, commitment);\n    let value = null;\n\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value\n    };\n  }\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n\n\n  async getNonce(nonceAccount, commitment) {\n    return await this.getNonceAndContext(nonceAccount, commitment).then(x => x.value).catch(e => {\n      throw new Error('failed to get nonce for account ' + nonceAccount.toBase58() + ': ' + e);\n    });\n  }\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n\n\n  async requestAirdrop(to, lamports) {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [to.toBase58(), lamports]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n\n    if ('error' in res) {\n      throw new Error('airdrop to ' + to.toBase58() + ' failed: ' + res.error.message);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  async _recentBlockhash(disableCache) {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _pollNewBlockhash() {\n    this._pollingBlockhash = true;\n\n    try {\n      const startTime = Date.now();\n\n      for (let i = 0; i < 50; i++) {\n        const {\n          blockhash\n        } = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: []\n          };\n          return blockhash;\n        } // Sleep for approximately half a slot\n\n\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(`Unable to obtain a new blockhash after ${Date.now() - startTime}ms`);\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n  /**\n   * Simulate a transaction\n   */\n\n\n  async simulateTransaction(transaction, signers) {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        if (!signers) break;\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.simulatedSignatures.includes(signature) && !this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment: this.commitment\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to simulate transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * Sign and send a transaction\n   */\n\n\n  async sendTransaction(transaction, signers, options) {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n\n\n  async sendRawTransaction(rawTransaction, options) {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(encodedTransaction, options);\n    return result;\n  }\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n\n\n  async sendEncodedTransaction(encodedTransaction, options) {\n    const config = {\n      encoding: 'base64'\n    };\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment = options && options.preflightCommitment || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n\n    if ('error' in res) {\n      let logs;\n\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n\n      throw new SendTransactionError('failed to send transaction: ' + res.error.message, logs);\n    }\n\n    return res.result;\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnError(err) {\n    console.error('ws error:', err.message);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnClose(code) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n\n      return;\n    } // implicit close, prepare subscriptions for auto-reconnect\n\n\n    this._resetSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  async _subscribe(sub, rpcMethod, rpcArgs) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  async _unsubscribe(sub, rpcMethod) {\n    const subscriptionId = sub.subscriptionId;\n\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId = subscriptionId;\n\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._programAccountChangeSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._rootSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._signatureSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotSubscriptions).forEach(s => s.subscriptionId = null);\n    Object.values(this._slotUpdateSubscriptions).forEach(s => s.subscriptionId = null);\n  }\n  /**\n   * @internal\n   */\n\n\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    const programKeys = Object.keys(this._programAccountChangeSubscriptions).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n\n    if (accountKeys.length === 0 && programKeys.length === 0 && slotKeys.length === 0 && slotUpdateKeys.length === 0 && signatureKeys.length === 0 && rootKeys.length === 0 && logsKeys.length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'accountSubscribe', this._buildArgs([sub.publicKey], sub.commitment, 'base64'));\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n\n      this._subscribe(sub, 'programSubscribe', this._buildArgs([sub.programId], sub.commitment, 'base64', {\n        filters: sub.filters\n      }));\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args = [sub.signature];\n      if (sub.options) args.push(sub.options);\n\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n\n      if (typeof sub.filter === 'object') {\n        filter = {\n          mentions: [sub.filter.toString()]\n        };\n      } else {\n        filter = sub.filter;\n      }\n\n      this._subscribe(sub, 'logsSubscribe', this._buildArgs([filter], sub.commitment));\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnAccountNotification(notification) {\n    const res = create(notification, AccountNotificationResult);\n\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n\n\n  onAccountChange(publicKey, callback, commitment) {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeAccountChangeListener(id) {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnProgramAccountNotification(notification) {\n    const res = create(notification, ProgramAccountNotificationResult);\n\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {\n          value,\n          context\n        } = res.result;\n        sub.callback({\n          accountId: value.pubkey,\n          accountInfo: value.account\n        }, context);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n\n\n  onProgramAccountChange(programId, callback, commitment, filters) {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeProgramAccountChangeListener(id) {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n\n\n  onLogs(filter, callback, commitment) {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n\n\n  async removeOnLogsListener(id) {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n\n    this._updateSubscriptions();\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnLogsNotification(notification) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotNotification(notification) {\n    const res = create(notification, SlotNotificationResult);\n\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n\n\n  onSlotChange(callback) {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotChangeListener(id) {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSlotUpdatesNotification(notification) {\n    const res = create(notification, SlotUpdateNotificationResult);\n\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n\n\n  onSlotUpdate(callback) {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSlotUpdateListener(id) {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment || encoding || extra) {\n      let options = {};\n\n      if (encoding) {\n        options.encoding = encoding;\n      }\n\n      if (commitment) {\n        options.commitment = commitment;\n      }\n\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n\n      args.push(options);\n    }\n\n    return args;\n  }\n  /**\n   * @internal\n   */\n\n\n  _buildArgsAtLeastConfirmed(args, override, encoding, extra) {\n    const commitment = override || this._commitment;\n\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error('Using Connection with default commitment: `' + this._commitment + '`, but method requires at least `confirmed`');\n    }\n\n    return this._buildArgs(args, override, encoding, extra);\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnSignatureNotification(notification) {\n    const res = create(notification, SignatureNotificationResult);\n\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback({\n            type: 'received'\n          }, res.result.context);\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n\n          this._updateSubscriptions();\n\n          sub.callback({\n            type: 'status',\n            result: res.result.value\n          }, res.result.context);\n        }\n\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignature(signature, callback, commitment) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {\n        commitment\n      },\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n\n\n  onSignatureWithOptions(signature, callback, options) {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeSignatureListener(id) {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  _wsOnRootNotification(notification) {\n    const res = create(notification, RootNotificationResult);\n\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n\n\n  onRootChange(callback) {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null\n    };\n\n    this._updateSubscriptions();\n\n    return id;\n  }\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n\n\n  async removeRootChangeListener(id) {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n\n}\n/**\n * Keypair signer interface\n */\n\n/**\n * An account keypair used for signing transactions.\n */\n\n\nclass Keypair {\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair) {\n    _defineProperty(this, \"_keypair\", void 0);\n\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n  /**\n   * Generate a new random keypair\n   */\n\n\n  static generate() {\n    return new Keypair(nacl.sign.keyPair());\n  }\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n\n\n  static fromSecretKey(secretKey, options) {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n\n    return new Keypair(keypair);\n  }\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n\n\n  static fromSeed(seed) {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n  /**\n   * The public key for this keypair\n   */\n\n\n  get publicKey() {\n    return new PublicKey(this._keypair.publicKey);\n  }\n  /**\n   * The raw secret key for this keypair\n   */\n\n\n  get secretKey() {\n    return this._keypair.secretKey;\n  }\n\n}\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\n\n\nconst STAKE_CONFIG_ID = new PublicKey('StakeConfig11111111111111111111111111111111');\n/**\n * Stake account authority info\n */\n\nclass Authorized {\n  /** stake authority */\n\n  /** withdraw authority */\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker, withdrawer) {\n    _defineProperty(this, \"staker\", void 0);\n\n    _defineProperty(this, \"withdrawer\", void 0);\n\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n\n}\n/**\n * Stake account lockup info\n */\n\n\nclass Lockup {\n  /** Unix timestamp of lockup expiration */\n\n  /** Epoch of lockup expiration */\n\n  /** Lockup custodian authority */\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp, epoch, custodian) {\n    _defineProperty(this, \"unixTimestamp\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"custodian\", void 0);\n\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n  /**\n   * Default, inactive Lockup value\n   */\n\n\n}\n/**\n * Create stake account transaction params\n */\n\n\n_defineProperty(Lockup, \"default\", new Lockup(0, 0, PublicKey.default));\n/**\n * Stake Instruction class\n */\n\n\nclass StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n\n\n  static decodeInstructionType(instruction) {\n    this.checkProgramId(instruction.programId);\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n    let type;\n\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeInitialize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      authorized,\n      lockup\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Initialize, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(new PublicKey(authorized.staker), new PublicKey(authorized.withdrawer)),\n      lockup: new Lockup(lockup.unixTimestamp, lockup.epoch, new PublicKey(lockup.custodian))\n    };\n  }\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDelegate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey\n    };\n  }\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorize(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      newAuthorized,\n      stakeAuthorizationType\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Authorize, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeAuthorizeWithSeed(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType\n      }\n    };\n\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeSplit(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Split, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports\n    };\n  }\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeWithdraw(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {\n      lamports\n    } = decodeData(STAKE_INSTRUCTION_LAYOUTS.Withdraw, instruction.data);\n    const o = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports\n    };\n\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n\n    return o;\n  }\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n\n\n  static decodeDeactivate(instruction) {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey\n    };\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkProgramId(programId) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n  /**\n   * @internal\n   */\n\n\n  static checkKeyLength(keys, expectedLength) {\n    if (keys.length < expectedLength) {\n      throw new Error(`invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`);\n    }\n  }\n\n}\n/**\n * An enumeration of valid StakeInstructionType's\n */\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\n\n\nconst STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), authorized(), lockup()])\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType')])\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')])\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')])\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction'), publicKey('newAuthorized'), BufferLayout.u32('stakeAuthorizationType'), rustString('authoritySeed'), publicKey('authorityOwner')])\n  }\n});\n/**\n * Stake authorization type\n */\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\n\nconst StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0\n  },\n  Withdrawer: {\n    index: 1\n  }\n});\n/**\n * Factory class for transactions to interact with the Stake program\n */\n\nclass StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the Stake program\n   */\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n\n\n  static initialize(params) {\n    const {\n      stakePubkey,\n      authorized,\n      lockup: maybeLockup\n    } = params;\n    const lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer())\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer())\n      }\n    });\n    const instructionData = {\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_RENT_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    };\n    return new TransactionInstruction(instructionData);\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n\n\n  static createAccountWithSeed(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n\n\n  static createAccount(params) {\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId\n    }));\n    const {\n      stakePubkey,\n      authorized,\n      lockup\n    } = params;\n    return transaction.add(this.initialize({\n      stakePubkey,\n      authorized,\n      lockup\n    }));\n  }\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n\n\n  static delegate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      votePubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: votePubkey,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: STAKE_CONFIG_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorize(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n\n\n  static authorizeWithSeed(params) {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer())\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: authorityBase,\n      isSigner: true,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n\n\n  static split(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      lamports\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(SystemProgram.createAccount({\n      fromPubkey: authorizedPubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId\n    }));\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {\n      lamports\n    });\n    return transaction.add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: splitStakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n\n\n  static withdraw(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      toPubkey,\n      lamports,\n      custodianPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {\n      lamports\n    });\n    const keys = [{\n      pubkey: stakePubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: toPubkey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: SYSVAR_CLOCK_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: authorizedPubkey,\n      isSigner: true,\n      isWritable: false\n    }];\n\n    if (custodianPubkey) {\n      keys.push({\n        pubkey: custodianPubkey,\n        isSigner: false,\n        isWritable: false\n      });\n    }\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data\n    });\n  }\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n\n\n  static deactivate(params) {\n    const {\n      stakePubkey,\n      authorizedPubkey\n    } = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n    return new Transaction().add({\n      keys: [{\n        pubkey: stakePubkey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: authorizedPubkey,\n        isSigner: true,\n        isWritable: false\n      }],\n      programId: this.programId,\n      data\n    });\n  }\n\n}\n\n_defineProperty(StakeProgram, \"programId\", new PublicKey('Stake11111111111111111111111111111111111111'));\n\n_defineProperty(StakeProgram, \"space\", 200);\n\nconst {\n  publicKeyCreate,\n  ecdsaSign\n} = secp256k1;\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([BufferLayout.u8('numSignatures'), BufferLayout.u16('signatureOffset'), BufferLayout.u8('signatureInstructionIndex'), BufferLayout.u16('ethAddressOffset'), BufferLayout.u8('ethAddressInstructionIndex'), BufferLayout.u16('messageDataOffset'), BufferLayout.u16('messageDataSize'), BufferLayout.u8('messageInstructionIndex'), BufferLayout.blob(20, 'ethAddress'), BufferLayout.blob(64, 'signature'), BufferLayout.u8('recoveryId')]);\n\nclass Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n\n\n  static publicKeyToEthAddress(publicKey) {\n    assert(publicKey.length === PUBLIC_KEY_BYTES, `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`);\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(-ETHEREUM_ADDRESS_BYTES);\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n\n\n  static createInstructionWithPublicKey(params) {\n    const {\n      publicKey,\n      message,\n      signature,\n      recoveryId\n    } = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n\n\n  static createInstructionWithEthAddress(params) {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId\n    } = params;\n    let ethAddress;\n\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(ethAddress.length === ETHEREUM_ADDRESS_BYTES, `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`);\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n    const instructionData = Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span + message.length);\n    SECP256K1_INSTRUCTION_LAYOUT.encode({\n      numSignatures,\n      signatureOffset,\n      signatureInstructionIndex: 0,\n      ethAddressOffset,\n      ethAddressInstructionIndex: 0,\n      messageDataOffset,\n      messageDataSize: message.length,\n      messageInstructionIndex: 0,\n      signature: toBuffer(signature),\n      ethAddress: toBuffer(ethAddress),\n      recoveryId\n    }, instructionData);\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData\n    });\n  }\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n\n\n  static createInstructionWithPrivateKey(params) {\n    const {\n      privateKey: pkey,\n      message\n    } = params;\n    assert(pkey.length === PRIVATE_KEY_BYTES, `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`);\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n\n      const messageHash = Buffer.from(keccak_256.update(toBuffer(message)).digest());\n      const {\n        signature,\n        recid: recoveryId\n      } = ecdsaSign(messageHash, privateKey);\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n\n}\n\n_defineProperty(Secp256k1Program, \"programId\", new PublicKey('KeccakSecp256k11111111111111111111111111111'));\n\nconst VALIDATOR_INFO_KEY = new PublicKey('Va1idator1nfo111111111111111111111111111111');\n/**\n * @internal\n */\n\nconst InfoString = type({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string())\n});\n/**\n * ValidatorInfo class\n */\n\nclass ValidatorInfo {\n  /**\n   * validator public key\n   */\n\n  /**\n   * validator information\n   */\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key, info) {\n    _defineProperty(this, \"key\", void 0);\n\n    _defineProperty(this, \"info\", void 0);\n\n    this.key = key;\n    this.info = info;\n  }\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n\n\n  static fromConfigData(buffer) {\n    const PUBKEY_LENGTH = 32;\n    let byteArray = [...buffer];\n    const configKeyCount = decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n    const configKeys = [];\n\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({\n        publicKey,\n        isSigner\n      });\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo);\n        assert$1(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n\n}\n\nconst VOTE_PROGRAM_ID = new PublicKey('Vote111111111111111111111111111111111111111');\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\n\nconst VoteAccountLayout = BufferLayout.struct([publicKey('nodePubkey'), publicKey('authorizedVoterPubkey'), publicKey('authorizedWithdrawerPubkey'), BufferLayout.u8('commission'), BufferLayout.nu64(), // votes.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('slot'), BufferLayout.u32('confirmationCount')]), BufferLayout.offset(BufferLayout.u32(), -8), 'votes'), BufferLayout.u8('rootSlotValid'), BufferLayout.nu64('rootSlot'), BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('lastEpochCredits'), BufferLayout.nu64(), // epochCredits.length\nBufferLayout.seq(BufferLayout.struct([BufferLayout.nu64('epoch'), BufferLayout.nu64('credits'), BufferLayout.nu64('prevCredits')]), BufferLayout.offset(BufferLayout.u32(), -8), 'epochCredits')]);\n/**\n * VoteAccount class\n */\n\nclass VoteAccount {\n  /**\n   * @internal\n   */\n  constructor(args) {\n    _defineProperty(this, \"nodePubkey\", void 0);\n\n    _defineProperty(this, \"authorizedVoterPubkey\", void 0);\n\n    _defineProperty(this, \"authorizedWithdrawerPubkey\", void 0);\n\n    _defineProperty(this, \"commission\", void 0);\n\n    _defineProperty(this, \"votes\", void 0);\n\n    _defineProperty(this, \"rootSlot\", void 0);\n\n    _defineProperty(this, \"epoch\", void 0);\n\n    _defineProperty(this, \"credits\", void 0);\n\n    _defineProperty(this, \"lastEpochCredits\", void 0);\n\n    _defineProperty(this, \"epochCredits\", void 0);\n\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n\n\n  static fromAccountData(buffer) {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    let rootSlot = va.rootSlot;\n\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits\n    });\n  }\n\n}\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\n\n\nasync function sendAndConfirmRawTransaction(connection, rawTransaction, options) {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment\n  };\n  const signature = await connection.sendRawTransaction(rawTransaction, sendOptions);\n  const status = (await connection.confirmTransaction(signature, options && options.commitment)).value;\n\n  if (status.err) {\n    throw new Error(`Raw transaction ${signature} failed (${JSON.stringify(status)})`);\n  }\n\n  return signature;\n}\n\nconst endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com'\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com'\n  }\n};\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\n\nfunction clusterApiUrl(cluster, tls) {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n\n  return url;\n}\n/**\n * There are 1-billion lamports in one SOL\n */\n\n\nconst LAMPORTS_PER_SOL = 1000000000;\nexport { Account, Authorized, BLOCKHASH_CACHE_TIMEOUT_MS, BPF_LOADER_DEPRECATED_PROGRAM_ID, BPF_LOADER_PROGRAM_ID, BpfLoader, Connection, Enum, EpochSchedule, FeeCalculatorLayout, Keypair, LAMPORTS_PER_SOL, Loader, Lockup, MAX_SEED_LENGTH, Message, NONCE_ACCOUNT_LENGTH, NonceAccount, PACKET_DATA_SIZE, PublicKey, SOLANA_SCHEMA, STAKE_CONFIG_ID, STAKE_INSTRUCTION_LAYOUTS, SYSTEM_INSTRUCTION_LAYOUTS, SYSVAR_CLOCK_PUBKEY, SYSVAR_INSTRUCTIONS_PUBKEY, SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY, SYSVAR_REWARDS_PUBKEY, SYSVAR_STAKE_HISTORY_PUBKEY, Secp256k1Program, StakeAuthorizationLayout, StakeInstruction, StakeProgram, Struct, SystemInstruction, SystemProgram, Transaction, TransactionInstruction, VALIDATOR_INFO_KEY, VOTE_PROGRAM_ID, ValidatorInfo, VoteAccount, clusterApiUrl, sendAndConfirmRawTransaction, sendAndConfirmTransaction };","map":{"version":3,"sources":["../src/util/to-buffer.ts","../src/util/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/layout.ts","../src/util/shortvec-encoding.ts","../src/message.ts","../src/util/assert.ts","../src/transaction.ts","../src/sysvar.ts","../src/util/send-and-confirm-transaction.ts","../src/util/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/system-program.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/node-fetch/browser.js","../src/epoch-schedule.ts","../src/errors.ts","../src/timing.ts","../src/util/promise-timeout.ts","../src/util/url.ts","../src/connection.ts","../src/keypair.ts","../src/stake-program.ts","../src/secp256k1-program.ts","../src/validator-info.ts","../src/vote-account.ts","../src/util/send-and-confirm-raw-transaction.ts","../src/util/cluster.ts","../src/index.ts"],"names":["toBuffer","arr","Buffer","constructor","Object","encode","serialize","decode","deserialize","decodeUnchecked","deserializeUnchecked","key","SOLANA_SCHEMA","MAX_SEED_LENGTH","value","PublicKey","isPublicKeyData","decoded","bs58","equals","publicKey","toBase58","toBytes","b","zeroPad","toString","createWithSeed","buffer","fromPublicKey","programId","hash","sha256","createProgramAddress","seeds","seed","publicKeyBytes","is_on_curve","findProgramAddress","nonce","seedsWithNonce","address","err","isOnCurve","kind","fields","naclLowLevel","nacl","r","t","chk","num","den","den2","den4","den6","neq25519","gf1","I","c","d","secretKey","BPF_LOADER_DEPRECATED_PROGRAM_ID","property","BufferLayout","rustString","rsl","_decode","_encode","data","chars","str","authorized","lockup","alloc","type","item","len","size","elem","bytes","rem_len","PUBKEY_LENGTH","args","account","isAccountWritable","index","numKeys","keyCount","shortvec","instructions","instruction","programIdIndex","keyIndicesCount","accounts","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","length","signDataLayout","Layout","transaction","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","keys","recentBlockhash","signData","from","byteArray","accountCount","accountKeys","i","dataSlice","messageArgs","header","message","DEFAULT_SIGNATURE","PACKET_DATA_SIZE","SIGNATURE_LENGTH","opts","signature","add","items","compileMessage","nonceInfo","console","feePayer","programIds","accountMetas","accountMeta","pubkey","isSigner","isWritable","checkSigner","x","y","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","feePayerIndex","payerMeta","signedKeys","unsignedKeys","meta","invariant","keyIndex","_compile","valid","pair","serializeMessage","setSigners","signers","seen","sign","uniqueSigners","signer","partialSign","_partialSign","addSignature","_addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","_serialize","signatures","signatureCount","transactionLength","wireTransaction","keyObj","Transaction","Message","populate","sigPubkeyPair","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","sendOptions","options","skipPreflight","preflightCommitment","commitment","connection","status","JSON","resolve","setTimeout","allocLength","layoutFields","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","span","fromAccountData","nonceAccount","authorizedPubkey","feeCalculator","decodeInstructionType","instructionTypeLayout","typeIndex","layout","decodeCreateAccount","decodeData","SYSTEM_INSTRUCTION_LAYOUTS","fromPubkey","newAccountPubkey","decodeTransfer","lamports","toPubkey","decodeTransferWithSeed","basePubkey","decodeAllocate","space","accountPubkey","decodeAllocateWithSeed","decodeAssign","decodeAssignWithSeed","decodeCreateWithSeed","decodeNonceInitialize","noncePubkey","decodeNonceAdvance","decodeNonceWithdraw","decodeNonceAuthorize","newAuthorizedPubkey","checkProgramId","SystemProgram","checkKeyLength","expectedLength","Create","Assign","Transfer","CreateWithSeed","AdvanceNonceAccount","WithdrawNonceAccount","InitializeNonceAccount","AuthorizeNonceAccount","Allocate","AllocateWithSeed","AssignWithSeed","TransferWithSeed","createAccount","encodeData","params","transfer","assign","base","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","load","balanceNeeded","programInfo","program","payer","sendAndConfirmTransaction","dataLayout","chunkSize","offset","array","transactions","REQUESTS_PER_SECOND","sleep","Promise","BPF_LOADER_PROGRAM_ID","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","getEpoch","getEpochAndSlotIndex","slot","epoch","nextPowerOfTwo","epochLen","slotIndex","normalSlotIndex","normalEpochIndex","getFirstSlotInEpoch","getLastSlotInEpoch","getSlotsInEpoch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","timeoutPromise","timeoutId","result","clearTimeout","url","useHttps","String","Number","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","union","pick","jsonrpc","id","error","code","unknown","optional","any","UnknownRpcResult","createRpcResult","create","jsonRpcResult","context","number","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","boolean","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","jsonRpcResultAndContext","logs","fetchWithMiddleware","fetchMiddleware","fetch","reject","clientBrowser","agent","method","body","headers","httpHeaders","too_many_requests_retries","waitTime","res","disableRetryOnRateLimit","statusText","text","callback","client","requests","batch","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","executable","owner","rentEpoch","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","Array","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","state","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","notificationResultAndContext","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","version","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","writable","TokenBalanceResult","accountIndex","mint","uiTokenAmount","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","ParsedConfirmedTransactionMetaResult","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","rewards","rewardType","GetConfirmedBlockSignaturesRpcResult","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","lastFetch","transactionSignatures","simulatedSignatures","commitmentOrConfig","wsEndpoint","makeWebsocketUrl","createRpcClient","createRpcRequest","createRpcBatchRequest","autoconnect","max_reconnects","Infinity","getBalanceAndContext","unsafeRes","getBalance","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","_args","ownerAddress","filter","getParsedTokenAccountsByOwner","getLargestAccounts","arg","config","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getAccountInfo","getStakeActivation","getProgramAccounts","extra","configOrCommitment","encoding","getParsedProgramAccounts","confirmTransaction","decodedSignature","assert","start","Date","subscriptionCommitment","response","confirmPromise","subscriptionId","timeoutMs","promiseTimeout","duration","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","getSignatureStatus","values","getSignatureStatuses","getTransactionCount","getTotalSupply","getInflationGovernor","getInflationReward","addresses","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getMinimumBalanceForRentExemption","getRecentBlockhashAndContext","getRecentPerformanceSamples","limit","getFeeCalculatorForBlockhash","getRecentBlockhash","getVersion","getBlock","getTransaction","getConfirmedBlock","getConfirmedBlockSignatures","transactionDetails","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","methodName","getConfirmedSignaturesForAddress","firstAvailableBlock","startSlot","block","highestConfirmedRoot","endSlot","confirmedSignatureInfo","info","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getNonceAndContext","accountInfo","NonceAccount","getNonce","requestAirdrop","to","_recentBlockhash","timeSinceFetch","expired","_pollNewBlockhash","startTime","simulateTransaction","disableCache","encodedTransaction","traceIndent","logTrace","sendTransaction","sendRawTransaction","sendEncodedTransaction","_wsOnOpen","setInterval","_wsOnError","_wsOnClose","clearInterval","_subscribe","sub","rpcMethod","_unsubscribe","unsubscribeId","_resetSubscriptions","s","_updateSubscriptions","programKeys","slotKeys","slotUpdateKeys","signatureKeys","rootKeys","logsKeys","filters","mentions","_wsOnAccountNotification","onAccountChange","removeAccountChangeListener","subInfo","_wsOnProgramAccountNotification","accountId","onProgramAccountChange","removeProgramAccountChangeListener","onLogs","removeOnLogsListener","_wsOnLogsNotification","_wsOnSlotNotification","onSlotChange","removeSlotChangeListener","_wsOnSlotUpdatesNotification","onSlotUpdate","removeSlotUpdateListener","_buildArgs","override","_buildArgsAtLeastConfirmed","_wsOnSignatureNotification","onSignature","notification","onSignatureWithOptions","removeSignatureListener","_wsOnRootNotification","onRootChange","removeRootChangeListener","generate","fromSecretKey","keypair","encoder","fromSeed","STAKE_CONFIG_ID","Lockup","decodeInitialize","STAKE_INSTRUCTION_LAYOUTS","stakePubkey","decodeDelegate","decodeAuthorize","stakeAuthorizationType","o","decodeAuthorizeWithSeed","authorityOwner","authorityBase","authoritySeed","decodeSplit","splitStakePubkey","decodeWithdraw","decodeDeactivate","StakeProgram","Initialize","Authorize","Delegate","Split","Withdraw","Deactivate","AuthorizeWithSeed","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","staker","withdrawer","unixTimestamp","custodian","delegate","authorize","custodianPubkey","newAuthorized","authorizeWithSeed","split","withdraw","deactivate","ecdsaSign","PRIVATE_KEY_BYTES","ETHEREUM_ADDRESS_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","createInstructionWithPublicKey","recoveryId","ethAddress","createInstructionWithEthAddress","rawAddress","dataStart","ethAddressOffset","signatureOffset","messageDataOffset","numSignatures","signatureInstructionIndex","ethAddressInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","pkey","publicKeyCreate","messageHash","recid","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","fromConfigData","configKeyCount","configKeys","rawInfo","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","votes","credits","lastEpochCredits","endpoint","http","devnet","testnet","https","tls","cluster","LAMPORTS_PER_SOL"],"mappings":"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","sourcesContent":["import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\nimport {Struct, SOLANA_SCHEMA} from './util/borsh-schema';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\ntype PublicKeyInitData =\n  | number\n  | string\n  | Buffer\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\ntype PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != 32) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Default public key value. (All zeros)\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray(undefined, 32);\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkey: Uint8Array): boolean {\n    return is_on_curve(pubkey) == 1;\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n\n// @ts-ignore\nlet naclLowLevel = nacl.lowlevel;\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p: any) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0, 0x4a0e, 0x1b27, 0xc4ee, 0xe478, 0xad2f, 0x1806, 0x2f43, 0xd7a7,\n  0x3dfb, 0x0099, 0x2b4d, 0xdf0b, 0x4fc1, 0x2480, 0x2b83,\n]);\nfunction neq25519(a: any, b: any) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","import * as nacl from 'tweetnacl';\nimport type {SignKeyPair as KeyPair} from 'tweetnacl';\nimport type {Buffer} from 'buffer';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return toBuffer(this._keypair.secretKey);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (\n  property: string = 'publicKey',\n): BufferLayout.Layout => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): BufferLayout.Layout => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer: any, offset: any) => {\n    const data = _decode(buffer, offset);\n    return data['chars'].toString('utf8');\n  };\n\n  rsl.encode = (str: any, buffer: any, offset: any) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  (rsl as any).alloc = (str: any) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * The message header, identifying signed and read-only account\n */\nexport type MessageHeader = {\n  /**\n   * The number of signatures required for this message to be considered valid. The\n   * signatures must match the first `numRequiredSignatures` of `accountKeys`.\n   */\n  numRequiredSignatures: number;\n  /** The last `numReadonlySignedAccounts` of the signed keys are read-only accounts */\n  numReadonlySignedAccounts: number;\n  /** The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts */\n  numReadonlyUnsignedAccounts: number;\n};\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import nacl from 'tweetnacl';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport * as shortvec from './util/shortvec-encoding';\nimport {toBuffer} from './util/to-buffer';\nimport invariant from './util/assert';\nimport type {Signer} from './keypair';\nimport type {Blockhash} from './blockhash';\nimport type {CompiledInstruction} from './message';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n */\ntype TransactionCtorFields = {\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash | null;\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\ntype NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < this.instructions.length; i++) {\n      if (this.instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n    this._verifySignatures(message.serialize(), true);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = nacl.sign.detached(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (\n          !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n        ) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @internal\n */\nexport type InstructionType = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData(type: InstructionType, fields?: any): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): any {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): TransferWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount';\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS: {\n  [type in SystemInstructionType]: InstructionType;\n} = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: params.lamports,\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: params.lamports});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './system-program';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","\"use strict\";\n\n// ref: https://github.com/tc39/proposal-global\nvar getGlobal = function () {\n\t// the only reliable means to get the global object is\n\t// `Function('return this')()`\n\t// However, this causes CSP violations in Chrome apps.\n\tif (typeof self !== 'undefined') { return self; }\n\tif (typeof window !== 'undefined') { return window; }\n\tif (typeof global !== 'undefined') { return global; }\n\tthrow new Error('unable to locate global object');\n}\n\nvar global = getGlobal();\n\nmodule.exports = exports = global.fetch;\n\n// Needed for TypeScript and Webpack.\nif (global.fetch) {\n\texports.default = global.fetch.bind(global);\n}\n\nexports.Headers = global.Headers;\nexports.Request = global.Request;\nexports.Response = global.Response;","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","export function promiseTimeout<T>(\n  promise: Promise<T>,\n  timeoutMs: number,\n): Promise<T | null> {\n  let timeoutId: ReturnType<typeof setTimeout>;\n  const timeoutPromise: Promise<null> = new Promise(resolve => {\n    timeoutId = setTimeout(() => resolve(null), timeoutMs);\n  });\n\n  return Promise.race([promise, timeoutPromise]).then((result: T | null) => {\n    clearTimeout(timeoutId);\n    return result;\n  });\n}\n","export function makeWebsocketUrl(endpoint: string) {\n  let url = new URL(endpoint);\n  const useHttps = url.protocol === 'https:';\n\n  url.protocol = useHttps ? 'wss:' : 'ws:';\n  url.host = '';\n\n  // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n  // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n  // we're directly trying to connect to solana-validator's ws listening port.\n  // When the endpoint omits the port, we're connecting to the protocol\n  // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n  // proxy which manages WebSocket upgrade and backend port redirection.\n  if (url.port !== '') {\n    url.port = String(Number(url.port) + 1);\n  }\n  return url.toString();\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport fetch, {Response} from 'node-fetch';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\nimport {IWSRequestParams} from 'rpc-websockets/dist/lib/client';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError} from './errors';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport assert from './util/assert';\nimport {sleep} from './util/sleep';\nimport {promiseTimeout} from './util/promise-timeout';\nimport {toBuffer} from './util/to-buffer';\nimport {makeWebsocketUrl} from './util/url';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => any;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n};\n\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A confirmed transaction on the ledger\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n */\nexport type ParsedConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A ConfirmedBlock on the ledger with signatures only\n */\nexport type ConfirmedBlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  useHttps: boolean,\n  httpHeaders?: HttpHeaders,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(useHttps);\n  }\n\n  let fetchWithMiddleware: (url: string, options: any) => Promise<Response>;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = (url: string, options: any) => {\n      return new Promise<Response>((resolve, reject) => {\n        fetchMiddleware(url, options, async (url: string, options: any) => {\n          try {\n            resolve(await fetch(url, options));\n          } catch (error) {\n            reject(error);\n          }\n        });\n      });\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  uiTokenAmount: TokenAmountResult,\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlockSignatures\" message\n */\nconst GetConfirmedBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64) */\n  encoding?: 'base64' | 'jsonParsed';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @internal\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string; // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @internal\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string; // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback;\n  commitment?: Commitment;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  filters?: GetProgramAccountsFilter[];\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @internal\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * @private\n */\ntype SlotUpdateSubscriptionInfo = {\n  callback: SlotUpdateCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * @internal\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature; // TransactionSignature as a base 58 string\n  callback: SignatureSubscriptionCallback;\n  options?: SignatureSubscriptionOptions;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n};\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * @private\n */\ntype LogsSubscriptionInfo = {\n  callback: LogsCallback;\n  filter: LogsFilter;\n  subscriptionId: SubscriptionId | null; // null when there's no current server subscription id\n  commitment?: Commitment;\n};\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {[header: string]: string};\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  url: string,\n  options: any,\n  fetch: Function,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retring calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    recentBlockhash: Blockhash | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    recentBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ _accountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _accountChangeSubscriptions: {\n    [id: number]: AccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _programAccountChangeSubscriptionCounter: number = 0;\n  /** @internal */ _programAccountChangeSubscriptions: {\n    [id: number]: ProgramAccountSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _rootSubscriptionCounter: number = 0;\n  /** @internal */ _rootSubscriptions: {\n    [id: number]: RootSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _signatureSubscriptionCounter: number = 0;\n  /** @internal */ _signatureSubscriptions: {\n    [id: number]: SignatureSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotSubscriptionCounter: number = 0;\n  /** @internal */ _slotSubscriptions: {\n    [id: number]: SlotSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _logsSubscriptionCounter: number = 0;\n  /** @internal */ _logsSubscriptions: {\n    [id: number]: LogsSubscriptionInfo;\n  } = {};\n\n  /** @internal */ _slotUpdateSubscriptionCounter: number = 0;\n  /** @internal */ _slotUpdateSubscriptions: {\n    [id: number]: SlotUpdateSubscriptionInfo;\n  } = {};\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let url = new URL(endpoint);\n    const useHttps = url.protocol === 'https:';\n\n    let wsEndpoint;\n    let httpHeaders;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = endpoint;\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      url.toString(),\n      useHttps,\n      httpHeaders,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(publicKey, commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitment?: Commitment,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined,\n      epoch !== undefined ? {epoch} : undefined,\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new Error(\n        `failed to get Stake Activation ${publicKey.toBase58()}: ${\n          res.error.message\n        }`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const extra: Pick<GetProgramAccountsConfig, 'dataSlice' | 'filters'> = {};\n\n    let commitment;\n    let encoding;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n        encoding = configOrCommitment.encoding;\n\n        if (configOrCommitment.dataSlice) {\n          extra.dataSlice = configOrCommitment.dataSlice;\n        }\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const extra: Pick<GetParsedProgramAccountsConfig, 'filters'> = {};\n\n    let commitment;\n    if (configOrCommitment) {\n      if (typeof configOrCommitment === 'string') {\n        commitment = configOrCommitment;\n      } else {\n        commitment = configOrCommitment.commitment;\n\n        if (configOrCommitment.filters) {\n          extra.filters = configOrCommitment.filters;\n        }\n      }\n    }\n\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      extra,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature.\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let decodedSignature;\n    try {\n      decodedSignature = bs58.decode(signature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + signature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const start = Date.now();\n    const subscriptionCommitment = commitment || this.commitment;\n\n    let subscriptionId;\n    let response: RpcResponseAndContext<SignatureResult> | null = null;\n    const confirmPromise = new Promise((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          signature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            response = {\n              context,\n              value: result,\n            };\n            resolve(null);\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    let timeoutMs = 60 * 1000;\n    switch (subscriptionCommitment) {\n      case 'processed':\n      case 'recent':\n      case 'single':\n      case 'confirmed':\n      case 'singleGossip': {\n        timeoutMs = 30 * 1000;\n        break;\n      }\n      // exhaust enums to ensure full coverage\n      case 'finalized':\n      case 'max':\n      case 'root':\n    }\n\n    try {\n      await promiseTimeout(confirmPromise, timeoutMs);\n    } finally {\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n\n    if (response === null) {\n      const duration = (Date.now() - start) / 1000;\n      throw new Error(\n        `Transaction was not confirmed in ${duration.toFixed(\n          2,\n        )} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`,\n      );\n    }\n\n    return response;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment?: Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new Error('failed to get slot leaders: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get total supply: ' + res.error.message);\n    }\n    return res.result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitment?: Commitment,\n  ): Promise<(InflationReward | null)[]> {\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined,\n      {\n        epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new Error('failed to get inflation reward: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment?: Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const args = this._buildArgs(limit ? [limit] : []);\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      args,\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get recent performance samples: ' + res.error.message,\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  async getBlock(\n    slot: number,\n    opts?: {commitment?: Finality},\n  ): Promise<BlockResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a processed transaction from the cluster.\n   */\n  async getTransaction(\n    signature: string,\n    opts?: {commitment?: Finality},\n  ): Promise<TransactionResponse | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      opts && opts.commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: new Message(result.transaction.message),\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const result = await this.getBlock(slot, {commitment});\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new Error('failed to get confirmed block: ' + res.error.message);\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const result = await this.getTransaction(signature, {commitment});\n    if (!result) return result;\n    const {message, signatures} = result.transaction;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed transaction: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedConfirmedTransactionRpcResult);\n      if ('error' in res) {\n        throw new Error(\n          'failed to get confirmed transactions: ' + res.error.message,\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'failed to get signatures for address: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      for (let i = 0; i < 50; i++) {\n        const {blockhash} = await this.getRecentBlockhash('finalized');\n\n        if (this._blockhashInfo.recentBlockhash != blockhash) {\n          this._blockhashInfo = {\n            recentBlockhash: blockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return blockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Signer>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  async _subscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n    rpcArgs: IWSRequestParams,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (typeof id === 'number' && sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  async _unsubscribe(\n    sub: {subscriptionId: SubscriptionId | null},\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _resetSubscriptions() {\n    Object.values(this._accountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._programAccountChangeSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._rootSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._signatureSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n    Object.values(this._slotUpdateSubscriptions).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const slotUpdateKeys = Object.keys(this._slotUpdateSubscriptions).map(\n      Number,\n    );\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    const logsKeys = Object.keys(this._logsSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      slotUpdateKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0 &&\n      logsKeys.length === 0\n    ) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          this._rpcWebSocket.close();\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64', {\n          filters: sub.filters,\n        }),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of slotUpdateKeys) {\n      const sub = this._slotUpdateSubscriptions[id];\n      this._subscribe(sub, 'slotsUpdatesSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      const args: any[] = [sub.signature];\n      if (sub.options) args.push(sub.options);\n      this._subscribe(sub, 'signatureSubscribe', args);\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n\n    for (let id of logsKeys) {\n      const sub = this._logsSubscriptions[id];\n      let filter;\n      if (typeof sub.filter === 'object') {\n        filter = {mentions: [sub.filter.toString()]};\n      } else {\n        filter = sub.filter;\n      }\n      this._subscribe(\n        sub,\n        'logsSubscribe',\n        this._buildArgs([filter], sub.commitment),\n      );\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const res = create(notification, AccountNotificationResult);\n    for (const sub of Object.values(this._accountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = create(notification, ProgramAccountNotificationResult);\n    for (const sub of Object.values(this._programAccountChangeSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        const {value, context} = res.result;\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: value.account,\n          },\n          context,\n        );\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n      filters,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._logsSubscriptionCounter;\n    this._logsSubscriptions[id] = {\n      filter,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id subscription id to deregister.\n   */\n  async removeOnLogsListener(id: number): Promise<void> {\n    if (!this._logsSubscriptions[id]) {\n      throw new Error(`Unknown logs id: ${id}`);\n    }\n    const subInfo = this._logsSubscriptions[id];\n    delete this._logsSubscriptions[id];\n    await this._unsubscribe(subInfo, 'logsUnsubscribe');\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const res = create(notification, LogsNotificationResult);\n    const keys = Object.keys(this._logsSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._logsSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = create(notification, SlotNotificationResult);\n    for (const sub of Object.values(this._slotSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const res = create(notification, SlotUpdateNotificationResult);\n    for (const sub of Object.values(this._slotUpdateSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): number {\n    const id = ++this._slotUpdateSubscriptionCounter;\n    this._slotUpdateSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotUpdateListener(id: number): Promise<void> {\n    if (this._slotUpdateSubscriptions[id]) {\n      const subInfo = this._slotUpdateSubscriptions[id];\n      delete this._slotUpdateSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotsUpdatesUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot update id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = create(notification, SignatureNotificationResult);\n    for (const [id, sub] of Object.entries(this._signatureSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        if (res.result.value === 'receivedSignature') {\n          sub.callback(\n            {\n              type: 'received',\n            },\n            res.result.context,\n          );\n        } else {\n          // Signatures subscriptions are auto-removed by the RPC service so\n          // no need to explicitly send an unsubscribe message\n          delete this._signatureSubscriptions[Number(id)];\n          this._updateSubscriptions();\n          sub.callback(\n            {\n              type: 'status',\n              result: res.result.value,\n            },\n            res.result.context,\n          );\n        }\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback: (notification, context) => {\n        if (notification.type === 'status') {\n          callback(notification.result, context);\n        }\n      },\n      options: {commitment},\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      options,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = create(notification, RootNotificationResult);\n    for (const sub of Object.values(this._rootSubscriptions)) {\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(res.result);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","import * as nacl from 'tweetnacl';\n\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    if (keypair) {\n      this._keypair = keypair;\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(nacl.sign.keyPair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    const keypair = nacl.sign.keyPair.fromSecretKey(secretKey);\n    if (!options || !options.skipValidation) {\n      const encoder = new TextEncoder();\n      const signData = encoder.encode('@solana/web3.js-validation-v1');\n      const signature = nacl.sign.detached(signData, keypair.secretKey);\n      if (!nacl.sign.detached.verify(signData, signature, keypair.publicKey)) {\n        throw new Error('provided secretKey is invalid');\n      }\n    }\n    return new Keypair(keypair);\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    return new Keypair(nacl.sign.keyPair.fromSeed(seed));\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return this._keypair.secretKey;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {encodeData, decodeData, InstructionType} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  | 'AuthorizeWithSeed'\n  | 'Authorize'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Split'\n  | 'Withdraw';\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS: {\n  [type in StakeInstructionType]: InstructionType;\n} = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `std::mem::size_of::<StakeState>()`:\n   * https://docs.rs/solana-stake-program/1.4.4/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: authorizedPubkey,\n        newAccountPubkey: splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport secp256k1 from 'secp256k1';\nimport {keccak_256} from 'js-sha3';\n\nimport {PublicKey} from './publickey';\nimport {TransactionInstruction} from './transaction';\nimport assert from './util/assert';\nimport {toBuffer} from './util/to-buffer';\n\nconst {publicKeyCreate, ecdsaSign} = secp256k1;\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256.update(toBuffer(publicKey)).digest()).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId} = params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {ethAddress: rawAddress, message, signature, recoveryId} = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: 0,\n        ethAddressOffset,\n        ethAddressInstructionIndex: 0,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: 0,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(privateKey, false).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(\n        keccak_256.update(toBuffer(message)).digest(),\n      );\n      const {signature, recid: recoveryId} = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedVoterPubkey = args.authorizedVoterPubkey;\n    this.authorizedWithdrawerPubkey = args.authorizedWithdrawerPubkey;\n    this.commission = args.commission;\n    this.votes = args.votes;\n    this.rootSlot = args.rootSlot;\n    this.epoch = args.epoch;\n    this.credits = args.credits;\n    this.lastEpochCredits = args.lastEpochCredits;\n    this.epochCredits = args.epochCredits;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedVoterPubkey: new PublicKey(va.authorizedVoterPubkey),\n      authorizedWithdrawerPubkey: new PublicKey(va.authorizedWithdrawerPubkey),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      epoch: va.epoch,\n      credits: va.credits,\n      lastEpochCredits: va.lastEpochCredits,\n      epochCredits: va.epochCredits,\n    });\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.commitment,\n    )\n  ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './publickey';\nexport * from './stake-program';\nexport * from './system-program';\nexport * from './secp256k1-program';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './util/borsh-schema';\nexport * from './util/send-and-confirm-transaction';\nexport * from './util/send-and-confirm-raw-transaction';\nexport * from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"]},"metadata":{},"sourceType":"module"}