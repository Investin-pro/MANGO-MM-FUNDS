{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst serum_1 = require(\"@project-serum/serum\");\n\nconst fixednum_1 = require(\"./fixednum\");\n\nconst layout_1 = require(\"./layout\");\n\nconst utils_1 = require(\"./utils\");\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst os_1 = require(\"os\");\n\nconst _1 = require(\".\");\n\nconst PerpMarket_1 = __importDefault(require(\"./PerpMarket\"));\n\nclass MangoAccount {\n  constructor(publicKey, decoded) {\n    this.publicKey = publicKey;\n    this.spotOpenOrdersAccounts = new Array(layout_1.MAX_PAIRS).fill(undefined);\n    this.advancedOrders = [];\n    Object.assign(this, decoded);\n  }\n\n  get name() {\n    return this.info ? String.fromCharCode(...this.info).replace(new RegExp(String.fromCharCode(0), 'g'), '') : '';\n  }\n\n  getLiquidationPrice(mangoGroup, mangoCache, oracleIndex) {\n    const {\n      spot,\n      perps,\n      quote\n    } = this.getHealthComponents(mangoGroup, mangoCache);\n    let partialHealth = quote;\n    let weightedAsset = fixednum_1.ZERO_I80F48;\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const w = utils_1.getWeights(mangoGroup, i, 'Maint');\n\n      if (i === oracleIndex) {\n        const weightedSpot = spot[i].mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n        const weightedPerps = perps[i].mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n        weightedAsset = weightedSpot.add(weightedPerps).neg();\n      } else {\n        const price = mangoCache.priceCache[i].price;\n        const spotHealth = spot[i].mul(price).mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n        const perpHealth = perps[i].mul(price).mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n        partialHealth = partialHealth.add(spotHealth).add(perpHealth);\n      }\n    }\n\n    if (weightedAsset.isZero()) {\n      return undefined;\n    }\n\n    const liqPrice = partialHealth.div(weightedAsset);\n\n    if (liqPrice.isNeg()) {\n      return undefined;\n    }\n\n    return liqPrice.mul( // adjust for decimals in the price\n    fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[oracleIndex].decimals - mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals)));\n  }\n\n  hasAnySpotOrders() {\n    return this.inMarginBasket.some(b => b);\n  }\n\n  reload(connection) {\n    let dexProgramId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : undefined;\n    return __awaiter(this, void 0, void 0, function* () {\n      const acc = yield connection.getAccountInfo(this.publicKey);\n      Object.assign(this, layout_1.MangoAccountLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data));\n\n      if (dexProgramId) {\n        yield this.loadOpenOrders(connection, dexProgramId);\n      }\n\n      return this;\n    });\n  }\n\n  loadOpenOrders(connection, serumDexPk) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const accounts = yield _1.getMultipleAccounts(connection, this.spotOpenOrders.filter(pk => !pk.equals(utils_1.zeroKey)));\n      this.spotOpenOrdersAccounts = this.spotOpenOrders.map(openOrderPk => {\n        if (openOrderPk.equals(utils_1.zeroKey)) {\n          return undefined;\n        }\n\n        const account = accounts.find(a => a.publicKey.equals(openOrderPk));\n        return account ? serum_1.OpenOrders.fromAccountInfo(openOrderPk, account.accountInfo, serumDexPk) : undefined;\n      });\n      return this.spotOpenOrdersAccounts;\n    });\n  }\n\n  loadAdvancedOrders(connection) {\n    return __awaiter(this, void 0, void 0, function* () {\n      if (this.advancedOrdersKey.equals(utils_1.zeroKey)) return [];\n      const acc = yield connection.getAccountInfo(this.advancedOrdersKey);\n\n      const decoded = _1.AdvancedOrdersLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data);\n\n      this.advancedOrders = decoded.orders;\n      return decoded.orders;\n    });\n  }\n\n  getNativeDeposit(rootBank, tokenIndex) {\n    return rootBank.depositIndex.mul(this.deposits[tokenIndex]);\n  }\n\n  getNativeBorrow(rootBank, tokenIndex) {\n    return rootBank.borrowIndex.mul(this.borrows[tokenIndex]);\n  }\n\n  getUiDeposit(rootBank, mangoGroup, tokenIndex) {\n    return utils_1.nativeI80F48ToUi(this.getNativeDeposit(rootBank, tokenIndex).floor(), mangoGroup.getTokenDecimals(tokenIndex));\n  }\n\n  getUiBorrow(rootBank, mangoGroup, tokenIndex) {\n    return utils_1.nativeI80F48ToUi(this.getNativeBorrow(rootBank, tokenIndex).ceil(), mangoGroup.getTokenDecimals(tokenIndex));\n  }\n\n  getSpotVal(mangoGroup, mangoCache, index, assetWeight) {\n    let assetsVal = fixednum_1.ZERO_I80F48;\n    const price = mangoGroup.getPrice(index, mangoCache);\n    const depositVal = this.getUiDeposit(mangoCache.rootBankCache[index], mangoGroup, index).mul(price).mul(assetWeight);\n    assetsVal = assetsVal.add(depositVal);\n    const openOrdersAccount = this.spotOpenOrdersAccounts[index];\n\n    if (openOrdersAccount !== undefined) {\n      assetsVal = assetsVal.add(fixednum_1.I80F48.fromNumber(utils_1.nativeToUi(openOrdersAccount.baseTokenTotal.toNumber(), mangoGroup.tokens[index].decimals)).mul(price).mul(assetWeight));\n      assetsVal = assetsVal.add(fixednum_1.I80F48.fromNumber(utils_1.nativeToUi(openOrdersAccount.quoteTokenTotal.toNumber() + openOrdersAccount['referrerRebatesAccrued'].toNumber(), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals)));\n    }\n\n    return assetsVal;\n  }\n\n  getAssetsVal(mangoGroup, mangoCache, healthType) {\n    let assetsVal = fixednum_1.ZERO_I80F48; // quote currency deposits\n\n    assetsVal = assetsVal.add(this.getUiDeposit(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], mangoGroup, layout_1.QUOTE_INDEX));\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      let assetWeight = fixednum_1.ONE_I80F48;\n\n      if (healthType === 'Maint') {\n        assetWeight = mangoGroup.spotMarkets[i].maintAssetWeight;\n      } else if (healthType === 'Init') {\n        assetWeight = mangoGroup.spotMarkets[i].initAssetWeight;\n      }\n\n      const spotVal = this.getSpotVal(mangoGroup, mangoCache, i, assetWeight);\n      assetsVal = assetsVal.add(spotVal);\n      const price = mangoCache.priceCache[i].price;\n      const perpsUiAssetVal = utils_1.nativeI80F48ToUi(this.perpAccounts[i].getAssetVal(mangoGroup.perpMarkets[i], price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n      assetsVal = assetsVal.add(perpsUiAssetVal);\n    }\n\n    return assetsVal;\n  }\n\n  getLiabsVal(mangoGroup, mangoCache, healthType) {\n    let liabsVal = fixednum_1.ZERO_I80F48;\n    liabsVal = liabsVal.add(this.getUiBorrow(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], mangoGroup, layout_1.QUOTE_INDEX));\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      let liabWeight = fixednum_1.ONE_I80F48;\n      const price = mangoGroup.getPrice(i, mangoCache);\n\n      if (healthType === 'Maint') {\n        liabWeight = mangoGroup.spotMarkets[i].maintLiabWeight;\n      } else if (healthType === 'Init') {\n        liabWeight = mangoGroup.spotMarkets[i].initLiabWeight;\n      }\n\n      liabsVal = liabsVal.add(this.getUiBorrow(mangoCache.rootBankCache[i], mangoGroup, i).mul(price.mul(liabWeight)));\n      const perpsUiLiabsVal = utils_1.nativeI80F48ToUi(this.perpAccounts[i].getLiabsVal(mangoGroup.perpMarkets[i], mangoCache.priceCache[i].price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n      liabsVal = liabsVal.add(perpsUiLiabsVal);\n    }\n\n    return liabsVal;\n  }\n\n  getNativeLiabsVal(mangoGroup, mangoCache, healthType) {\n    let liabsVal = fixednum_1.ZERO_I80F48;\n    liabsVal = liabsVal.add(this.getNativeBorrow(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], layout_1.QUOTE_INDEX));\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const price = mangoCache.priceCache[i].price;\n      let liabWeight = fixednum_1.ONE_I80F48;\n\n      if (healthType === 'Maint') {\n        liabWeight = mangoGroup.spotMarkets[i].maintLiabWeight;\n      } else if (healthType === 'Init') {\n        liabWeight = mangoGroup.spotMarkets[i].initLiabWeight;\n      }\n\n      liabsVal = liabsVal.add(this.getNativeBorrow(mangoCache.rootBankCache[i], i).mul(price.mul(liabWeight)));\n      liabsVal = liabsVal.add(this.perpAccounts[i].getLiabsVal(mangoGroup.perpMarkets[i], price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding));\n    }\n\n    return liabsVal;\n  }\n  /**\n   * deposits - borrows in native terms\n   */\n\n\n  getNet(bankCache, tokenIndex) {\n    return this.deposits[tokenIndex].mul(bankCache.depositIndex).sub(this.borrows[tokenIndex].mul(bankCache.borrowIndex));\n  }\n  /**\n   * Take health components and return the assets and liabs weighted\n   */\n\n\n  getWeightedAssetsLiabsVals(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n    let assets = fixednum_1.ZERO_I80F48;\n    let liabs = fixednum_1.ZERO_I80F48;\n\n    if (quote.isPos()) {\n      assets = assets.add(quote);\n    } else {\n      liabs = liabs.add(quote.neg());\n    }\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const w = utils_1.getWeights(mangoGroup, i, healthType);\n      const price = mangoCache.priceCache[i].price;\n\n      if (spot[i].isPos()) {\n        assets = spot[i].mul(price).mul(w.spotAssetWeight).add(assets);\n      } else {\n        liabs = spot[i].neg().mul(price).mul(w.spotLiabWeight).add(liabs);\n      }\n\n      if (perps[i].isPos()) {\n        assets = perps[i].mul(price).mul(w.perpAssetWeight).add(assets);\n      } else {\n        liabs = perps[i].neg().mul(price).mul(w.perpLiabWeight).add(liabs);\n      }\n    }\n\n    return {\n      assets,\n      liabs\n    };\n  }\n\n  getHealthFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n    let health = quote;\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const w = utils_1.getWeights(mangoGroup, i, healthType);\n      const price = mangoCache.priceCache[i].price;\n      const spotHealth = spot[i].mul(price).mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n      const perpHealth = perps[i].mul(price).mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n      health = health.add(spotHealth).add(perpHealth);\n    }\n\n    return health;\n  }\n\n  getHealthsFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n    let spotHealth = quote;\n    let perpHealth = quote;\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const w = utils_1.getWeights(mangoGroup, i, healthType);\n      const price = mangoCache.priceCache[i].price;\n\n      const _spotHealth = spot[i].mul(price).mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n\n      const _perpHealth = perps[i].mul(price).mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n\n      spotHealth = spotHealth.add(_spotHealth);\n      perpHealth = perpHealth.add(_perpHealth);\n    }\n\n    return {\n      spot: spotHealth,\n      perp: perpHealth\n    };\n  }\n  /**\n   * Amount of native quote currency available to expand your position in this market\n   */\n\n\n  getMarketMarginAvailable(mangoGroup, mangoCache, marketIndex, marketType) {\n    const health = this.getHealth(mangoGroup, mangoCache, 'Init');\n\n    if (health.lte(fixednum_1.ZERO_I80F48)) {\n      return fixednum_1.ZERO_I80F48;\n    }\n\n    const w = utils_1.getWeights(mangoGroup, marketIndex, 'Init');\n    const weight = marketType === 'spot' ? w.spotAssetWeight : w.perpAssetWeight;\n\n    if (weight.gte(fixednum_1.ONE_I80F48)) {\n      // This is actually an error state and should not happen\n      return health;\n    } else {\n      return health.div(fixednum_1.ONE_I80F48.sub(weight));\n    }\n  }\n  /**\n   * Get token amount available to withdraw without borrowing.\n   */\n\n\n  getAvailableBalance(mangoGroup, mangoCache, tokenIndex) {\n    const health = this.getHealth(mangoGroup, mangoCache, 'Init');\n    const net = this.getNet(mangoCache.rootBankCache[tokenIndex], tokenIndex);\n\n    if (tokenIndex === layout_1.QUOTE_INDEX) {\n      return health.min(net).max(fixednum_1.ZERO_I80F48);\n    } else {\n      const w = utils_1.getWeights(mangoGroup, tokenIndex, 'Init');\n      return net.min(health.div(w.spotAssetWeight).div(mangoCache.priceCache[tokenIndex].price)).max(fixednum_1.ZERO_I80F48);\n    }\n  }\n  /**\n   * Return the spot, perps and quote currency values after adjusting for\n   * worst case open orders scenarios. These values are not adjusted for health\n   * type\n   * @param mangoGroup\n   * @param mangoCache\n   */\n\n\n  getHealthComponents(mangoGroup, mangoCache) {\n    const spot = Array(mangoGroup.numOracles).fill(fixednum_1.ZERO_I80F48);\n    const perps = Array(mangoGroup.numOracles).fill(fixednum_1.ZERO_I80F48);\n    let quote = this.getNet(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], layout_1.QUOTE_INDEX);\n\n    for (let i = 0; i < mangoGroup.numOracles; i++) {\n      const bankCache = mangoCache.rootBankCache[i];\n      const price = mangoCache.priceCache[i].price;\n      const baseNet = this.getNet(bankCache, i); // Evaluate spot first\n\n      const openOrders = this.spotOpenOrdersAccounts[i];\n\n      if (this.inMarginBasket[i] && openOrders !== undefined) {\n        const {\n          quoteFree,\n          quoteLocked,\n          baseFree,\n          baseLocked\n        } = utils_1.splitOpenOrders(openOrders); // base total if all bids were executed\n\n        const bidsBaseNet = baseNet.add(quoteLocked.div(price)).add(baseFree).add(baseLocked); // base total if all asks were executed\n\n        const asksBaseNet = baseNet.add(baseFree); // bids case worse if it has a higher absolute position\n\n        if (bidsBaseNet.abs().gt(asksBaseNet.abs())) {\n          spot[i] = bidsBaseNet;\n          quote = quote.add(quoteFree);\n        } else {\n          spot[i] = asksBaseNet;\n          quote = baseLocked.mul(price).add(quoteFree).add(quoteLocked).add(quote);\n        }\n      } else {\n        spot[i] = baseNet;\n      } // Evaluate perps\n\n\n      if (!mangoGroup.perpMarkets[i].perpMarket.equals(utils_1.zeroKey)) {\n        const perpMarketCache = mangoCache.perpMarketCache[i];\n        const perpAccount = this.perpAccounts[i];\n        const baseLotSize = mangoGroup.perpMarkets[i].baseLotSize;\n        const quoteLotSize = mangoGroup.perpMarkets[i].quoteLotSize;\n        const takerQuote = fixednum_1.I80F48.fromI64(perpAccount.takerQuote.mul(quoteLotSize));\n        const basePos = fixednum_1.I80F48.fromI64(perpAccount.basePosition.add(perpAccount.takerBase).mul(baseLotSize));\n        const bidsQuantity = fixednum_1.I80F48.fromI64(perpAccount.bidsQuantity.mul(baseLotSize));\n        const asksQuantity = fixednum_1.I80F48.fromI64(perpAccount.asksQuantity.mul(baseLotSize));\n        const bidsBaseNet = basePos.add(bidsQuantity);\n        const asksBaseNet = basePos.sub(asksQuantity);\n\n        if (bidsBaseNet.abs().gt(asksBaseNet.abs())) {\n          const quotePos = perpAccount.getQuotePosition(perpMarketCache).add(takerQuote).sub(bidsQuantity.mul(price));\n          quote = quote.add(quotePos);\n          perps[i] = bidsBaseNet;\n        } else {\n          const quotePos = perpAccount.getQuotePosition(perpMarketCache).add(takerQuote).add(asksQuantity.mul(price));\n          quote = quote.add(quotePos);\n          perps[i] = asksBaseNet;\n        }\n      } else {\n        perps[i] = fixednum_1.ZERO_I80F48;\n      }\n    }\n\n    return {\n      spot,\n      perps,\n      quote\n    };\n  }\n\n  getHealth(mangoGroup, mangoCache, healthType) {\n    const {\n      spot,\n      perps,\n      quote\n    } = this.getHealthComponents(mangoGroup, mangoCache);\n    const health = this.getHealthFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType);\n    return health;\n  }\n\n  getHealthRatio(mangoGroup, mangoCache, healthType) {\n    const {\n      spot,\n      perps,\n      quote\n    } = this.getHealthComponents(mangoGroup, mangoCache);\n    const {\n      assets,\n      liabs\n    } = this.getWeightedAssetsLiabsVals(mangoGroup, mangoCache, spot, perps, quote, healthType);\n\n    if (liabs.gt(fixednum_1.ZERO_I80F48)) {\n      return assets.div(liabs).sub(fixednum_1.ONE_I80F48).mul(fixednum_1.I80F48.fromNumber(100));\n    } else {\n      return fixednum_1.I80F48.fromNumber(100);\n    }\n  }\n\n  computeValue(mangoGroup, mangoCache) {\n    return this.getAssetsVal(mangoGroup, mangoCache).sub(this.getLiabsVal(mangoGroup, mangoCache));\n  }\n\n  getLeverage(mangoGroup, mangoCache) {\n    const liabs = this.getLiabsVal(mangoGroup, mangoCache);\n    const assets = this.getAssetsVal(mangoGroup, mangoCache);\n\n    if (assets.gt(fixednum_1.ZERO_I80F48)) {\n      return liabs.div(assets.sub(liabs));\n    }\n\n    return fixednum_1.ZERO_I80F48;\n  }\n\n  getMaxLeverageForMarket(mangoGroup, mangoCache, marketIndex, market, side, price) {\n    const initHealth = this.getHealth(mangoGroup, mangoCache, 'Init');\n    const healthDecimals = fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n    const uiInitHealth = initHealth.div(healthDecimals);\n    let uiDepositVal = fixednum_1.ZERO_I80F48;\n    let uiBorrowVal = fixednum_1.ZERO_I80F48;\n    let initLiabWeight, initAssetWeight, deposits, borrows;\n\n    if (market instanceof PerpMarket_1.default) {\n      ({\n        initLiabWeight,\n        initAssetWeight\n      } = mangoGroup.perpMarkets[marketIndex]);\n      const basePos = this.perpAccounts[marketIndex].basePosition;\n\n      if (basePos.gt(_1.ZERO_BN)) {\n        deposits = fixednum_1.I80F48.fromNumber(market.baseLotsToNumber(basePos));\n        uiDepositVal = deposits.mul(price);\n      } else {\n        borrows = fixednum_1.I80F48.fromNumber(market.baseLotsToNumber(basePos)).abs();\n        uiBorrowVal = borrows.mul(price);\n      }\n    } else {\n      ({\n        initLiabWeight,\n        initAssetWeight\n      } = mangoGroup.spotMarkets[marketIndex]);\n      deposits = this.getUiDeposit(mangoCache.rootBankCache[marketIndex], mangoGroup, marketIndex);\n      uiDepositVal = deposits.mul(price);\n      borrows = this.getUiBorrow(mangoCache.rootBankCache[marketIndex], mangoGroup, marketIndex);\n      uiBorrowVal = borrows.mul(price);\n    }\n\n    let max;\n\n    if (side === 'buy') {\n      const uiHealthAtZero = uiInitHealth.add(uiBorrowVal.mul(initLiabWeight.sub(fixednum_1.ONE_I80F48)));\n      max = uiHealthAtZero.div(fixednum_1.ONE_I80F48.sub(initAssetWeight)).add(uiBorrowVal);\n    } else {\n      const uiHealthAtZero = uiInitHealth.add(uiDepositVal.mul(fixednum_1.ONE_I80F48.sub(initAssetWeight)));\n      max = uiHealthAtZero.div(initLiabWeight.sub(fixednum_1.ONE_I80F48)).add(uiDepositVal);\n    }\n\n    return {\n      max,\n      uiBorrowVal,\n      uiDepositVal,\n      deposits,\n      borrows\n    };\n  }\n\n  getMaxWithBorrowForToken(mangoGroup, mangoCache, tokenIndex) {\n    const oldInitHealth = this.getHealth(mangoGroup, mangoCache, 'Init').floor();\n    const tokenDeposits = this.getNativeDeposit(mangoCache.rootBankCache[tokenIndex], tokenIndex).floor();\n    let liabWeight, assetWeight, nativePrice;\n\n    if (tokenIndex === layout_1.QUOTE_INDEX) {\n      liabWeight = assetWeight = nativePrice = fixednum_1.ONE_I80F48;\n    } else {\n      liabWeight = mangoGroup.spotMarkets[tokenIndex].initLiabWeight;\n      assetWeight = mangoGroup.spotMarkets[tokenIndex].initAssetWeight;\n      nativePrice = mangoCache.priceCache[tokenIndex].price;\n    }\n\n    const newInitHealth = oldInitHealth.sub(tokenDeposits.mul(nativePrice).mul(assetWeight)).floor();\n    const price = mangoGroup.getPrice(tokenIndex, mangoCache);\n    const healthDecimals = fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n    return newInitHealth.div(healthDecimals).div(price.mul(liabWeight));\n  }\n\n  isLiquidatable(mangoGroup, mangoCache) {\n    return this.beingLiquidated && this.getHealth(mangoGroup, mangoCache, 'Init').isNeg() || this.getHealth(mangoGroup, mangoCache, 'Maint').isNeg();\n  }\n\n  toPrettyString(groupConfig, mangoGroup, cache) {\n    const lines = [];\n    lines.push('MangoAccount ' + this.publicKey.toBase58());\n    lines.push('Owner: ' + this.owner.toBase58());\n    lines.push('Maint Health Ratio: ' + this.getHealthRatio(mangoGroup, cache, 'Maint').toFixed(4));\n    lines.push('Maint Health: ' + this.getHealth(mangoGroup, cache, 'Maint').toFixed(4));\n    lines.push('Init Health: ' + this.getHealth(mangoGroup, cache, 'Init').toFixed(4));\n    lines.push('Equity: ' + this.computeValue(mangoGroup, cache).toFixed(4));\n    lines.push('isBankrupt: ' + this.isBankrupt);\n    lines.push('beingLiquidated: ' + this.beingLiquidated);\n    lines.push('Spot:');\n    lines.push('Token: Net Balance / Base In Orders / Quote In Orders');\n    const quoteAdj = new bn_js_1.default(10).pow(new bn_js_1.default(mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n\n    for (let i = 0; i < mangoGroup.tokens.length; i++) {\n      if (mangoGroup.tokens[i].mint.equals(utils_1.zeroKey)) {\n        continue;\n      }\n\n      const token = _1.getTokenByMint(groupConfig, mangoGroup.tokens[i].mint);\n\n      let baseInOrders = _1.ZERO_BN;\n      let quoteInOrders = _1.ZERO_BN;\n      const openOrders = i !== layout_1.QUOTE_INDEX ? this.spotOpenOrdersAccounts[i] : undefined;\n\n      if (openOrders) {\n        const baseAdj = new bn_js_1.default(10).pow(new bn_js_1.default(mangoGroup.tokens[i].decimals));\n        baseInOrders = openOrders.baseTokenTotal.div(baseAdj);\n        quoteInOrders = openOrders.quoteTokenTotal.add(openOrders['referrerRebatesAccrued']).div(quoteAdj);\n      }\n\n      const net = utils_1.nativeI80F48ToUi(this.getNet(cache.rootBankCache[i], i), mangoGroup.tokens[i].decimals);\n\n      if (net.eq(fixednum_1.ZERO_I80F48) && baseInOrders.isZero() && quoteInOrders.isZero()) {\n        continue;\n      }\n\n      lines.push(`${token.symbol}: ${net.toFixed(4)} / ${baseInOrders.toNumber().toFixed(4)} / ${quoteInOrders.toNumber().toFixed(4)}`);\n    }\n\n    lines.push('Perps:');\n    lines.push('Market: Base Pos / Quote Pos / Unsettled Funding / Health');\n\n    for (let i = 0; i < this.perpAccounts.length; i++) {\n      if (mangoGroup.perpMarkets[i].perpMarket.equals(utils_1.zeroKey)) {\n        continue;\n      }\n\n      const market = _1.getMarketByPublicKey(groupConfig, mangoGroup.perpMarkets[i].perpMarket);\n\n      if (market === undefined) {\n        continue;\n      }\n\n      const perpAccount = this.perpAccounts[i];\n      const perpMarketInfo = mangoGroup.perpMarkets[i];\n      lines.push(`${market.name}: ${this.getBasePositionUiWithGroup(i, mangoGroup).toFixed(4)} / ${(perpAccount.getQuotePosition(cache.perpMarketCache[i]).toNumber() / quoteAdj.toNumber()).toFixed(4)} / ${(perpAccount.getUnsettledFunding(cache.perpMarketCache[i]).toNumber() / quoteAdj.toNumber()).toFixed(4)} / ${perpAccount.getHealth(perpMarketInfo, cache.priceCache[i].price, perpMarketInfo.maintAssetWeight, perpMarketInfo.maintLiabWeight, cache.perpMarketCache[i].longFunding, cache.perpMarketCache[i].shortFunding).toFixed(4)}`);\n    }\n\n    return lines.join(os_1.EOL);\n  }\n  /**\n   * Get all the open orders using only info in MangoAccount; Does not contain\n   * information about the size of the order.\n   */\n\n\n  getPerpOpenOrders() {\n    const perpOpenOrders = [];\n\n    for (let i = 0; i < this.orders.length; i++) {\n      if (this.orderMarket[i] === layout_1.FREE_ORDER_SLOT) {\n        continue;\n      }\n\n      perpOpenOrders.push({\n        marketIndex: this.orderMarket[i],\n        price: _1.getPriceFromKey(this.orders[i]),\n        side: this.orderSide[i]\n      });\n    }\n\n    return perpOpenOrders;\n  }\n  /**\n   * Return the open orders keys in basket and replace open orders not in basket with zero key\n   */\n\n\n  getOpenOrdersKeysInBasket() {\n    return this.spotOpenOrders.map((pk, i) => this.inMarginBasket[i] ? pk : utils_1.zeroKey);\n  }\n  /**\n   *  Return the current position for the market at `marketIndex` in UI units\n   *  e.g. if you buy 1 BTC in the UI, you're buying 1,000,000 native BTC,\n   *  10,000 BTC-PERP contracts and exactly 1 BTC in UI\n   *  Find the marketIndex in the ids.json list of perp markets\n   */\n\n\n  getPerpPositionUi(marketIndex, perpMarket) {\n    return this.perpAccounts[marketIndex].getBasePositionUi(perpMarket);\n  }\n  /**\n   *  Return the current position for the market at `marketIndex` in UI units\n   *  e.g. if you buy 1 BTC in the UI, you're buying 1,000,000 native BTC,\n   *  10,000 BTC-PERP contracts and exactly 1 BTC in UI\n   *  Find the marketIndex in the ids.json list of perp markets\n   */\n\n\n  getBasePositionUiWithGroup(marketIndex, group) {\n    return this.perpAccounts[marketIndex].basePosition.mul(group.perpMarkets[marketIndex].baseLotSize).toNumber() / Math.pow(10, group.tokens[marketIndex].decimals);\n  }\n  /**\n   * Return the equity in standard UI numbers. E.g. if equity is $100, this returns 100\n   */\n\n\n  getEquityUi(mangoGroup, mangoCache) {\n    return this.computeValue(mangoGroup, mangoCache).toNumber() / Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n  }\n  /**\n   * This is the init health divided by quote decimals\n   */\n\n\n  getCollateralValueUi(mangoGroup, mangoCache) {\n    return this.getHealth(mangoGroup, mangoCache, 'Init').toNumber() / Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n  }\n\n}\n\nexports.default = MangoAccount;","map":{"version":3,"sources":["../../src/MangoAccount.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst serum_1 = require(\"@project-serum/serum\");\nconst fixednum_1 = require(\"./fixednum\");\nconst layout_1 = require(\"./layout\");\nconst utils_1 = require(\"./utils\");\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst os_1 = require(\"os\");\nconst _1 = require(\".\");\nconst PerpMarket_1 = __importDefault(require(\"./PerpMarket\"));\nclass MangoAccount {\n    constructor(publicKey, decoded) {\n        this.publicKey = publicKey;\n        this.spotOpenOrdersAccounts = new Array(layout_1.MAX_PAIRS).fill(undefined);\n        this.advancedOrders = [];\n        Object.assign(this, decoded);\n    }\n    get name() {\n        return this.info\n            ? String.fromCharCode(...this.info).replace(new RegExp(String.fromCharCode(0), 'g'), '')\n            : '';\n    }\n    getLiquidationPrice(mangoGroup, mangoCache, oracleIndex) {\n        const { spot, perps, quote } = this.getHealthComponents(mangoGroup, mangoCache);\n        let partialHealth = quote;\n        let weightedAsset = fixednum_1.ZERO_I80F48;\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const w = utils_1.getWeights(mangoGroup, i, 'Maint');\n            if (i === oracleIndex) {\n                const weightedSpot = spot[i].mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n                const weightedPerps = perps[i].mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n                weightedAsset = weightedSpot.add(weightedPerps).neg();\n            }\n            else {\n                const price = mangoCache.priceCache[i].price;\n                const spotHealth = spot[i]\n                    .mul(price)\n                    .mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n                const perpHealth = perps[i]\n                    .mul(price)\n                    .mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n                partialHealth = partialHealth.add(spotHealth).add(perpHealth);\n            }\n        }\n        if (weightedAsset.isZero()) {\n            return undefined;\n        }\n        const liqPrice = partialHealth.div(weightedAsset);\n        if (liqPrice.isNeg()) {\n            return undefined;\n        }\n        return liqPrice.mul(\n        // adjust for decimals in the price\n        fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[oracleIndex].decimals -\n            mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals)));\n    }\n    hasAnySpotOrders() {\n        return this.inMarginBasket.some((b) => b);\n    }\n    reload(connection, dexProgramId = undefined) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const acc = yield connection.getAccountInfo(this.publicKey);\n            Object.assign(this, layout_1.MangoAccountLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data));\n            if (dexProgramId) {\n                yield this.loadOpenOrders(connection, dexProgramId);\n            }\n            return this;\n        });\n    }\n    loadOpenOrders(connection, serumDexPk) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const accounts = yield _1.getMultipleAccounts(connection, this.spotOpenOrders.filter((pk) => !pk.equals(utils_1.zeroKey)));\n            this.spotOpenOrdersAccounts = this.spotOpenOrders.map((openOrderPk) => {\n                if (openOrderPk.equals(utils_1.zeroKey)) {\n                    return undefined;\n                }\n                const account = accounts.find((a) => a.publicKey.equals(openOrderPk));\n                return account\n                    ? serum_1.OpenOrders.fromAccountInfo(openOrderPk, account.accountInfo, serumDexPk)\n                    : undefined;\n            });\n            return this.spotOpenOrdersAccounts;\n        });\n    }\n    loadAdvancedOrders(connection) {\n        return __awaiter(this, void 0, void 0, function* () {\n            if (this.advancedOrdersKey.equals(utils_1.zeroKey))\n                return [];\n            const acc = yield connection.getAccountInfo(this.advancedOrdersKey);\n            const decoded = _1.AdvancedOrdersLayout.decode(acc === null || acc === void 0 ? void 0 : acc.data);\n            this.advancedOrders = decoded.orders;\n            return decoded.orders;\n        });\n    }\n    getNativeDeposit(rootBank, tokenIndex) {\n        return rootBank.depositIndex.mul(this.deposits[tokenIndex]);\n    }\n    getNativeBorrow(rootBank, tokenIndex) {\n        return rootBank.borrowIndex.mul(this.borrows[tokenIndex]);\n    }\n    getUiDeposit(rootBank, mangoGroup, tokenIndex) {\n        return utils_1.nativeI80F48ToUi(this.getNativeDeposit(rootBank, tokenIndex).floor(), mangoGroup.getTokenDecimals(tokenIndex));\n    }\n    getUiBorrow(rootBank, mangoGroup, tokenIndex) {\n        return utils_1.nativeI80F48ToUi(this.getNativeBorrow(rootBank, tokenIndex).ceil(), mangoGroup.getTokenDecimals(tokenIndex));\n    }\n    getSpotVal(mangoGroup, mangoCache, index, assetWeight) {\n        let assetsVal = fixednum_1.ZERO_I80F48;\n        const price = mangoGroup.getPrice(index, mangoCache);\n        const depositVal = this.getUiDeposit(mangoCache.rootBankCache[index], mangoGroup, index)\n            .mul(price)\n            .mul(assetWeight);\n        assetsVal = assetsVal.add(depositVal);\n        const openOrdersAccount = this.spotOpenOrdersAccounts[index];\n        if (openOrdersAccount !== undefined) {\n            assetsVal = assetsVal.add(fixednum_1.I80F48.fromNumber(utils_1.nativeToUi(openOrdersAccount.baseTokenTotal.toNumber(), mangoGroup.tokens[index].decimals))\n                .mul(price)\n                .mul(assetWeight));\n            assetsVal = assetsVal.add(fixednum_1.I80F48.fromNumber(utils_1.nativeToUi(openOrdersAccount.quoteTokenTotal.toNumber() +\n                openOrdersAccount['referrerRebatesAccrued'].toNumber(), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals)));\n        }\n        return assetsVal;\n    }\n    getAssetsVal(mangoGroup, mangoCache, healthType) {\n        let assetsVal = fixednum_1.ZERO_I80F48;\n        // quote currency deposits\n        assetsVal = assetsVal.add(this.getUiDeposit(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], mangoGroup, layout_1.QUOTE_INDEX));\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            let assetWeight = fixednum_1.ONE_I80F48;\n            if (healthType === 'Maint') {\n                assetWeight = mangoGroup.spotMarkets[i].maintAssetWeight;\n            }\n            else if (healthType === 'Init') {\n                assetWeight = mangoGroup.spotMarkets[i].initAssetWeight;\n            }\n            const spotVal = this.getSpotVal(mangoGroup, mangoCache, i, assetWeight);\n            assetsVal = assetsVal.add(spotVal);\n            const price = mangoCache.priceCache[i].price;\n            const perpsUiAssetVal = utils_1.nativeI80F48ToUi(this.perpAccounts[i].getAssetVal(mangoGroup.perpMarkets[i], price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n            assetsVal = assetsVal.add(perpsUiAssetVal);\n        }\n        return assetsVal;\n    }\n    getLiabsVal(mangoGroup, mangoCache, healthType) {\n        let liabsVal = fixednum_1.ZERO_I80F48;\n        liabsVal = liabsVal.add(this.getUiBorrow(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], mangoGroup, layout_1.QUOTE_INDEX));\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            let liabWeight = fixednum_1.ONE_I80F48;\n            const price = mangoGroup.getPrice(i, mangoCache);\n            if (healthType === 'Maint') {\n                liabWeight = mangoGroup.spotMarkets[i].maintLiabWeight;\n            }\n            else if (healthType === 'Init') {\n                liabWeight = mangoGroup.spotMarkets[i].initLiabWeight;\n            }\n            liabsVal = liabsVal.add(this.getUiBorrow(mangoCache.rootBankCache[i], mangoGroup, i).mul(price.mul(liabWeight)));\n            const perpsUiLiabsVal = utils_1.nativeI80F48ToUi(this.perpAccounts[i].getLiabsVal(mangoGroup.perpMarkets[i], mangoCache.priceCache[i].price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding), mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals);\n            liabsVal = liabsVal.add(perpsUiLiabsVal);\n        }\n        return liabsVal;\n    }\n    getNativeLiabsVal(mangoGroup, mangoCache, healthType) {\n        let liabsVal = fixednum_1.ZERO_I80F48;\n        liabsVal = liabsVal.add(this.getNativeBorrow(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], layout_1.QUOTE_INDEX));\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const price = mangoCache.priceCache[i].price;\n            let liabWeight = fixednum_1.ONE_I80F48;\n            if (healthType === 'Maint') {\n                liabWeight = mangoGroup.spotMarkets[i].maintLiabWeight;\n            }\n            else if (healthType === 'Init') {\n                liabWeight = mangoGroup.spotMarkets[i].initLiabWeight;\n            }\n            liabsVal = liabsVal.add(this.getNativeBorrow(mangoCache.rootBankCache[i], i).mul(price.mul(liabWeight)));\n            liabsVal = liabsVal.add(this.perpAccounts[i].getLiabsVal(mangoGroup.perpMarkets[i], price, mangoCache.perpMarketCache[i].shortFunding, mangoCache.perpMarketCache[i].longFunding));\n        }\n        return liabsVal;\n    }\n    /**\n     * deposits - borrows in native terms\n     */\n    getNet(bankCache, tokenIndex) {\n        return this.deposits[tokenIndex]\n            .mul(bankCache.depositIndex)\n            .sub(this.borrows[tokenIndex].mul(bankCache.borrowIndex));\n    }\n    /**\n     * Take health components and return the assets and liabs weighted\n     */\n    getWeightedAssetsLiabsVals(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n        let assets = fixednum_1.ZERO_I80F48;\n        let liabs = fixednum_1.ZERO_I80F48;\n        if (quote.isPos()) {\n            assets = assets.add(quote);\n        }\n        else {\n            liabs = liabs.add(quote.neg());\n        }\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const w = utils_1.getWeights(mangoGroup, i, healthType);\n            const price = mangoCache.priceCache[i].price;\n            if (spot[i].isPos()) {\n                assets = spot[i].mul(price).mul(w.spotAssetWeight).add(assets);\n            }\n            else {\n                liabs = spot[i].neg().mul(price).mul(w.spotLiabWeight).add(liabs);\n            }\n            if (perps[i].isPos()) {\n                assets = perps[i].mul(price).mul(w.perpAssetWeight).add(assets);\n            }\n            else {\n                liabs = perps[i].neg().mul(price).mul(w.perpLiabWeight).add(liabs);\n            }\n        }\n        return { assets, liabs };\n    }\n    getHealthFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n        let health = quote;\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const w = utils_1.getWeights(mangoGroup, i, healthType);\n            const price = mangoCache.priceCache[i].price;\n            const spotHealth = spot[i]\n                .mul(price)\n                .mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n            const perpHealth = perps[i]\n                .mul(price)\n                .mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n            health = health.add(spotHealth).add(perpHealth);\n        }\n        return health;\n    }\n    getHealthsFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType) {\n        let spotHealth = quote;\n        let perpHealth = quote;\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const w = utils_1.getWeights(mangoGroup, i, healthType);\n            const price = mangoCache.priceCache[i].price;\n            const _spotHealth = spot[i]\n                .mul(price)\n                .mul(spot[i].isPos() ? w.spotAssetWeight : w.spotLiabWeight);\n            const _perpHealth = perps[i]\n                .mul(price)\n                .mul(perps[i].isPos() ? w.perpAssetWeight : w.perpLiabWeight);\n            spotHealth = spotHealth.add(_spotHealth);\n            perpHealth = perpHealth.add(_perpHealth);\n        }\n        return { spot: spotHealth, perp: perpHealth };\n    }\n    /**\n     * Amount of native quote currency available to expand your position in this market\n     */\n    getMarketMarginAvailable(mangoGroup, mangoCache, marketIndex, marketType) {\n        const health = this.getHealth(mangoGroup, mangoCache, 'Init');\n        if (health.lte(fixednum_1.ZERO_I80F48)) {\n            return fixednum_1.ZERO_I80F48;\n        }\n        const w = utils_1.getWeights(mangoGroup, marketIndex, 'Init');\n        const weight = marketType === 'spot' ? w.spotAssetWeight : w.perpAssetWeight;\n        if (weight.gte(fixednum_1.ONE_I80F48)) {\n            // This is actually an error state and should not happen\n            return health;\n        }\n        else {\n            return health.div(fixednum_1.ONE_I80F48.sub(weight));\n        }\n    }\n    /**\n     * Get token amount available to withdraw without borrowing.\n     */\n    getAvailableBalance(mangoGroup, mangoCache, tokenIndex) {\n        const health = this.getHealth(mangoGroup, mangoCache, 'Init');\n        const net = this.getNet(mangoCache.rootBankCache[tokenIndex], tokenIndex);\n        if (tokenIndex === layout_1.QUOTE_INDEX) {\n            return health.min(net).max(fixednum_1.ZERO_I80F48);\n        }\n        else {\n            const w = utils_1.getWeights(mangoGroup, tokenIndex, 'Init');\n            return net\n                .min(health\n                .div(w.spotAssetWeight)\n                .div(mangoCache.priceCache[tokenIndex].price))\n                .max(fixednum_1.ZERO_I80F48);\n        }\n    }\n    /**\n     * Return the spot, perps and quote currency values after adjusting for\n     * worst case open orders scenarios. These values are not adjusted for health\n     * type\n     * @param mangoGroup\n     * @param mangoCache\n     */\n    getHealthComponents(mangoGroup, mangoCache) {\n        const spot = Array(mangoGroup.numOracles).fill(fixednum_1.ZERO_I80F48);\n        const perps = Array(mangoGroup.numOracles).fill(fixednum_1.ZERO_I80F48);\n        let quote = this.getNet(mangoCache.rootBankCache[layout_1.QUOTE_INDEX], layout_1.QUOTE_INDEX);\n        for (let i = 0; i < mangoGroup.numOracles; i++) {\n            const bankCache = mangoCache.rootBankCache[i];\n            const price = mangoCache.priceCache[i].price;\n            const baseNet = this.getNet(bankCache, i);\n            // Evaluate spot first\n            const openOrders = this.spotOpenOrdersAccounts[i];\n            if (this.inMarginBasket[i] && openOrders !== undefined) {\n                const { quoteFree, quoteLocked, baseFree, baseLocked } = utils_1.splitOpenOrders(openOrders);\n                // base total if all bids were executed\n                const bidsBaseNet = baseNet\n                    .add(quoteLocked.div(price))\n                    .add(baseFree)\n                    .add(baseLocked);\n                // base total if all asks were executed\n                const asksBaseNet = baseNet.add(baseFree);\n                // bids case worse if it has a higher absolute position\n                if (bidsBaseNet.abs().gt(asksBaseNet.abs())) {\n                    spot[i] = bidsBaseNet;\n                    quote = quote.add(quoteFree);\n                }\n                else {\n                    spot[i] = asksBaseNet;\n                    quote = baseLocked\n                        .mul(price)\n                        .add(quoteFree)\n                        .add(quoteLocked)\n                        .add(quote);\n                }\n            }\n            else {\n                spot[i] = baseNet;\n            }\n            // Evaluate perps\n            if (!mangoGroup.perpMarkets[i].perpMarket.equals(utils_1.zeroKey)) {\n                const perpMarketCache = mangoCache.perpMarketCache[i];\n                const perpAccount = this.perpAccounts[i];\n                const baseLotSize = mangoGroup.perpMarkets[i].baseLotSize;\n                const quoteLotSize = mangoGroup.perpMarkets[i].quoteLotSize;\n                const takerQuote = fixednum_1.I80F48.fromI64(perpAccount.takerQuote.mul(quoteLotSize));\n                const basePos = fixednum_1.I80F48.fromI64(perpAccount.basePosition.add(perpAccount.takerBase).mul(baseLotSize));\n                const bidsQuantity = fixednum_1.I80F48.fromI64(perpAccount.bidsQuantity.mul(baseLotSize));\n                const asksQuantity = fixednum_1.I80F48.fromI64(perpAccount.asksQuantity.mul(baseLotSize));\n                const bidsBaseNet = basePos.add(bidsQuantity);\n                const asksBaseNet = basePos.sub(asksQuantity);\n                if (bidsBaseNet.abs().gt(asksBaseNet.abs())) {\n                    const quotePos = perpAccount\n                        .getQuotePosition(perpMarketCache)\n                        .add(takerQuote)\n                        .sub(bidsQuantity.mul(price));\n                    quote = quote.add(quotePos);\n                    perps[i] = bidsBaseNet;\n                }\n                else {\n                    const quotePos = perpAccount\n                        .getQuotePosition(perpMarketCache)\n                        .add(takerQuote)\n                        .add(asksQuantity.mul(price));\n                    quote = quote.add(quotePos);\n                    perps[i] = asksBaseNet;\n                }\n            }\n            else {\n                perps[i] = fixednum_1.ZERO_I80F48;\n            }\n        }\n        return { spot, perps, quote };\n    }\n    getHealth(mangoGroup, mangoCache, healthType) {\n        const { spot, perps, quote } = this.getHealthComponents(mangoGroup, mangoCache);\n        const health = this.getHealthFromComponents(mangoGroup, mangoCache, spot, perps, quote, healthType);\n        return health;\n    }\n    getHealthRatio(mangoGroup, mangoCache, healthType) {\n        const { spot, perps, quote } = this.getHealthComponents(mangoGroup, mangoCache);\n        const { assets, liabs } = this.getWeightedAssetsLiabsVals(mangoGroup, mangoCache, spot, perps, quote, healthType);\n        if (liabs.gt(fixednum_1.ZERO_I80F48)) {\n            return assets.div(liabs).sub(fixednum_1.ONE_I80F48).mul(fixednum_1.I80F48.fromNumber(100));\n        }\n        else {\n            return fixednum_1.I80F48.fromNumber(100);\n        }\n    }\n    computeValue(mangoGroup, mangoCache) {\n        return this.getAssetsVal(mangoGroup, mangoCache).sub(this.getLiabsVal(mangoGroup, mangoCache));\n    }\n    getLeverage(mangoGroup, mangoCache) {\n        const liabs = this.getLiabsVal(mangoGroup, mangoCache);\n        const assets = this.getAssetsVal(mangoGroup, mangoCache);\n        if (assets.gt(fixednum_1.ZERO_I80F48)) {\n            return liabs.div(assets.sub(liabs));\n        }\n        return fixednum_1.ZERO_I80F48;\n    }\n    getMaxLeverageForMarket(mangoGroup, mangoCache, marketIndex, market, side, price) {\n        const initHealth = this.getHealth(mangoGroup, mangoCache, 'Init');\n        const healthDecimals = fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n        const uiInitHealth = initHealth.div(healthDecimals);\n        let uiDepositVal = fixednum_1.ZERO_I80F48;\n        let uiBorrowVal = fixednum_1.ZERO_I80F48;\n        let initLiabWeight, initAssetWeight, deposits, borrows;\n        if (market instanceof PerpMarket_1.default) {\n            ({ initLiabWeight, initAssetWeight } =\n                mangoGroup.perpMarkets[marketIndex]);\n            const basePos = this.perpAccounts[marketIndex].basePosition;\n            if (basePos.gt(_1.ZERO_BN)) {\n                deposits = fixednum_1.I80F48.fromNumber(market.baseLotsToNumber(basePos));\n                uiDepositVal = deposits.mul(price);\n            }\n            else {\n                borrows = fixednum_1.I80F48.fromNumber(market.baseLotsToNumber(basePos)).abs();\n                uiBorrowVal = borrows.mul(price);\n            }\n        }\n        else {\n            ({ initLiabWeight, initAssetWeight } =\n                mangoGroup.spotMarkets[marketIndex]);\n            deposits = this.getUiDeposit(mangoCache.rootBankCache[marketIndex], mangoGroup, marketIndex);\n            uiDepositVal = deposits.mul(price);\n            borrows = this.getUiBorrow(mangoCache.rootBankCache[marketIndex], mangoGroup, marketIndex);\n            uiBorrowVal = borrows.mul(price);\n        }\n        let max;\n        if (side === 'buy') {\n            const uiHealthAtZero = uiInitHealth.add(uiBorrowVal.mul(initLiabWeight.sub(fixednum_1.ONE_I80F48)));\n            max = uiHealthAtZero\n                .div(fixednum_1.ONE_I80F48.sub(initAssetWeight))\n                .add(uiBorrowVal);\n        }\n        else {\n            const uiHealthAtZero = uiInitHealth.add(uiDepositVal.mul(fixednum_1.ONE_I80F48.sub(initAssetWeight)));\n            max = uiHealthAtZero\n                .div(initLiabWeight.sub(fixednum_1.ONE_I80F48))\n                .add(uiDepositVal);\n        }\n        return { max, uiBorrowVal, uiDepositVal, deposits, borrows };\n    }\n    getMaxWithBorrowForToken(mangoGroup, mangoCache, tokenIndex) {\n        const oldInitHealth = this.getHealth(mangoGroup, mangoCache, 'Init').floor();\n        const tokenDeposits = this.getNativeDeposit(mangoCache.rootBankCache[tokenIndex], tokenIndex).floor();\n        let liabWeight, assetWeight, nativePrice;\n        if (tokenIndex === layout_1.QUOTE_INDEX) {\n            liabWeight = assetWeight = nativePrice = fixednum_1.ONE_I80F48;\n        }\n        else {\n            liabWeight = mangoGroup.spotMarkets[tokenIndex].initLiabWeight;\n            assetWeight = mangoGroup.spotMarkets[tokenIndex].initAssetWeight;\n            nativePrice = mangoCache.priceCache[tokenIndex].price;\n        }\n        const newInitHealth = oldInitHealth\n            .sub(tokenDeposits.mul(nativePrice).mul(assetWeight))\n            .floor();\n        const price = mangoGroup.getPrice(tokenIndex, mangoCache);\n        const healthDecimals = fixednum_1.I80F48.fromNumber(Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n        return newInitHealth.div(healthDecimals).div(price.mul(liabWeight));\n    }\n    isLiquidatable(mangoGroup, mangoCache) {\n        return ((this.beingLiquidated &&\n            this.getHealth(mangoGroup, mangoCache, 'Init').isNeg()) ||\n            this.getHealth(mangoGroup, mangoCache, 'Maint').isNeg());\n    }\n    toPrettyString(groupConfig, mangoGroup, cache) {\n        const lines = [];\n        lines.push('MangoAccount ' + this.publicKey.toBase58());\n        lines.push('Owner: ' + this.owner.toBase58());\n        lines.push('Maint Health Ratio: ' +\n            this.getHealthRatio(mangoGroup, cache, 'Maint').toFixed(4));\n        lines.push('Maint Health: ' + this.getHealth(mangoGroup, cache, 'Maint').toFixed(4));\n        lines.push('Init Health: ' + this.getHealth(mangoGroup, cache, 'Init').toFixed(4));\n        lines.push('Equity: ' + this.computeValue(mangoGroup, cache).toFixed(4));\n        lines.push('isBankrupt: ' + this.isBankrupt);\n        lines.push('beingLiquidated: ' + this.beingLiquidated);\n        lines.push('Spot:');\n        lines.push('Token: Net Balance / Base In Orders / Quote In Orders');\n        const quoteAdj = new bn_js_1.default(10).pow(new bn_js_1.default(mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n        for (let i = 0; i < mangoGroup.tokens.length; i++) {\n            if (mangoGroup.tokens[i].mint.equals(utils_1.zeroKey)) {\n                continue;\n            }\n            const token = _1.getTokenByMint(groupConfig, mangoGroup.tokens[i].mint);\n            let baseInOrders = _1.ZERO_BN;\n            let quoteInOrders = _1.ZERO_BN;\n            const openOrders = i !== layout_1.QUOTE_INDEX ? this.spotOpenOrdersAccounts[i] : undefined;\n            if (openOrders) {\n                const baseAdj = new bn_js_1.default(10).pow(new bn_js_1.default(mangoGroup.tokens[i].decimals));\n                baseInOrders = openOrders.baseTokenTotal.div(baseAdj);\n                quoteInOrders = openOrders.quoteTokenTotal\n                    .add(openOrders['referrerRebatesAccrued'])\n                    .div(quoteAdj);\n            }\n            const net = utils_1.nativeI80F48ToUi(this.getNet(cache.rootBankCache[i], i), mangoGroup.tokens[i].decimals);\n            if (net.eq(fixednum_1.ZERO_I80F48) &&\n                baseInOrders.isZero() &&\n                quoteInOrders.isZero()) {\n                continue;\n            }\n            lines.push(`${token.symbol}: ${net.toFixed(4)} / ${baseInOrders\n                .toNumber()\n                .toFixed(4)} / ${quoteInOrders.toNumber().toFixed(4)}`);\n        }\n        lines.push('Perps:');\n        lines.push('Market: Base Pos / Quote Pos / Unsettled Funding / Health');\n        for (let i = 0; i < this.perpAccounts.length; i++) {\n            if (mangoGroup.perpMarkets[i].perpMarket.equals(utils_1.zeroKey)) {\n                continue;\n            }\n            const market = _1.getMarketByPublicKey(groupConfig, mangoGroup.perpMarkets[i].perpMarket);\n            if (market === undefined) {\n                continue;\n            }\n            const perpAccount = this.perpAccounts[i];\n            const perpMarketInfo = mangoGroup.perpMarkets[i];\n            lines.push(`${market.name}: ${this.getBasePositionUiWithGroup(i, mangoGroup).toFixed(4)} / ${(perpAccount.getQuotePosition(cache.perpMarketCache[i]).toNumber() /\n                quoteAdj.toNumber()).toFixed(4)} / ${(perpAccount.getUnsettledFunding(cache.perpMarketCache[i]).toNumber() /\n                quoteAdj.toNumber()).toFixed(4)} / ${perpAccount\n                .getHealth(perpMarketInfo, cache.priceCache[i].price, perpMarketInfo.maintAssetWeight, perpMarketInfo.maintLiabWeight, cache.perpMarketCache[i].longFunding, cache.perpMarketCache[i].shortFunding)\n                .toFixed(4)}`);\n        }\n        return lines.join(os_1.EOL);\n    }\n    /**\n     * Get all the open orders using only info in MangoAccount; Does not contain\n     * information about the size of the order.\n     */\n    getPerpOpenOrders() {\n        const perpOpenOrders = [];\n        for (let i = 0; i < this.orders.length; i++) {\n            if (this.orderMarket[i] === layout_1.FREE_ORDER_SLOT) {\n                continue;\n            }\n            perpOpenOrders.push({\n                marketIndex: this.orderMarket[i],\n                price: _1.getPriceFromKey(this.orders[i]),\n                side: this.orderSide[i],\n            });\n        }\n        return perpOpenOrders;\n    }\n    /**\n     * Return the open orders keys in basket and replace open orders not in basket with zero key\n     */\n    getOpenOrdersKeysInBasket() {\n        return this.spotOpenOrders.map((pk, i) => this.inMarginBasket[i] ? pk : utils_1.zeroKey);\n    }\n    /**\n     *  Return the current position for the market at `marketIndex` in UI units\n     *  e.g. if you buy 1 BTC in the UI, you're buying 1,000,000 native BTC,\n     *  10,000 BTC-PERP contracts and exactly 1 BTC in UI\n     *  Find the marketIndex in the ids.json list of perp markets\n     */\n    getPerpPositionUi(marketIndex, perpMarket) {\n        return this.perpAccounts[marketIndex].getBasePositionUi(perpMarket);\n    }\n    /**\n     *  Return the current position for the market at `marketIndex` in UI units\n     *  e.g. if you buy 1 BTC in the UI, you're buying 1,000,000 native BTC,\n     *  10,000 BTC-PERP contracts and exactly 1 BTC in UI\n     *  Find the marketIndex in the ids.json list of perp markets\n     */\n    getBasePositionUiWithGroup(marketIndex, group) {\n        return (this.perpAccounts[marketIndex].basePosition\n            .mul(group.perpMarkets[marketIndex].baseLotSize)\n            .toNumber() / Math.pow(10, group.tokens[marketIndex].decimals));\n    }\n    /**\n     * Return the equity in standard UI numbers. E.g. if equity is $100, this returns 100\n     */\n    getEquityUi(mangoGroup, mangoCache) {\n        return (this.computeValue(mangoGroup, mangoCache).toNumber() /\n            Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n    }\n    /**\n     * This is the init health divided by quote decimals\n     */\n    getCollateralValueUi(mangoGroup, mangoCache) {\n        return (this.getHealth(mangoGroup, mangoCache, 'Init').toNumber() /\n            Math.pow(10, mangoGroup.tokens[layout_1.QUOTE_INDEX].decimals));\n    }\n}\nexports.default = MangoAccount;\n//# sourceMappingURL=MangoAccount.js.map"]},"metadata":{},"sourceType":"script"}