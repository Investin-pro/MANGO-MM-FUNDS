{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3';\nimport { connection, FUND_ACCOUNT_KEY, idsIndex, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { TOKENS } from '../utils/tokens';\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InitialisedFund = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitialFund = async () => {\n    const transaction = new Transaction(); // ***what should be in the place of wallet provider in platformAccount\n\n    const platformAccount = platformStateAccount; // const platformAccount = await createKeyIfNotExists(walletProvider, \"\", programId, PLATFORM_ACCOUNT_KEY, PLATFORM_DATA.span, transaction)\n\n    console.log(`PLATFORM_DATA.span :::: `, PLATFORM_DATA.span);\n    console.log(`**FUND_DATA.span :::: `, FUND_DATA.span);\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const routerPDA = await PublicKey.findProgramAddress([Buffer.from('router')], programId);\n\n    console.log(`fundPDA :::: `, fundPDA, fundPDA[0].toBase58()); // const fundAccount = await createKeyIfNotExists(\n    //   walletProvider,\n    //   \"\",\n    //   programId,\n    //   FUND_ACCOUNT_KEY,\n    //   FUND_DATA.span,\n    //   transaction,\n    // );\n\n    if (1) {\n      const dataLayout = struct([u8('instruction'), nu64('min_amount'), nu64('min_return'), nu64('performance_fee_percentage'), u8('count'), u8('is_private')]);\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode({\n        instruction: 0,\n        min_amount: min_amount * 10 ** TOKENS.USDC.decimals,\n        min_return: min_return * 100,\n        performance_fee_percentage: platform_fee_percentage * 100,\n        no_of_tokens: 1,\n        is_private: false\n      }, data);\n      console.log(\"params data passed :\", min_amount * 10 ** TOKENS.USDC.decimals, min_return * 100, platform_fee_percentage * 100);\n      const associatedTokenAddress1 = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), fundPDA[0], transaction); // const associatedTokenAddress2 = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), fundPDA[0], transaction);\n\n      console.log(\"associatedTokenAddress1:\", associatedTokenAddress1.toBase58());\n      console.log(\"TOKENS.USDC.mintAddress:\", TOKENS.USDC.mintAddress);\n      const instruction = new TransactionInstruction({\n        keys: [{\n          pubkey: platformAccount,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: fundPDA[0],\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n          isSigner: true,\n          isWritable: true\n        }, {\n          pubkey: SYSTEM_PROGRAM_ID,\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: new PublicKey(TOKENS.USDC.mintAddress),\n          isSigner: false,\n          isWritable: true\n        }, {\n          pubkey: associatedTokenAddress1,\n          isSigner: false,\n          isWritable: true\n        } // { pubkey: new PublicKey(ids.tokens[1].mintKey), isSigner: false, isWritable: true }, \n        // { pubkey: associatedTokenAddress2, isSigner: false, isWritable: true },\n        ],\n        programId,\n        data\n      });\n      transaction.add(instruction);\n      transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"signature tx:: \", sign);\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n    }\n  };\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [min_return, setMin_return] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Initialise Fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 7\n    }, this), \"min_amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: min_amount,\n      onChange: event => setMin_amount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 7\n    }, this), \"min_return ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: min_return,\n      onChange: event => setMin_return(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), \"platform_fee_percentage ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: platform_fee_percentage,\n      onChange: event => setPlatform_fee_percentage(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 134,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleInitialFund,\n      children: \"initialise fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 125,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InitialisedFund, \"UjHuarz/w+CNmE0bhlfVoDqlCnM=\");\n\n_c = InitialisedFund;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitialisedFund\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js"],"names":["React","useEffect","useState","createAssociatedTokenAccount","createAssociatedTokenAccountIfNotExist","createKeyIfNotExists","createTokenAccountIfNotExist","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","connection","FUND_ACCOUNT_KEY","idsIndex","platformStateAccount","PLATFORM_ACCOUNT_KEY","programId","SYSTEM_PROGRAM_ID","GlobalState","nu64","struct","u8","PublicKey","Transaction","TransactionInstruction","TOKEN_PROGRAM_ID","FUND_DATA","PLATFORM_DATA","u64","U64F64","Badge","BN","TOKENS","IDS","InitialisedFund","ids","walletProvider","s","handleInitialFund","transaction","platformAccount","console","log","span","fundPDA","findProgramAddress","publicKey","toBuffer","toBase58","dataLayout","data","Buffer","alloc","encode","instruction","min_amount","USDC","decimals","min_return","performance_fee_percentage","platform_fee_percentage","no_of_tokens","is_private","associatedTokenAddress1","mintAddress","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","setMin_amount","setMin_return","setPlatform_fee_percentage","event","target","value"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, FUND_ACCOUNT_KEY, idsIndex, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { TOKENS } from '../utils/tokens';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\nexport const InitialisedFund = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitialFund = async () => {\n\n    const transaction = new Transaction()\n\n\n    // ***what should be in the place of wallet provider in platformAccount\n    const platformAccount = platformStateAccount;\n    // const platformAccount = await createKeyIfNotExists(walletProvider, \"\", programId, PLATFORM_ACCOUNT_KEY, PLATFORM_DATA.span, transaction)\n\n    console.log(`PLATFORM_DATA.span :::: `, PLATFORM_DATA.span)\n    console.log(`**FUND_DATA.span :::: `, FUND_DATA.span) \n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    // const routerPDA = await PublicKey.findProgramAddress([Buffer.from('router')], programId);\n    console.log(`fundPDA :::: `, fundPDA, fundPDA[0].toBase58()) \n\n\n    // const fundAccount = await createKeyIfNotExists(\n    //   walletProvider,\n    //   \"\",\n    //   programId,\n    //   FUND_ACCOUNT_KEY,\n    //   FUND_DATA.span,\n    //   transaction,\n    // );\n\n    if (1) {\n\n      const dataLayout = struct([\n         u8('instruction'),\n         nu64('min_amount'),\n         nu64('min_return'),\n         nu64('performance_fee_percentage'),\n         u8('count'),\n         u8('is_private')\n      ])\n\n\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          min_amount: min_amount * (10 ** TOKENS.USDC.decimals),\n          min_return: min_return * 100,\n          performance_fee_percentage: platform_fee_percentage * 100,\n          no_of_tokens: 1,\n          is_private : false \n        },\n        data\n      )\n\n      console.log(\"params data passed :\",\n           min_amount * (10 ** TOKENS.USDC.decimals),\n          min_return * 100,\n           platform_fee_percentage * 100,\n      )\n\n      const associatedTokenAddress1 = await createAssociatedTokenAccountIfNotExist(\n        walletProvider,\n        new PublicKey(TOKENS.USDC.mintAddress),\n        fundPDA[0],\n        transaction,\n      );\n      // const associatedTokenAddress2 = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), fundPDA[0], transaction);\n\n      console.log(\"associatedTokenAddress1:\",associatedTokenAddress1.toBase58())\n      console.log(\"TOKENS.USDC.mintAddress:\",TOKENS.USDC.mintAddress)\n\n      const instruction = new TransactionInstruction({\n        keys: [\n          { pubkey: platformAccount, isSigner: false, isWritable: true },\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n          { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: true },\n\n          { pubkey: new PublicKey(TOKENS.USDC.mintAddress), isSigner: false, isWritable: true },\n          { pubkey: associatedTokenAddress1, isSigner: false, isWritable: true },\n\n          // { pubkey: new PublicKey(ids.tokens[1].mintKey), isSigner: false, isWritable: true }, \n          // { pubkey: associatedTokenAddress2, isSigner: false, isWritable: true },\n\n        ],\n        programId,\n        data\n      });\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"signature tx:: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n    }\n\n  }\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [min_return, setMin_return] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Initialise Fund</h4>\n      min_amount ::: {' '}\n      <input type=\"number\" value={min_amount} onChange={(event) => setMin_amount(event.target.value)} />\n      <br />\n      min_return ::: {' '}\n      <input type=\"number\" value={min_return} onChange={(event) => setMin_return(event.target.value)} />\n      <br />\n      platform_fee_percentage ::: {' '}\n      <input type=\"number\" value={platform_fee_percentage} onChange={(event) => setPlatform_fee_percentage(event.target.value)} />\n      <br />\n      <button onClick={handleInitialFund}>initialise fund</button>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}