{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ConnectWalletModal.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { GlobalState } from '../store/globalState';\nimport SolanaWalletAdapter from '@project-serum/sol-wallet-adapter';\nimport { cluster } from '../utils/constants';\nimport { PhantomWalletAdapter } from '../utils/wallets/PhantomWallet';\nimport { PublicKey } from '@solana/web3.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst connectWalletButtonLabel = 'Connect Wallet';\nexport const ConnectWalletModal = props => {\n  _s();\n\n  const [modal, setModal] = useState(false);\n  const [buttonLabel, setButtonLabel] = useState(connectWalletButtonLabel);\n\n  const toggle = () => setModal(!modal);\n\n  const providers = ['Sollet Extension', 'Sollet', 'Phantom'];\n\n  const handleSelectProvider = async provider => {\n    let walletProvider = {};\n\n    switch (provider) {\n      case providers[0]:\n        {\n          walletProvider = new SolanaWalletAdapter(window.sollet, cluster);\n          break;\n        }\n\n      case providers[1]:\n        {\n          walletProvider = new SolanaWalletAdapter(\"https://www.sollet.io\", cluster);\n          break;\n        }\n\n      case providers[2]:\n        {\n          walletProvider = new PhantomWalletAdapter();\n          break;\n        }\n\n      default:\n        break;\n    }\n\n    await walletProvider.connect();\n    console.log(`walletProvider ::: `, walletProvider);\n    walletProvider.on('connect', publicKey => {\n      GlobalState.update(s => {\n        s.walletProvider = walletProvider;\n        s.address = publicKey.toBase58();\n      });\n      setButtonLabel(provider);\n      toggle();\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Button, {\n      color: \"dark\",\n      onClick: toggle,\n      children: buttonLabel == connectWalletButtonLabel ? connectWalletButtonLabel : `Connected to ${buttonLabel}`\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modal,\n      toggle: toggle,\n      children: [/*#__PURE__*/_jsxDEV(ModalHeader, {\n        toggle: toggle,\n        children: \"Choose Provider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ModalBody, {\n        children: providers.map(x => {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"provider\",\n            onClick: () => handleSelectProvider(x),\n            children: x\n          }, x, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 17\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ConnectWalletModal, \"6g69EA7/AIUNz3Jnqzj1t2G5rH0=\");\n\n_c = ConnectWalletModal;\nConnectWalletModal.propTypes = {\n  buttonLabel: PropTypes.string,\n  className: PropTypes.string\n};\n\nvar _c;\n\n$RefreshReg$(_c, \"ConnectWalletModal\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/ConnectWalletModal.js"],"names":["React","useState","Button","Modal","ModalHeader","ModalBody","ModalFooter","PropTypes","GlobalState","SolanaWalletAdapter","cluster","PhantomWalletAdapter","PublicKey","connectWalletButtonLabel","ConnectWalletModal","props","modal","setModal","buttonLabel","setButtonLabel","toggle","providers","handleSelectProvider","provider","walletProvider","window","sollet","connect","console","log","on","publicKey","update","s","address","toBase58","map","x","propTypes","string","className"],"mappings":"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","sourcesContent":["\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { GlobalState } from '../store/globalState'\nimport SolanaWalletAdapter from '@project-serum/sol-wallet-adapter'\nimport { cluster } from '../utils/constants';\nimport { PhantomWalletAdapter } from '../utils/wallets/PhantomWallet';\nimport { PublicKey } from '@solana/web3.js'\n\nconst connectWalletButtonLabel = 'Connect Wallet'\n\nexport const ConnectWalletModal = (props) => {\n\n  const [modal, setModal] = useState(false);\n  const [buttonLabel, setButtonLabel] = useState(connectWalletButtonLabel);\n\n  const toggle = () => setModal(!modal);\n\n  const providers = ['Sollet Extension', 'Sollet', 'Phantom'];\n\n  const handleSelectProvider = async (provider) => {\n    let walletProvider = {};\n    switch (provider) {\n      case providers[0]: {\n        walletProvider = new SolanaWalletAdapter(window.sollet, cluster)\n        break;\n      }\n      case providers[1]: {\n        walletProvider = new SolanaWalletAdapter(\"https://www.sollet.io\", cluster);\n        break;\n      }\n      case providers[2]: {\n        walletProvider = new PhantomWalletAdapter();\n        break;\n      }\n      default:\n        break;\n    }\n    await walletProvider.connect();\n    console.log(`walletProvider ::: `, walletProvider)\n\n    walletProvider.on('connect', publicKey => {\n      \n      GlobalState.update(s => {\n        s.walletProvider = walletProvider;\n        s.address = publicKey.toBase58();\n      })\n      setButtonLabel(provider);\n      toggle()\n    });\n  }\n\n  return (\n    <div>\n      <Button color=\"dark\"\n        onClick={toggle}>\n        {buttonLabel == connectWalletButtonLabel ? connectWalletButtonLabel : `Connected to ${buttonLabel}`}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>Choose Provider</ModalHeader>\n        <ModalBody>\n          {\n            providers.map((x) => {\n              return (\n                <div key={x} className=\"provider\" onClick={() => handleSelectProvider(x)}>{x}</div>\n              )\n            })\n          }\n        </ModalBody>\n        {/* <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter> */}\n      </Modal>\n    </div>\n  );\n}\n\nConnectWalletModal.propTypes = {\n  buttonLabel: PropTypes.string,\n  className: PropTypes.string\n};\n"]},"metadata":{},"sourceType":"module"}