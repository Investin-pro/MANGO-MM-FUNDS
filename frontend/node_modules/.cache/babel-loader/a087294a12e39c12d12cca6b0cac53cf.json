{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitForceSettle.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction, create } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const InitForceSettle = () => {\n  _s();\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('');\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handInitForceSettle = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\", fundPDA.toBase58());\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    const transaction = new Transaction();\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId));\n    console.log(\"mangoAcc.spot::\", mangoAcc.spotOpenOrders);\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('fund'),\n          bytes: fundPDA.toString()\n        },\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('investment_status'),\n          bytes: bs58.encode(new BN(3, 'le').toArray())\n        }\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    const investmentKeys = investments.map((i, index) => {\n      return {\n        pubkey: i.pubkey,\n        isSigner: false,\n        isWritable: true\n      };\n    });\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map((i, index) => {\n      console.log(\"spot order\", index, i.toBase58());\n      return {\n        pubkey: i,\n        isSigner: false,\n        isWritable: false\n      };\n    });\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 9\n    }, data);\n    const keys = [{\n      pubkey: new PublicKey(fundPDA),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: true\n    }, // { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n    // { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n    // { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n    // { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n    // { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n    // { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n    ...spotOrdersKeys, ...investments];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash; // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('handleMakeInvestment: ', error);\n    }\n  };\n\n  const handleGetInvestors = async () => {\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\", fundPDA.toBase58());\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('fund'),\n          bytes: fundPDA.toString()\n        },\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('investment_status'),\n          bytes: bs58.encode(new BN(3, 'le').toArray())\n        }\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    console.log(`found investments :::: `, investments);\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58());\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, investmentsData); // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n\n    setInvestments(investmentStateAccs);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Init Force Settle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 182,\n      columnNumber: 7\n    }, this), \"Fund  ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: fundAddress,\n      onChange: event => setFundAddress(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handInitForceSettle,\n      children: \"Init\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 188,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 181,\n    columnNumber: 5\n  }, this);\n};\n\n_s(InitForceSettle, \"i4whleG9jNwxGcpB4fMNEIKFJGs=\");\n\n_c = InitForceSettle;\n\nvar _c;\n\n$RefreshReg$(_c, \"InitForceSettle\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitForceSettle.js"],"names":["PublicKey","Transaction","TransactionInstruction","create","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","SYSTEM_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","INVESTOR_DATA","awaitTransactionSignatureConfirmation","IDS","MangoClient","NodeBankLayout","sendSignedTransactionAndNotify","bs58","BN","InitForceSettle","investments","setInvestments","fundAddress","setFundAddress","walletProvider","s","ids","handInitForceSettle","key","publicKey","alert","fundPDA","console","log","toBase58","fundStateInfo","getAccountInfo","fundState","decode","data","transaction","span","client","mangoProgramId","mangoGroup","getMangoGroup","nodeBankInfo","tokens","nodeKeys","nodeBank","mangoAcc","getMangoAccount","mango_account","serumProgramId","spotOpenOrders","getProgramAccounts","filters","memcmp","offset","offsetOf","bytes","toString","encode","toArray","dataSize","investmentKeys","map","i","index","pubkey","isSigner","isWritable","spotOrdersKeys","dataLayout","Buffer","alloc","instruction","keys","mangoCache","length","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","successMessage","failMessage","wallet","error","handleGetInvestors","findProgramAddress","toBuffer","investmentStateAccs","f","investmentsData","account","event","target","value"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const InitForceSettle = () => {\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('')\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handInitForceSettle= async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n    \n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 9,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      // { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      // { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      // { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      // { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      // { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      // { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investments,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>Init Force Settle</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      \n      <button onClick={handInitForceSettle}>Init</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}