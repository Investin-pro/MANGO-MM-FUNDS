{"ast":null,"code":"import { getFeeRates, getFeeTier, Market, OpenOrders } from '@project-serum/serum';\nimport { programId, TOKEN_PROGRAM_ID, MANGO_PROGRAM_ID, SERUM_PROGRAM_ID_V3, MANGO_GROUP_ACCOUNT, priceStateAccount, CLOCK_PROGRAM_ID, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8, u32, u16 } from 'buffer-layout';\nimport BN from 'bn.js';\nimport { IDS, MangoClient, nativeToUi, uiToNative, zeroKey, NUM_MARKETS, NUM_TOKENS, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY, TransactionInstruction } from '@solana/web3.js';\nimport { createKeyIfNotExists, findAssociatedTokenAddress } from './web3';\nimport { INVESTOR_DATA } from '../utils/programLayouts';\nimport { TOKENS } from './tokens';\nconst ids = IDS['groups'][idsIndex];\nexport const calculateMarketPrice = (orderBook, size, side) => {\n  let acc = 0;\n  let selectedOrder;\n\n  for (const order of orderBook) {\n    acc += order.size;\n\n    if (acc >= size) {\n      selectedOrder = order;\n      break;\n    }\n  }\n\n  if (side === 'buy') {\n    return selectedOrder.price * 1.05;\n  } else {\n    return selectedOrder.price * 0.95;\n  }\n};\nexport async function mangoOpenPosition(connection, marginAcc, fundStateAccount, fundPDA, wallet, mIndex, side, size, clientId, transaction, investor, seed) {\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex]);\n  console.log(\"serum market pk:: \", serumMarket);\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3);\n  const client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n  let mangoGroup = await client.getMangoGroup(connection, ids.publicKey);\n  console.log(\"mango group::\", mangoGroup);\n  let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n  let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n  console.log(\"USDC nodebank:: \", nodeBank);\n  const MANGO_VAULT_ACCOUNT_USDC = nodeBank.vault.toBase58();\n  console.log(\"margin acc::\", marginAccount); // let mango_prices = await mangoGroup.getPrices(connection)\n\n  console.log(\"collateral ratio:: \", await marginAccount.getCollateralRatio(mangoGroup, await mangoGroup.getPrices(connection)));\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup));\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)));\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup));\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)));\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3);\n  console.log(\"spot market:: \", spotMarket);\n  console.log(\"margin acc:: \", marginAccount);\n  let orderType = 'limit';\n  let orderbook;\n\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection);\n  } else {\n    orderbook = await spotMarket.loadBids(connection);\n  }\n\n  console.log(\"orderbook\", orderbook);\n  let price = calculateMarketPrice(orderbook, size, side);\n  console.log(\"price:: \", price);\n  const limitPrice = spotMarket.priceNumberToLots(price);\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size);\n  console.log(\"price:: \", price);\n  const feeTier = getFeeTier(0, nativeToUi(mangoGroup.nativeSrm || 0, 6));\n  const rates = getFeeRates(feeTier);\n  console.log(\"rates:: \", rates);\n  const maxQuoteQuantity = new BN(maxBaseQuantity.mul(limitPrice).mul(spotMarket['_decoded'].quoteLotSize).toNumber() * (1 + rates.taker));\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString());\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small');\n  }\n\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price');\n  }\n\n  const selfTradeBehavior = 'decrementTake';\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket);\n  const placeAmount = size * 10 ** mangoGroup.mintDecimals[marketIndex];\n  console.log('place amount: ', placeAmount); // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n  // Specify signers in addition to the wallet\n\n  const signers = [];\n  const dexSigner = await PublicKey.createProgramAddress([spotMarket.publicKey.toBuffer(), spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8)], spotMarket.programId);\n  console.log(\"dex signer:: \", dexSigner.toBase58()); // Create a Solana account for the open orders account if it's missing\n\n  const openOrdersKeys = [];\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n  const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip'); // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (i === marketIndex && marginAccount.openOrders[marketIndex].equals(zeroKey)) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n      const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip');\n      const accInstr = await createKeyIfNotExists(wallet, \"\", mangoGroup.dexProgramId, seed + marketIndex.toString(), openOrdersSpace, transaction);\n      openOrdersKeys.push(accInstr);\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i]);\n    }\n  }\n\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(TOKENS['USDC'].mintAddress));\n  const dlout = struct([u8('instruction'), nu64('quantity')]);\n  const data = Buffer.alloc(dlout.span);\n  dlout.encode({\n    instruction: 9,\n    quantity: maxQuoteQuantity / (side == 'buy' ? 2 : 1)\n  }, data);\n  let instruction = new TransactionInstruction({\n    keys: [{\n      isSigner: false,\n      isWritable: true,\n      pubkey: fundStateAccount\n    }, {\n      isSigner: true,\n      isWritable: true,\n      pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n    }, {\n      isSigner: false,\n      isWritable: true,\n      pubkey: fundPDA\n    }, {\n      isSigner: false,\n      isWritable: true,\n      pubkey: MANGO_PROGRAM_ID\n    }, {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.publicKey\n    }, {\n      isSigner: false,\n      isWritable: true,\n      pubkey: marginAccount.publicKey\n    }, {\n      pubkey: fundBaseTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: MANGO_VAULT_ACCOUNT_USDC,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: CLOCK_PROGRAM_ID,\n      isSigner: false,\n      isWritable: true\n    }],\n    programId,\n    data\n  });\n  transaction.add(instruction);\n  let keys1 = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].requestQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].eventQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].bids\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].asks\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_RENT_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.srmVault\n  }, //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n  ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const dataLay = struct([u8('instruction'), u8('side'), nu64('price'), nu64('trade_size')]);\n  const da = Buffer.alloc(dataLay.span);\n  dataLay.encode({\n    instruction: 10,\n    side: side == 'buy' ? 0 : 1,\n    price: limitPrice,\n    trade_size: placeAmount\n  }, da);\n  const placeAndSettleInstruction = new TransactionInstruction({\n    keys: keys1,\n    data: da,\n    programId: programId\n  });\n  transaction.add(placeAndSettleInstruction); // const baseTokenIndex = marketIndex;\n  // const quoteTokenIndex = NUM_TOKENS - 1;\n  // const tokenIndex = side === 'buy' ? baseTokenIndex : quoteTokenIndex;\n  // const quantity = marginAccount.getUiBorrow(mangoGroup, tokenIndex);\n  // const nativeQuantity = uiToNative(quantity, mangoGroup.mintDecimals[tokenIndex]);\n\n  const settle_keys = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: openOrdersKeys[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[NUM_MARKETS]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: dexSigner\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const datLayout = struct([u8('instruction')]);\n  const dat = Buffer.alloc(datLayout.span);\n  datLayout.encode({\n    instruction: 11\n  }, dat);\n  const SettleInstruction = new TransactionInstruction({\n    keys: settle_keys,\n    data: dat,\n    programId: programId\n  });\n  console.log(\"settle intr\");\n  transaction.add(SettleInstruction);\n}\nexport async function mangoClosePosition(connection, marginAcc, fundStateAccount, fundPDA, wallet, mIndex, side, size, clientId, transaction, investor_accs, seed) {\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex]);\n  const client = new MangoClient();\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3);\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT);\n  console.log(\"mango group::\", mangoGroup);\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup));\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)));\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup));\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)));\n  console.log(\"margin acc::\", marginAccount);\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3);\n  console.log(\"spot market:: \", spotMarket);\n  console.log(\"margin acc:: \", marginAccount);\n  let orderType = 'limit';\n  let orderbook;\n\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection);\n  } else {\n    orderbook = await spotMarket.loadBids(connection);\n  }\n\n  console.log(\"orderbook\", orderbook);\n  let price = calculateMarketPrice(orderbook, size, side);\n  console.log(\"price:: \", price);\n  const limitPrice = spotMarket.priceNumberToLots(price);\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size);\n  console.log(\"price:: \", limitPrice);\n  const feeTier = getFeeTier(0, nativeToUi(mangoGroup.nativeSrm || 0, 6));\n  const rates = getFeeRates(feeTier);\n  console.log(\"rates:: \", rates);\n  const maxQuoteQuantity = new BN(maxBaseQuantity.mul(limitPrice).mul(spotMarket['_decoded'].quoteLotSize).toNumber() * (1 + rates.taker));\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity);\n  const depositAmount = depositQuantity * 10 ** ids.tokens[0].decimals;\n  const placeAmount = size * 10 ** ids.tokens[2].decimals;\n  console.log('deposit qty::', depositQuantity.toString());\n  console.log('deposit amount::', depositAmount);\n  console.log('place amoutn: ', placeAmount);\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString());\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small');\n  }\n\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price');\n  }\n\n  const selfTradeBehavior = 'decrementTake';\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket); // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n  // Specify signers in addition to the wallet\n\n  const signers = [];\n  const dexSigner = await PublicKey.createProgramAddress([spotMarket.publicKey.toBuffer(), spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8)], spotMarket.programId); // Create a Solana account for the open orders account if it's missing\n\n  const openOrdersKeys = [];\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n  const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip'); // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (i === marketIndex && marginAccount.openOrders[marketIndex].equals(zeroKey)) {\n      console.log(\"open orders :: \", marginAccount.openOrders[marketIndex]);\n      console.log(\"market index:: \", marketIndex); // open orders missing for this market; create a new one now\n\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n      const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip');\n      const accInstr = await createKeyIfNotExists(wallet, \"\", mangoGroup.dexProgramId, seed + marketIndex.toString(), openOrdersSpace, transaction);\n      openOrdersKeys.push(accInstr);\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i]);\n    }\n  }\n\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(ids.tokens[0].mintAddress));\n  let keys1 = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].requestQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].eventQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].bids\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].asks\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_RENT_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.srmVault\n  }, //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n  ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const dataLay = struct([u8('instruction'), nu64('price')]);\n  const da = Buffer.alloc(dataLay.span);\n  dataLay.encode({\n    instruction: 12,\n    price: limitPrice\n  }, da);\n  const placeAndSettleInstruction = new TransactionInstruction({\n    keys: keys1,\n    data: da,\n    programId: programId\n  });\n  transaction.add(placeAndSettleInstruction);\n  const settle_keys = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: openOrdersKeys[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[NUM_MARKETS]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: dexSigner\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const datLayout = struct([u8('instruction')]);\n  const dat = Buffer.alloc(datLayout.span);\n  datLayout.encode({\n    instruction: 11\n  }, dat);\n  const SettleInstruction = new TransactionInstruction({\n    keys: settle_keys,\n    data: dat,\n    programId: programId\n  });\n  console.log(\"settle intr\");\n  transaction.add(SettleInstruction);\n  const withdraw_keys = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundBaseTokenAccount\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[NUM_MARKETS]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  })), {\n    isSigner: false,\n    isWritable: true,\n    pubkey: investor_accs\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: PublicKey.default\n  }];\n  const dataL = struct([u8('instruction')]);\n  const data2 = Buffer.alloc(dataL.span);\n  dataL.encode({\n    instruction: 13\n  }, data2);\n  const instr = new TransactionInstruction({\n    keys: withdraw_keys,\n    data: data2,\n    programId: programId\n  });\n  transaction.add(instr);\n}\nexport async function mangoWithdrawInvestor(connection, marginAcc, fundStateAccount, invStateAccount, fundPDA, wallet, mIndex, side, size, clientId, transaction) {\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex]);\n  const client = new MangoClient();\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3);\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT);\n  console.log(\"mango group::\", mangoGroup);\n  console.log(\"margin acc::\", marginAccount);\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3);\n  console.log(\"spot market:: \", spotMarket);\n  console.log(\"margin acc:: \", marginAccount);\n  let orderType = 'limit';\n  let orderbook;\n\n  if (side === 'buy') {\n    size = marginAccount.getLiabs(mangoGroup)[mIndex];\n    orderbook = await spotMarket.loadBids(connection);\n  } else {\n    size = marginAccount.getAssets(mangoGroup)[mIndex];\n    orderbook = await spotMarket.loadAsks(connection);\n  }\n\n  console.log(\"orderbook\", orderbook);\n  let price = calculateMarketPrice(orderbook, size, side);\n  console.log(\"price:: \", price);\n  console.log(\"size:: \", size);\n  const limitPrice = spotMarket.priceNumberToLots(price);\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size);\n  console.log(\"price:: \", limitPrice);\n  const feeTier = getFeeTier(0, nativeToUi(mangoGroup.nativeSrm || 0, 6));\n  const rates = getFeeRates(feeTier);\n  console.log(\"rates:: \", rates);\n  const maxQuoteQuantity = new BN(maxBaseQuantity.mul(limitPrice).mul(spotMarket['_decoded'].quoteLotSize).toNumber() * (1 + rates.taker));\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity);\n  const depositAmount = depositQuantity * 10 ** ids.tokens[0].decimals;\n  const placeAmount = size * 10 ** ids.tokens[2].decimals;\n  console.log('deposit qty::', depositQuantity.toString());\n  console.log('deposit amount::', depositAmount);\n  console.log('place amoutn: ', placeAmount);\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString());\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small');\n  }\n\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price');\n  }\n\n  const selfTradeBehavior = 'decrementTake';\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket); // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n  // Specify signers in addition to the wallet\n\n  const signers = [];\n  const dexSigner = await PublicKey.createProgramAddress([spotMarket.publicKey.toBuffer(), spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8)], spotMarket.programId); // Create a Solana account for the open orders account if it's missing\n\n  const openOrdersKeys = [];\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n  const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip');\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (i === marketIndex && marginAccount.openOrders[marketIndex].equals(zeroKey)) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span;\n      const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(openOrdersSpace, 'singleGossip');\n      const accInstr = await createKeyIfNotExists(wallet, \"\", mangoGroup.dexProgramId, \"seed2\", openOrdersSpace, transaction);\n      openOrdersKeys.push(accInstr);\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i]);\n    }\n  }\n\n  const invBaseTokenAccount = await findAssociatedTokenAddress(wallet === null || wallet === void 0 ? void 0 : wallet.publicKey, new PublicKey(TOKENS['USDC'].mintAddress));\n  let keys1 = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: invStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].requestQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].eventQueue\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].bids\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].asks\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_RENT_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.srmVault\n  }, //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n  ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const dataLay = struct([u8('instruction'), nu64('price')]);\n  const da = Buffer.alloc(dataLay.span);\n  dataLay.encode({\n    instruction: 15,\n    price: limitPrice\n  }, da);\n  const placeAndSettleInstruction = new TransactionInstruction({\n    keys: keys1,\n    data: da,\n    programId: programId\n  });\n  transaction.add(placeAndSettleInstruction);\n  const settle_keys = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: invStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: spotMarket.programId\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: openOrdersKeys[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].baseVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: spotMarket['_decoded'].quoteVault\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[marketIndex]\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[NUM_MARKETS]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: dexSigner\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.oracles[marketIndex]\n  }];\n  const datLayout = struct([u8('instruction')]);\n  const dat = Buffer.alloc(datLayout.span);\n  datLayout.encode({\n    instruction: 16\n  }, dat);\n  const SettleInstruction = new TransactionInstruction({\n    keys: settle_keys,\n    data: dat,\n    programId: programId\n  });\n  console.log(\"settle intr\");\n  transaction.add(SettleInstruction);\n  const withdraw_keys = [{\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundStateAccount\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: invStateAccount\n  }, {\n    isSigner: true,\n    isWritable: true,\n    pubkey: wallet === null || wallet === void 0 ? void 0 : wallet.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: fundPDA\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: MANGO_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.publicKey\n  }, //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  {\n    isSigner: false,\n    isWritable: true,\n    pubkey: marginAccount.publicKey\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: invBaseTokenAccount\n  }, {\n    isSigner: false,\n    isWritable: true,\n    pubkey: mangoGroup.vaults[NUM_MARKETS]\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: mangoGroup.signerKey\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: TOKEN_PROGRAM_ID\n  }, {\n    isSigner: false,\n    isWritable: false,\n    pubkey: SYSVAR_CLOCK_PUBKEY\n  }, ...openOrdersKeys.map(pubkey => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey\n  })), ...mangoGroup.oracles.map(pubkey => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey\n  }))];\n  const dataL = struct([u8('instruction')]);\n  const data2 = Buffer.alloc(dataL.span);\n  dataL.encode({\n    instruction: 14\n  }, data2);\n  const instr = new TransactionInstruction({\n    keys: withdraw_keys,\n    data: data2,\n    programId: programId\n  });\n  transaction.add(instr);\n}","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/utils/mango.js"],"names":["getFeeRates","getFeeTier","Market","OpenOrders","programId","TOKEN_PROGRAM_ID","MANGO_PROGRAM_ID","SERUM_PROGRAM_ID_V3","MANGO_GROUP_ACCOUNT","priceStateAccount","CLOCK_PROGRAM_ID","idsIndex","nu64","struct","u8","u32","u16","BN","IDS","MangoClient","nativeToUi","uiToNative","zeroKey","NUM_MARKETS","NUM_TOKENS","NodeBankLayout","PublicKey","SYSVAR_CLOCK_PUBKEY","SYSVAR_RENT_PUBKEY","TransactionInstruction","createKeyIfNotExists","findAssociatedTokenAddress","INVESTOR_DATA","TOKENS","ids","calculateMarketPrice","orderBook","size","side","acc","selectedOrder","order","price","mangoOpenPosition","connection","marginAcc","fundStateAccount","fundPDA","wallet","mIndex","clientId","transaction","investor","seed","serumMarket","devnet","mango_groups","BTC_ETH_SOL_SRM_USDC","spot_market_pks","console","log","marginAccount","client","getMarginAccount","mangoProgramId","mangoGroup","getMangoGroup","publicKey","nodeBankInfo","getAccountInfo","tokens","nodeKeys","nodeBank","decode","data","MANGO_VAULT_ACCOUNT_USDC","vault","toBase58","getCollateralRatio","getPrices","getAssets","getAssetsVal","getLiabs","getLiabsVal","spotMarket","load","orderType","orderbook","loadAsks","loadBids","limitPrice","priceNumberToLots","maxBaseQuantity","baseSizeNumberToLots","feeTier","nativeSrm","rates","maxQuoteQuantity","mul","quoteLotSize","toNumber","taker","toString","lte","Error","selfTradeBehavior","marketIndex","getMarketIndex","placeAmount","mintDecimals","signers","dexSigner","createProgramAddress","toBuffer","vaultSignerNonce","toArrayLike","Buffer","openOrdersKeys","openOrdersSpace","getLayout","dexProgramId","span","openOrdersLamports","getMinimumBalanceForRentExemption","i","openOrders","length","equals","accInstr","push","fundBaseTokenAccount","mintAddress","dlout","alloc","encode","instruction","quantity","keys","isSigner","isWritable","pubkey","add","keys1","requestQueue","eventQueue","bids","asks","vaults","signerKey","baseVault","quoteVault","srmVault","map","oracles","dataLay","da","trade_size","placeAndSettleInstruction","settle_keys","datLayout","dat","SettleInstruction","mangoClosePosition","investor_accs","depositQuantity","quoteSizeLotsToNumber","depositAmount","decimals","withdraw_keys","default","dataL","data2","instr","mangoWithdrawInvestor","invStateAccount","invBaseTokenAccount"],"mappings":"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","sourcesContent":["import {\n    getFeeRates,\n    getFeeTier,\n    Market,\n    OpenOrders,\n  } from '@project-serum/serum'\nimport { programId, TOKEN_PROGRAM_ID , MANGO_PROGRAM_ID, SERUM_PROGRAM_ID_V3, MANGO_GROUP_ACCOUNT, priceStateAccount, CLOCK_PROGRAM_ID, idsIndex} from '../utils/constants';\nimport { nu64, struct, u8, u32, u16 } from 'buffer-layout';\nimport BN from 'bn.js';\n\nimport {\n  IDS,\n  MangoClient,\n  nativeToUi,\n  uiToNative,\n  zeroKey,\n  NUM_MARKETS,\n  NUM_TOKENS,\n  NodeBankLayout,\n} from '@blockworks-foundation/mango-client'\n\n\nimport {\n    PublicKey,\n    SYSVAR_CLOCK_PUBKEY,\n    SYSVAR_RENT_PUBKEY,\n    TransactionInstruction,\n  } from '@solana/web3.js'\n\nimport { createKeyIfNotExists, findAssociatedTokenAddress } from './web3';\nimport { INVESTOR_DATA } from '../utils/programLayouts';\nimport { TOKENS } from './tokens';\n\nconst ids= IDS['groups'][idsIndex];\n\nexport const calculateMarketPrice = (\n  orderBook,\n  size,\n  side\n) => {\n  let acc = 0\n  let selectedOrder\n  for (const order of orderBook) {\n    acc += order.size\n    if (acc >= size) {\n      selectedOrder = order\n      break\n    }\n  }\n\n  if (side === 'buy') {\n    return selectedOrder.price * 1.05\n  } else {\n    return selectedOrder.price * 0.95\n  }\n}\n\nexport async function mangoOpenPosition(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n  investor,\n  seed\n) {\n  \n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n  console.log(\"serum market pk:: \", serumMarket)\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  \n  const client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  let mangoGroup = await client.getMangoGroup(connection, ids.publicKey)\n  console.log(\"mango group::\", mangoGroup)\n  \n  let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n  let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  console.log(\"USDC nodebank:: \", nodeBank)\n\n  const MANGO_VAULT_ACCOUNT_USDC = nodeBank.vault.toBase58();\n\n  console.log(\"margin acc::\", marginAccount)\n  // let mango_prices = await mangoGroup.getPrices(connection)\n\n  console.log(\"collateral ratio:: \", await marginAccount.getCollateralRatio(mangoGroup, await mangoGroup.getPrices(connection)))\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup))\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup))\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  else {\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", price)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  const placeAmount = size * 10**mangoGroup.mintDecimals[marketIndex];\n\n  console.log('place amount: ', placeAmount)\n\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n  console.log(\"dex signer:: \", dexSigner.toBase58())\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n  // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        seed + marketIndex.toString(),\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(TOKENS['USDC'].mintAddress));\n  const dlout = struct([u8('instruction'), nu64('quantity')])\n      const data = Buffer.alloc(dlout.span)\n      dlout.encode(\n        {\n          instruction: 9,\n          quantity: maxQuoteQuantity / (side == 'buy' ? 2 : 1)\n        },\n        data\n      )\n      let instruction = new TransactionInstruction({\n        keys: [\n          { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n          { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n          { isSigner: false, isWritable: true, pubkey: fundPDA },\n          { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n          { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n          { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n          {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n          {pubkey: MANGO_VAULT_ACCOUNT_USDC, isSigner: false, isWritable:true},\n            \n          {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable:true},\n          {pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable:true},\n        ],\n      programId,\n      data\n      });\n    transaction.add(instruction)\n\n  let keys1 = [\n      { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n      { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n      { isSigner: false, isWritable: true, pubkey: fundPDA },\n      { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n      { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n      //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n      { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n      { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n      { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n      { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].requestQueue,\n      },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].eventQueue,\n      },\n      { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n      { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n      },\n      { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].baseVault,\n      },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].quoteVault,\n      },\n      { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n      { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n      { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n      //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n      ...openOrdersKeys.map((pubkey) => ({\n        isSigner: false,\n        isWritable: true,\n        pubkey,\n      })),\n      ...mangoGroup.oracles.map((pubkey) => ({\n        isSigner: false,\n        isWritable: false,\n        pubkey,\n      })),\n    ]\n\n  const dataLay = struct([\n      u8('instruction'),\n      u8('side'),\n      nu64('price'),\n      nu64('trade_size')\n  ])\n  const da = Buffer.alloc(dataLay.span)\n  dataLay.encode(\n      {\n        instruction: 10,\n        side: (side == 'buy') ? 0 : 1,\n        price: limitPrice,\n        trade_size: placeAmount\n      },\n      da\n  )\n\n  const placeAndSettleInstruction = new TransactionInstruction({\n    keys: keys1,\n    data: da,\n    programId: programId,\n  })\n  transaction.add(placeAndSettleInstruction)\n\n  // const baseTokenIndex = marketIndex;\n  // const quoteTokenIndex = NUM_TOKENS - 1;\n  // const tokenIndex = side === 'buy' ? baseTokenIndex : quoteTokenIndex;\n  // const quantity = marginAccount.getUiBorrow(mangoGroup, tokenIndex);\n  // const nativeQuantity = uiToNative(quantity, mangoGroup.mintDecimals[tokenIndex]);\n\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 11,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n transaction.add(SettleInstruction)\n}\n\nexport async function mangoClosePosition(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n  investor_accs,\n  seed\n) {\n\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n\n  const client = new MangoClient()\n\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT)\n  console.log(\"mango group::\", mangoGroup)\n\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup))\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup))\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"margin acc::\", marginAccount)\n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  else {\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", limitPrice)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity)\n  const depositAmount = depositQuantity * 10**ids.tokens[0].decimals\n  const placeAmount = size * 10**ids.tokens[2].decimals\n\n  console.log('deposit qty::', depositQuantity.toString())\n\n  console.log('deposit amount::', depositAmount)\n  console.log('place amoutn: ', placeAmount)\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n  // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n\n      console.log(\"open orders :: \", marginAccount.openOrders[marketIndex])\n      console.log(\"market index:: \", marketIndex)\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        seed + marketIndex.toString(),\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(ids.tokens[0].mintAddress));\n  let keys1 = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].requestQueue,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].eventQueue,\n    },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n    },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n    //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ]\n\nconst dataLay = struct([\n    u8('instruction'),\n    nu64('price'),\n])\nconst da = Buffer.alloc(dataLay.span)\ndataLay.encode(\n    {\n      instruction: 12,\n      price: limitPrice,\n    },\n    da\n)\n\nconst placeAndSettleInstruction = new TransactionInstruction({\n  keys: keys1,\n  data: da,\n  programId: programId,\n})\ntransaction.add(placeAndSettleInstruction)\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 11,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n  transaction.add(SettleInstruction)\n\n   const withdraw_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n//   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n  { isSigner: false, isWritable: true, pubkey: fundBaseTokenAccount },\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.vaults[NUM_MARKETS] },\n  { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n\n  { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n  { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n \n  ...openOrdersKeys.map((pubkey) => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey,\n  })),\n  ...mangoGroup.oracles.map((pubkey) => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey,\n  })),\n  { isSigner: false, isWritable: true, pubkey: investor_accs },\n  { isSigner: false, isWritable: false, pubkey: PublicKey.default },\n\n]\n\n  const dataL = struct([u8('instruction')])\n      const data2 = Buffer.alloc(dataL.span)\n      dataL.encode(\n        {\n          instruction: 13,\n        },\n        data2\n      )\n      const instr = new TransactionInstruction({\n        keys: withdraw_keys,\n        data: data2,\n        programId: programId,\n      })\n      transaction.add(instr)\n}\n\nexport async function mangoWithdrawInvestor(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  invStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n) {\n\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n\n  const client = new MangoClient()\n\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT)\n  console.log(\"mango group::\", mangoGroup)\n\n  console.log(\"margin acc::\", marginAccount)\n  \n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    size = marginAccount.getLiabs(mangoGroup)[mIndex]\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  else {\n    size = marginAccount.getAssets(mangoGroup)[mIndex]\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n  console.log(\"size:: \", size)\n\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", limitPrice)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity)\n  const depositAmount = depositQuantity * 10**ids.tokens[0].decimals\n  const placeAmount = size * 10**ids.tokens[2].decimals\n\n  console.log('deposit qty::', depositQuantity.toString())\n\n  console.log('deposit amount::', depositAmount)\n  console.log('place amoutn: ', placeAmount)\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        \"seed2\",\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const invBaseTokenAccount = await findAssociatedTokenAddress(wallet?.publicKey, new PublicKey(TOKENS['USDC'].mintAddress));\n  let keys1 = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].requestQueue,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].eventQueue,\n    },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n    },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n    //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ]\n\nconst dataLay = struct([\n    u8('instruction'),\n    nu64('price'),\n])\nconst da = Buffer.alloc(dataLay.span)\ndataLay.encode(\n    {\n      instruction: 15,\n      price: limitPrice,\n    },\n    da\n)\n\nconst placeAndSettleInstruction = new TransactionInstruction({\n  keys: keys1,\n  data: da,\n  programId: programId,\n})\ntransaction.add(placeAndSettleInstruction)\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.oracles[marketIndex] },\n\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 16,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n  transaction.add(SettleInstruction)\n\n   const withdraw_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n//   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n  { isSigner: false, isWritable: true, pubkey: invBaseTokenAccount },\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.vaults[NUM_MARKETS] },\n  { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n\n  { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n  { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n \n  ...openOrdersKeys.map((pubkey) => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey,\n  })),\n  ...mangoGroup.oracles.map((pubkey) => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey,\n  })),\n\n]\n\n  const dataL = struct([u8('instruction')])\n      const data2 = Buffer.alloc(dataL.span)\n      dataL.encode(\n        {\n          instruction: 14,\n        },\n        data2\n      )\n      const instr = new TransactionInstruction({\n        keys: withdraw_keys,\n        data: data2,\n        programId: programId,\n      })\n      transaction.add(instr)\n}"]},"metadata":{},"sourceType":"module"}