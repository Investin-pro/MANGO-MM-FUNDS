{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/SendGreating.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GreetingAccount } from '../programData/GreetingAccount';\nimport { GlobalState } from '../store/globalState';\nimport * as borsh from 'borsh';\nimport { GreetingSchema } from '../programData/GreetingSchema';\nimport { Account, Connection, LAMPORTS_PER_SOL, SystemProgram, Transaction, sendAndConfirmTransaction } from '@solana/web3.js';\nimport { connection } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst exampleText = \"0b00000000000000ua\";\n\nconst fillString = someString => {\n  const charDiff = exampleText.length - someString.length;\n\n  if (charDiff !== 0) {\n    return someString + Array(charDiff).join('x');\n  }\n};\n\nexport const SendGreating = props => {\n  _s();\n\n  const [inputText, setInputText] = useState(\"\");\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleSubmit = async () => {\n    if (walletProvider !== null && walletProvider !== void 0 && walletProvider.publicKey) {\n      console.log(`GreetingAccount ::: `, GreetingAccount);\n      const k = struct([u32('counter')]);\n      const data = Buffer.alloc(k.span);\n      console.log(\"here 1\");\n      k.encode({\n        txt: fillString(inputText)\n      }, data);\n      console.log(\"here 2\");\n      console.log(`GreetingSchema ::: `, GreetingSchema); // const x = borsh.serialize(GreetingSchema, messageAccount)\n\n      console.log(\"here 3\");\n      const instruction = new TransactionInstruction({\n        keys: [{\n          pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n          isSigner: false,\n          isWritable: true\n        }],\n        programId: new PublicKey(\"7Y1avRKxTRtBW4rH4dMoauYDVpfoya29on96azbmoFDx\"),\n        data: k\n      });\n      console.log(\"here 4\");\n      const walletAccount = await connection.getAccountInfo(walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey); // console.log(`walletAccount ::: `, walletAccount.tokenAccounts)\n\n      console.log(\"sending data started >>>> \"); // await sendAndConfirmTransaction(\n      //   connection,\n      //   new Transaction().add(instruction),\n      //   [walletAccount],\n      // );\n\n      console.log(\"done sending data >>>> \");\n      const someKey = new PublicKey(\"EDmcyqMkrvWh8vQXXCF6VigTe4bTyxoAGjPYA9UCQr8u\"); // const x = connection._buildArgs([], \"confirmed\", \"jsonParsed\");\n\n      const accountInfo = await connection.getParsedAccountInfo(someKey);\n      console.log(`accountInfo ::: `, accountInfo);\n\n      if (accountInfo === null) {\n        throw 'Error: cannot find the greeted account';\n      }\n\n      console.log(`accountInfo.data:::`, accountInfo.data); // const greeting = k.decode(accountInfo.data)\n      // console.log(`greeting ::: `, greeting)\n      // borsh.deserialize(\n      //   GreetingSchema,\n      //   GreetingAccount,\n      //   accountInfo.data,\n      // );\n      // console.log(\n      //   someKey.toBase58(),\n      //   'has been greeted',\n      //   greeting.counter\n      // );\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      onChange: event => setInputText(event.target.value),\n      value: inputText,\n      maxLength: exampleText.length\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Submit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 110,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\n_s(SendGreating, \"rWG8psC/7ulq5oZDIFlHqp/Gz2c=\");\n\n_c = SendGreating;\n\nvar _c;\n\n$RefreshReg$(_c, \"SendGreating\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/SendGreating.js"],"names":["PublicKey","TransactionInstruction","React","useState","GreetingAccount","GlobalState","borsh","GreetingSchema","Account","Connection","LAMPORTS_PER_SOL","SystemProgram","Transaction","sendAndConfirmTransaction","connection","blob","nu64","struct","u32","u8","exampleText","fillString","someString","charDiff","length","Array","join","SendGreating","props","inputText","setInputText","walletProvider","s","handleSubmit","publicKey","console","log","k","data","Buffer","alloc","span","encode","txt","instruction","keys","pubkey","isSigner","isWritable","programId","walletAccount","getAccountInfo","someKey","accountInfo","getParsedAccountInfo","event","target","value"],"mappings":"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","sourcesContent":["import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GreetingAccount } from '../programData/GreetingAccount';\nimport { GlobalState } from '../store/globalState';\nimport * as borsh from 'borsh';\nimport { GreetingSchema } from '../programData/GreetingSchema';\nimport {\n  Account,\n  Connection,\n  LAMPORTS_PER_SOL,\n  SystemProgram,\n  Transaction,\n  sendAndConfirmTransaction,\n} from '@solana/web3.js';\nimport { connection } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nconst exampleText = \"0b00000000000000ua\";\n\nconst fillString = (someString) => {\n  const charDiff = exampleText.length - someString.length;\n  if (charDiff !== 0) {\n    return someString + Array(charDiff).join('x');\n  }\n}\n\nexport const SendGreating = (props) => {\n\n  const [inputText, setInputText] = useState(\"\");\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleSubmit = async () => {\n\n    if (walletProvider?.publicKey) {\n\n      console.log(`GreetingAccount ::: `, GreetingAccount)\n\n      const k = struct([u32('counter')])\n      const data = Buffer.alloc(k.span)\n\n      console.log(\"here 1\")\n\n      k.encode(\n        {\n          txt: fillString(inputText)\n        },\n        data\n      )\n      console.log(\"here 2\")\n\n      console.log(`GreetingSchema ::: `, GreetingSchema)\n\n      // const x = borsh.serialize(GreetingSchema, messageAccount)\n      console.log(\"here 3\")\n\n      const instruction = new TransactionInstruction({\n        keys: [{ pubkey: walletProvider?.publicKey, isSigner: false, isWritable: true }],\n        programId: new PublicKey(\"7Y1avRKxTRtBW4rH4dMoauYDVpfoya29on96azbmoFDx\"),\n        data: k,\n      });\n      console.log(\"here 4\")\n\n      const walletAccount = await connection.getAccountInfo(\n        walletProvider?.publicKey\n      );\n\n      // console.log(`walletAccount ::: `, walletAccount.tokenAccounts)\n      \n\n      console.log(\"sending data started >>>> \")\n\n      // await sendAndConfirmTransaction(\n      //   connection,\n      //   new Transaction().add(instruction),\n      //   [walletAccount],\n      // );\n\n      console.log(\"done sending data >>>> \")\n      const someKey = new PublicKey(\"EDmcyqMkrvWh8vQXXCF6VigTe4bTyxoAGjPYA9UCQr8u\");\n      // const x = connection._buildArgs([], \"confirmed\", \"jsonParsed\");\n      const accountInfo = await connection.getParsedAccountInfo(someKey);\n      console.log(`accountInfo ::: `, accountInfo)\n      if (accountInfo === null) {\n        throw 'Error: cannot find the greeted account';\n      }\n      console.log(`accountInfo.data:::`, accountInfo.data)\n      // const greeting = k.decode(accountInfo.data)\n      // console.log(`greeting ::: `, greeting)\n      // borsh.deserialize(\n      //   GreetingSchema,\n      //   GreetingAccount,\n      //   accountInfo.data,\n      // );\n      // console.log(\n      //   someKey.toBase58(),\n      //   'has been greeted',\n      //   greeting.counter\n      // );\n\n    }\n  }\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        onChange={(event) => setInputText(event.target.value)}\n        value={inputText}\n        maxLength={exampleText.length}\n      />\n      <button onClick={handleSubmit}>Submit</button>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}