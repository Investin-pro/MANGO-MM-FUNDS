{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/AllFundsInvestors.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useState } from 'react';\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3';\nimport { connection, FUND_ACCOUNT_KEY, idsIndex, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { GlobalState } from '../store/globalState';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, SPL_TOKEN_MINT_DATA, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { Card, Col, Row, Table } from 'reactstrap';\nimport { Blob, seq, struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\nimport { IDS, sleep } from '@blockworks-foundation/mango-client';\nimport { TOKENS } from '../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ids = IDS['groups'][idsIndex];\nexport const AllFundsInvestors = () => {\n  _s();\n\n  const [investments, setInvestments] = useState([]);\n  const [funds, setFunds] = useState([]);\n  const [oldFunds, setOldFunds] = useState([]);\n  const [tokenList, setTokenList] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const tokensStatic = Object.entries(TOKENS).map(i => i[1]);\n  useEffect(() => {\n    (async () => {\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n      if (!platformDataAcc) {\n        alert('platform state not initilaized');\n        return;\n      }\n\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data); // console.log(\"platformData::\",platformData);\n      // setPlatformData(platformData)\n\n      const platformTokens = platformData === null || platformData === void 0 ? void 0 : platformData.token_list;\n      console.log(\"platformTokens::\", platformTokens);\n      console.log(\"ids.tokens::\", ids.tokens); //  Object.keys(TOKENS).find(mt => TOKENS[mt]?.mintKey === t.mint.toBase58())\n\n      let t = [];\n\n      if (platformTokens !== null && platformTokens !== void 0 && platformTokens.length) {\n        t = platformTokens.map(i => {\n          var _tokensStatic$find$sy, _tokensStatic$find, _i$decimals, _i$pool_price;\n\n          return {\n            symbol: (_tokensStatic$find$sy = (_tokensStatic$find = tokensStatic.find(k => k.mintAddress === i.mint.toBase58())) === null || _tokensStatic$find === void 0 ? void 0 : _tokensStatic$find.symbol) !== null && _tokensStatic$find$sy !== void 0 ? _tokensStatic$find$sy : 'NONE',\n            mintAddress: i.mint.toBase58(),\n            decimals: (_i$decimals = i.decimals) === null || _i$decimals === void 0 ? void 0 : _i$decimals.toString(),\n            pool_coin_account: i.pool_coin_account.toBase58(),\n            pool_pc_account: i.pool_pc_account.toBase58(),\n            pool_price: (_i$pool_price = i.pool_price) === null || _i$pool_price === void 0 ? void 0 : _i$pool_price.toString()\n          };\n        });\n      }\n\n      setTokenList(t);\n    })();\n  }, [walletProvider]);\n\n  const handleGetAllMigratedFunds = async () => {\n    const managers = [];\n    const allFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_PDA_DATA.span\n      } //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n      ]\n    });\n    console.log(\"-------1)-AllMigratedFunds nondecoded::\", allFunds);\n\n    for (const data of allFunds) {\n      const decodedData = FUND_PDA_DATA.decode(data.account.data); // const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n      // console.log(\"PDA_balance:\",PDA_balance)\n\n      managers.push({\n        fund_v3_index: decodedData.fund_v3_index,\n        fundState: decodedData,\n        fundPDA: decodedData.fund_pda.toBase58(),\n        fundManager: decodedData.manager_account.toBase58(),\n        fundStateAccount: data.pubkey.toBase58() // PDA_balance : PDA_balance,\n        // fundName: decodedData.fund_pda.toBase58(),\n        // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n\n      });\n    }\n\n    console.log(\"-----2) AllMigratedFunds Decoded PDA funds:\", managers);\n    setFunds(managers);\n  };\n\n  const handleGetAllNonMigratedFunds = async () => {\n    const managers = [];\n    const allFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      } //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n      ]\n    });\n    console.log(\"-----1) All OLD FUND_STATE Funds nodecoded::\", allFunds);\n\n    for (const data of allFunds) {\n      const decodedData = FUND_DATA.decode(data.account.data); //  const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n      //  console.log(\"PDA_balance:\",PDA_balance)\n\n      if (decodedData.is_initialized && decodedData.version !== 3) {\n        managers.push({\n          fund_v3_index: decodedData.fund_v3_index,\n          fundState: decodedData,\n          fundPDA: decodedData.fund_pda.toBase58(),\n          fundManager: decodedData.manager_account.toBase58(),\n          fundStateAccount: data.pubkey.toBase58() // PDA_balance : PDA_balance,\n          // fundName: decodedData.fund_pda.toBase58(),\n          // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n\n        });\n      } else {// console.log(\"fund is_initialized false\",decodedData?.fundPDA?.toBase58(), decodedData)\n      }\n    }\n\n    console.log(\"------2) OLD funds decoded:\", managers);\n    setOldFunds(managers);\n  };\n\n  const handleMigrate = async () => {\n    console.log(\"---calling migrate\");\n\n    if (oldFunds.length == 0) {\n      alert(\"first get funds\");\n      return;\n    }\n\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundStateAndPDAS = [];\n\n    for (let i = 0; i < 2; i++) {\n      fundStateAndPDAS.push({\n        pubkey: new PublicKey(oldFunds[i].fundPDA),\n        isSigner: false,\n        isWritable: true\n      });\n      fundStateAndPDAS.push({\n        pubkey: new PublicKey(oldFunds[i].fundStateAccount),\n        isSigner: false,\n        isWritable: true\n      });\n    }\n\n    const transaction = new Transaction();\n    const dataLayout = struct([u8('instruction'), u8('count')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 23,\n      count: 2\n    }, data);\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: SYSTEM_PROGRAM_ID,\n      isSigner: false,\n      isWritable: true\n    }, // {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n    // {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n    ...fundStateAndPDAS];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const migrate_instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(migrate_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx perf: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n    await sleep(20000);\n    await handleGetAllNonMigratedFunds();\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: /*#__PURE__*/_jsxDEV(Card, {\n      className: \"justify-content-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Migrate State \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 8\n      }, this), \"          \", /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleMigrate,\n        children: \"Migrate\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 41\n      }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGetAllMigratedFunds,\n        children: \" get All Migrated Funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 209,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        className: \"tablesorter\",\n        responsive: true // width=\"100%\"\n        ,\n        style: {\n          overflow: 'hidden !important',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"text-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 219,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fund_v3_index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 220,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundManager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 221,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundPDA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 222,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundStateAccount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 223,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 218,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: funds && funds.map((i, x) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 237,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fund_v3_index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 238,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundManager\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 239,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundPDA\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 240,\n                columnNumber: 18\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundStateAccount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 241,\n                columnNumber: 18\n              }, this)]\n            }, x, true, {\n              fileName: _jsxFileName,\n              lineNumber: 236,\n              columnNumber: 23\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 10\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleGetAllNonMigratedFunds,\n        children: \" get All OLD Funds\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        className: \"tablesorter\",\n        responsive: true // width=\"100%\"\n        ,\n        style: {\n          overflow: 'hidden !important',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          className: \"text-primary\",\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fund_v3_index\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 263,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundManager\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 264,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundPDA\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 265,\n              columnNumber: 31\n            }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n              style: {\n                width: \"15%\"\n              },\n              children: \"fundStateAccount\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 266,\n              columnNumber: 31\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 261,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 260,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: oldFunds && oldFunds.map((i, x) => {\n            return /*#__PURE__*/_jsxDEV(\"tr\", {\n              children: [/*#__PURE__*/_jsxDEV(\"td\", {\n                children: x\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 278,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fund_v3_index\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 279,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundManager\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 280,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundPDA\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 281,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n                children: i === null || i === void 0 ? void 0 : i.fundStateAccount\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 282,\n                columnNumber: 17\n              }, this)]\n            }, x, true, {\n              fileName: _jsxFileName,\n              lineNumber: 277,\n              columnNumber: 22\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 272,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 293,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 8\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 201,\n    columnNumber: 5\n  }, this);\n};\n\n_s(AllFundsInvestors, \"TrXhGJEOXE+AwUtY4PSb1wB0HzY=\");\n\n_c = AllFundsInvestors;\n\nvar _c;\n\n$RefreshReg$(_c, \"AllFundsInvestors\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/AllFundsInvestors.js"],"names":["React","useEffect","useState","createAssociatedTokenAccount","createAssociatedTokenAccountIfNotExist","createKeyIfNotExists","createTokenAccountIfNotExist","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","connection","FUND_ACCOUNT_KEY","idsIndex","platformStateAccount","PLATFORM_ACCOUNT_KEY","programId","SYSTEM_PROGRAM_ID","GlobalState","PublicKey","Transaction","TransactionInstruction","TOKEN_PROGRAM_ID","FUND_DATA","FUND_PDA_DATA","INVESTOR_DATA","PLATFORM_DATA","SPL_TOKEN_MINT_DATA","U64F64","Badge","BN","Card","Col","Row","Table","Blob","seq","struct","u32","u8","u16","ns64","nu64","IDS","sleep","TOKENS","ids","AllFundsInvestors","investments","setInvestments","funds","setFunds","oldFunds","setOldFunds","tokenList","setTokenList","walletProvider","s","tokensStatic","Object","entries","map","i","platformDataAcc","getAccountInfo","alert","platformData","decode","data","platformTokens","token_list","console","log","tokens","t","length","symbol","find","k","mintAddress","mint","toBase58","decimals","toString","pool_coin_account","pool_pc_account","pool_price","handleGetAllMigratedFunds","managers","allFunds","getProgramAccounts","filters","dataSize","span","decodedData","account","push","fund_v3_index","fundState","fundPDA","fund_pda","fundManager","manager_account","fundStateAccount","pubkey","handleGetAllNonMigratedFunds","is_initialized","version","handleMigrate","key","publicKey","fundStateAndPDAS","isSigner","isWritable","transaction","dataLayout","Buffer","alloc","encode","instruction","count","keys","migrate_instruction","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","overflow","textAlign","width","x"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, FUND_ACCOUNT_KEY, idsIndex, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, SPL_TOKEN_MINT_DATA, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { Card, Col, Row ,Table} from 'reactstrap';\nimport { Blob, seq, struct, u32, u8, u16, ns64 ,nu64} from 'buffer-layout';\nimport { IDS, sleep } from '@blockworks-foundation/mango-client';\nimport { TOKENS } from '../utils/tokens';\nconst ids= IDS['groups'][idsIndex];\n\nexport const AllFundsInvestors = () => {\n  \n\n  const [investments, setInvestments] = useState([])\n  const [funds, setFunds] = useState([])\n  const [oldFunds, setOldFunds] = useState([])\n\n  const [tokenList, setTokenList] = useState([]) \n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const tokensStatic = Object.entries(TOKENS).map( i => i[1])\n\n  useEffect(  ()=> {\n    (async () => {\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n      if(!platformDataAcc) {\n        alert('platform state not initilaized');\n        return;\n      }\n        const platformData = PLATFORM_DATA.decode(platformDataAcc.data)\n        // console.log(\"platformData::\",platformData);\n        // setPlatformData(platformData)\n        const platformTokens = platformData?.token_list;\n        console.log(\"platformTokens::\",platformTokens);\n        console.log(\"ids.tokens::\",ids.tokens);\n\n        //  Object.keys(TOKENS).find(mt => TOKENS[mt]?.mintKey === t.mint.toBase58())\n\n        let t = []; \n        if(platformTokens?.length) {\n          t = platformTokens.map( (i) => {\n            return {\n               symbol: ((tokensStatic).find( k => k.mintAddress ===i.mint.toBase58()))?.symbol ?? 'NONE',\n                mintAddress: i.mint.toBase58(),\n                decimals: i.decimals?.toString(),\n               pool_coin_account: i.pool_coin_account.toBase58(),\n                pool_pc_account: i.pool_pc_account.toBase58(),\n                pool_price : i.pool_price?.toString(),\n            }\n          })\n        } \n\n        setTokenList(t)\n    })()\n    \n  },[walletProvider])\n\n  \n\n  const handleGetAllMigratedFunds = async () => {\n    const managers = []\n    const allFunds = await connection.getProgramAccounts(programId, { filters: [\n      { dataSize: FUND_PDA_DATA.span },\n      //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n    ] });\n    console.log(\"-------1)-AllMigratedFunds nondecoded::\",allFunds)\n    for (const data of allFunds) {\n        const decodedData = FUND_PDA_DATA.decode(data.account.data);\n        // const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n        // console.log(\"PDA_balance:\",PDA_balance)\n\n       \n            managers.push({\n                fund_v3_index : decodedData.fund_v3_index,\n                fundState : decodedData,\n                fundPDA: decodedData.fund_pda.toBase58(),\n                fundManager: decodedData.manager_account.toBase58(),\n                fundStateAccount: data.pubkey.toBase58(),\n                // PDA_balance : PDA_balance,\n                // fundName: decodedData.fund_pda.toBase58(),\n                // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n            });\n    }\n    console.log(\"-----2) AllMigratedFunds Decoded PDA funds:\",managers);\n\n    setFunds(managers);\n  }\n\n  const handleGetAllNonMigratedFunds = async () => {\n    const managers = []\n    const allFunds = await connection.getProgramAccounts(programId, { filters: [\n      { dataSize: FUND_DATA.span },\n      //  {\n      //   memcmp: { offset: FUND_PDA_DATA.offsetOf('number_of_active_investments'), bytes: '3' }\n      // }\n    ] });\n    console.log(\"-----1) All OLD FUND_STATE Funds nodecoded::\",allFunds)\n  \n    for (const data of allFunds) {\n         const decodedData = FUND_DATA.decode(data.account.data);\n\n        //  const PDA_balance  = await connection.getBalance(decodedData.fund_pda, \"max\");\n        //  console.log(\"PDA_balance:\",PDA_balance)\n\n        if (decodedData.is_initialized && decodedData.version!==3) {\n            managers.push({\n                fund_v3_index : decodedData.fund_v3_index,\n                fundState : decodedData,\n                fundPDA: decodedData.fund_pda.toBase58(),\n                fundManager: decodedData.manager_account.toBase58(),\n                fundStateAccount: data.pubkey.toBase58(),\n                // PDA_balance : PDA_balance,\n                // fundName: decodedData.fund_pda.toBase58(),\n                // totalAmount: (new TokenAmount(decodedData.total_amount, ids.tokens[0].decimals)).toEther().toNumber(),\n            });\n        } else {\n          // console.log(\"fund is_initialized false\",decodedData?.fundPDA?.toBase58(), decodedData)\n        }\n    }\n    console.log(\"------2) OLD funds decoded:\",managers);  \n    setOldFunds(managers);\n  }\n\n  const handleMigrate = async () => {\n\n  \n\n   console.log(\"---calling migrate\")\n\n    if( oldFunds.length==0){\n      alert(\"first get funds\")\n      return;\n    }\n  \n      const key = walletProvider?.publicKey;\n      if (!key) {\n        alert(\"connect wallet\")\n        return;\n      };\n\n      const fundStateAndPDAS = []\n      for(let i=0;i<2;i++){\n        fundStateAndPDAS.push({pubkey: new PublicKey(oldFunds[i].fundPDA), isSigner: false, isWritable: true })\n        fundStateAndPDAS.push({pubkey: new PublicKey(oldFunds[i].fundStateAccount), isSigner: false, isWritable: true })\n      }\n    \n      \n\n      const transaction = new Transaction()\n      const dataLayout = struct([u8('instruction'),u8('count')])\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode({\n        instruction: 23,\n        count : 2\n      },data)\n\n      \n      \n      const keys = [\n      {pubkey: platformStateAccount, isSigner: false, isWritable: true },\n      {pubkey: key, isSigner: true, isWritable: true },\n      {pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: true},\n\n      // {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n      // {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n      ...fundStateAndPDAS\n    ]\n\n    for(let i=0; i<keys.length;i++) {\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    }\n      \n      const migrate_instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n  \n      transaction.add(migrate_instruction);\n      transaction.feePayer = key;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      const sign = await signAndSendTransaction(walletProvider, transaction);\n      console.log(\"tx perf: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n      await sleep(20000)\n      await handleGetAllNonMigratedFunds()\n}\n\n  return (\n    <div className=\"form-div\">\n       <Card className=\"justify-content-center\" >\n      \n       <h4>Migrate State </h4>          <button onClick={handleMigrate}>Migrate</button>\n          <br />\n    \n      <h4>Funds</h4>\n      \n      <button onClick={handleGetAllMigratedFunds}> get All Migrated Funds</button>\n\n         <Table \n        className=\"tablesorter\"\n        responsive\n        // width=\"100%\"\n        style={{ overflow: 'hidden !important', textAlign: 'center' }}\n        >\n            <thead className=\"text-primary\">\n                            <tr>\n                              <th style={{ width: \"15%\" }}>index</th>\n                              <th style={{ width: \"15%\" }}>fund_v3_index</th>\n                              <th style={{ width: \"15%\" }}>fundManager</th>\n                              <th style={{ width: \"15%\" }}>fundPDA</th>\n                              <th style={{ width: \"15%\" }}>fundStateAccount</th>\n                              {/* <th style={{ width: \"15%\" }}>PDA_balance</th> */}\n                              {/* <th style={{ width: \"15%\" }}>amount</th>\n                              <th style={{ width: \"15%\" }}>amount_in_router</th> */}\n                            </tr>\n                          </thead>\n\n\n        <tbody>\n          {\n            funds && \n\n            funds.map((i,x)=>{\n               return <tr key={x}>\n                 <td >{x}</td>\n                 <td >{i?.fund_v3_index}</td>\n                 <td >{i?.fundManager}</td>\n                 <td >{i?.fundPDA}</td>\n                 <td >{i?.fundStateAccount}</td>\n                 {/* <td>{i?.PDA_balance}</td> */}\n                 {/* <td>{i?.amount?.toString()/10**6}</td>\n                 <td>{i?.amount_in_router?.toString()/10**6}</td> */}\n               \n               </tr>\n            })\n          }\n            </tbody>\n          </Table>\n\n          <button onClick={handleGetAllNonMigratedFunds}> get All OLD Funds</button>\n\n        <Table \n        className=\"tablesorter\"\n        responsive\n        // width=\"100%\"\n        style={{ overflow: 'hidden !important', textAlign: 'center' }}\n        >\n            <thead className=\"text-primary\">\n                            <tr>\n                              <th style={{ width: \"15%\" }}>index</th>\n                              <th style={{ width: \"15%\" }}>fund_v3_index</th>\n                              <th style={{ width: \"15%\" }}>fundManager</th>\n                              <th style={{ width: \"15%\" }}>fundPDA</th>\n                              <th style={{ width: \"15%\" }}>fundStateAccount</th>\n                              {/* <th style={{ width: \"15%\" }}>PDA_balance</th> */}\n                              {/* <th style={{ width: \"15%\" }}>amount</th>\n                              <th style={{ width: \"15%\" }}>amount_in_router</th> */}\n                            </tr>\n            </thead>\n        <tbody>\n          {\n            oldFunds && \n\n            oldFunds.map((i,x)=>{\n              return <tr key={x}>\n                <td >{x}</td>\n                <td >{i?.fund_v3_index}</td>\n                <td >{i?.fundManager}</td>\n                <td >{i?.fundPDA}</td>\n                <td >{i?.fundStateAccount}</td>\n                {/* <td>{i?.PDA_balance}</td> */}\n                {/* <td>{i?.amount?.toString()/10**6}</td>\n                <td>{i?.amount_in_router?.toString()/10**6}</td> */}\n              \n              </tr>\n            })\n          }\n            </tbody>\n          </Table> \n\n          <hr/>\n         \n      </Card>\n    </div>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}