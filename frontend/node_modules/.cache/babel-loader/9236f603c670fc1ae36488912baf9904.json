{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ForceProcessWithdraws.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction, create } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const ForceProcessWithdraws = () => {\n  _s();\n\n  const [fundAddress, setFundAddress] = useState('');\n  const [investments, setInvestments] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleprocesWithdraw = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = new PublicKey(fundAddress);\n    console.log(\"fundPDA::\", fundPDA.toBase58());\n    console.log('selected investment::', selectedInvestmentStateAcc);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    const transaction = new Transaction();\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId));\n    console.log(\"mangoAcc.spot::\", mangoAcc.spotOpenOrders);\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map((i, index) => {\n      console.log(\"spot order\", index, i.toBase58());\n      return {\n        pubkey: i,\n        isSigner: false,\n        isWritable: false\n      };\n    });\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [{\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('fund'),\n          bytes: fundPDA.toString()\n        },\n        memcmp: {\n          offset: INVESTOR_DATA.offsetOf('investment_status'),\n          bytes: bs58.encode(new BN(4, 'le').toArray())\n        }\n      }, {\n        dataSize: INVESTOR_DATA.span\n      }]\n    });\n    const investmentKeys = investments.map((i, index) => {\n      return {\n        pubkey: i.pubkey,\n        isSigner: false,\n        isWritable: true\n      };\n    });\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 5\n    }, data);\n    const keys = [{\n      pubkey: new PublicKey(fundPDA),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(ids.mangoProgramId),\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: new PublicKey(ids.publicKey),\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundState.mango_account,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: mangoGroup.mangoCache,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'),\n      isSigner: false,\n      isWritable: true\n    }, //root_bank_ai\n    {\n      pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'),\n      isSigner: false,\n      isWritable: true\n    }, //node_bank_ai\n    {\n      pubkey: nodeBank.vault,\n      isSigner: false,\n      isWritable: true\n    }, //vault_ai\n    {\n      pubkey: mangoGroup.signerKey,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: fundState.usdc_vault_key,\n      isSigner: false,\n      isWritable: true\n    }, ...spotOrdersKeys, ...investmentKeys];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash; // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('handleMakeInvestment: ', error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Init Force Settle\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), \"Fund  ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: fundAddress,\n      onChange: event => setFundAddress(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 153,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleprocesWithdraw,\n      children: \"Init\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 149,\n    columnNumber: 5\n  }, this);\n};\n\n_s(ForceProcessWithdraws, \"Pk/lb7Rhc4KNyCS4hQJ1ar/Y084=\");\n\n_c = ForceProcessWithdraws;\n\nvar _c;\n\n$RefreshReg$(_c, \"ForceProcessWithdraws\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/ForceProcessWithdraws.js"],"names":["PublicKey","Transaction","TransactionInstruction","create","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","SYSTEM_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","INVESTOR_DATA","awaitTransactionSignatureConfirmation","IDS","MangoClient","NodeBankLayout","sendSignedTransactionAndNotify","bs58","BN","ForceProcessWithdraws","fundAddress","setFundAddress","investments","setInvestments","walletProvider","s","ids","handleprocesWithdraw","key","publicKey","alert","fundPDA","console","log","toBase58","selectedInvestmentStateAcc","fundStateInfo","getAccountInfo","fundState","decode","data","transaction","span","client","mangoProgramId","mangoGroup","getMangoGroup","nodeBankInfo","tokens","nodeKeys","nodeBank","mangoAcc","getMangoAccount","mango_account","serumProgramId","spotOpenOrders","spotOrdersKeys","map","i","index","pubkey","isSigner","isWritable","getProgramAccounts","filters","memcmp","offset","offsetOf","bytes","toString","encode","toArray","dataSize","investmentKeys","dataLayout","Buffer","alloc","instruction","keys","mangoCache","vault","signerKey","usdc_vault_key","length","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","successMessage","failMessage","wallet","error","event","target","value"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ForceProcessWithdraws = () => {\n  \n\n  const [fundAddress, setFundAddress] = useState('')\n\n\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesWithdraw = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(4, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 5,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Init Force Settle</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      \n      <button onClick={handleprocesWithdraw}>Init</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}