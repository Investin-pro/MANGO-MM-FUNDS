{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction, create } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Deposit = () => {\n  _s();\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    console.log('selected FundPDA::', fundPDA);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    const transaction = new Transaction();\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n    let investorStateAccounts = console.log(\"account size::: \", INVESTOR_DATA.span);\n    const dataLayout = struct([u32('instruction'), nu64('amount')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amount: amount * 10 ** ids.tokens[0].decimals\n    }, data);\n    const keys = [{\n      pubkey: new PublicKey(fundPDA),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: investerStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: investorBaseTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, // Investor Base Token Account\n    {\n      pubkey: fundState.usdc_vault_key,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers); // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('handleMakeInvestment: ', error);\n    }\n  };\n\n  const handleprocesDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    console.log('selected FundPDA::', fundPDA);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    const transaction = new Transaction();\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2\n    }, data);\n    const keys = [{\n      pubkey: new PublicKey(fundPDA),\n      isSigner: false,\n      isWritable: true\n    }, //fund State Account\n    {\n      pubkey: investerStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: key,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: investorBaseTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, // Investor Base Token Account\n    {\n      pubkey: fundState.usdc_vault_key,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log('>>', i, keys[i].pubkey.toBase58());\n    }\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers); // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n\n    try {\n      await sendSignedTransactionAndNotify({\n        connection,\n        transaction: transaction,\n        successMessage: \"Investment successful\",\n        failMessage: \"Investment unsuccessful\",\n        wallet: walletProvider\n      });\n    } catch (error) {\n      console.error('handleMakeInvestment: ', error);\n    }\n  };\n\n  const handleFunds = async () => {\n    let managers = [];\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58()\n      });\n    }\n\n    console.log(managers);\n    setFunds(managers);\n  };\n\n  const handleGetInvestors = async () => {\n    let investors = [];\n    let investor = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58()\n      });\n    }\n\n    console.log(managers);\n    setFunds(managers);\n  };\n\n  const handleFundSelect = async event => {\n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 7\n    }, this), \"amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: event => setAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Fund Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleFundSelect,\n      children: funds.map(fund => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, fund.fundPDA, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 260,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load Funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 246,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Deposit, \"GaIH/yOVWzNCEslfo8ZVr4a8CU4=\");\n\n_c = Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js"],"names":["PublicKey","Transaction","TransactionInstruction","create","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","INVESTOR_DATA","awaitTransactionSignatureConfirmation","IDS","MangoClient","sendSignedTransactionAndNotify","Deposit","amount","setAmount","fundPDA","setFundPDA","funds","setFunds","walletProvider","s","ids","handleDeposit","key","publicKey","alert","console","log","fundStateInfo","getAccountInfo","fundState","decode","data","transaction","openOrdersLamports","getMinimumBalanceForRentExemption","span","signers","investerStateAccount","investorBaseTokenAccount","tokens","mintKey","investorStateAccounts","dataLayout","Buffer","alloc","encode","instruction","decimals","keys","pubkey","isSigner","isWritable","usdc_vault_key","i","length","toBase58","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","successMessage","failMessage","wallet","error","handleprocesDeposit","handleFunds","managers","getProgramAccounts","filters","dataSize","fundData","map","f","account","manager","manager_account","PDA","findProgramAddress","toBuffer","createWithSeed","push","fundManager","handleGetInvestors","investors","investor","handleFundSelect","event","target","value","fund"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Deposit = () => {\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    console.log('selected FundPDA::', fundPDA)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    let signers = [];\n    \n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    let investorStateAccounts = \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('amount')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** ids.tokens[0].decimals)\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n  \n  const handleprocesDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    console.log('selected FundPDA::', fundPDA)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    let signers = [];\n    \n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 2,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n  const handleGetInvestors = async () => {\n    let investors = []\n\n    let investor = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n  const handleFundSelect = async(event) => {\n  \n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\n        {\n          funds.map((fund) => {\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load Funds</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}