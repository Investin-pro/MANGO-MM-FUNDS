{"ast":null,"code":"import { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\"; // Deterministic IDL address as a function of the program id.\n\nexport async function idlAddress(programId) {\n  const base = (await PublicKey.findProgramAddress([], programId))[0];\n  return await PublicKey.createWithSeed(base, seed(), programId);\n} // Seed for generating the idlAddress.\n\nexport function seed() {\n  return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = borsh.struct([borsh.publicKey(\"authority\"), borsh.vecU8(\"data\")]);\nexport function decodeIdlAccount(data) {\n  return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n  const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n  const len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n  return buffer.slice(0, len);\n}","map":{"version":3,"sources":["../../src/idl.ts"],"names":[],"mappings":"AAAA,SAAS,SAAT,QAA0B,iBAA1B;AACA,OAAO,KAAK,KAAZ,MAAuB,sBAAvB,C,CAsHA;;AACA,OAAO,eAAe,UAAf,CAA0B,SAA1B,EAA8C;AACnD,QAAM,IAAI,GAAG,CAAC,MAAM,SAAS,CAAC,kBAAV,CAA6B,EAA7B,EAAiC,SAAjC,CAAP,EAAoD,CAApD,CAAb;AACA,SAAO,MAAM,SAAS,CAAC,cAAV,CAAyB,IAAzB,EAA+B,IAAI,EAAnC,EAAuC,SAAvC,CAAb;AACD,C,CAED;;AACA,OAAM,SAAU,IAAV,GAAc;AAClB,SAAO,YAAP;AACD;AAQD,MAAM,kBAAkB,GAAoC,KAAK,CAAC,MAAN,CAAa,CACvE,KAAK,CAAC,SAAN,CAAgB,WAAhB,CADuE,EAEvE,KAAK,CAAC,KAAN,CAAY,MAAZ,CAFuE,CAAb,CAA5D;AAKA,OAAM,SAAU,gBAAV,CAA2B,IAA3B,EAAuC;AAC3C,SAAO,kBAAkB,CAAC,MAAnB,CAA0B,IAA1B,CAAP;AACD;AAED,OAAM,SAAU,gBAAV,CAA2B,GAA3B,EAAiD;AACrD,QAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADqD,CAClB;;AACnC,QAAM,GAAG,GAAG,kBAAkB,CAAC,MAAnB,CAA0B,GAA1B,EAA+B,MAA/B,CAAZ;AACA,SAAO,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAP;AACD","sourceRoot":"","sourcesContent":["import { PublicKey } from \"@solana/web3.js\";\nimport * as borsh from \"@project-serum/borsh\";\n// Deterministic IDL address as a function of the program id.\nexport async function idlAddress(programId) {\n    const base = (await PublicKey.findProgramAddress([], programId))[0];\n    return await PublicKey.createWithSeed(base, seed(), programId);\n}\n// Seed for generating the idlAddress.\nexport function seed() {\n    return \"anchor:idl\";\n}\nconst IDL_ACCOUNT_LAYOUT = borsh.struct([\n    borsh.publicKey(\"authority\"),\n    borsh.vecU8(\"data\"),\n]);\nexport function decodeIdlAccount(data) {\n    return IDL_ACCOUNT_LAYOUT.decode(data);\n}\nexport function encodeIdlAccount(acc) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n    const len = IDL_ACCOUNT_LAYOUT.encode(acc, buffer);\n    return buffer.slice(0, len);\n}\n//# sourceMappingURL=idl.js.map"]},"metadata":{},"sourceType":"module"}