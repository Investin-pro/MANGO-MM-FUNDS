{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ClaimFee.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, priceStateAccount, connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { TEST_TOKENS } from '../utils/tokens';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Claim = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const [fundPDA, setFundPDA] = useState('');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [performanceFee, setPerformanceFee] = useState(0);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleClaim = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    console.log(\"FUND STTE:: \", fundStateAccount.toBase58());\n    setFundStateAccount(fundStateAccount.toBase58());\n    let x = await connection.getAccountInfo(fundStateAccount);\n\n    if (x == null) {\n      alert(\"fund account not found\");\n      return;\n    }\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n\n    if (fundStateAccount == '') {\n      alert(\"get info first!\");\n      return;\n    }\n\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n    const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n    const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), adminAccount);\n    const transaction = new Transaction();\n    updatePoolPrices(transaction, devnet_pools);\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 5\n    }, data);\n    const claim_instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: priceStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: fundBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: managerBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: investinBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(claim_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx perf: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleGetFee = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    console.log(\"FUND STTE:: \", fundStateAcc.toBase58());\n    setFundStateAccount(fundStateAcc);\n    let x = await connection.getAccountInfo(fundStateAcc);\n\n    if (x == null) {\n      alert(\"fund account not found\");\n      return;\n    }\n\n    console.log(x);\n    let fundState = FUND_DATA.decode(x.data);\n\n    if (!fundState.is_initialized) {\n      alert(\"fund not initialized!\");\n      return;\n    }\n\n    console.log(fundState);\n    setPerformanceFee(parseInt(fundState.performance_fee) / 10 ** fundState.tokens[0].decimals);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Claim Performance Fee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClaim,\n      children: \"Claim Performance Fee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetFee,\n      children: \"Get Claimable Fee\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 11\n    }, this), \"Fees to claim:: \", performanceFee]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 134,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Claim, \"Dta13BWQoKRT9R49AJ5yl+GkO/M=\");\n\n_c = Claim;\n\nvar _c;\n\n$RefreshReg$(_c, \"Claim\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/ClaimFee.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","priceStateAccount","connection","programId","TOKEN_PROGRAM_ID","FUND_ACCOUNT_KEY","idsIndex","nu64","struct","u8","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","TEST_TOKENS","FUND_DATA","devnet_pools","updatePoolPrices","IDS","Claim","ids","fundPDA","setFundPDA","fundStateAccount","setFundStateAccount","performanceFee","setPerformanceFee","walletProvider","s","handleClaim","key","publicKey","findProgramAddress","toBuffer","console","log","toBase58","x","getAccountInfo","alert","fundBaseTokenAccount","tokens","mintKey","managerBaseTokenAccount","investinBaseTokenAccount","transaction","dataLayout","data","Buffer","alloc","span","encode","instruction","claim_instruction","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handleGetFee","fundStateAcc","createWithSeed","fundState","decode","is_initialized","parseInt","performance_fee","decimals"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, priceStateAccount, connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { TEST_TOKENS } from '../utils/tokens'\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools'\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\n\nexport const Claim = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n    const [fundPDA, setFundPDA] = useState('');\n    const [fundStateAccount, setFundStateAccount] = useState('');\n    const [performanceFee, setPerformanceFee] = useState(0);\n\n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n    const handleClaim = async () => {\n    \n        const key = walletProvider?.publicKey;\n        \n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        \n\n        console.log(\"FUND STTE:: \", fundStateAccount.toBase58())\n        setFundStateAccount(fundStateAccount.toBase58())\n\n        let x = await connection.getAccountInfo(fundStateAccount)\n        if (x == null)\n        {\n          alert(\"fund account not found\")\n          return\n        }\n\n        if (!key) {\n          alert(\"connect wallet\")\n          return;\n        };\n\n        if (fundStateAccount == ''){\n          alert(\"get info first!\")\n          return\n        }\n\n        const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n        const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n        const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), adminAccount); \n        \n        const transaction = new Transaction()\n\n        updatePoolPrices(transaction, devnet_pools)\n\n        const dataLayout = struct([u8('instruction')])\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n            instruction: 5,\n            },\n            data\n        )\n        \n        const claim_instruction = new TransactionInstruction({\n        keys: [\n        {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n\n        {pubkey: priceStateAccount, isSigner: false, isWritable:true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable:true},\n\n        {pubkey: key, isSigner: true, isWritable: true },\n        {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: managerBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: investinBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n        {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true},\n\n    ],\n    programId,\n    data\n    });\n    \n    transaction.add(claim_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx perf: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n  }\n    \n  const handleGetFee = async () => {\n\n    const key = walletProvider?.publicKey;  \n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(\n      key,\n      FUND_ACCOUNT_KEY,\n      programId,\n    );\n\n    console.log(\"FUND STTE:: \", fundStateAcc.toBase58())\n    setFundStateAccount(fundStateAcc)\n\n    let x = await connection.getAccountInfo(fundStateAcc)\n    if (x == null)\n    {\n      alert(\"fund account not found\")\n      return\n    }\n    console.log(x)\n    let fundState = FUND_DATA.decode(x.data)\n    if (!fundState.is_initialized) {\n      alert(\"fund not initialized!\")\n      return\n    }\n    console.log(fundState)\n    setPerformanceFee(parseInt(fundState.performance_fee) / (10**fundState.tokens[0].decimals))\n  }\n    \n\n    return (\n        <div className=\"form-div\">\n            <h4>Claim Performance Fee</h4>\n         \n          <br />\n          <button onClick={handleClaim}>Claim Performance Fee</button>\n          <button onClick={handleGetFee}>Get Claimable Fee</button>\n          <br />\n          Fees to claim:: {performanceFee}\n\n        </div>\n      )\n}\n\n    "]},"metadata":{},"sourceType":"module"}