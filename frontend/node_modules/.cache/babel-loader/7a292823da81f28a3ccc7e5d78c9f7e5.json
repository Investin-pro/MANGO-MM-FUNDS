{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transfer.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, MANGO_GROUP_ACCOUNT, MANGO_PROGRAM_ID, platformStateAccount, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, orcaPools, pools, raydiumPools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS, MangoClient, MangoGroupLayout, MarginAccountLayout } from '@blockworks-foundation/mango-client';\nimport { TOKENS } from '../utils/tokens';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Transfer = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleTransfer = async () => {\n    console.log(\"**handleTransfer :\");\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n\n    let fundPDAState = await connection.getAccountInfo(fundPDA[0]);\n\n    if (fundPDAState == null) {\n      alert(\"fundPDAState account not found\");\n      return;\n    }\n\n    console.log(\"fundPDAState:\", fundPDAState);\n    let fund_data = FUND_PDA_DATA.decode(fundPDAState.data);\n\n    if (!fund_data.is_initialized) {\n      alert(\"fund not initialized!\");\n      return;\n    }\n\n    console.log(\"fund_data::\", fund_data);\n    let fundInvestorAccs = [];\n\n    for (let i = 0; i < 10; i++) {\n      if (fund_data.investors[i].toBase58() !== '11111111111111111111111111111111') {\n        fundInvestorAccs.push({\n          pubkey: new PublicKey(fund_data.investors[i].toBase58()),\n          isSigner: false,\n          isWritable: true\n        });\n      }\n    }\n\n    console.log(\"** fundInvestorAccs:\", fundInvestorAccs);\n    let fund_mango_account = fund_data.mango_positions.mango_account;\n    let platData = await connection.getAccountInfo(platformStateAccount);\n    let platform_data = PLATFORM_DATA.decode(platData.data);\n    console.log(\"plat info:: \", platform_data);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey)); // let mangoCache = await mangoGroup.loadCache(connection)\n\n    console.log(\"mangoCache:\", mangoGroup.mangoCache.toBase58());\n    let filt_pools = [];\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n\n    for (let i = 1; i < 8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\n\n        if (mint.toBase58() === TOKENS.WSOL.mintAddress) {\n          WSOLWhitelisted = true;\n        } else if (mint.toBase58() === TOKENS.MSOL.mintAddress) {\n          MSOLWhitelisted = true;\n        }\n\n        if (fund_data.tokens[i].mux === 0) {\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58());\n          filt_pools.push(x);\n        }\n      }\n    } //send WSOL everytime \n\n\n    if (!WSOLWhitelisted) {\n      const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n      console.log(\"pushing WSOL pool\");\n      filt_pools.push(wsol_usdc_pool);\n    }\n\n    if (!MSOLWhitelisted) {\n      const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n      console.log(\"pushing MSOL pool\");\n      filt_pools.push(msol_usdc_pool);\n    }\n\n    console.log(\"filt_pools:\", filt_pools); // updatePoolPrices(transaction, devnet_pools)\n    // console.log(\"after updatePoolPrices:: \")\n    // -------------\n\n    const routerPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n    const routerBaseTokenAccount = await findAssociatedTokenAddress(routerPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n    const managerBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), key, transaction);\n    const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), adminAccount, transaction);\n    const dataLayout = struct([u8('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 2\n    }, data);\n    console.log(\"keys : fund_mango_account,platform_data.investin_vault:: \", fund_mango_account.toBase58(), platform_data.investin_vault.toBase58());\n    const transfer_instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: platformStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fund_mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: MANGO_GROUP_ACCOUNT,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: MANGO_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: routerBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: managerBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: platform_data.investin_vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: routerPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, //investor state accounts\n      ...fundInvestorAccs],\n      programId,\n      data\n    });\n    transaction.add(transfer_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Manager Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 183,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleTransfer,\n      children: \"Transfer\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 182,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Transfer, \"vzApLtxwVIxxiGsJ9ryXNodyD24=\");\n\n_c = Transfer;\n\nvar _c;\n\n$RefreshReg$(_c, \"Transfer\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transfer.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","idsIndex","MANGO_GROUP_ACCOUNT","MANGO_PROGRAM_ID","platformStateAccount","priceStateAccount","programId","TOKEN_PROGRAM_ID","nu64","struct","u8","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","FUND_DATA","FUND_PDA_DATA","INVESTOR_DATA","PLATFORM_DATA","PRICE_DATA","devnet_pools","orcaPools","pools","raydiumPools","updatePoolPrices","IDS","MangoClient","MangoGroupLayout","MarginAccountLayout","TOKENS","Transfer","ids","walletProvider","s","handleTransfer","console","log","key","publicKey","alert","transaction","fundPDA","findProgramAddress","toBuffer","fundPDAState","getAccountInfo","fund_data","decode","data","is_initialized","fundInvestorAccs","i","investors","toBase58","push","pubkey","isSigner","isWritable","fund_mango_account","mango_positions","mango_account","platData","platform_data","client","mangoProgramId","mangoGroup","getMangoGroup","mangoCache","filt_pools","WSOLWhitelisted","MSOLWhitelisted","tokens","balance","mint","token_list","index","mux","WSOL","mintAddress","MSOL","x","find","p","coin","wsol_usdc_pool","name","msol_usdc_pool","routerPDA","Buffer","from","fundBaseTokenAccount","USDC","routerBaseTokenAccount","managerBaseTokenAccount","investinBaseTokenAccount","dataLayout","alloc","span","encode","instruction","investin_vault","transfer_instruction","keys","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, MANGO_GROUP_ACCOUNT, MANGO_PROGRAM_ID, platformStateAccount, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, orcaPools, pools, raydiumPools } from '../utils/pools'\n\nimport { updatePoolPrices } from './updatePrices';\nimport {\n  IDS,\n  MangoClient, MangoGroupLayout, MarginAccountLayout\n} from '@blockworks-foundation/mango-client'\nimport { TOKENS } from '../utils/tokens';\n\nexport const Transfer = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleTransfer = async () => {\n\n    console.log(\"**handleTransfer :\")\n\n    const key = walletProvider?.publicKey;\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    const transaction = new Transaction()\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n\n    let fundPDAState = await connection.getAccountInfo(fundPDA[0])\n    if (fundPDAState == null) {\n      alert(\"fundPDAState account not found\")\n      return\n    }\n    console.log(\"fundPDAState:\",fundPDAState)\n    let fund_data = FUND_PDA_DATA.decode(fundPDAState.data)\n    if (!fund_data.is_initialized) {\n      alert(\"fund not initialized!\")\n      return\n    }\n    console.log(\"fund_data::\",fund_data)\n\n    let fundInvestorAccs = []\n    for (let i = 0; i < 10; i++) {\n      if(fund_data.investors[i].toBase58() !== '11111111111111111111111111111111'){\n        fundInvestorAccs.push({\n          pubkey: new PublicKey(fund_data.investors[i].toBase58()) ,\n          isSigner: false,\n          isWritable: true \n        })\n       }\n    }\n\n    console.log(\"** fundInvestorAccs:\",fundInvestorAccs)\n\n\n    let fund_mango_account = fund_data.mango_positions.mango_account\n\n    let platData = await connection.getAccountInfo(platformStateAccount)\n    let platform_data = PLATFORM_DATA.decode(platData.data)\n    console.log(\"plat info:: \", platform_data)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    // let mangoCache = await mangoGroup.loadCache(connection)\n    console.log(\"mangoCache:\",mangoGroup.mangoCache.toBase58())\n\n\n    let filt_pools = []\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n\n    for (let i = 1; i<8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\n        if(mint.toBase58() === TOKENS.WSOL.mintAddress){\n          WSOLWhitelisted=true;\n        } else if(mint.toBase58() === TOKENS.MSOL.mintAddress){\n          MSOLWhitelisted=true;\n        }\n        if(fund_data.tokens[i].mux === 0){\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        }\n      }  \n    }\n    //send WSOL everytime \n    if(!WSOLWhitelisted){\n      const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n      console.log(\"pushing WSOL pool\")\n      filt_pools.push(wsol_usdc_pool)\n    }\n    if(!MSOLWhitelisted){\n      const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n      console.log(\"pushing MSOL pool\")\n      filt_pools.push(msol_usdc_pool)\n    }\n    console.log(\"filt_pools:\",filt_pools)\n    // updatePoolPrices(transaction, devnet_pools)\n    // console.log(\"after updatePoolPrices:: \")\n\n\n    // -------------\n\n    const routerPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n    const routerBaseTokenAccount = await findAssociatedTokenAddress(routerPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n\n    const managerBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), key, transaction);\n    const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), adminAccount, transaction);\n\n\n    const dataLayout = struct([u8('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 2,\n      },\n      data\n    )\n\n    console.log(\"keys : fund_mango_account,platform_data.investin_vault:: \",fund_mango_account.toBase58() ,platform_data.investin_vault.toBase58())\n    const transfer_instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n        { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n        { pubkey: fund_mango_account, isSigner: false, isWritable: true },\n        { pubkey: MANGO_GROUP_ACCOUNT, isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n        { pubkey: MANGO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n        { pubkey: key, isSigner: true, isWritable: true },\n\n        { pubkey: routerBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: fundBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: managerBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: platform_data.investin_vault, isSigner: false, isWritable: true },\n\n        { pubkey: routerPDA[0], isSigner: false, isWritable: true },\n\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n\n        //investor state accounts\n        ...fundInvestorAccs\n\n      ],\n      programId,\n      data\n    });\n\n    transaction.add(transfer_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n  }\n\n  \n  return (\n    <div className=\"form-div\">\n      <h4>Manager Transfer</h4>\n\n      <button onClick={handleTransfer}>Transfer</button>\n      <br />\n\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}