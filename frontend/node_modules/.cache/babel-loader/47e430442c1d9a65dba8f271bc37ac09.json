{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/GetPrices.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState, useEffect } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3';\nimport { connection, programId, priceStateAccount, platformStateAccount, idsIndex, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4 } from '../utils/constants';\nimport { struct, u8 } from 'buffer-layout';\nimport { TOKENS } from '../utils/tokens';\nimport { FUND_DATA, FUND_PDA_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, DEV_TOKENS, pools, raydiumPools } from '../utils/pools';\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst priceProgramId = new PublicKey('CB6oEYpfSsrF3oWG41KQxwfg4onZ38JMj1hk17UNe1Fn');\nexport const GetPrices = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const tokensStatic = Object.entries(TOKENS).map(i => i[1]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const [tokenList, setTokenList] = useState([]); // SOL-4 SRM-5\n\n  const [priceAccount, setPriceAccount] = useState('');\n  const [poolName, setPoolName] = useState('');\n  const [platformData, setPlatformData] = useState(0);\n  const [tokenPrice, setTokenPrice] = useState(0);\n  const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('');\n  useEffect(() => {\n    (async () => {\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n      if (!platformDataAcc) {\n        alert('platform state not initilaized');\n        return;\n      }\n\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data); // console.log(\"platformData::\",platformData);\n\n      setPlatformData(platformData);\n      const platformTokens = platformData === null || platformData === void 0 ? void 0 : platformData.token_list;\n      console.log(\"platformTokens::\", platformTokens);\n      let t = [];\n\n      if (platformTokens !== null && platformTokens !== void 0 && platformTokens.length) {\n        t = platformTokens.map(i => {\n          var _tokensStatic$find$sy, _tokensStatic$find, _i$decimals, _i$pool_price, _i$last_updated, _i$token_id;\n\n          return {\n            symbol: (_tokensStatic$find$sy = (_tokensStatic$find = tokensStatic.find(k => k.mintAddress === i.mint.toBase58())) === null || _tokensStatic$find === void 0 ? void 0 : _tokensStatic$find.symbol) !== null && _tokensStatic$find$sy !== void 0 ? _tokensStatic$find$sy : 'NONE',\n            mintAddress: i.mint.toBase58(),\n            decimals: (_i$decimals = i.decimals) === null || _i$decimals === void 0 ? void 0 : _i$decimals.toString(),\n            pool_coin_account: i.pool_coin_account.toBase58(),\n            pool_pc_account: i.pool_pc_account.toBase58(),\n            pool_price: (_i$pool_price = i.pool_price) === null || _i$pool_price === void 0 ? void 0 : _i$pool_price.toString(),\n            last_updated: (_i$last_updated = i.last_updated) === null || _i$last_updated === void 0 ? void 0 : _i$last_updated.toString(),\n            token_id: (_i$token_id = i.token_id) === null || _i$token_id === void 0 ? void 0 : _i$token_id.toString()\n          };\n        });\n      }\n\n      console.log(\"t:\", t);\n      setTokenList(t);\n    })();\n  }, [walletProvider]);\n\n  const handleGetAllPlatformTokens = async () => {\n    console.log(\"platform tokens::\", tokenList);\n  };\n\n  const handleAddToken = async () => {\n    var _TOKENS$selectedToken;\n\n    console.log(\"**handleAddToken  selectedTokenSymbol::\", selectedTokenSymbol);\n    const tokenMintAddr = (_TOKENS$selectedToken = TOKENS[selectedTokenSymbol.toUpperCase()]) === null || _TOKENS$selectedToken === void 0 ? void 0 : _TOKENS$selectedToken.mintAddress;\n    console.log(\" tokenMintAddr::\", tokenMintAddr);\n    const transaction = new Transaction(); // const toCoinMint = poolInfo.pc.mintAddress;\n    // const fromCoinMint = poolInfo.coin.mintAddress;\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const associatedTokenAddress = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(tokenMintAddr), fundPDA[0], transaction); // const fundStateAcc = await PublicKey.createWithSeed(\n    //   walletProvider?.publicKey,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    let fund_info = await connection.getAccountInfo(fundPDA[0]);\n    const fund_data = FUND_PDA_DATA.decode(fund_info.data);\n    console.log(\"fund_data:\", fund_data);\n    let unUsedTokenIndex = 0;\n\n    for (let i = 0; i < fund_data.tokens.length; i++) {\n      if (fund_data.tokens[i].is_active === 0) {\n        unUsedTokenIndex = i;\n        break;\n      }\n    }\n\n    console.log(\"unUsedTokenIndex:\", unUsedTokenIndex);\n\n    if (unUsedTokenIndex === -1) {\n      alert(\"Cannot add tokens, limit of 8 reached\");\n      return;\n    }\n\n    const dataLayout = struct([u8('instruction'), u8('index')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 20,\n      index: unUsedTokenIndex\n    }, data);\n    const transfer_instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: platformStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(tokenMintAddr),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: associatedTokenAddress,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(transfer_instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"trnsaction:: \", transaction);\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const getPoolAccounts = poolInfo => {\n    if (poolInfo.programId == LIQUIDITY_POOL_PROGRAM_ID_V4) {\n      return [{\n        pubkey: new PublicKey(poolInfo.poolCoinTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(poolInfo.poolPcTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(poolInfo.ammOpenOrders),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(poolInfo.ammId),\n        isSigner: false,\n        isWritable: false\n      }];\n    } else {\n      return [{\n        pubkey: new PublicKey(poolInfo.poolCoinTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(poolInfo.poolPcTokenAccount),\n        isSigner: false,\n        isWritable: true\n      }];\n    }\n  };\n\n  const handleUpdatePrices = async () => {\n    if (!poolName) {\n      alert(\"no token pool found\");\n      return;\n    }\n\n    const poolInfo = raydiumPools.find(p => p.name === poolName);\n    console.log(poolInfo);\n    const dataLayout = struct([u8('instruction'), u8('count')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 18,\n      count: 1\n    }, data);\n    let transaction = new Transaction();\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: platformStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, ...getPoolAccounts(poolInfo).flat()],\n      programId: programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"trnsaction:: \", transaction);\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleGetPrices = async () => {\n    // let acc = connection.getAccountInfo(platformStateAccount)\n    // let data = PLATFORM_DATA.decode((await acc).data)\n    // console.log(\"price data::: \", data)\n    if (selectedTokenSymbol) {\n      const getMint = tokenList === null || tokenList === void 0 ? void 0 : tokenList.find(i => i.symbol === selectedTokenSymbol);\n      const p = platformData === null || platformData === void 0 ? void 0 : platformData.token_list.find(i => i.mint.toBase58() === getMint.mintAddress); // console.log(\"price of selected token :\",p)\n\n      const selectedToken = {\n        mint: p.mint.toBase58(),\n        symbol: getMint.symbol,\n        price: p.pool_price.toString()\n      };\n      console.log(\"Last Updated at:: \", p.last_updated);\n      console.log(\"price of selectedToken:: \", selectedToken);\n      setTokenPrice(p.pool_price.toString());\n    } else {\n      alert(\"select token first\");\n    }\n  };\n\n  const handleTokenSelect = async event => {\n    setPoolName(`${event.target.value}-USDC`);\n    setSelectedTokenSymbol(event.target.value);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Get Token Prices / ADD or REMOVE token from FUND \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 231,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetAllPlatformTokens,\n      children: \"Get ALL platform Tokens in log\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 233,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select a platform Token:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 235,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onChange: handleTokenSelect,\n      children: tokenList && tokenList.map((token, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: token.symbol,\n          children: token.symbol\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 29\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 237,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 244,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleGetPrices,\n      children: \"Get Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 245,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" Selcted Token price: \", tokenPrice]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 247,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddToken,\n      children: \"Add Token to fund\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleUpdatePrices,\n      children: \"Update token Price\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 230,\n    columnNumber: 9\n  }, this);\n};\n\n_s(GetPrices, \"LEtJMvkZa+HvP6RMS3YV4l2xIwI=\");\n\n_c = GetPrices;\n\nvar _c;\n\n$RefreshReg$(_c, \"GetPrices\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/GetPrices.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","useEffect","GlobalState","createAssociatedTokenAccountIfNotExist","signAndSendTransaction","connection","programId","priceStateAccount","platformStateAccount","idsIndex","FUND_ACCOUNT_KEY","LIQUIDITY_POOL_PROGRAM_ID_V4","struct","u8","TOKENS","FUND_DATA","FUND_PDA_DATA","PLATFORM_DATA","PRICE_DATA","devnet_pools","DEV_TOKENS","pools","raydiumPools","IDS","priceProgramId","GetPrices","ids","tokensStatic","Object","entries","map","i","walletProvider","s","tokenList","setTokenList","priceAccount","setPriceAccount","poolName","setPoolName","platformData","setPlatformData","tokenPrice","setTokenPrice","selectedTokenSymbol","setSelectedTokenSymbol","platformDataAcc","getAccountInfo","alert","decode","data","platformTokens","token_list","console","log","t","length","symbol","find","k","mintAddress","mint","toBase58","decimals","toString","pool_coin_account","pool_pc_account","pool_price","last_updated","token_id","handleGetAllPlatformTokens","handleAddToken","tokenMintAddr","toUpperCase","transaction","fundPDA","findProgramAddress","publicKey","toBuffer","associatedTokenAddress","fund_info","fund_data","unUsedTokenIndex","tokens","is_active","dataLayout","Buffer","alloc","span","encode","instruction","index","transfer_instruction","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","getPoolAccounts","poolInfo","poolCoinTokenAccount","poolPcTokenAccount","ammOpenOrders","ammId","handleUpdatePrices","p","name","count","flat","handleGetPrices","getMint","selectedToken","price","handleTokenSelect","event","target","value","token"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState , useEffect} from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3'\nimport { connection, programId, priceStateAccount, platformStateAccount, idsIndex, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4 } from '../utils/constants';\nimport { struct, u8 } from 'buffer-layout';\nimport { TOKENS } from '../utils/tokens'\nimport { FUND_DATA, FUND_PDA_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, DEV_TOKENS, pools, raydiumPools } from '../utils/pools';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\nconst priceProgramId = new PublicKey('CB6oEYpfSsrF3oWG41KQxwfg4onZ38JMj1hk17UNe1Fn')\n\n\nexport const GetPrices = () => {\n  \n  const ids= IDS['groups'][idsIndex];\n  const tokensStatic = Object.entries(TOKENS).map( i => i[1])\n  \n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const [tokenList, setTokenList] = useState([]) // SOL-4 SRM-5\n    const [priceAccount, setPriceAccount] = useState('');\n    const [poolName, setPoolName] = useState('');\n    const [platformData, setPlatformData] = useState(0)\n   const [tokenPrice, setTokenPrice] = useState(0)\n   const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('')\n\n\n    useEffect(  ()=> {\n      (async () => {\n        const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n        if(!platformDataAcc){\n          alert('platform state not initilaized');\n          return;\n        }\n          const platformData = PLATFORM_DATA.decode(platformDataAcc.data)\n          // console.log(\"platformData::\",platformData);\n          setPlatformData(platformData)\n          const platformTokens = platformData?.token_list;\n          console.log(\"platformTokens::\",platformTokens);\n\n          let t = []; \n          if(platformTokens?.length){\n            t = platformTokens.map( (i) => {\n              return {\n                symbol: tokensStatic.find( k => k.mintAddress ===i.mint.toBase58())?.symbol ?? 'NONE',\n                mintAddress: i.mint.toBase58(),\n                decimals: i.decimals?.toString(),\n                pool_coin_account: i.pool_coin_account.toBase58(),\n                pool_pc_account: i.pool_pc_account.toBase58(),\n                pool_price : i.pool_price?.toString(),\n                last_updated: i.last_updated?.toString(),\n                token_id: i.token_id?.toString()\n              }\n            })\n          } \n          console.log(\"t:\",t)\n\n          setTokenList(t)\n      })()\n      \n    },[walletProvider])\n    \n    const handleGetAllPlatformTokens = async () => {\n          console.log(\"platform tokens::\",tokenList);\n\n    }\n\n    const handleAddToken = async () => {\n       \n      console.log(\"**handleAddToken  selectedTokenSymbol::\",selectedTokenSymbol)\n      const tokenMintAddr = TOKENS[selectedTokenSymbol.toUpperCase()]?.mintAddress\n      console.log(\" tokenMintAddr::\",tokenMintAddr);\n\n      const transaction = new Transaction()\n  \n      // const toCoinMint = poolInfo.pc.mintAddress;\n      // const fromCoinMint = poolInfo.coin.mintAddress;\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n      const associatedTokenAddress = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(tokenMintAddr), fundPDA[0], transaction);\n  \n      // const fundStateAcc = await PublicKey.createWithSeed(\n      //   walletProvider?.publicKey,\n      //     FUND_ACCOUNT_KEY,\n      //     programId,\n      // );\n  \n      let fund_info = await connection.getAccountInfo(fundPDA[0]);\n      const fund_data = FUND_PDA_DATA.decode(fund_info.data); \n      console.log(\"fund_data:\",fund_data)\n  \n      let unUsedTokenIndex = 0 ;\n      for (let i = 0; i < fund_data.tokens.length; i++) {\n          if(fund_data.tokens[i].is_active === 0) {\n              unUsedTokenIndex = i;\n              break;\n          }\n          \n      } \n      console.log(\"unUsedTokenIndex:\",unUsedTokenIndex)\n  \n      if(unUsedTokenIndex === -1) {\n          alert(\"Cannot add tokens, limit of 8 reached\");\n          return\n      }\n  \n      const dataLayout = struct([u8('instruction'), u8('index')])\n  \n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n          {\n              instruction: 20,\n              index: unUsedTokenIndex\n          },\n          data\n      )\n      const transfer_instruction = new TransactionInstruction({\n          keys: [\n              { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n              { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n              { pubkey: new PublicKey(tokenMintAddr), isSigner: false, isWritable: true },\n              { pubkey: associatedTokenAddress, isSigner: false, isWritable: true },\n          ],\n          programId,\n          data\n      });\n  \n       transaction.add(transfer_instruction);\n        transaction.feePayer = walletProvider?.publicKey;\n        console.log(\"trnsaction:: \", transaction)\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"signature tx:: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n    }\n\n    const getPoolAccounts = (poolInfo) => {\n        if(poolInfo.programId == LIQUIDITY_POOL_PROGRAM_ID_V4) {\n          return [\n            { pubkey: new PublicKey(poolInfo.poolCoinTokenAccount), isSigner: false, isWritable: true },\n            { pubkey: new PublicKey(poolInfo.poolPcTokenAccount), isSigner: false, isWritable: true },\n            { pubkey: new PublicKey(poolInfo.ammOpenOrders), isSigner: false, isWritable: false},\n            { pubkey: new PublicKey(poolInfo.ammId), isSigner: false, isWritable: false}\n          ]\n        } else {\n          return [\n            { pubkey: new PublicKey(poolInfo.poolCoinTokenAccount), isSigner: false, isWritable: true },\n            { pubkey: new PublicKey(poolInfo.poolPcTokenAccount), isSigner: false, isWritable: true }\n          ]\n        }\n    }\n\n    const handleUpdatePrices = async () => {\n       \n        if (!poolName)\n        {\n            alert(\"no token pool found\")\n            return\n        }\n        const poolInfo = raydiumPools.find(p => p.name === poolName);\n        console.log(poolInfo)\n        const dataLayout = struct([u8('instruction'), u8('count')])\n\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n                instruction: 18,\n                count: 1\n            },\n            data\n        )\n        let transaction = new Transaction()\n        \n        const instruction = new TransactionInstruction({\n            keys: [\n              { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n              { pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true },\n              ...getPoolAccounts(poolInfo).flat()\n            ],\n            programId: programId,\n            data\n        });\n        transaction.add(instruction)\n        transaction.feePayer = walletProvider?.publicKey;\n        console.log(\"trnsaction:: \", transaction)\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"signature tx:: \", sign)\n      console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n        \n    }\n\n    const handleGetPrices = async () => {\n        // let acc = connection.getAccountInfo(platformStateAccount)\n        // let data = PLATFORM_DATA.decode((await acc).data)\n        // console.log(\"price data::: \", data)\n      if(selectedTokenSymbol){\n        const getMint = tokenList?.find( i => i.symbol === selectedTokenSymbol);\n        const p = platformData?.token_list.find( i => i.mint.toBase58() === getMint.mintAddress)\n        // console.log(\"price of selected token :\",p)\n\n        const selectedToken = {\n          mint : p.mint.toBase58(),\n          symbol : getMint.symbol,\n          price : p.pool_price.toString()\n        }\n        console.log(\"Last Updated at:: \", p.last_updated);\n        console.log(\"price of selectedToken:: \",selectedToken)\n\n        setTokenPrice( p.pool_price.toString() );\n      } else {\n        alert(\"select token first\")\n      }\n      \n    }\n    const handleTokenSelect = async(event) => {\n        setPoolName(`${event.target.value}-USDC`)\n       setSelectedTokenSymbol(event.target.value)\n      }\n\n    return (\n        <div className=\"form-div\">\n          <h4>Get Token Prices / ADD or REMOVE token from FUND </h4>\n\n          <button onClick={handleGetAllPlatformTokens}>Get ALL platform Tokens in log</button>\n\n          <label htmlFor=\"funds\">Select a platform Token:</label>\n\n            <select name=\"funds\" width = \"100px\"  onChange={handleTokenSelect}>\n            { tokenList && \n                tokenList.map((token,index) => {\n                    return (<option key={index} value={token.symbol}>{token.symbol}</option>)\n                })\n            }\n            </select>\n          <br />\n          <button onClick={handleGetPrices}>Get Price</button>\n\n          <p> Selcted Token price: {tokenPrice}</p>\n            \n          <button onClick={handleAddToken}>Add Token to fund</button>\n\n          <button onClick={handleUpdatePrices}>Update token Price</button>\n\n        </div>\n      )\n}"]},"metadata":{},"sourceType":"module"}