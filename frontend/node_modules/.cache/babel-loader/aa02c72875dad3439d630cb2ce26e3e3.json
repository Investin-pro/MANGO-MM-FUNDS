{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Swap.js\",\n    _s = $RefreshSig$();\n\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport React, { useState, useEffect } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, idsIndex } from '../utils/constants';\nimport { devnet_pools, orcaPools, raydiumPools } from '../utils/pools';\nimport { AMM_INFO_LAYOUT_V4, FUND_DATA, FUND_PDA_DATA, PLATFORM_DATA } from '../utils/programLayouts';\nimport { TokenAmount } from '../utils/safe-math';\nimport { NATIVE_SOL, TEST_TOKENS, TOKENS } from '../utils/tokens';\nimport { createAssociatedTokenAccountIfNotExist, createTokenAccountIfNotExist, findAssociatedTokenAddress, sendNewTransaction, signAndSendTransaction } from '../utils/web3';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ids = IDS['groups'][idsIndex];\nexport const Swap = () => {\n  _s();\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const tokensStatic = Object.entries(TOKENS).map(i => i[1]);\n  const [toggleGetTokens, setToggleGetTokens] = useState(false);\n  const [firstTokenAmount, setFirstTokenAmount] = useState(0);\n  const [selectedFirstToken, setSelectedFirstToken] = useState('USDC');\n  const [selectedSecondToken, setSelectedSecondToken] = useState('BTC');\n  const [isBuy, setIsBuy] = useState(1); // const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('')\n\n  const [selectedSwapProtocol, setSelectedSwapProtocol] = useState(0);\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [fundPDA, setFundPDA] = useState('');\n  const [platformData, setPlatformData] = useState(0);\n  const [fundData, setFundData] = useState(0);\n  const [tokenList, setTokenList] = useState([]);\n  useEffect(() => {\n    (async () => {\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n\n      if (!platformDataAcc) {\n        alert('platform state not initilaized');\n        return;\n      }\n\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data); // console.log(\"platformData::\",platformData);\n\n      setPlatformData(platformData);\n      const platformTokens = platformData === null || platformData === void 0 ? void 0 : platformData.token_list; // console.log(\"platformTokens::\",platformTokens);\n\n      let platformTokensList = [];\n\n      if (platformTokens !== null && platformTokens !== void 0 && platformTokens.length) {\n        platformTokensList = platformTokens.map(i => {\n          var _tokensStatic$find, _i$decimals;\n\n          return {\n            symbol: tokensStatic === null || tokensStatic === void 0 ? void 0 : (_tokensStatic$find = tokensStatic.find(k => k.mintAddress === i.mint.toBase58())) === null || _tokensStatic$find === void 0 ? void 0 : _tokensStatic$find.symbol,\n            mintAddress: i.mint.toBase58(),\n            decimals: (_i$decimals = i.decimals) === null || _i$decimals === void 0 ? void 0 : _i$decimals.toString()\n          };\n        });\n      }\n\n      console.log(\"platformTokensList::\", platformTokensList);\n      const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n      if (!key) {\n        // alert(\"connect wallet\")\n        return;\n      }\n\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId); // const fundStateAcc = await PublicKey.createWithSeed(\n      //   key,\n      //   FUND_ACCOUNT_KEY,\n      //   programId,\n      // );\n      // console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58())\n      // setFundStateAccount(fundStateAcc.toBase58())\n\n      const fundDataAcc = await connection.getAccountInfo(fundPDA[0]);\n      console.log(\"fundDataAcc::\", fundDataAcc);\n\n      if (fundDataAcc == null) {\n        alert(\"fundDataAcc info not found\");\n        return;\n      }\n\n      const fundData = FUND_PDA_DATA.decode(fundDataAcc.data);\n      console.log(\"fundData::\", fundData);\n      setFundData(fundData);\n      const fundTokens = fundData === null || fundData === void 0 ? void 0 : fundData.tokens;\n      console.log(\"fundTokens ::\", fundTokens);\n      let fundTokensList = [];\n\n      if (fundTokens !== null && fundTokens !== void 0 && fundTokens.length) {\n        fundTokensList = fundTokens.map(i => {\n          return tokensStatic.find(x => x.mintAddress === platformTokensList[i.index[i.mux]].mintAddress);\n        });\n      }\n\n      console.log(\"fundTokensList ::\", fundTokensList);\n      setTokenList(fundTokensList);\n    })();\n  }, [walletProvider, toggleGetTokens]);\n\n  const handleFirstTokenSelect = event => {\n    setSelectedFirstToken(`${event.target.value}`);\n    console.log(`${event.target.value}-1 :::: `, `${event.target.value}-1`);\n  };\n\n  const handleSecondTokenSelect = event => {\n    setSelectedSecondToken(`${event.target.value}`);\n    console.log(`${event.target.value}-2 :::: `, `${event.target.value}-2`);\n  };\n\n  const swapInstructionRaydium = async (walletProviderP, poolProgramId, // tokenProgramId,\n  // amm\n  ammId, ammAuthority, ammOpenOrders, ammTargetOrders, poolCoinTokenAccount, poolPcTokenAccount, // serum\n  serumProgramId, serumMarket, serumBids, serumAsks, serumEventQueue, serumCoinVaultAccount, serumPcVaultAccount, serumVaultSigner, // user\n  userSourceTokenAccount, userDestTokenAccount, userOwner, manager, amountIn, minAmountOut) => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"key::\", key.toBase58());\n\n    if (!key) {\n      console.log(\"connect wallet\");\n      return;\n    }\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    console.log(\"fundPDA-tobase:\", fundPDA[0].toBase58()); // const fundStateAcc = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n    // const dataLayout = struct([u8('instruction1'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')])\n\n    const dataLayout = struct([u8('instruction1'), u8('swap_index'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')]);\n    const keys = [{\n      pubkey: platformStateAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: fundPDA[0],\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey,\n      isSigner: true,\n      isWritable: true\n    }, {\n      pubkey: new PublicKey(poolProgramId),\n      isSigner: false,\n      isWritable: false\n    }, // spl token\n    {\n      pubkey: TOKEN_PROGRAM_ID,\n      isSigner: false,\n      isWritable: false\n    }, // amm\n    {\n      pubkey: ammId,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammAuthority,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammOpenOrders,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: ammTargetOrders,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolCoinTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: poolPcTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, // serum\n    {\n      pubkey: serumProgramId,\n      isSigner: false,\n      isWritable: false\n    }, {\n      pubkey: serumMarket,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumBids,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumAsks,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumEventQueue,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumCoinVaultAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumPcVaultAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: serumVaultSigner,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userSourceTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userDestTokenAccount,\n      isSigner: false,\n      isWritable: true\n    }, {\n      pubkey: userOwner,\n      isSigner: false,\n      isWritable: true\n    }];\n\n    for (let i = 0; i < keys.length; i++) {\n      console.log(\"key:\", i, keys[i].pubkey.toBase58());\n    }\n\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction1: 5,\n      swap_index: 0,\n      instruction: 9,\n      amountIn,\n      minAmountOut\n    }, data);\n    return new TransactionInstruction({\n      keys,\n      programId: programId,\n      data\n    });\n  };\n\n  const swapInstructionOrca = async () => {\n    console.log(\"latttter\");\n    alert(\"Noorca swap \");\n  };\n\n  const swapTokens = async (connection, walletProvider, fundPDA, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amount, slippage, tradeSide, selectedSwapProtocol) => {\n    console.log(\"swapTokens with params: \", fundPDA, poolInfo, fromCoinMint, toCoinMint, fromTokenAccount, toTokenAccount, amount, slippage, tradeSide, selectedSwapProtocol);\n    const transaction = new Transaction();\n    const signers = [];\n    const owner = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey; // const { amountIn, amountOut } = getSwapOutAmount(poolInfo, fromCoinMint, toCoinMint, amount, slippage)\n\n    let amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false);\n    let amountOut = new TokenAmount(1, poolInfo.coin.decimals);\n\n    if (tradeSide === \"sell\") {\n      amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false);\n      amountOut = new TokenAmount(1, poolInfo.coin.decimals);\n    } else {\n      amountIn = new TokenAmount(amount, poolInfo.pc.decimals, false);\n      amountOut = new TokenAmount(1, poolInfo.pc.decimals);\n    }\n\n    let fromMint = fromCoinMint;\n    let toMint = toCoinMint;\n\n    if (fromMint === NATIVE_SOL.mintAddress) {\n      fromMint = ids.tokens[4].mintKey;\n    }\n\n    if (toMint === NATIVE_SOL.mintAddress) {\n      toMint = ids.tokens[4].mintKey;\n    }\n\n    const newFromTokenAccount = fromTokenAccount;\n    const newToTokenAccount = toTokenAccount;\n    let instruction;\n    console.log(\"poolInfo.programId::\", poolInfo.programId);\n\n    if (selectedSwapProtocol == 0) {\n      instruction = await swapInstructionRaydium(walletProvider, poolInfo.programId, new PublicKey(poolInfo.ammId), new PublicKey(poolInfo.ammAuthority), new PublicKey(poolInfo.ammOpenOrders), new PublicKey(poolInfo.ammTargetOrders), new PublicKey(poolInfo.poolCoinTokenAccount), new PublicKey(poolInfo.poolPcTokenAccount), new PublicKey(poolInfo.serumProgramId), new PublicKey(poolInfo.serumMarket), new PublicKey(poolInfo.serumBids), new PublicKey(poolInfo.serumAsks), new PublicKey(poolInfo.serumEventQueue), new PublicKey(poolInfo.serumCoinVaultAccount), new PublicKey(poolInfo.serumPcVaultAccount), new PublicKey(poolInfo.serumVaultSigner), newFromTokenAccount, newToTokenAccount, fundPDA, owner, Math.floor(amountIn.toWei().toNumber()), Math.floor(amountOut.toWei().toNumber()));\n    } else {\n      instruction = await swapInstructionOrca(walletProvider, poolInfo.programId, new PublicKey(poolInfo.ammId), new PublicKey(poolInfo.ammAuthority), new PublicKey(poolInfo.poolCoinTokenAccount), new PublicKey(poolInfo.poolPcTokenAccount), newFromTokenAccount, newToTokenAccount, fundPDA, owner, new PublicKey(poolInfo.feeAccount), new PublicKey(poolInfo.lpMintAddress), Math.floor(amountIn.toWei().toNumber()), Math.floor(amountOut.toWei().toNumber()), tradeSide);\n    }\n\n    transaction.add(instruction);\n    transaction.feePayer = owner;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`); // return sign;\n    //return await sendNewTransaction(connection, wallet, transaction, signers)\n  };\n\n  const handleSwap = async () => {\n    try {\n      console.log(\"isBuy,firstTokenAmount,selectedFirstToken,selectedSecondToken::\", isBuy, firstTokenAmount, selectedFirstToken, selectedSecondToken); // if( (selectedFirstToken === \"USDC\" && selectedSecondToken === \"WSOL\") \n      //      || (selectedFirstToken === \"WSOL\" && selectedSecondToken === \"USDC\")){\n      //     isBuy = selectedFirstToken === \"USDC\"  ;\n      // } else {\n      //     isBuy = selectedFirstToken === \"USDC\" || selectedFirstToken === \"WSOL\" ;\n      // }\n      // const isBuy = ['USDC', 'WSOL'].includes(firstToken.symbol);\n      //this is will break in case of selling WSOL-> USDC\n      // const poolName =  isBuy ? `${selectedSecondToken}-${selectedFirstToken}` : `${selectedFirstToken}-${selectedSecondToken}`;\n\n      const poolName1 = `${selectedSecondToken}-${selectedFirstToken}`;\n      const poolName2 = `${selectedFirstToken}-${selectedSecondToken}`;\n      console.log(\"poolName1, poolName2 , isBuy::: \", poolName1, poolName2, isBuy);\n      let poolInfo;\n\n      if (selectedSwapProtocol == 0) {\n        poolInfo = raydiumPools.find(p => p.name === poolName1 || p.name === poolName2);\n      } else {\n        poolInfo = orcaPools.find(p => p.name === poolName1 || p.name === poolName2); // poolInfo  = devnet_pools.find(p => (p.name===poolName1 ||  p.name===poolName2) );\n      }\n\n      if (!poolInfo) {\n        alert(\"poolinfo undefined\");\n        return;\n      }\n\n      console.log(\"poolInfo:\", poolInfo);\n      const fromCoin = isBuy ? poolInfo.pc : poolInfo.coin;\n      const toCoin = isBuy ? poolInfo.coin : poolInfo.pc;\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n      console.log(\"fundPDA-tobase:\", fundPDA[0].toBase58());\n      const fromTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(fromCoin.mintAddress));\n      const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoin.mintAddress));\n      console.log(\"fromCoin,toCoin :\", fromCoin, toCoin);\n      console.log(\"fromTokenAccount,toTokenAccount :\", fromTokenAccount.toBase58(), toTokenAccount.toBase58());\n\n      try {\n        const txId = await swapTokens(connection, walletProvider, fundPDA[0], poolInfo, fromCoin === null || fromCoin === void 0 ? void 0 : fromCoin.mintAddress, toCoin === null || toCoin === void 0 ? void 0 : toCoin.mintKey, fromTokenAccount, toTokenAccount, firstTokenAmount, 1, isBuy ? \"buy\" : \"sell\", selectedSwapProtocol);\n      } catch (error) {\n        console.error(\" swap error:\", error);\n      }\n    } catch (error) {\n      console.error(\"error while swapping : \", error);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \" Swap\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 407,\n      columnNumber: 7\n    }, this), \"fundPDA : \", fundPDA, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 409,\n      columnNumber: 7\n    }, this), \"Swaping  ::: \", selectedFirstToken, \" \", \"=>>\", \" \", selectedSecondToken, /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setToggleGetTokens(!toggleGetTokens),\n      children: \"LOAD FUND TOKENS\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 414,\n      columnNumber: 7\n    }, this), \"FROM ::\", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"tokens\",\n      onChange: handleFirstTokenSelect,\n      children: tokenList.map((i, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: i.symbol,\n          children: i.symbol\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 416,\n      columnNumber: 7\n    }, this), \"TO ::\", /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"tokens\",\n      onChange: handleSecondTokenSelect,\n      children: tokenList.map((i, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: i.symbol,\n          children: i.symbol\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 431,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"protocol\",\n      onChange: event => setSelectedSwapProtocol(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"RAYDIUM\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 433,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"ORCA\"\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 434,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 432,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"buy\",\n      onChange: event => setIsBuy(parseInt(event.target.value)),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"BUY\"\n      }, 1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 439,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"SELL\"\n      }, 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 440,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 438,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 442,\n      columnNumber: 7\n    }, this), \"amount : \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: firstTokenAmount,\n      onChange: e => setFirstTokenAmount(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 21\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 444,\n      columnNumber: 123\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      \"margin-right\": \"10px\",\n      onClick: handleSwap,\n      children: \"TRADE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 446,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 406,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Swap, \"XRC9/P7a6ldmlvflommtVf5E0+E=\");\n\n_c = Swap;\n\nvar _c;\n\n$RefreshReg$(_c, \"Swap\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Swap.js"],"names":["IDS","PublicKey","Transaction","TransactionInstruction","nu64","struct","u8","React","useState","useEffect","GlobalState","connection","programId","TOKEN_PROGRAM_ID","FUND_ACCOUNT_KEY","LIQUIDITY_POOL_PROGRAM_ID_V4","platformStateAccount","idsIndex","devnet_pools","orcaPools","raydiumPools","AMM_INFO_LAYOUT_V4","FUND_DATA","FUND_PDA_DATA","PLATFORM_DATA","TokenAmount","NATIVE_SOL","TEST_TOKENS","TOKENS","createAssociatedTokenAccountIfNotExist","createTokenAccountIfNotExist","findAssociatedTokenAddress","sendNewTransaction","signAndSendTransaction","ids","Swap","walletProvider","s","tokensStatic","Object","entries","map","i","toggleGetTokens","setToggleGetTokens","firstTokenAmount","setFirstTokenAmount","selectedFirstToken","setSelectedFirstToken","selectedSecondToken","setSelectedSecondToken","isBuy","setIsBuy","selectedSwapProtocol","setSelectedSwapProtocol","fundStateAccount","setFundStateAccount","fundPDA","setFundPDA","platformData","setPlatformData","fundData","setFundData","tokenList","setTokenList","platformDataAcc","getAccountInfo","alert","decode","data","platformTokens","token_list","platformTokensList","length","symbol","find","k","mintAddress","mint","toBase58","decimals","toString","console","log","key","publicKey","findProgramAddress","toBuffer","fundDataAcc","fundTokens","tokens","fundTokensList","x","index","mux","handleFirstTokenSelect","event","target","value","handleSecondTokenSelect","swapInstructionRaydium","walletProviderP","poolProgramId","ammId","ammAuthority","ammOpenOrders","ammTargetOrders","poolCoinTokenAccount","poolPcTokenAccount","serumProgramId","serumMarket","serumBids","serumAsks","serumEventQueue","serumCoinVaultAccount","serumPcVaultAccount","serumVaultSigner","userSourceTokenAccount","userDestTokenAccount","userOwner","manager","amountIn","minAmountOut","dataLayout","keys","pubkey","isSigner","isWritable","Buffer","alloc","span","encode","instruction1","swap_index","instruction","swapInstructionOrca","swapTokens","poolInfo","fromCoinMint","toCoinMint","fromTokenAccount","toTokenAccount","amount","slippage","tradeSide","transaction","signers","owner","coin","amountOut","pc","fromMint","toMint","mintKey","newFromTokenAccount","newToTokenAccount","Math","floor","toWei","toNumber","feeAccount","lpMintAddress","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handleSwap","poolName1","poolName2","p","name","fromCoin","toCoin","txId","error","parseInt","e"],"mappings":"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","sourcesContent":["import { IDS } from '@blockworks-foundation/mango-client'\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js'\nimport { nu64, struct, u8 } from 'buffer-layout'\nimport React, { useState , useEffect} from 'react'\nimport { GlobalState } from '../store/globalState'\nimport { connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, LIQUIDITY_POOL_PROGRAM_ID_V4, platformStateAccount, idsIndex } from '../utils/constants'\nimport { devnet_pools, orcaPools, raydiumPools } from '../utils/pools'\nimport { AMM_INFO_LAYOUT_V4, FUND_DATA, FUND_PDA_DATA, PLATFORM_DATA } from '../utils/programLayouts'\nimport { TokenAmount } from '../utils/safe-math'\nimport {  NATIVE_SOL, TEST_TOKENS, TOKENS } from '../utils/tokens'\nimport { createAssociatedTokenAccountIfNotExist, createTokenAccountIfNotExist, findAssociatedTokenAddress, sendNewTransaction, signAndSendTransaction } from '../utils/web3'\n\nconst ids= IDS['groups'][idsIndex];\n\nexport const Swap = () => {\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const tokensStatic = Object.entries(TOKENS).map( i => i[1])\n\n const [toggleGetTokens, setToggleGetTokens] = useState(false)\n\n  const [firstTokenAmount, setFirstTokenAmount] = useState(0);\n  const [selectedFirstToken, setSelectedFirstToken] = useState('USDC');\n  const [selectedSecondToken, setSelectedSecondToken] = useState('BTC');\n  const [isBuy, setIsBuy] = useState(1)\n  // const [selectedTokenSymbol, setSelectedTokenSymbol] = useState('')\n  const [selectedSwapProtocol, setSelectedSwapProtocol] = useState(0);\n\n   const [fundStateAccount, setFundStateAccount] = useState('');\n   const [fundPDA, setFundPDA] = useState('')\n   const [platformData, setPlatformData] = useState(0)\n\n  const [fundData, setFundData] = useState(0)\n  const [tokenList, setTokenList] = useState([])\n   useEffect(  ()=> {\n     (async () => {\n\n      const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n      if(!platformDataAcc){\n        alert('platform state not initilaized');\n        return;\n      }\n      const platformData = PLATFORM_DATA.decode(platformDataAcc.data)\n      // console.log(\"platformData::\",platformData);\n      setPlatformData(platformData)\n      const platformTokens = platformData?.token_list;\n      // console.log(\"platformTokens::\",platformTokens);\n\n      let platformTokensList = []; \n      if(platformTokens?.length) {\n        platformTokensList = platformTokens.map( (i) => {\n          return {\n            symbol: tokensStatic?.find( k => k.mintAddress ===i.mint.toBase58())?.symbol,\n            mintAddress: i.mint.toBase58(),\n            decimals: i.decimals?.toString()\n          }\n        })\n      } \n      console.log(\"platformTokensList::\",platformTokensList);\n\n\n      const key = walletProvider?.publicKey;  \n        if (!key ) {\n          // alert(\"connect wallet\")\n          return;\n        }\n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n        // const fundStateAcc = await PublicKey.createWithSeed(\n        //   key,\n        //   FUND_ACCOUNT_KEY,\n        //   programId,\n        // );\n        // console.log(\"FUND fundStateAcc:: \", fundStateAcc.toBase58())\n        // setFundStateAccount(fundStateAcc.toBase58())\n\n        const fundDataAcc = await connection.getAccountInfo(fundPDA[0]);\n        console.log(\"fundDataAcc::\",fundDataAcc);\n        if (fundDataAcc == null)\n        {\n           alert(\"fundDataAcc info not found\")\n           return;\n        }\n         const fundData = FUND_PDA_DATA.decode(fundDataAcc.data)\n         console.log(\"fundData::\",fundData);\n         setFundData(fundData)\n         const fundTokens = fundData?.tokens;\n         console.log(\"fundTokens ::\",fundTokens);\n\n         let fundTokensList = []; \n         if(fundTokens?.length) {\n          fundTokensList = fundTokens.map((i) => {\n            return tokensStatic.find(x => x.mintAddress === platformTokensList[i.index[i.mux]].mintAddress )\n          })\n         } \n         console.log(\"fundTokensList ::\",fundTokensList);\n\n         setTokenList(fundTokensList)\n     })()\n     \n   },[walletProvider,toggleGetTokens])\n\n\n\n  const handleFirstTokenSelect = (event) => {\n    setSelectedFirstToken(`${event.target.value}`);\n    console.log(`${event.target.value}-1 :::: `, `${event.target.value}-1`)\n  }\n\n  const handleSecondTokenSelect = (event) => {\n    setSelectedSecondToken(`${event.target.value}`);\n    console.log(`${event.target.value}-2 :::: `, `${event.target.value}-2`)\n  }\n\n  const swapInstructionRaydium = async (\n    walletProviderP,\n    poolProgramId,\n    // tokenProgramId,\n    // amm\n    ammId,\n    ammAuthority,\n    ammOpenOrders,\n    ammTargetOrders,\n    poolCoinTokenAccount,\n    poolPcTokenAccount,\n    // serum\n    serumProgramId,\n    serumMarket,\n    serumBids,\n    serumAsks,\n    serumEventQueue,\n    serumCoinVaultAccount,\n    serumPcVaultAccount,\n    serumVaultSigner,\n    // user\n    userSourceTokenAccount,\n    userDestTokenAccount,\n    userOwner,\n    manager,\n\n    amountIn,\n    minAmountOut\n) => {\n    \n   \n\n    const key = walletProvider?.publicKey;\n    console.log(\"key::\",key.toBase58())\n    if (!key) {\n        console.log(\"connect wallet\")\n        return;\n    }\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    console.log(\"fundPDA-tobase:\",fundPDA[0].toBase58())\n\n    // const fundStateAcc = await PublicKey.createWithSeed(\n    //     key,\n    //     FUND_ACCOUNT_KEY,\n    //     programId,\n    // );\n\n    // const dataLayout = struct([u8('instruction1'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')])\n\n    const dataLayout = struct([u8('instruction1'), u8('swap_index'), u8('instruction'), nu64('amountIn'), nu64('minAmountOut')])\n\n    const keys = [\n        { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n        { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n        { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n\n        { pubkey: new PublicKey(poolProgramId) , isSigner: false, isWritable: false },\n\n        // spl token\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n        // amm\n        { pubkey: ammId, isSigner: false, isWritable: true },\n        { pubkey: ammAuthority, isSigner: false, isWritable: true },\n        { pubkey: ammOpenOrders, isSigner: false, isWritable: true },\n        { pubkey: ammTargetOrders, isSigner: false, isWritable: true },\n        { pubkey: poolCoinTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: poolPcTokenAccount, isSigner: false, isWritable: true },\n        // serum\n        { pubkey: serumProgramId, isSigner: false, isWritable: false },\n        { pubkey: serumMarket, isSigner: false, isWritable: true },\n        { pubkey: serumBids, isSigner: false, isWritable: true },\n        { pubkey: serumAsks, isSigner: false, isWritable: true },\n        { pubkey: serumEventQueue, isSigner: false, isWritable: true },\n        { pubkey: serumCoinVaultAccount, isSigner: false, isWritable: true },\n        { pubkey: serumPcVaultAccount, isSigner: false, isWritable: true },\n        { pubkey: serumVaultSigner, isSigner: false, isWritable: true },\n\n        { pubkey: userSourceTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: userDestTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: userOwner, isSigner: false, isWritable: true }\n    ]\n    for(let i=0; i<keys.length;i++) {\n      console.log(\"key:\",i, keys[i].pubkey.toBase58())\n    }\n\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n        {\n            instruction1: 5,\n            swap_index : 0,\n            instruction: 9,\n            amountIn,\n            minAmountOut\n        },\n        data\n    ) \n\n    return new TransactionInstruction({\n        keys,\n        programId: programId,\n        data\n    })\n}\n\nconst swapInstructionOrca = async () => {\n  console.log(\"latttter\");\n  alert(\"Noorca swap \")\n}\n\n  const swapTokens = async (\n    connection,\n    walletProvider,\n    fundPDA,\n    poolInfo,\n    fromCoinMint,\n    toCoinMint,\n    fromTokenAccount,\n    toTokenAccount,\n    amount,\n    slippage,\n    tradeSide,\n    selectedSwapProtocol\n) => {\n\n  console.log(\"swapTokens with params: \",\n     fundPDA,\n    poolInfo,\n    fromCoinMint,\n    toCoinMint,\n    fromTokenAccount,\n    toTokenAccount,\n    amount,\n    slippage,\n    tradeSide,\n    selectedSwapProtocol\n   )\n\n    const transaction = new Transaction()\n    const signers = []\n\n    const owner = walletProvider?.publicKey\n\n    // const { amountIn, amountOut } = getSwapOutAmount(poolInfo, fromCoinMint, toCoinMint, amount, slippage)\n    let amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false)\n    let amountOut = new TokenAmount(1, poolInfo.coin.decimals)\n    if (tradeSide === \"sell\") {\n        amountIn = new TokenAmount(amount, poolInfo.coin.decimals, false)\n        amountOut = new TokenAmount(1, poolInfo.coin.decimals)\n    } else {\n        amountIn = new TokenAmount(amount, poolInfo.pc.decimals, false)\n        amountOut = new TokenAmount(1, poolInfo.pc.decimals)\n    }\n\n    let fromMint = fromCoinMint\n    let toMint = toCoinMint\n\n    if (fromMint ===  NATIVE_SOL.mintAddress) {\n        fromMint = ids.tokens[4].mintKey\n    }\n    if (toMint === NATIVE_SOL.mintAddress) {\n        toMint = ids.tokens[4].mintKey\n    }\n\n    const newFromTokenAccount = fromTokenAccount\n    const newToTokenAccount = toTokenAccount\n\n    let instruction;\n\n    console.log(\"poolInfo.programId::\",poolInfo.programId)\n\n    if(selectedSwapProtocol == 0){\n        instruction = await  swapInstructionRaydium(\n             walletProvider,\n             poolInfo.programId,\n             new PublicKey(poolInfo.ammId),\n             new PublicKey(poolInfo.ammAuthority),\n             new PublicKey(poolInfo.ammOpenOrders),\n             new PublicKey(poolInfo.ammTargetOrders),\n             new PublicKey(poolInfo.poolCoinTokenAccount),\n             new PublicKey(poolInfo.poolPcTokenAccount),\n             new PublicKey(poolInfo.serumProgramId),\n             new PublicKey(poolInfo.serumMarket),\n             new PublicKey(poolInfo.serumBids),\n             new PublicKey(poolInfo.serumAsks),\n             new PublicKey(poolInfo.serumEventQueue),\n             new PublicKey(poolInfo.serumCoinVaultAccount),\n             new PublicKey(poolInfo.serumPcVaultAccount),\n             new PublicKey(poolInfo.serumVaultSigner),\n             newFromTokenAccount,\n             newToTokenAccount,\n             fundPDA,\n             owner,\n             Math.floor(amountIn.toWei().toNumber()),\n             Math.floor(amountOut.toWei().toNumber())\n         )\n    } else {\n        instruction = await swapInstructionOrca(\n             walletProvider,\n             poolInfo.programId,\n\n             new PublicKey(poolInfo.ammId),\n             new PublicKey(poolInfo.ammAuthority),\n             new PublicKey(poolInfo.poolCoinTokenAccount),\n             new PublicKey(poolInfo.poolPcTokenAccount),\n\n             newFromTokenAccount,\n             newToTokenAccount,\n             fundPDA,\n             owner,\n             \n             new PublicKey(poolInfo.feeAccount),\n             new PublicKey(poolInfo.lpMintAddress),\n\n             Math.floor(amountIn.toWei().toNumber()),\n             Math.floor(amountOut.toWei().toNumber()),\n             tradeSide\n         )\n    }\n    \n   \n    transaction.add(instruction)\n    transaction.feePayer = owner;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n    // return sign;\n    //return await sendNewTransaction(connection, wallet, transaction, signers)\n  }\n\n  const handleSwap = async () => {\n    try {\n\n        console.log(\"isBuy,firstTokenAmount,selectedFirstToken,selectedSecondToken::\",isBuy,firstTokenAmount,selectedFirstToken,selectedSecondToken)\n        // if( (selectedFirstToken === \"USDC\" && selectedSecondToken === \"WSOL\") \n        //      || (selectedFirstToken === \"WSOL\" && selectedSecondToken === \"USDC\")){\n        //     isBuy = selectedFirstToken === \"USDC\"  ;\n        // } else {\n        //     isBuy = selectedFirstToken === \"USDC\" || selectedFirstToken === \"WSOL\" ;\n        // }\n        // const isBuy = ['USDC', 'WSOL'].includes(firstToken.symbol);\n\n         //this is will break in case of selling WSOL-> USDC\n        // const poolName =  isBuy ? `${selectedSecondToken}-${selectedFirstToken}` : `${selectedFirstToken}-${selectedSecondToken}`;\n        const poolName1 = `${selectedSecondToken}-${selectedFirstToken}`\n        const poolName2 = `${selectedFirstToken}-${selectedSecondToken}`\n        console.log(\"poolName1, poolName2 , isBuy::: \",poolName1,poolName2, isBuy);\n\n        let poolInfo;\n        if (selectedSwapProtocol == 0) {\n            poolInfo  = raydiumPools.find(p => (p.name===poolName1 ||  p.name===poolName2) );\n        } else {\n          poolInfo  = orcaPools.find(p => (p.name===poolName1 ||  p.name===poolName2) );\n            // poolInfo  = devnet_pools.find(p => (p.name===poolName1 ||  p.name===poolName2) );\n        }\n        if(!poolInfo){\n          alert(\"poolinfo undefined\")\n          return;\n        }\n        console.log(\"poolInfo:\",poolInfo)\n        const fromCoin = isBuy ? poolInfo.pc : poolInfo.coin;\n        const toCoin = isBuy ? poolInfo.coin : poolInfo.pc;\n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        console.log(\"fundPDA-tobase:\",fundPDA[0].toBase58())\n\n        const fromTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(fromCoin.mintAddress));\n        const toTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(toCoin.mintAddress));\n\n        console.log(\"fromCoin,toCoin :\",fromCoin,toCoin)\n        console.log(\"fromTokenAccount,toTokenAccount :\",fromTokenAccount.toBase58(),toTokenAccount.toBase58())\n\n        try {\n            const txId = await swapTokens(connection, walletProvider, fundPDA[0], poolInfo, fromCoin?.mintAddress,\n                toCoin?.mintKey, fromTokenAccount, toTokenAccount, firstTokenAmount, 1, isBuy ? \"buy\" : \"sell\",\n                selectedSwapProtocol\n            );\n            \n        } catch (error) {\n            console.error(\" swap error:\", error);\n        }\n    } catch (error) {\n        console.error(\"error while swapping : \", error)\n    }\n}\n\n  return (\n    <div className=\"form-div\">\n      <h4> Swap</h4>\n      fundPDA : {fundPDA}\n      <br />\n      Swaping  ::: {selectedFirstToken} {\"=>>\"} {selectedSecondToken}  \n      <br />\n\n      {/* <label htmlFor=\"tokens\">USDC and  Token:</label> */}\n      <button onClick={()=> setToggleGetTokens(!toggleGetTokens)}>LOAD FUND TOKENS</button>\n      FROM ::\n      <select name=\"tokens\" onChange={handleFirstTokenSelect}>\n         {\n          tokenList.map((i,index) => {\n            return (<option key={index} value={i.symbol}>{i.symbol}</option>)\n          })\n        }\n      </select>\n        TO :: \n      <select name=\"tokens\" onChange={handleSecondTokenSelect}>\n         {\n          tokenList.map((i,index) => {\n            return (<option key={index} value={i.symbol}>{i.symbol}</option>)\n          })\n        }\n      </select>\n      <br />\n      <select name=\"protocol\" onChange={ (event) => setSelectedSwapProtocol(event.target.value)}>\n            <option key={0} value={0}>RAYDIUM</option>\n            <option key={1} value={1}>ORCA</option>\n      </select>\n      {/* <br /> */}\n\n      <select name=\"buy\" onChange={ (event) => setIsBuy(parseInt(event.target.value))}>\n            <option key={1} value={1}>BUY</option>\n            <option key={0} value={0}>SELL</option>\n      </select>\n      <br />\n\n      amount : {' '}<input type=\"number\" value={firstTokenAmount} onChange={(e) => setFirstTokenAmount(e.target.value)} /><br />\n    \n      <button margin-right=\"10px\" onClick={handleSwap} >TRADE</button>\n      \n    </div>\n  )\n}\n\n\n"]},"metadata":{},"sourceType":"module"}