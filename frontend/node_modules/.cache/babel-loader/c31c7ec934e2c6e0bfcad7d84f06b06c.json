{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js\",\n    _s = $RefreshSig$();\n\nimport { Account, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, FUND_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\nimport { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const MangoPlaceOrder = () => {\n  _s();\n\n  const [size, setSize] = useState(0);\n  const [price, setPrice] = useState(0);\n  const [index, setIndex] = useState(0);\n  const [side, setSide] = useState('');\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleMangoDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let mangoAcc = await client.getMangoAccount(new PublicKey('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX'), ids.serumProgramId);\n    console.log(\"manogACc:: \", mangoAcc);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const dataLayout = struct([u32('instruction'), nu64('quantity')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 6,\n      quantity: size * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.fund_pda,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].rootKey),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: nodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.vault_key,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleMangoPlace = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    console.log(\"vault_balance:: \", fundState.vault_balance.toNumber() / 10 ** ids.tokens[0].decimals);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId); // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n    console.log(\"mangoAcc:: \", mangoAcc);\n    console.log(\"mangogroup:: \", mangoGroup);\n    let mangoCache = await mangoGroup.loadCache(connection);\n    let perpMarket = await client.getPerpMarket(mangoGroup.perpMarkets[1].perpMarket, mangoGroup.tokens[1].decimals, mangoGroup.tokens[15].decimals);\n    console.log(\"perpmarket:: \", perpMarket);\n    console.log(\"wallet account:: \", walletProvider);\n    let rootBanks = await mangoGroup.loadRootBanks(connection); // try {\n    //   let tx = await client.settlePnl(mangoGroup, mangoCache, mangoAcc, perpMarket, rootBanks[15], mangoCache.priceCache[1].price, walletProvider)\n    // }\n    // catch (e) {\n    //   console.error(\"yooo\", e)\n    // }\n    // //console.log(\"tx:: \", tx)\n\n    console.log(\"mangocache:: \", mangoCache);\n    const transaction = new Transaction();\n    const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 8,\n      price: price,\n      quantity: size * 10 ** 4,\n      client_order_id: 333,\n      side: 0,\n      order_type: 0\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].bidsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].asksKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].eventsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSTEM_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleMangoClosePosition = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId); // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n    let mangoCache = await mangoGroup.loadCache(connection);\n    let price = mangoCache.priceCache[1].price * 10;\n    let price_adj = mangoAcc.perpAccounts[1].basePosition > 0 ? price * 0.95 : price * 1.05;\n    console.log(\"mangoCAche:: \", mangoCache);\n    console.log(\"mangoAcc:: \", mangoAcc);\n    console.log(\"mangogroup:: \", mangoGroup);\n    const transaction = new Transaction();\n    const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 8,\n      price: price_adj,\n      quantity: Math.abs(mangoAcc.perpAccounts[1].basePosition),\n      client_order_id: 333,\n      side: mangoAcc.perpAccounts[1].basePosition < 0 ? 0 : 1,\n      order_type: 0\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].bidsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].asksKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].eventsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSTEM_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleMangoWithdraw = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const transaction = new Transaction();\n    const dataLayout = struct([u32('instruction'), nu64('quantity')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 7,\n      quantity: size * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].rootKey),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: nodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.vault_key,\n        isSigner: false,\n        isWritable: true\n      }, // Fund Vault\n      {\n        pubkey: mangoGroup.signerKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleMangoCancelPerp = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const transaction = new Transaction();\n    const dataLayout = struct([u32('instruction'), nu64('client_order_id'), u8('invalid_ok')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 9,\n      client_order_id: 333,\n      invalid_ok: 0\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundPDA,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].bidsKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].asksKey),\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  const handleMangoRedeem = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA);\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey));\n    let perpMkt = PerpMarketLayout.decode(perpAcc.data);\n    console.log(\"perpmkt:: \", perpMkt);\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]));\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data);\n    console.log(\"nodebank:: \", nodeBank);\n    const transaction = new Transaction();\n    const managerMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\n    const dataLayout = struct([u32('instruction')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 4\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.mangoProgramId),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: fundState.mngo_vault_key,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: managerMngoAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.publicKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.mangoCache,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: fundState.mango_account,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: new PublicKey(ids.perpMarkets[0].publicKey),\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: perpMkt.mngoVault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[1].rootKey),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]),\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: nodeBank.vault,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: mangoGroup.signerKey,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: PublicKey.default,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction);\n    console.log(`walletProvider?.publicKey ::: `, walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBase58());\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Mango Place\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 483,\n      columnNumber: 13\n    }, this), \"Size ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: size,\n      onChange: event => setSize(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 485,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 486,\n      columnNumber: 13\n    }, this), \"Price ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: price,\n      onChange: event => setPrice(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 489,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"side\",\n      children: \"Buy/Sell\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 490,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onClick: event => setSide(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"buy\",\n        children: \"Buy\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 493,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"sell\",\n        children: \"Sell\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 494,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 492,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"side\",\n      width: \"100px\",\n      onClick: event => setIndex(event.target.value),\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"BTC\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 1,\n        children: \"ETH\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 2,\n        children: \"SOL\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 500,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: 3,\n        children: \"SRM\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 501,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 497,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoPlace,\n      children: \"Mango Open Position\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 505,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoDeposit,\n      children: \"Deposit \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 508,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoWithdraw,\n      children: \"Withdraw \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 509,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 511,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoClosePosition,\n      children: \"Mango Close \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 514,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoRedeem,\n      children: \"Redeem Mngo \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 515,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 11\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleMangoCancelPerp,\n      children: \"Mango Cancel perp \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 11\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 482,\n    columnNumber: 9\n  }, this);\n};\n\n_s(MangoPlaceOrder, \"8u0fAq20blNYVJRq+WRC3IVoB0E=\");\n\n_c = MangoPlaceOrder;\n\nvar _c;\n\n$RefreshReg$(_c, \"MangoPlaceOrder\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js"],"names":["Account","PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","FUND_ACCOUNT_KEY","programId","SYSTEM_PROGRAM_ID","TOKEN_PROGRAM_ID","struct","u32","u8","u16","ns64","nu64","createAssociatedTokenAccountIfNotExist","signAndSendTransaction","FUND_DATA","IDS","MangoClient","I80F48","NodeBankLayout","PerpAccountLayout","PerpMarketLayout","MangoPlaceOrder","size","setSize","price","setPrice","index","setIndex","side","setSide","walletProvider","s","ids","handleMangoDeposit","key","publicKey","alert","transaction","fundStateInfo","getAccountInfo","fundPDA","fundState","decode","data","console","log","client","mangoProgramId","mangoGroup","getMangoGroup","mangoAcc","getMangoAccount","serumProgramId","nodeBankInfo","tokens","nodeKeys","nodeBank","dataLayout","Buffer","alloc","span","encode","instruction","quantity","decimals","keys","pubkey","isSigner","isWritable","mango_account","fund_pda","mangoCache","rootKey","vault","vault_key","add","toBase58","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handleMangoPlace","findProgramAddress","toBuffer","vault_balance","toNumber","loadCache","perpMarket","getPerpMarket","perpMarkets","rootBanks","loadRootBanks","client_order_id","order_type","bidsKey","asksKey","eventsKey","handleMangoClosePosition","priceCache","price_adj","perpAccounts","basePosition","Math","abs","handleMangoWithdraw","signerKey","default","handleMangoCancelPerp","invalid_ok","handleMangoRedeem","perpAcc","perpMkt","managerMngoAccount","mintKey","mngo_vault_key","mngoVault","event","target","value"],"mappings":"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","sourcesContent":["import { Account, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, FUND_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\nimport { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\n\n\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\n\nexport const MangoPlaceOrder = () => {\n    const [size, setSize] = useState(0);\n    const [price, setPrice] = useState(0);\n    const [index, setIndex] = useState(0);\n    const [side, setSide] = useState('');\n    \n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n    const ids = IDS['groups'][0]\n\n    \n\n    const handleMangoDeposit = async () => {\n    \n    const key = walletProvider?.publicKey;\n\n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    };\n    const transaction = new Transaction()\n\n\n\n    let fundStateInfo = await connection.getAccountInfo((fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n      let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n      console.log(\"mango group:: \", mangoGroup)\n\n      let mangoAcc = await client.getMangoAccount(new PublicKey('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX'), ids.serumProgramId)\n      console.log(\"manogACc:: \", mangoAcc)\n      let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n      let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n      console.log(\"nodebank:: \", nodeBank)\n\n    const dataLayout = struct([u32('instruction'), nu64('quantity')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 6,\n        quantity: size * 10** ids.tokens[0].decimals\n      },\n      data\n    )\n\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: fundPDA, isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: false },\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n        { pubkey: fundState.fund_pda, isSigner: false, isWritable: false },\n        { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n        { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n        { pubkey: fundState.vault_key, isSigner: false, isWritable: true },\n      ],\n      programId,\n      data\n    });\n\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction)\n    console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign)\n    \n  }\n\n    const handleMangoPlace = async () => {\n        \n    \n        const key = walletProvider?.publicKey;\n\n      if (!key ) {\n        alert(\"connect wallet\")\n        return;\n      };\n      const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n  \n      let fundStateInfo = await connection.getAccountInfo(fundPDA)\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    console.log(\"vault_balance:: \", fundState.vault_balance.toNumber()/ 10 ** ids.tokens[0].decimals)\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    console.log(\"nodebank:: \", nodeBank)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n    // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n    console.log(\"mangoAcc:: \", mangoAcc)\n    console.log(\"mangogroup:: \", mangoGroup)\n    let mangoCache = await mangoGroup.loadCache(connection)\n\n    let perpMarket = await client.getPerpMarket( mangoGroup.perpMarkets[1].perpMarket,  mangoGroup.tokens[1].decimals, mangoGroup.tokens[15].decimals )\n\n    console.log(\"perpmarket:: \", perpMarket)\n\n    console.log(\"wallet account:: \", walletProvider)\n    \n    let rootBanks = await mangoGroup.loadRootBanks(connection)\n    // try {\n    //   let tx = await client.settlePnl(mangoGroup, mangoCache, mangoAcc, perpMarket, rootBanks[15], mangoCache.priceCache[1].price, walletProvider)\n    // }\n    // catch (e) {\n    //   console.error(\"yooo\", e)\n    // }\n    // //console.log(\"tx:: \", tx)\n\n\n\n    console.log(\"mangocache:: \", mangoCache)\n\n    const transaction = new Transaction()\n  \n    const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 8,\n        price: price,\n        quantity: size * 10**4,\n        client_order_id: 333,\n        side: 0,\n        order_type: 0\n      },\n      data\n    )\n\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: key, isSigner: true, isWritable: true },\n        \n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n        { pubkey: fundPDA, isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n\n        { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n        { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n\n        { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n\n      ],\n      programId,\n      data\n    });\n\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction)\n    console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign)\n\n    }\n\n    const handleMangoClosePosition = async () => {\n        \n    \n      const key = walletProvider?.publicKey;\n\n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    };\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n\n    let fundStateInfo = await connection.getAccountInfo(fundPDA)\n  let fundState = FUND_DATA.decode(fundStateInfo.data)\n  console.log(\"fundState:: \", fundState)\n\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n  let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n  // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n  let mangoCache = await mangoGroup.loadCache(connection)\n  let price = (mangoCache.priceCache[1].price * 10)\n  let price_adj = mangoAcc.perpAccounts[1].basePosition > 0 ? price * 0.95 : price * 1.05\n  console.log(\"mangoCAche:: \", mangoCache)\n\n  console.log(\"mangoAcc:: \", mangoAcc)\n  console.log(\"mangogroup:: \", mangoGroup)\n \n  const transaction = new Transaction()\n\n  const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n  const data = Buffer.alloc(dataLayout.span)\n  dataLayout.encode(\n    {\n      instruction: 8,\n      price: price_adj,\n      quantity: Math.abs(mangoAcc.perpAccounts[1].basePosition),\n      client_order_id: 333,\n      side: mangoAcc.perpAccounts[1].basePosition < 0 ? 0: 1,\n      order_type: 0\n    },\n    data\n  )\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      { pubkey: key, isSigner: true, isWritable: true },\n      \n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n\n      { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n\n      { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n\n    ],\n    programId,\n    data\n  });\n\n  transaction.add(instruction);\n  console.log(`transaction ::: `, transaction)\n  console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n  transaction.feePayer = key;\n  let hash = await connection.getRecentBlockhash(\"finalized\");\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n\n  const sign = await signAndSendTransaction(walletProvider, transaction);\n  console.log(\"tx::: \", sign)\n\n  }\n\n    const handleMangoWithdraw = async () => {\n        \n    \n      const key = walletProvider?.publicKey;\n\n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    };\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n    let fundStateInfo = await connection.getAccountInfo(fundPDA)\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    console.log(\"nodebank:: \", nodeBank)\n\n    const transaction = new Transaction()\n\n    const dataLayout = struct([u32('instruction'), nu64('quantity')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 7,\n        quantity: size * 10**ids.tokens[0].decimals\n      },\n      data\n    )\n\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n        { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n        { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n        { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n        { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n        { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n        { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n        { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Fund Vault\n        { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n        { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n      ],\n      programId,\n      data\n    });\n\n    transaction.add(instruction);\n    console.log(`transaction ::: `, transaction)\n    console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash(\"finalized\");\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx::: \", sign)\n\n  }\n\n  const handleMangoCancelPerp = async () => {\n        \n    \n    const key = walletProvider?.publicKey;\n\n  if (!key ) {\n    alert(\"connect wallet\")\n    return;\n  };\n  const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n  let fundStateInfo = await connection.getAccountInfo(fundPDA)\n  let fundState = FUND_DATA.decode(fundStateInfo.data)\n  console.log(\"fundState:: \", fundState)\n\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n  console.log(\"mango group:: \", mangoGroup)\n\n  let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n  let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  console.log(\"nodebank:: \", nodeBank)\n\n  const transaction = new Transaction()\n\n  const dataLayout = struct([u32('instruction'), nu64('client_order_id'), u8('invalid_ok')])\n  const data = Buffer.alloc(dataLayout.span)\n  dataLayout.encode(\n    {\n      instruction: 9,\n      client_order_id: 333,\n      invalid_ok: 0,\n    },\n    data\n  )\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      { pubkey: fundPDA, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n\n      { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n    ],\n    programId,\n    data\n  });\n\n  transaction.add(instruction);\n  console.log(`transaction ::: `, transaction)\n  console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n  transaction.feePayer = key;\n  let hash = await connection.getRecentBlockhash(\"finalized\");\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n\n  const sign = await signAndSendTransaction(walletProvider, transaction);\n  console.log(\"tx::: \", sign)\n\n}\n\n  const handleMangoRedeem = async () => {\n        \n    \n    const key = walletProvider?.publicKey;\n\n  if (!key ) {\n    alert(\"connect wallet\")\n    return;\n  };\n  const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n  let fundStateInfo = await connection.getAccountInfo(fundPDA)\n  let fundState = FUND_DATA.decode(fundStateInfo.data)\n  console.log(\"fundState:: \", fundState)\n\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n  console.log(\"mango group:: \", mangoGroup)\n\n  let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey))\n  let perpMkt = PerpMarketLayout.decode(perpAcc.data)\n  console.log(\"perpmkt:: \", perpMkt)\n\n  let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n  let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  console.log(\"nodebank:: \", nodeBank)\n\n  const transaction = new Transaction()\n\n  const managerMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\n\n  const dataLayout = struct([u32('instruction')])\n  const data = Buffer.alloc(dataLayout.span)\n  dataLayout.encode(\n    {\n      instruction: 4\n    },\n    data\n  )\n\n  const instruction = new TransactionInstruction({\n    keys: [\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: fundState.mngo_vault_key, isSigner: false, isWritable: true },\n      { pubkey: managerMngoAccount , isSigner: false, isWritable: true },\n\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: false },\n      { pubkey: perpMkt.mngoVault, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.tokens[1].rootKey), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]), isSigner: false, isWritable: true },\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n      { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n    ],\n    programId,\n    data\n  });\n\n  transaction.add(instruction);\n  console.log(`transaction ::: `, transaction)\n  console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n  transaction.feePayer = key;\n  let hash = await connection.getRecentBlockhash(\"finalized\");\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n\n  const sign = await signAndSendTransaction(walletProvider, transaction);\n  console.log(\"tx::: \", sign)\n\n}\n\n\n    return (\n        <div className=\"form-div\">\n            <h4>Mango Place</h4>\n            Size ::: {' '}\n            <input type=\"number\" value={size} onChange={(event) => setSize(event.target.value)} />\n            <br />\n            Price ::: {' '}\n            <input type=\"number\" value={price} onChange={(event) => setPrice(event.target.value)} />\n            <br />\n            <label htmlFor=\"side\">Buy/Sell</label>\n\n            <select name=\"side\" width = \"100px\" onClick={(event) => setSide(event.target.value)}>\n            <option value=\"buy\">Buy</option>\n            <option value=\"sell\">Sell</option>\n            </select>\n\n            <select name=\"side\" width = \"100px\" onClick={(event) => setIndex(event.target.value)}>\n            <option value={0}>BTC</option>\n            <option value={1}>ETH</option>\n            <option value={2}>SOL</option>\n            <option value={3}>SRM</option>\n\n            </select>\n\n          <button onClick={handleMangoPlace}>Mango Open Position</button>\n\n          <br />\n          <button onClick={handleMangoDeposit}>Deposit </button>\n          <button onClick={handleMangoWithdraw}>Withdraw </button>\n\n          <br />\n          <button onClick={handleMangoClosePosition}>Mango Close </button>\n\n          <br />\n          <button onClick={handleMangoRedeem}>Redeem Mngo </button>\n\n          <br />\n          <button onClick={handleMangoCancelPerp}>Mango Cancel perp </button>\n\n\n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}