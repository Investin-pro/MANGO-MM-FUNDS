{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Testing.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { u64 } from '@project-serum/borsh';\nimport { TOKENS } from '../utils/tokens';\nimport { IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Testing = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const [amount, setAmount] = useState(0);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    updatePoolPrices(transaction, devnet_pools);\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const fundStateAccount = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintAddress));\n    const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintAddress));\n    console.log(\"amount deposit: \", amount);\n    const dataLayout = struct([u8('instruction'), nu64('amount')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 16,\n      amount: amount * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: priceStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: fundBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: managerBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`); // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n  };\n\n  const handleWithdraw = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    updatePoolPrices(transaction, devnet_pools);\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey.toBuffer()], programId);\n    const fundStateAccount = await PublicKey.createWithSeed(key, FUND_ACCOUNT_KEY, programId);\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintAddress));\n    const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintAddress));\n    console.log(\"amount withdraww: \", amount);\n    const dataLayout = struct([u8('instruction'), nu64('amount')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 17,\n      amount: amount * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: fundStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: priceStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: fundBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: managerBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: fundPDA[0],\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`); // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Testing\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 166,\n      columnNumber: 9\n    }, this), \"amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: event => setAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 169,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleWithdraw,\n      children: \"Withdraw\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 171,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 165,\n    columnNumber: 9\n  }, this);\n};\n\n_s(Testing, \"+4H50ROsfUscAJgDTVrMSVOSm6s=\");\n\n_c = Testing;\n\nvar _c;\n\n$RefreshReg$(_c, \"Testing\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Testing.js"],"names":["PublicKey","SYSVAR_CLOCK_PUBKEY","Transaction","TransactionInstruction","React","useState","GlobalState","adminAccount","connection","FUND_ACCOUNT_KEY","idsIndex","priceStateAccount","programId","TOKEN_PROGRAM_ID","nu64","struct","u8","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","FUND_DATA","devnet_pools","updatePoolPrices","u64","TOKENS","IDS","Testing","ids","amount","setAmount","walletProvider","s","handleDeposit","key","publicKey","alert","transaction","fundPDA","findProgramAddress","toBuffer","fundStateAccount","createWithSeed","fundBaseTokenAccount","tokens","mintAddress","managerBaseTokenAccount","console","log","dataLayout","data","Buffer","alloc","span","encode","instruction","decimals","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","sign","handleWithdraw","event","target","value"],"mappings":"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","sourcesContent":["import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools'\n\nimport { updatePoolPrices } from './updatePrices';\nimport { u64 } from '@project-serum/borsh';\nimport { TOKENS } from '../utils/tokens';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\nexport const Testing = () => {\n\n    const ids= IDS['groups'][idsIndex];\n\n    const [amount, setAmount] = useState(0);\n\n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n    \n    const handleDeposit = async () => {\n\n        const key = walletProvider?.publicKey;\n    \n        if (!key) {\n          alert(\"connect wallet\")\n          return;\n        };\n      \n        \n        const transaction = new Transaction()\n\n        updatePoolPrices(transaction, devnet_pools)\n\n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        const fundStateAccount = await PublicKey.createWithSeed(\n            key,\n            FUND_ACCOUNT_KEY,\n            programId,\n        );\n\n        const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintAddress));\n        const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey( ids.tokens[0].mintAddress));\n        console.log(\"amount deposit: \", amount)\n\n        const dataLayout = struct([u8('instruction'), nu64('amount')])\n\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n            instruction: 16,\n            amount: amount * (10 ** ids.tokens[0].decimals),\n            },\n            data\n        )\n        const instruction = new TransactionInstruction({\n        keys: [\n            {pubkey: fundStateAccount, isSigner: false, isWritable:true},\n            {pubkey: priceStateAccount, isSigner: false, isWritable:true},\n            {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable:true},\n            {pubkey: key, isSigner: true, isWritable: true},\n        \n            {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n            {pubkey: managerBaseTokenAccount, isSigner: false, isWritable:true},\n \n            {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n\n            {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true},\n            \n        ],\n        programId,\n        data\n        });\n        transaction.add(instruction);\n        transaction.feePayer = key;\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"signature tx:: \", sign)\n        console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n        // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n        // const signature = await signAndSendTransaction(walletProvider, transaction2);\n        // let result = await connection.confirmTransaction(signature, \"confirmed\");\n        // console.log(\"tx:: \", signature)\n    }\n\n    const handleWithdraw = async () => {\n\n        const key = walletProvider?.publicKey;\n    \n        if (!key) {\n          alert(\"connect wallet\")\n          return;\n        };\n      \n        \n        const transaction = new Transaction()\n\n        updatePoolPrices(transaction, devnet_pools)\n\n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        const fundStateAccount = await PublicKey.createWithSeed(\n            key,\n            FUND_ACCOUNT_KEY,\n            programId,\n        );\n\n        const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey( ids.tokens[0].mintAddress));\n        const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey( ids.tokens[0].mintAddress));\n        \n        console.log(\"amount withdraww: \", amount)\n        const dataLayout = struct([u8('instruction'), nu64('amount')])\n\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n            instruction: 17,\n            amount: amount * (10 ** ids.tokens[0].decimals),\n            },\n            data\n        )\n        const instruction = new TransactionInstruction({\n        keys: [\n            {pubkey: fundStateAccount, isSigner: false, isWritable:true},\n            {pubkey: priceStateAccount, isSigner: false, isWritable:true},\n            {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable:true},\n            \n            {pubkey: key, isSigner: true, isWritable: true},\n\n            {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n            {pubkey: managerBaseTokenAccount, isSigner: false, isWritable:true},\n \n            {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n\n            {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true},\n            \n        ],\n        programId,\n        data\n        });\n        \n        transaction.add(instruction);\n        transaction.feePayer = key;\n        let hash = await connection.getRecentBlockhash();\n        console.log(\"blockhash\", hash);\n        transaction.recentBlockhash = hash.blockhash;\n\n        const sign = await signAndSendTransaction(walletProvider, transaction);\n        console.log(\"signature tx:: \", sign)\n        console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n\n        // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n        // const signature = await signAndSendTransaction(walletProvider, transaction2);\n        // let result = await connection.confirmTransaction(signature, \"confirmed\");\n        // console.log(\"tx:: \", signature)\n\n    }\n    return (\n        <div className=\"form-div\">\n        <h4>Testing</h4>\n            amount ::: {' '}\n            <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n            <br />\n            <button onClick={handleDeposit}>Deposit</button>\n            <button onClick={handleWithdraw}>Withdraw</button>\n    \n        </div>\n      )\n}"]},"metadata":{},"sourceType":"module"}