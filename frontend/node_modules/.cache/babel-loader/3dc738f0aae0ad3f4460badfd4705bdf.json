{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA } from '../utils/programLayouts';\nimport { TOKENS } from '../utils/tokens';\nimport { devnet_pools } from '../utils/pools';\nimport { updatePoolPrices } from './updatePrices';\nimport { createTokenAccountInstructions, IDS } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Deposit = () => {\n  _s();\n\n  const ids = IDS['groups'][idsIndex];\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [funds, setFunds] = useState([]);\n  const [newFunds, setNewFunds] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    console.log(\"**fundPDA,fundStateAccount:: \", fundPDA, fundStateAccount);\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    const transaction = new Transaction();\n    const RPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const FPDA = new PublicKey(fundPDA);\n    const associatedTokenAddress1 = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), RPDA[0], transaction);\n    const baseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey)); // const investerStateAccount = await createKeyIfNotExists(walletProvider, null, programId, FPDA.toBase58().substr(0, 31), INVESTOR_DATA.span, transaction)\n\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    console.log(\"RPDA:\", RPDA[0].toBase58());\n    console.log(\"FPDA: \", FPDA.toBase58()); // console.log(\"fundStateAccountRead:: \", fundStateAccount)\n\n    console.log(\"baseTokenAccount:: \", baseTokenAccount);\n    console.log(\"investorStateAccountRead:: \", investerStateAccount.toBase58());\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    console.log(\"associatedTokenaccount:: \", associatedTokenAddress1.toBase58()); // const fundStateDataAcc = await connection.getAccountInfo(new PublicKey(fundStateAccount))\n    // const fundState = FUND_DATA.decode(fundStateDataAcc.data);\n\n    const fundPDAStateDataAcc = await connection.getAccountInfo(FPDA);\n    const fundPDAState = FUND_PDA_DATA.decode(fundPDAStateDataAcc.data);\n    const investors = fundPDAState.investors;\n    let index = -1;\n\n    for (let i = 0; i < investors.length; i++) {\n      const y = investors[i].toBase58();\n\n      if (y == PublicKey.default.toBase58()) {\n        index = i;\n        i = 1111;\n      }\n    }\n\n    if (index == -1) {\n      throw {\n        message: \"MAX INVESTOR ACCOUNTS REACHED\"\n      };\n    }\n\n    const dataLayout = struct([u8('instruction'), nu64('amount'), u8('index')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amount: amount * 10 ** TOKENS.USDC.decimals,\n      index: index\n    }, data); // DdzREMVFg6pa5825HBKVzeCrEi8EJiREfb8UrxSZB64w\n    // HUHuQCZUvxCiuFg54vRStrXSbCFeBhmXRqSuR5eEVB6o\n    // HW18fiAHKzs7ZSaT5ibAhnSWVde25sazTSbMzss4Fcty\n\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: FPDA,\n        isSigner: false,\n        isWritable: true\n      }, //fund State Account\n      {\n        pubkey: investerStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: baseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, // Investor Base Token Account\n      {\n        pubkey: associatedTokenAddress1,\n        isSigner: false,\n        isWritable: true\n      }, // Router Base Token Account\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key, investerStateAccount);\n    transaction.partialSign(...signers);\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign);\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`);\n  };\n\n  const handleFunds = async () => {\n    let managers = [];\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount);\n    const platformData = PLATFORM_DATA.decode(platformDataAcc.data);\n    console.log(\"platformData :: \", platformData);\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n\n    console.log(managers);\n    setFunds(managers); //  =============================\n\n    const newManagers = [];\n    let newFunds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_PDA_DATA.span\n      }]\n    });\n    console.log(`newFunds :::: `, newFunds);\n    const fundPDAData = newFunds.map(f => FUND_PDA_DATA.decode(f.account.data));\n    console.log(`fundPDAData ::: `, fundPDAData);\n\n    for (let i = 0; i < fundPDAData.length; i++) {\n      let manager = fundPDAData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      newManagers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n\n    console.log(\"newManagers ::\", newManagers);\n    setNewFunds(newManagers);\n  };\n\n  const handleFundSelect = async event => {\n    console.log(\"seleecting fund \", event.target.value, event.target, event);\n    console.log(\"seleecting fund \", event.target.value);\n    setFundPDA(event.target.value);\n    alert(\"seleecting fund \", event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA); // funds.forEach(fund => {\n    //   if (fund.fundPDA == event.target.value) \n    //   {\n    //     setFundStateAccount(fund.fundStateAccount)\n    //    console.log(\"set fundStateAcoount:\",fund.fundStateAccount)\n    //   }\n    // });\n    // console.log(`setting fundStateAccount :::: `, fundStateAccount)\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Investor Fund Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 194,\n      columnNumber: 7\n    }, this), \"amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: event => setAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 196,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 197,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Fund Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 198,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onChange: handleFundSelect,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: 0,\n        children: \"NONE\"\n      }, -1, false, {\n        fileName: _jsxFileName,\n        lineNumber: 211,\n        columnNumber: 7\n      }, this), newFunds && newFunds.map((fund, index) => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 29\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 210,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 218,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load  Funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 219,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 193,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Deposit, \"UKe0coYNN/qzQWeav5HTKwdClFM=\");\n\n_c = Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js"],"names":["PublicKey","Transaction","TransactionInstruction","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","idsIndex","nu64","struct","u8","createKeyIfNotExists","findAssociatedTokenAddress","setWalletTransaction","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","FUND_PDA_DATA","INVESTOR_DATA","PLATFORM_DATA","TOKENS","devnet_pools","updatePoolPrices","createTokenAccountInstructions","IDS","Deposit","ids","amount","setAmount","fundPDA","setFundPDA","fundStateAccount","setFundStateAccount","funds","setFunds","newFunds","setNewFunds","walletProvider","s","handleDeposit","key","publicKey","console","log","alert","transaction","RPDA","findProgramAddress","Buffer","from","FPDA","associatedTokenAddress1","tokens","mintKey","baseTokenAccount","openOrdersLamports","getMinimumBalanceForRentExemption","span","signers","investerStateAccount","toBase58","fundPDAStateDataAcc","getAccountInfo","fundPDAState","decode","data","investors","index","i","length","y","default","message","dataLayout","alloc","encode","instruction","USDC","decimals","keys","pubkey","isSigner","isWritable","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","sign","handleFunds","managers","platformDataAcc","platformData","getProgramAccounts","filters","dataSize","fundData","map","f","account","manager","manager_account","PDA","toBuffer","fundState","createWithSeed","push","fundManager","newManagers","fundPDAData","handleFundSelect","event","target","value","fund"],"mappings":";;;AAAA,SAASA,SAAT,EAAoBC,WAApB,EAAiCC,sBAAjC,QAA+D,iBAA/D;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,WAAT,QAA4B,sBAA5B;AACA,SAASC,UAAT,EAAqBC,SAArB,EAAgCC,oBAAhC,EAAsDC,gBAAtD,EAAwEC,gBAAxE,EAA0FC,QAA1F,QAA0G,oBAA1G;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,EAAvB,QAAiC,eAAjC;AACA,SAASC,oBAAT,EAA+BC,0BAA/B,EAA2DC,oBAA3D,EAAiFC,sBAAjF,EAAyGC,sCAAzG,EAAiJC,wBAAjJ,QAAiL,eAAjL;AACA,SAASC,SAAT,EAAoBC,aAApB,EAAmCC,aAAnC,EAAkDC,aAAlD,QAAuE,yBAAvE;AACA,SAASC,MAAT,QAAuB,iBAAvB;AACA,SAASC,YAAT,QAA6B,gBAA7B;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAAUC,8BAAV,EAA0CC,GAA1C,QAAqD,qCAArD;;AAEA,OAAO,MAAMC,OAAO,GAAG,MAAM;AAAA;;AAE3B,QAAMC,GAAG,GAAEF,GAAG,CAAC,QAAD,CAAH,CAAclB,QAAd,CAAX;AAEA,QAAM,CAACqB,MAAD,EAASC,SAAT,IAAsB7B,QAAQ,CAAC,CAAD,CAApC;AACA,QAAM,CAAC8B,OAAD,EAAUC,UAAV,IAAwB/B,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAM,CAACgC,gBAAD,EAAmBC,mBAAnB,IAA0CjC,QAAQ,CAAC,EAAD,CAAxD;AACA,QAAM,CAACkC,KAAD,EAAQC,QAAR,IAAoBnC,QAAQ,CAAC,EAAD,CAAlC;AACA,QAAM,CAACoC,QAAD,EAAWC,WAAX,IAA0BrC,QAAQ,CAAC,EAAD,CAAxC;AAGA,QAAMsC,cAAc,GAAGrC,WAAW,CAACD,QAAZ,CAAqBuC,CAAC,IAAIA,CAAC,CAACD,cAA5B,CAAvB;;AAGA,QAAME,aAAa,GAAG,YAAY;AAEhC,UAAMC,GAAG,GAAGH,cAAH,aAAGA,cAAH,uBAAGA,cAAc,CAAEI,SAA5B;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAA4Cd,OAA5C,EAAoDE,gBAApD;;AACA,QAAI,CAACS,GAAL,EAAU;AACRI,MAAAA,KAAK,CAAC,gBAAD,CAAL;AACA;AACD;;AAAA;AAGD,UAAMC,WAAW,GAAG,IAAIjD,WAAJ,EAApB;AAEA,UAAMkD,IAAI,GAAG,MAAMnD,SAAS,CAACoD,kBAAV,CAA6B,CAACC,MAAM,CAACC,IAAP,CAAY,QAAZ,CAAD,CAA7B,EAAsD/C,SAAtD,CAAnB;AACA,UAAMgD,IAAI,GAAG,IAAIvD,SAAJ,CAAckC,OAAd,CAAb;AAEA,UAAMsB,uBAAuB,GAAG,MAAMrC,sCAAsC,CAACuB,cAAD,EAAiB,IAAI1C,SAAJ,CAAc+B,GAAG,CAAC0B,MAAJ,CAAW,CAAX,EAAcC,OAA5B,CAAjB,EAAuDP,IAAI,CAAC,CAAD,CAA3D,EAAgED,WAAhE,CAA5E;AACA,UAAMS,gBAAgB,GAAG,MAAM3C,0BAA0B,CAAC6B,GAAD,EAAM,IAAI7C,SAAJ,CAAc+B,GAAG,CAAC0B,MAAJ,CAAW,CAAX,EAAcC,OAA5B,CAAN,CAAzD,CAhBgC,CAkBhC;;AAEA,UAAME,kBAAkB,GACxB,MAAMtD,UAAU,CAACuD,iCAAX,CACJtC,aAAa,CAACuC,IADV,EAEJ,cAFI,CADN;AAKA,QAAIC,OAAO,GAAG,EAAd;AACA,UAAMC,oBAAoB,GAAG,MAAM5C,wBAAwB,CAACd,UAAD,EAAauC,GAAb,EAAkBtB,aAAa,CAACuC,IAAhC,EAAsCvD,SAAtC,EAAiDqD,kBAAjD,EAAqEV,WAArE,EAAkFa,OAAlF,CAA3D;AAGAhB,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBG,IAAI,CAAC,CAAD,CAAJ,CAAQc,QAAR,EAArB;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBO,IAAI,CAACU,QAAL,EAAtB,EA9BgC,CA+BhC;;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCW,gBAAnC;AACAZ,IAAAA,OAAO,CAACC,GAAR,CAAY,6BAAZ,EAA2CgB,oBAAoB,CAACC,QAArB,EAA3C;AACAlB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCzB,aAAa,CAACuC,IAA9C;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ,EAAyCQ,uBAAuB,CAACS,QAAxB,EAAzC,EAnCgC,CAqChC;AACA;;AAED,UAAMC,mBAAmB,GAAG,MAAM5D,UAAU,CAAC6D,cAAX,CAA0BZ,IAA1B,CAAlC;AACC,UAAMa,YAAY,GAAG9C,aAAa,CAAC+C,MAAd,CAAqBH,mBAAmB,CAACI,IAAzC,CAArB;AAEA,UAAMC,SAAS,GAAGH,YAAY,CAACG,SAA/B;AACE,QAAIC,KAAK,GAAC,CAAC,CAAX;;AACE,SAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAEF,SAAS,CAACG,MAA1B,EAAkCD,CAAC,EAAnC,EAAsC;AAClC,YAAME,CAAC,GAAGJ,SAAS,CAACE,CAAD,CAAT,CAAaR,QAAb,EAAV;;AACE,UAAIU,CAAC,IAAI3E,SAAS,CAAC4E,OAAV,CAAkBX,QAAlB,EAAT,EAAuC;AACnCO,QAAAA,KAAK,GAACC,CAAN;AAASA,QAAAA,CAAC,GAAC,IAAF;AACZ;AACN;;AACD,QAAGD,KAAK,IAAE,CAAC,CAAX,EAAa;AACX,YAAM;AAACK,QAAAA,OAAO,EAAG;AAAX,OAAN;AACD;;AAGL,UAAMC,UAAU,GAAGjE,MAAM,CAAC,CAACC,EAAE,CAAC,aAAD,CAAH,EAAoBF,IAAI,CAAC,QAAD,CAAxB,EAAoCE,EAAE,CAAC,OAAD,CAAtC,CAAD,CAAzB;AACA,UAAMwD,IAAI,GAAGjB,MAAM,CAAC0B,KAAP,CAAaD,UAAU,CAAChB,IAAxB,CAAb;AACAgB,IAAAA,UAAU,CAACE,MAAX,CACE;AACEC,MAAAA,WAAW,EAAE,CADf;AAEEjD,MAAAA,MAAM,EAAEA,MAAM,GAAK,MAAMP,MAAM,CAACyD,IAAP,CAAYC,QAFvC;AAGEX,MAAAA,KAAK,EAAGA;AAHV,KADF,EAMEF,IANF,EA1DgC,CAmEhC;AACA;AACA;;AACA,UAAMW,WAAW,GAAG,IAAI/E,sBAAJ,CAA2B;AAC7CkF,MAAAA,IAAI,EAAE,CACJ;AAAEC,QAAAA,MAAM,EAAE9B,IAAV;AAAgB+B,QAAAA,QAAQ,EAAE,KAA1B;AAAiCC,QAAAA,UAAU,EAAE;AAA7C,OADI,EACiD;AACrD;AAAEF,QAAAA,MAAM,EAAErB,oBAAV;AAAgCsB,QAAAA,QAAQ,EAAE,KAA1C;AAAiDC,QAAAA,UAAU,EAAE;AAA7D,OAFI,EAGJ;AAAEF,QAAAA,MAAM,EAAExC,GAAV;AAAeyC,QAAAA,QAAQ,EAAE,IAAzB;AAA+BC,QAAAA,UAAU,EAAE;AAA3C,OAHI,EAIJ;AAAEF,QAAAA,MAAM,EAAE1B,gBAAV;AAA4B2B,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OAJI,EAI6D;AACjE;AAAEF,QAAAA,MAAM,EAAE7B,uBAAV;AAAmC8B,QAAAA,QAAQ,EAAE,KAA7C;AAAoDC,QAAAA,UAAU,EAAE;AAAhE,OALI,EAKoE;AACxE;AAAEF,QAAAA,MAAM,EAAE3E,gBAAV;AAA4B4E,QAAAA,QAAQ,EAAE,KAAtC;AAA6CC,QAAAA,UAAU,EAAE;AAAzD,OANI,CADuC;AAS7ChF,MAAAA,SAT6C;AAU7C+D,MAAAA;AAV6C,KAA3B,CAApB;AAYApB,IAAAA,WAAW,CAACsC,GAAZ,CAAgBP,WAAhB;AACA/B,IAAAA,WAAW,CAACuC,QAAZ,GAAuB/C,cAAvB,aAAuBA,cAAvB,uBAAuBA,cAAc,CAAEI,SAAvC;AACA,QAAI4C,IAAI,GAAG,MAAMpF,UAAU,CAACqF,kBAAX,EAAjB;AACA5C,IAAAA,OAAO,CAACC,GAAR,CAAY,WAAZ,EAAyB0C,IAAzB;AACAxC,IAAAA,WAAW,CAAC0C,eAAZ,GAA8BF,IAAI,CAACG,SAAnC;AACA3C,IAAAA,WAAW,CAAC4C,UAAZ,CAAuBjD,GAAvB,EAA4BmB,oBAA5B;AACAd,IAAAA,WAAW,CAAC6C,WAAZ,CAAwB,GAAGhC,OAA3B;AACA,UAAMiC,IAAI,GAAG,MAAM9E,sBAAsB,CAACwB,cAAD,EAAiBQ,WAAjB,CAAzC;AACAH,IAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ,EAA+BgD,IAA/B;AACAjD,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAoC,yBAAwBgD,IAAK,EAAjE;AAGD,GA9FD;;AAgGA,QAAMC,WAAW,GAAG,YAAY;AAC9B,QAAIC,QAAQ,GAAG,EAAf;AACA,UAAMC,eAAe,GAAG,MAAM7F,UAAU,CAAC6D,cAAX,CAA0B3D,oBAA1B,CAA9B;AACA,UAAM4F,YAAY,GAAG5E,aAAa,CAAC6C,MAAd,CAAqB8B,eAAe,CAAC7B,IAArC,CAArB;AACAvB,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCoD,YAAhC;AAEA,QAAI9D,KAAK,GAAG,MAAMhC,UAAU,CAAC+F,kBAAX,CAA8B9F,SAA9B,EAAyC;AAAE+F,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,QAAQ,EAAElF,SAAS,CAACyC;AAAtB,OAAD;AAAX,KAAzC,CAAlB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAa,aAAb,EAA2BV,KAA3B;AACA,UAAMkE,QAAQ,GAAGlE,KAAK,CAACmE,GAAN,CAAUC,CAAC,IAAIrF,SAAS,CAACgD,MAAV,CAAiBqC,CAAC,CAACC,OAAF,CAAUrC,IAA3B,CAAf,CAAjB;AAEAvB,IAAAA,OAAO,CAACC,GAAR,CAAa,mBAAb,EAAiCwD,QAAjC;;AAEA,SAAI,IAAI/B,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC+B,QAAQ,CAAC9B,MAAxB,EAAgCD,CAAC,EAAjC,EAAqC;AACnC,UAAImC,OAAO,GAAGJ,QAAQ,CAAC/B,CAAD,CAAR,CAAYoC,eAA1B;AACA,UAAIC,GAAG,GAAG,MAAM9G,SAAS,CAACoD,kBAAV,CAA6B,CAACwD,OAAO,CAACG,QAAR,EAAD,CAA7B,EAAmDxG,SAAnD,CAAhB;AACA,UAAIyG,SAAS,GAAG,MAAMhH,SAAS,CAACiH,cAAV,CAAyBL,OAAzB,EAAkCnG,gBAAlC,EAAoDF,SAApD,CAAtB;AACAwC,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb,EAAsB8D,GAAtB;AACAZ,MAAAA,QAAQ,CAACgB,IAAT,CAAc;AACZhF,QAAAA,OAAO,EAAE4E,GAAG,CAAC,CAAD,CAAH,CAAO7C,QAAP,EADG;AAEZkD,QAAAA,WAAW,EAAEP,OAAO,CAAC3C,QAAR,EAFD;AAGZ7B,QAAAA,gBAAgB,EAAE4E,SAAS,CAAC/C,QAAV;AAHN,OAAd;AAKD;;AACDlB,IAAAA,OAAO,CAACC,GAAR,CAAYkD,QAAZ;AACA3D,IAAAA,QAAQ,CAAC2D,QAAD,CAAR,CAxB8B,CAyB9B;;AACA,UAAMkB,WAAW,GAAG,EAApB;AACA,QAAI5E,QAAQ,GAAG,MAAMlC,UAAU,CAAC+F,kBAAX,CAA8B9F,SAA9B,EAAyC;AAAE+F,MAAAA,OAAO,EAAE,CAAC;AAAEC,QAAAA,QAAQ,EAAEjF,aAAa,CAACwC;AAA1B,OAAD;AAAX,KAAzC,CAArB;AACAf,IAAAA,OAAO,CAACC,GAAR,CAAa,gBAAb,EAA8BR,QAA9B;AACA,UAAM6E,WAAW,GAAG7E,QAAQ,CAACiE,GAAT,CAAaC,CAAC,IAAIpF,aAAa,CAAC+C,MAAd,CAAqBqC,CAAC,CAACC,OAAF,CAAUrC,IAA/B,CAAlB,CAApB;AAEAvB,IAAAA,OAAO,CAACC,GAAR,CAAa,kBAAb,EAAgCqE,WAAhC;;AAEA,SAAI,IAAI5C,CAAC,GAAC,CAAV,EAAaA,CAAC,GAAC4C,WAAW,CAAC3C,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,UAAImC,OAAO,GAAGS,WAAW,CAAC5C,CAAD,CAAX,CAAeoC,eAA7B;AACA,UAAIC,GAAG,GAAG,MAAM9G,SAAS,CAACoD,kBAAV,CAA6B,CAACwD,OAAO,CAACG,QAAR,EAAD,CAA7B,EAAmDxG,SAAnD,CAAhB;AACA,UAAIyG,SAAS,GAAG,MAAMhH,SAAS,CAACiH,cAAV,CAAyBL,OAAzB,EAAkCnG,gBAAlC,EAAoDF,SAApD,CAAtB;AACAwC,MAAAA,OAAO,CAACC,GAAR,CAAa,QAAb,EAAsB8D,GAAtB;AACAM,MAAAA,WAAW,CAACF,IAAZ,CAAiB;AACfhF,QAAAA,OAAO,EAAE4E,GAAG,CAAC,CAAD,CAAH,CAAO7C,QAAP,EADM;AAEfkD,QAAAA,WAAW,EAAEP,OAAO,CAAC3C,QAAR,EAFE;AAGf7B,QAAAA,gBAAgB,EAAE4E,SAAS,CAAC/C,QAAV;AAHH,OAAjB;AAKD;;AACDlB,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA6BoE,WAA7B;AACA3E,IAAAA,WAAW,CAAC2E,WAAD,CAAX;AACD,GA9CD;;AAgDA,QAAME,gBAAgB,GAAG,MAAMC,KAAN,IAAgB;AAEvCxE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BuE,KAAK,CAACC,MAAN,CAAaC,KAA5C,EAAmDF,KAAK,CAACC,MAAzD,EAAiED,KAAjE;AAEAxE,IAAAA,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAA+BuE,KAAK,CAACC,MAAN,CAAaC,KAA5C;AACAtF,IAAAA,UAAU,CAACoF,KAAK,CAACC,MAAN,CAAaC,KAAd,CAAV;AACAxE,IAAAA,KAAK,CAAC,kBAAD,EAAoBsE,KAAK,CAACC,MAAN,CAAaC,KAAjC,CAAL;AACA1E,IAAAA,OAAO,CAACC,GAAR,CAAa,uBAAb,EAAqCd,OAArC,EAPuC,CAUvC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACD,GAnBD;;AAqBA,sBACE;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA,4BACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,iBAEc,GAFd,eAGE;AAAO,MAAA,IAAI,EAAC,QAAZ;AAAqB,MAAA,KAAK,EAAEF,MAA5B;AAAoC,MAAA,QAAQ,EAAGuF,KAAD,IAAWtF,SAAS,CAACsF,KAAK,CAACC,MAAN,CAAaC,KAAd;AAAlE;AAAA;AAAA;AAAA;AAAA,YAHF,eAIE;AAAA;AAAA;AAAA;AAAA,YAJF,eAKE;AAAO,MAAA,OAAO,EAAC,OAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YALF,eAiBE;AAAQ,MAAA,IAAI,EAAC,OAAb;AAAqB,MAAA,KAAK,EAAG,OAA7B;AAAsC,MAAA,QAAQ,EAAEH,gBAAhD;AAAA,8BACA;AAAiB,QAAA,KAAK,EAAE,CAAxB;AAAA;AAAA,SAAa,CAAC,CAAd;AAAA;AAAA;AAAA;AAAA,cADA,EAEQ9E,QAAQ,IACNA,QAAQ,CAACiE,GAAT,CAAa,CAACiB,IAAD,EAAMlD,KAAN,KAAgB;AACzB,4BAAQ;AAAoB,UAAA,KAAK,EAAEkD,IAAI,CAACxF,OAAhC;AAAA,oBAA0CwF,IAAI,CAACxF;AAA/C,WAAasC,KAAb;AAAA;AAAA;AAAA;AAAA,gBAAR;AACH,OAFD,CAHV;AAAA;AAAA;AAAA;AAAA;AAAA,YAjBF,eAyBE;AAAQ,MAAA,OAAO,EAAE5B,aAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAzBF,eA0BE;AAAQ,MAAA,OAAO,EAAEqD,WAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YA1BF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AA+BD,CAlNM;;GAAMnE,O;;KAAAA,O","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA } from '../utils/programLayouts';\nimport { TOKENS } from '../utils/tokens'\nimport { devnet_pools } from '../utils/pools'\nimport { updatePoolPrices } from './updatePrices';\nimport {  createTokenAccountInstructions, IDS } from '@blockworks-foundation/mango-client';\n\nexport const Deposit = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [fundStateAccount, setFundStateAccount] = useState('');\n  const [funds, setFunds] = useState([]);\n  const [newFunds, setNewFunds] = useState([])\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n    console.log(\"**fundPDA,fundStateAccount:: \",fundPDA,fundStateAccount)\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n  \n\n    const transaction = new Transaction()\n\n    const RPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const FPDA = new PublicKey(fundPDA);\n\n    const associatedTokenAddress1 = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), RPDA[0], transaction);    \n    const baseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n\n    // const investerStateAccount = await createKeyIfNotExists(walletProvider, null, programId, FPDA.toBase58().substr(0, 31), INVESTOR_DATA.span, transaction)\n    \n    const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      INVESTOR_DATA.span,\n      'singleGossip'\n    )\n    let signers = []\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    \n    \n    console.log(\"RPDA:\", RPDA[0].toBase58())\n    console.log(\"FPDA: \", FPDA.toBase58())\n    // console.log(\"fundStateAccountRead:: \", fundStateAccount)\n    console.log(\"baseTokenAccount:: \", baseTokenAccount)\n    console.log(\"investorStateAccountRead:: \", investerStateAccount.toBase58())\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n    console.log(\"associatedTokenaccount:: \", associatedTokenAddress1.toBase58())\n\n    // const fundStateDataAcc = await connection.getAccountInfo(new PublicKey(fundStateAccount))\n    // const fundState = FUND_DATA.decode(fundStateDataAcc.data);\n\n   const fundPDAStateDataAcc = await connection.getAccountInfo(FPDA)\n    const fundPDAState = FUND_PDA_DATA.decode(fundPDAStateDataAcc.data);\n\n    const investors = fundPDAState.investors;\n      let index=-1;\n        for(let i=0; i< investors.length; i++){\n            const y = investors[i].toBase58();\n              if( y == PublicKey.default.toBase58()) {\n                  index=i; i=1111;\n              }\n        }\n        if(index==-1){\n          throw {message : \"MAX INVESTOR ACCOUNTS REACHED\"};\n        }\n  \n\n    const dataLayout = struct([u8('instruction'), nu64('amount'), u8('index')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** TOKENS.USDC.decimals),\n        index : index\n      },\n      data\n    )\n\n    // DdzREMVFg6pa5825HBKVzeCrEi8EJiREfb8UrxSZB64w\n    // HUHuQCZUvxCiuFg54vRStrXSbCFeBhmXRqSuR5eEVB6o\n    // HW18fiAHKzs7ZSaT5ibAhnSWVde25sazTSbMzss4Fcty\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: FPDA, isSigner: false, isWritable: true }, //fund State Account\n        { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: baseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n        { pubkey: associatedTokenAddress1, isSigner: false, isWritable: true }, // Router Base Token Account\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n      ],\n      programId,\n      data\n    });\n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key, investerStateAccount)\n    transaction.partialSign(...signers)\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n   \n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n    const platformDataAcc = await connection.getAccountInfo(platformStateAccount)\n    const platformData = PLATFORM_DATA.decode(platformDataAcc.data)\n    console.log(\"platformData :: \", platformData)\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n    //  =============================\n    const newManagers = [];\n    let newFunds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_PDA_DATA.span }] });\n    console.log(`newFunds :::: `, newFunds)\n    const fundPDAData = newFunds.map(f => FUND_PDA_DATA.decode(f.account.data))\n\n    console.log(`fundPDAData ::: `, fundPDAData)\n    \n    for(let i=0; i<fundPDAData.length; i++) {\n      let manager = fundPDAData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      newManagers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n        fundStateAccount: fundState.toBase58()\n      });\n    }\n    console.log(\"newManagers ::\",newManagers)\n    setNewFunds(newManagers);\n  }\n\n  const handleFundSelect = async(event) => {\n  \n    console.log(\"seleecting fund \",event.target.value ,event.target ,event)\n\n    console.log(\"seleecting fund \",event.target.value )\n    setFundPDA(event.target.value);\n    alert(\"seleecting fund \",event.target.value )\n    console.log(`setting fundPDA :::: `, fundPDA)\n\n\n    // funds.forEach(fund => {\n    //   if (fund.fundPDA == event.target.value) \n    //   {\n    //     setFundStateAccount(fund.fundStateAccount)\n    //    console.log(\"set fundStateAcoount:\",fund.fundStateAccount)\n    //   }\n    // });\n    \n    // console.log(`setting fundStateAccount :::: `, fundStateAccount)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Investor Fund Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n\n      {/* <select name=\"funds\" width = \"100px\"  onChange={handleFundSelect}>\n      <option key={-1} value={0}>NONE</option>\n            { funds && \n                funds.map((fund,index) => {\n                    return (<option key={index} value={fund.fundPDA}>{fund.fundPDA}</option>)\n                })\n            }\n      </select>\n      <br/> */}\n      <select name=\"funds\" width = \"100px\"  onChange={handleFundSelect}>\n      <option key={-1} value={0}>NONE</option>\n            { newFunds && \n                newFunds.map((fund,index) => {\n                    return (<option key={index} value={fund.fundPDA}>{fund.fundPDA}</option>)\n                })\n            }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load  Funds</button>\n      \n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}