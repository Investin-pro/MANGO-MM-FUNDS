{"ast":null,"code":"var _jsxFileName = \"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js\",\n    _s = $RefreshSig$();\n\nimport { PublicKey, Transaction, TransactionInstruction, create } from '@solana/web3.js';\nimport React, { useState } from 'react';\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const Deposit = () => {\n  _s();\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0];\n\n  const handleDeposit = async () => {\n    const key = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\");\n      return;\n    }\n\n    ;\n    console.log('FundPDA::', fundPDA);\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA));\n    let fundState = FUND_DATA.decode(fundStateInfo.data);\n    console.log(\"fundState:: \", fundState);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId));\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey));\n    console.log(\"mango group:: \", mangoGroup);\n    const transaction = new Transaction();\n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(INVESTOR_DATA.span, 'singleGossip');\n    let signers = [];\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n    console.log(\"account size::: \", INVESTOR_DATA.span);\n    const dataLayout = struct([u32('instruction'), nu64('amount')]);\n    const data = Buffer.alloc(dataLayout.span);\n    dataLayout.encode({\n      instruction: 1,\n      amount: amount * 10 ** ids.tokens[0].decimals\n    }, data);\n    const instruction = new TransactionInstruction({\n      keys: [{\n        pubkey: new PublicKey(fundPDA),\n        isSigner: false,\n        isWritable: true\n      }, //fund State Account\n      {\n        pubkey: investerStateAccount,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: key,\n        isSigner: true,\n        isWritable: true\n      }, {\n        pubkey: investorBaseTokenAccount,\n        isSigner: false,\n        isWritable: true\n      }, // Investor Base Token Account\n      {\n        pubkey: fundState.usdc_vault_key,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: true\n      }],\n      programId,\n      data\n    });\n    transaction.add(instruction);\n    transaction.feePayer = walletProvider === null || walletProvider === void 0 ? void 0 : walletProvider.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key, investerStateAccount);\n    transaction.partialSign(...signers);\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign); // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n    // transaction.add(deposit_instruction);\n    // transaction.feePayer = key;\n    // let hash = await connection.getRecentBlockhash();\n    // console.log(\"blockhash\", hash);\n    // transaction.recentBlockhash = hash.blockhash;\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // const investorDataAcc = await connection.getAccountInfo(investerStateAccount);\n    // const investorData = INVESTOR_DATA.decode(investorDataAcc.data);\n  };\n\n  const handleFunds = async () => {\n    let managers = [];\n    let funds = await connection.getProgramAccounts(programId, {\n      filters: [{\n        dataSize: FUND_DATA.span\n      }]\n    });\n    console.log(`funds :::: `, funds);\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data));\n    console.log(`decodedFunds ::: `, fundData);\n\n    for (let i = 0; i < fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA);\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58()\n      });\n    }\n\n    console.log(managers);\n    setFunds(managers);\n  };\n\n  const handleFundSelect = async event => {\n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-div\",\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 7\n    }, this), \"amount ::: \", ' ', /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"number\",\n      value: amount,\n      onChange: event => setAmount(event.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 139,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"funds\",\n      children: \"Select Fund Address:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 141,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      name: \"funds\",\n      width: \"100px\",\n      onClick: handleFundSelect,\n      children: funds.map(fund => {\n        return /*#__PURE__*/_jsxDEV(\"option\", {\n          value: fund.fundPDA,\n          children: fund.fundPDA\n        }, fund.fundPDA, false, {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 21\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleDeposit,\n      children: \"Deposit\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleFunds,\n      children: \"Load Funds\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 136,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Deposit, \"GaIH/yOVWzNCEslfo8ZVr4a8CU4=\");\n\n_c = Deposit;\n\nvar _c;\n\n$RefreshReg$(_c, \"Deposit\");","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js"],"names":["PublicKey","Transaction","TransactionInstruction","create","React","useState","GlobalState","connection","programId","platformStateAccount","FUND_ACCOUNT_KEY","TOKEN_PROGRAM_ID","nu64","struct","u32","createKeyIfNotExists","findAssociatedTokenAddress","signAndSendTransaction","createAssociatedTokenAccountIfNotExist","createAccountInstruction","FUND_DATA","INVESTOR_DATA","IDS","MangoClient","Deposit","amount","setAmount","fundPDA","setFundPDA","funds","setFunds","walletProvider","s","ids","handleDeposit","key","publicKey","alert","console","log","fundStateInfo","getAccountInfo","fundState","decode","data","client","mangoProgramId","mangoGroup","getMangoGroup","transaction","openOrdersLamports","getMinimumBalanceForRentExemption","span","signers","investerStateAccount","investorBaseTokenAccount","tokens","mintKey","dataLayout","Buffer","alloc","encode","instruction","decimals","keys","pubkey","isSigner","isWritable","usdc_vault_key","add","feePayer","hash","getRecentBlockhash","recentBlockhash","blockhash","setSigners","partialSign","sign","handleFunds","managers","getProgramAccounts","filters","dataSize","fundData","map","f","account","i","length","manager","manager_account","PDA","findProgramAddress","toBuffer","createWithSeed","push","toBase58","fundManager","handleFundSelect","event","target","value","fund"],"mappings":"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","sourcesContent":["import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { IDS, MangoClient } from '@blockworks-foundation/mango-client';\n\nexport const Deposit = () => {\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    console.log('FundPDA::', fundPDA)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      INVESTOR_DATA.span,\n      'singleGossip'\n    )\n    let signers = []\n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('amount')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** ids.tokens[0].decimals)\n      },\n      data\n    )\n\n    const instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n        { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n        { pubkey: key, isSigner: true, isWritable: true },\n        { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n        { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true }\n      ],\n      programId,\n      data\n    });\n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key, investerStateAccount);\n    transaction.partialSign(...signers)\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    // const transaction2 = await setWalletTransaction(instruction, walletProvider?.publicKey);\n    // const signature = await signAndSendTransaction(walletProvider, transaction2);\n    // let result = await connection.confirmTransaction(signature, \"confirmed\");\n    // console.log(\"tx:: \", signature)\n    \n    // transaction.add(deposit_instruction);\n    // transaction.feePayer = key;\n    // let hash = await connection.getRecentBlockhash();\n    // console.log(\"blockhash\", hash);\n    // transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n\n\n  // const investorDataAcc = await connection.getAccountInfo(investerStateAccount);\n  // const investorData = INVESTOR_DATA.decode(investorDataAcc.data);\n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n  const handleFundSelect = async(event) => {\n  \n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `, fundPDA)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\n        {\n          funds.map((fund) => {\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load Funds</button>\n    </div>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}