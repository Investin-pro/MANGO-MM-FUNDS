{"ast":null,"code":"// import { Account, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\n// import React, { useState } from 'react'\n// import { GlobalState } from '../store/globalState';\n// import { connection, FUND_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../utils/constants';\n// import { struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\n// import { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3';\n// import { FUND_DATA } from '../utils/programLayouts';\n// import { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\n// export const MangoPlaceOrder = () => {\n//     const [size, setSize] = useState(0);\n//     const [price, setPrice] = useState(0);\n//     const [index, setIndex] = useState(0);\n//     const [side, setSide] = useState('');\n//     const walletProvider = GlobalState.useState(s => s.walletProvider);\n//     const ids = IDS['groups'][0]\n//     const handleMangoDeposit = async () => {\n//     const key = walletProvider?.publicKey;\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const transaction = new Transaction()\n//     let fundStateInfo = await connection.getAccountInfo((fundPDA))\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//       let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//       console.log(\"mango group:: \", mangoGroup)\n//       let mangoAcc = await client.getMangoAccount(new PublicKey('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX'), ids.serumProgramId)\n//       console.log(\"manogACc:: \", mangoAcc)\n//       let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//       let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//       console.log(\"nodebank:: \", nodeBank)\n//     const dataLayout = struct([u32('instruction'), nu64('quantity')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 6,\n//         quantity: size * 10** ids.tokens[0].decimals\n//       },\n//       data\n//     )\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: fundPDA, isSigner: false, isWritable: true },\n//         { pubkey: key, isSigner: true, isWritable: true },\n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: false },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundState.fund_pda, isSigner: false, isWritable: false },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n//         { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//         { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//         { pubkey: fundState.vault_key, isSigner: false, isWritable: true },\n//       ],\n//       programId,\n//       data\n//     });\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n//   }\n//     const handleMangoPlace = async () => {\n//         const key = walletProvider?.publicKey;\n//       if (!key ) {\n//         alert(\"connect wallet\")\n//         return;\n//       };\n//       const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//       let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n//     console.log(\"vault_balance:: \", fundState.vault_balance.toNumber()/ 10 ** ids.tokens[0].decimals)\n//     let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//     let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//     console.log(\"nodebank:: \", nodeBank)\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//     let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//     let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n//     // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n//     console.log(\"mangoAcc:: \", mangoAcc)\n//     console.log(\"mangogroup:: \", mangoGroup)\n//     let mangoCache = await mangoGroup.loadCache(connection)\n//     let perpMarket = await client.getPerpMarket( mangoGroup.perpMarkets[1].perpMarket,  mangoGroup.tokens[1].decimals, mangoGroup.tokens[15].decimals )\n//     console.log(\"perpmarket:: \", perpMarket)\n//     console.log(\"wallet account:: \", walletProvider)\n//     let rootBanks = await mangoGroup.loadRootBanks(connection)\n//     // try {\n//     //   let tx = await client.settlePnl(mangoGroup, mangoCache, mangoAcc, perpMarket, rootBanks[15], mangoCache.priceCache[1].price, walletProvider)\n//     // }\n//     // catch (e) {\n//     //   console.error(\"yooo\", e)\n//     // }\n//     // //console.log(\"tx:: \", tx)\n//     console.log(\"mangocache:: \", mangoCache)\n//     const transaction = new Transaction()\n//     const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 8,\n//         price: price,\n//         quantity: size * 10**4,\n//         client_order_id: 333,\n//         side: 0,\n//         order_type: 0\n//       },\n//       data\n//     )\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: key, isSigner: true, isWritable: true },\n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundPDA, isSigner: false, isWritable: true },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n//         { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n//       ],\n//       programId,\n//       data\n//     });\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n//     }\n//     const handleMangoClosePosition = async () => {\n//       const key = walletProvider?.publicKey;\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//     let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n//   // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n//   let mangoCache = await mangoGroup.loadCache(connection)\n//   let price = (mangoCache.priceCache[1].price * 10)\n//   let price_adj = mangoAcc.perpAccounts[1].basePosition > 0 ? price * 0.95 : price * 1.05\n//   console.log(\"mangoCAche:: \", mangoCache)\n//   console.log(\"mangoAcc:: \", mangoAcc)\n//   console.log(\"mangogroup:: \", mangoGroup)\n//   const transaction = new Transaction()\n//   const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 8,\n//       price: price_adj,\n//       quantity: Math.abs(mangoAcc.perpAccounts[1].basePosition),\n//       client_order_id: 333,\n//       side: mangoAcc.perpAccounts[1].basePosition < 0 ? 0: 1,\n//       order_type: 0\n//     },\n//     data\n//   )\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: key, isSigner: true, isWritable: true },\n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n//       { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n//     ],\n//     programId,\n//     data\n//   });\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n//   }\n//     const handleMangoWithdraw = async () => {\n//       const key = walletProvider?.publicKey;\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//     let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//     let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//     console.log(\"mango group:: \", mangoGroup)\n//     let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//     let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//     console.log(\"nodebank:: \", nodeBank)\n//     const transaction = new Transaction()\n//     const dataLayout = struct([u32('instruction'), nu64('quantity')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 7,\n//         quantity: size * 10**ids.tokens[0].decimals\n//       },\n//       data\n//     )\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: key, isSigner: true, isWritable: true },\n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n//         { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//         { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Fund Vault\n//         { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n//         { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//         { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n//       ],\n//       programId,\n//       data\n//     });\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n//   }\n//   const handleMangoCancelPerp = async () => {\n//     const key = walletProvider?.publicKey;\n//   if (!key ) {\n//     alert(\"connect wallet\")\n//     return;\n//   };\n//   const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//   let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   console.log(\"mango group:: \", mangoGroup)\n//   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//   console.log(\"nodebank:: \", nodeBank)\n//   const transaction = new Transaction()\n//   const dataLayout = struct([u32('instruction'), nu64('client_order_id'), u8('invalid_ok')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 9,\n//       client_order_id: 333,\n//       invalid_ok: 0,\n//     },\n//     data\n//   )\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: fundPDA, isSigner: false, isWritable: true },\n//       { pubkey: key, isSigner: true, isWritable: true },\n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//     ],\n//     programId,\n//     data\n//   });\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n// }\n//   const handleMangoRedeem = async () => {\n//     const key = walletProvider?.publicKey;\n//   if (!key ) {\n//     alert(\"connect wallet\")\n//     return;\n//   };\n//   const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//   let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   console.log(\"mango group:: \", mangoGroup)\n//   let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey))\n//   let perpMkt = PerpMarketLayout.decode(perpAcc.data)\n//   console.log(\"perpmkt:: \", perpMkt)\n//   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n//   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//   console.log(\"nodebank:: \", nodeBank)\n//   const transaction = new Transaction()\n//   const managerMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\n//   const dataLayout = struct([u32('instruction')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 4\n//     },\n//     data\n//   )\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: key, isSigner: true, isWritable: true },\n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//       { pubkey: fundState.mngo_vault_key, isSigner: false, isWritable: true },\n//       { pubkey: managerMngoAccount , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: false },\n//       { pubkey: perpMkt.mngoVault, isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.tokens[1].rootKey), isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]), isSigner: false, isWritable: true },\n//       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n//       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n//     ],\n//     programId,\n//     data\n//   });\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n// }\n//     return (\n//         <div className=\"form-div\">\n//             <h4>Mango Place</h4>\n//             Size ::: {' '}\n//             <input type=\"number\" value={size} onChange={(event) => setSize(event.target.value)} />\n//             <br />\n//             Price ::: {' '}\n//             <input type=\"number\" value={price} onChange={(event) => setPrice(event.target.value)} />\n//             <br />\n//             <label htmlFor=\"side\">Buy/Sell</label>\n//             <select name=\"side\" width = \"100px\" onClick={(event) => setSide(event.target.value)}>\n//             <option value=\"buy\">Buy</option>\n//             <option value=\"sell\">Sell</option>\n//             </select>\n//             <select name=\"side\" width = \"100px\" onClick={(event) => setIndex(event.target.value)}>\n//             <option value={0}>BTC</option>\n//             <option value={1}>ETH</option>\n//             <option value={2}>SOL</option>\n//             <option value={3}>SRM</option>\n//             </select>\n//           <button onClick={handleMangoPlace}>Mango Open Position</button>\n//           <br />\n//           <button onClick={handleMangoDeposit}>Deposit </button>\n//           <button onClick={handleMangoWithdraw}>Withdraw </button>\n//           <br />\n//           <button onClick={handleMangoClosePosition}>Mango Close </button>\n//           <br />\n//           <button onClick={handleMangoRedeem}>Redeem Mngo </button>\n//           <br />\n//           <button onClick={handleMangoCancelPerp}>Mango Cancel perp </button>\n//         </div>\n//     )\n// }","map":{"version":3,"sources":["/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA","sourcesContent":["// import { Account, PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\n// import React, { useState } from 'react'\n// import { GlobalState } from '../store/globalState';\n// import { connection, FUND_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from '../utils/constants';\n// import { struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\n// import { createAssociatedTokenAccountIfNotExist, signAndSendTransaction } from '../utils/web3';\n// import { FUND_DATA } from '../utils/programLayouts';\n\n\n// import { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\n\n// export const MangoPlaceOrder = () => {\n//     const [size, setSize] = useState(0);\n//     const [price, setPrice] = useState(0);\n//     const [index, setIndex] = useState(0);\n//     const [side, setSide] = useState('');\n    \n//     const walletProvider = GlobalState.useState(s => s.walletProvider);\n//     const ids = IDS['groups'][0]\n\n    \n\n//     const handleMangoDeposit = async () => {\n    \n//     const key = walletProvider?.publicKey;\n\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const transaction = new Transaction()\n\n\n\n//     let fundStateInfo = await connection.getAccountInfo((fundPDA))\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//       let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//       console.log(\"mango group:: \", mangoGroup)\n\n//       let mangoAcc = await client.getMangoAccount(new PublicKey('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX'), ids.serumProgramId)\n//       console.log(\"manogACc:: \", mangoAcc)\n//       let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//       let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//       console.log(\"nodebank:: \", nodeBank)\n\n//     const dataLayout = struct([u32('instruction'), nu64('quantity')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 6,\n//         quantity: size * 10** ids.tokens[0].decimals\n//       },\n//       data\n//     )\n\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: fundPDA, isSigner: false, isWritable: true },\n//         { pubkey: key, isSigner: true, isWritable: true },\n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: false },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundState.fund_pda, isSigner: false, isWritable: false },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n//         { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//         { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//         { pubkey: fundState.vault_key, isSigner: false, isWritable: true },\n//       ],\n//       programId,\n//       data\n//     });\n\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n    \n//   }\n\n//     const handleMangoPlace = async () => {\n        \n    \n//         const key = walletProvider?.publicKey;\n\n//       if (!key ) {\n//         alert(\"connect wallet\")\n//         return;\n//       };\n//       const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n  \n//       let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n\n//     console.log(\"vault_balance:: \", fundState.vault_balance.toNumber()/ 10 ** ids.tokens[0].decimals)\n//     let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//     let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//     console.log(\"nodebank:: \", nodeBank)\n\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//     let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//     let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n//     // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n//     console.log(\"mangoAcc:: \", mangoAcc)\n//     console.log(\"mangogroup:: \", mangoGroup)\n//     let mangoCache = await mangoGroup.loadCache(connection)\n\n//     let perpMarket = await client.getPerpMarket( mangoGroup.perpMarkets[1].perpMarket,  mangoGroup.tokens[1].decimals, mangoGroup.tokens[15].decimals )\n\n//     console.log(\"perpmarket:: \", perpMarket)\n\n//     console.log(\"wallet account:: \", walletProvider)\n    \n//     let rootBanks = await mangoGroup.loadRootBanks(connection)\n//     // try {\n//     //   let tx = await client.settlePnl(mangoGroup, mangoCache, mangoAcc, perpMarket, rootBanks[15], mangoCache.priceCache[1].price, walletProvider)\n//     // }\n//     // catch (e) {\n//     //   console.error(\"yooo\", e)\n//     // }\n//     // //console.log(\"tx:: \", tx)\n\n\n\n//     console.log(\"mangocache:: \", mangoCache)\n\n//     const transaction = new Transaction()\n  \n//     const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 8,\n//         price: price,\n//         quantity: size * 10**4,\n//         client_order_id: 333,\n//         side: 0,\n//         order_type: 0\n//       },\n//       data\n//     )\n\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: key, isSigner: true, isWritable: true },\n        \n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundPDA, isSigner: false, isWritable: true },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n\n//         { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//         { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n\n//         { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n\n//       ],\n//       programId,\n//       data\n//     });\n\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n\n//     }\n\n//     const handleMangoClosePosition = async () => {\n        \n    \n//       const key = walletProvider?.publicKey;\n\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n\n//     let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   let mangoAcc = await client.getMangoAccount(fundState.mango_account, ids.serumProgramId)\n//   // let mangoAcc = await client.getMangoAccount(new PublicKey('9rzuDYREjQ1UoiXgU2gJmixik5J2vSn5DoWitzKAmeJm'), ids.serumProgramId)\n\n//   let mangoCache = await mangoGroup.loadCache(connection)\n//   let price = (mangoCache.priceCache[1].price * 10)\n//   let price_adj = mangoAcc.perpAccounts[1].basePosition > 0 ? price * 0.95 : price * 1.05\n//   console.log(\"mangoCAche:: \", mangoCache)\n\n//   console.log(\"mangoAcc:: \", mangoAcc)\n//   console.log(\"mangogroup:: \", mangoGroup)\n \n//   const transaction = new Transaction()\n\n//   const dataLayout = struct([u32('instruction'), ns64('price'), ns64('quantity'), nu64('client_order_id'), u8('side'), u8('order_type')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 8,\n//       price: price_adj,\n//       quantity: Math.abs(mangoAcc.perpAccounts[1].basePosition),\n//       client_order_id: 333,\n//       side: mangoAcc.perpAccounts[1].basePosition < 0 ? 0: 1,\n//       order_type: 0\n//     },\n//     data\n//   )\n\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: key, isSigner: true, isWritable: true },\n      \n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: true },\n\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey) , isSigner: false, isWritable: true },\n\n//       { pubkey: SYSTEM_PROGRAM_ID , isSigner: false, isWritable: false },\n\n//     ],\n//     programId,\n//     data\n//   });\n\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n\n//   }\n\n//     const handleMangoWithdraw = async () => {\n        \n    \n//       const key = walletProvider?.publicKey;\n\n//     if (!key ) {\n//       alert(\"connect wallet\")\n//       return;\n//     };\n//     const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//     let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//     let fundState = FUND_DATA.decode(fundStateInfo.data)\n//     console.log(\"fundState:: \", fundState)\n\n//     let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//     let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//     console.log(\"mango group:: \", mangoGroup)\n\n//     let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//     let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//     console.log(\"nodebank:: \", nodeBank)\n\n//     const transaction = new Transaction()\n\n//     const dataLayout = struct([u32('instruction'), nu64('quantity')])\n//     const data = Buffer.alloc(dataLayout.span)\n//     dataLayout.encode(\n//       {\n//         instruction: 7,\n//         quantity: size * 10**ids.tokens[0].decimals\n//       },\n//       data\n//     )\n\n//     const instruction = new TransactionInstruction({\n//       keys: [\n//         { pubkey: key, isSigner: true, isWritable: true },\n//         { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n//         { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//         { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//         { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n//         { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: false },\n//         { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\n//         { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//         { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Fund Vault\n//         { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n//         { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//         { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n//       ],\n//       programId,\n//       data\n//     });\n\n//     transaction.add(instruction);\n//     console.log(`transaction ::: `, transaction)\n//     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//     transaction.feePayer = key;\n//     let hash = await connection.getRecentBlockhash(\"finalized\");\n//     console.log(\"blockhash\", hash);\n//     transaction.recentBlockhash = hash.blockhash;\n\n//     const sign = await signAndSendTransaction(walletProvider, transaction);\n//     console.log(\"tx::: \", sign)\n\n//   }\n\n//   const handleMangoCancelPerp = async () => {\n        \n    \n//     const key = walletProvider?.publicKey;\n\n//   if (!key ) {\n//     alert(\"connect wallet\")\n//     return;\n//   };\n//   const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//   let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   console.log(\"mango group:: \", mangoGroup)\n\n//   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n//   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//   console.log(\"nodebank:: \", nodeBank)\n\n//   const transaction = new Transaction()\n\n//   const dataLayout = struct([u32('instruction'), nu64('client_order_id'), u8('invalid_ok')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 9,\n//       client_order_id: 333,\n//       invalid_ok: 0,\n//     },\n//     data\n//   )\n\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: fundPDA, isSigner: false, isWritable: true },\n//       { pubkey: key, isSigner: true, isWritable: true },\n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey) , isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey) , isSigner: false, isWritable: true },\n//     ],\n//     programId,\n//     data\n//   });\n\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n\n// }\n\n//   const handleMangoRedeem = async () => {\n        \n    \n//     const key = walletProvider?.publicKey;\n\n//   if (!key ) {\n//     alert(\"connect wallet\")\n//     return;\n//   };\n//   const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId)[0];\n//   let fundStateInfo = await connection.getAccountInfo(fundPDA)\n//   let fundState = FUND_DATA.decode(fundStateInfo.data)\n//   console.log(\"fundState:: \", fundState)\n\n//   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n//   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n//   console.log(\"mango group:: \", mangoGroup)\n\n//   let perpAcc = await connection.getAccountInfo(new PublicKey(ids.perpMarkets[0].publicKey))\n//   let perpMkt = PerpMarketLayout.decode(perpAcc.data)\n//   console.log(\"perpmkt:: \", perpMkt)\n\n//   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[1].nodeKeys[0]))\n//   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n//   console.log(\"nodebank:: \", nodeBank)\n\n//   const transaction = new Transaction()\n\n//   const managerMngoAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[1].mintKey), key, transaction);\n\n//   const dataLayout = struct([u32('instruction')])\n//   const data = Buffer.alloc(dataLayout.span)\n//   dataLayout.encode(\n//     {\n//       instruction: 4\n//     },\n//     data\n//   )\n\n//   const instruction = new TransactionInstruction({\n//     keys: [\n//       { pubkey: key, isSigner: true, isWritable: true },\n//       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n//       { pubkey: fundState.mngo_vault_key, isSigner: false, isWritable: true },\n//       { pubkey: managerMngoAccount , isSigner: false, isWritable: true },\n\n//       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\n//       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n//       { pubkey: fundPDA[0], isSigner: false, isWritable: false },\n//       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: false },\n//       { pubkey: perpMkt.mngoVault, isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.tokens[1].rootKey), isSigner: false, isWritable: true },\n//       { pubkey: new PublicKey(ids.tokens[1].nodeKeys[0]), isSigner: false, isWritable: true },\n//       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\n//       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n//       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\n//       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\n//     ],\n//     programId,\n//     data\n//   });\n\n//   transaction.add(instruction);\n//   console.log(`transaction ::: `, transaction)\n//   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\n//   transaction.feePayer = key;\n//   let hash = await connection.getRecentBlockhash(\"finalized\");\n//   console.log(\"blockhash\", hash);\n//   transaction.recentBlockhash = hash.blockhash;\n\n//   const sign = await signAndSendTransaction(walletProvider, transaction);\n//   console.log(\"tx::: \", sign)\n\n// }\n\n\n//     return (\n//         <div className=\"form-div\">\n//             <h4>Mango Place</h4>\n//             Size ::: {' '}\n//             <input type=\"number\" value={size} onChange={(event) => setSize(event.target.value)} />\n//             <br />\n//             Price ::: {' '}\n//             <input type=\"number\" value={price} onChange={(event) => setPrice(event.target.value)} />\n//             <br />\n//             <label htmlFor=\"side\">Buy/Sell</label>\n\n//             <select name=\"side\" width = \"100px\" onClick={(event) => setSide(event.target.value)}>\n//             <option value=\"buy\">Buy</option>\n//             <option value=\"sell\">Sell</option>\n//             </select>\n\n//             <select name=\"side\" width = \"100px\" onClick={(event) => setIndex(event.target.value)}>\n//             <option value={0}>BTC</option>\n//             <option value={1}>ETH</option>\n//             <option value={2}>SOL</option>\n//             <option value={3}>SRM</option>\n\n//             </select>\n\n//           <button onClick={handleMangoPlace}>Mango Open Position</button>\n\n//           <br />\n//           <button onClick={handleMangoDeposit}>Deposit </button>\n//           <button onClick={handleMangoWithdraw}>Withdraw </button>\n\n//           <br />\n//           <button onClick={handleMangoClosePosition}>Mango Close </button>\n\n//           <br />\n//           <button onClick={handleMangoRedeem}>Redeem Mngo </button>\n\n//           <br />\n//           <button onClick={handleMangoCancelPerp}>Mango Cancel perp </button>\n\n\n//         </div>\n//     )\n// }"]},"metadata":{},"sourceType":"module"}