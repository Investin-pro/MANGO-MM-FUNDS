{"ast":null,"code":"import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\n\nconst workspace = new Proxy({}, {\n  get(workspaceCache, programName) {\n    if (isBrowser) {\n      console.log(\"Workspaces aren't available in the browser\");\n      return undefined;\n    }\n\n    const fs = require(\"fs\");\n\n    const process = require(\"process\");\n\n    if (!_populatedWorkspace) {\n      const path = require(\"path\");\n\n      let projectRoot = process.cwd();\n\n      while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n        const parentDir = path.dirname(projectRoot);\n\n        if (parentDir === projectRoot) {\n          projectRoot = undefined;\n        }\n\n        projectRoot = parentDir;\n      }\n\n      if (projectRoot === undefined) {\n        throw new Error(\"Could not find workspace root.\");\n      }\n\n      const idlFolder = `${projectRoot}/target/idl`;\n\n      if (!fs.existsSync(idlFolder)) {\n        throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n      }\n\n      const idlMap = new Map();\n      fs.readdirSync(idlFolder).forEach(file => {\n        const filePath = `${idlFolder}/${file}`;\n        const idlStr = fs.readFileSync(filePath);\n        const idl = JSON.parse(idlStr);\n        idlMap.set(idl.name, idl);\n        const name = camelCase(idl.name, {\n          pascalCase: true\n        });\n\n        if (idl.metadata && idl.metadata.address) {\n          workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n        }\n      }); // Override the workspace programs if the user put them in the config.\n\n      const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n      const clusterId = anchorToml.provider.cluster;\n\n      if (anchorToml.clusters && anchorToml.clusters[clusterId]) {\n        attachWorkspaceOverride(workspaceCache, anchorToml.clusters[clusterId], idlMap);\n      }\n\n      _populatedWorkspace = true;\n    }\n\n    return workspaceCache[programName];\n  }\n\n});\n\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n  Object.keys(overrideConfig).forEach(programName => {\n    const wsProgramName = camelCase(programName, {\n      pascalCase: true\n    });\n    const entry = overrideConfig[programName];\n    const overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n    let idl = idlMap.get(programName);\n\n    if (typeof entry !== \"string\" && entry.idl) {\n      idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n    }\n\n    workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n  });\n}\n\nexport default workspace;","map":{"version":3,"sources":["../../src/workspace.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["import camelCase from \"camelcase\";\nimport * as toml from \"toml\";\nimport { PublicKey } from \"@solana/web3.js\";\nimport { Program } from \"./program\";\nimport { isBrowser } from \"./utils/common\";\nlet _populatedWorkspace = false;\n/**\n * The `workspace` namespace provides a convenience API to automatically\n * search for and deserialize [[Program]] objects defined by compiled IDLs\n * in an Anchor workspace.\n *\n * This API is for Node only.\n */\nconst workspace = new Proxy({}, {\n    get(workspaceCache, programName) {\n        if (isBrowser) {\n            console.log(\"Workspaces aren't available in the browser\");\n            return undefined;\n        }\n        const fs = require(\"fs\");\n        const process = require(\"process\");\n        if (!_populatedWorkspace) {\n            const path = require(\"path\");\n            let projectRoot = process.cwd();\n            while (!fs.existsSync(path.join(projectRoot, \"Anchor.toml\"))) {\n                const parentDir = path.dirname(projectRoot);\n                if (parentDir === projectRoot) {\n                    projectRoot = undefined;\n                }\n                projectRoot = parentDir;\n            }\n            if (projectRoot === undefined) {\n                throw new Error(\"Could not find workspace root.\");\n            }\n            const idlFolder = `${projectRoot}/target/idl`;\n            if (!fs.existsSync(idlFolder)) {\n                throw new Error(`${idlFolder} doesn't exist. Did you use \"anchor build\"?`);\n            }\n            const idlMap = new Map();\n            fs.readdirSync(idlFolder).forEach(file => {\n                const filePath = `${idlFolder}/${file}`;\n                const idlStr = fs.readFileSync(filePath);\n                const idl = JSON.parse(idlStr);\n                idlMap.set(idl.name, idl);\n                const name = camelCase(idl.name, { pascalCase: true });\n                if (idl.metadata && idl.metadata.address) {\n                    workspaceCache[name] = new Program(idl, new PublicKey(idl.metadata.address));\n                }\n            });\n            // Override the workspace programs if the user put them in the config.\n            const anchorToml = toml.parse(fs.readFileSync(path.join(projectRoot, \"Anchor.toml\"), \"utf-8\"));\n            const clusterId = anchorToml.provider.cluster;\n            if (anchorToml.clusters && anchorToml.clusters[clusterId]) {\n                attachWorkspaceOverride(workspaceCache, anchorToml.clusters[clusterId], idlMap);\n            }\n            _populatedWorkspace = true;\n        }\n        return workspaceCache[programName];\n    },\n});\nfunction attachWorkspaceOverride(workspaceCache, overrideConfig, idlMap) {\n    Object.keys(overrideConfig).forEach((programName) => {\n        const wsProgramName = camelCase(programName, { pascalCase: true });\n        const entry = overrideConfig[programName];\n        const overrideAddress = new PublicKey(typeof entry === \"string\" ? entry : entry.address);\n        let idl = idlMap.get(programName);\n        if (typeof entry !== \"string\" && entry.idl) {\n            idl = JSON.parse(require(\"fs\").readFileSync(entry.idl, \"utf-8\"));\n        }\n        workspaceCache[wsProgramName] = new Program(idl, overrideAddress);\n    });\n}\nexport default workspace;\n//# sourceMappingURL=workspace.js.map"]},"metadata":{},"sourceType":"module"}