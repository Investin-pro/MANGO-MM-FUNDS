{"ast":null,"code":"import { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nimport * as features from \"../utils/features\";\nexport class StateCoder {\n  constructor(idl) {\n    if (idl.state === undefined) {\n      throw new Error(\"Idl state not defined.\");\n    }\n\n    this.layout = IdlCoder.typeDefLayout(idl.state.struct, idl.types);\n  }\n\n  async encode(name, account) {\n    const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n\n    const len = this.layout.encode(account, buffer);\n    const disc = await stateDiscriminator(name);\n    const accData = buffer.slice(0, len);\n    return Buffer.concat([disc, accData]);\n  }\n\n  decode(ix) {\n    // Chop off discriminator.\n    const data = ix.slice(8);\n    return this.layout.decode(data);\n  }\n\n} // Calculates unique 8 byte discriminator prepended to all anchor state accounts.\n\nexport async function stateDiscriminator(name) {\n  let ns = features.isSet(\"anchor-deprecated-state\") ? \"account\" : \"state\";\n  return Buffer.from(sha256.digest(`${ns}:${name}`)).slice(0, 8);\n}","map":{"version":3,"sources":["../../../src/coder/state.ts"],"names":[],"mappings":"AACA,SAAS,MAAT,QAAuB,WAAvB;AAEA,SAAS,QAAT,QAAyB,OAAzB;AACA,OAAO,KAAK,QAAZ,MAA0B,mBAA1B;AAEA,OAAM,MAAO,UAAP,CAAiB;AAGrB,EAAA,WAAA,CAAmB,GAAnB,EAA2B;AACzB,QAAI,GAAG,CAAC,KAAJ,KAAc,SAAlB,EAA6B;AAC3B,YAAM,IAAI,KAAJ,CAAU,wBAAV,CAAN;AACD;;AACD,SAAK,MAAL,GAAc,QAAQ,CAAC,aAAT,CAAuB,GAAG,CAAC,KAAJ,CAAU,MAAjC,EAAyC,GAAG,CAAC,KAA7C,CAAd;AACD;;AAEkB,QAAN,MAAM,CAAU,IAAV,EAAwB,OAAxB,EAAkC;AACnD,UAAM,MAAM,GAAG,MAAM,CAAC,KAAP,CAAa,IAAb,CAAf,CADmD,CAChB;;AACnC,UAAM,GAAG,GAAG,KAAK,MAAL,CAAY,MAAZ,CAAmB,OAAnB,EAA4B,MAA5B,CAAZ;AAEA,UAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,IAAD,CAArC;AACA,UAAM,OAAO,GAAG,MAAM,CAAC,KAAP,CAAa,CAAb,EAAgB,GAAhB,CAAhB;AAEA,WAAO,MAAM,CAAC,MAAP,CAAc,CAAC,IAAD,EAAO,OAAP,CAAd,CAAP;AACD;;AAEM,EAAA,MAAM,CAAU,EAAV,EAAoB;AAC/B;AACA,UAAM,IAAI,GAAG,EAAE,CAAC,KAAH,CAAS,CAAT,CAAb;AACA,WAAO,KAAK,MAAL,CAAY,MAAZ,CAAmB,IAAnB,CAAP;AACD;;AAxBoB,C,CA2BvB;;AACA,OAAO,eAAe,kBAAf,CAAkC,IAAlC,EAA8C;AACnD,MAAI,EAAE,GAAG,QAAQ,CAAC,KAAT,CAAe,yBAAf,IAA4C,SAA5C,GAAwD,OAAjE;AACA,SAAO,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,MAAP,CAAc,GAAG,EAAE,IAAI,IAAI,EAA3B,CAAZ,EAA4C,KAA5C,CAAkD,CAAlD,EAAqD,CAArD,CAAP;AACD","sourceRoot":"","sourcesContent":["import { sha256 } from \"js-sha256\";\nimport { IdlCoder } from \"./idl\";\nimport * as features from \"../utils/features\";\nexport class StateCoder {\n    constructor(idl) {\n        if (idl.state === undefined) {\n            throw new Error(\"Idl state not defined.\");\n        }\n        this.layout = IdlCoder.typeDefLayout(idl.state.struct, idl.types);\n    }\n    async encode(name, account) {\n        const buffer = Buffer.alloc(1000); // TODO: use a tighter buffer.\n        const len = this.layout.encode(account, buffer);\n        const disc = await stateDiscriminator(name);\n        const accData = buffer.slice(0, len);\n        return Buffer.concat([disc, accData]);\n    }\n    decode(ix) {\n        // Chop off discriminator.\n        const data = ix.slice(8);\n        return this.layout.decode(data);\n    }\n}\n// Calculates unique 8 byte discriminator prepended to all anchor state accounts.\nexport async function stateDiscriminator(name) {\n    let ns = features.isSet(\"anchor-deprecated-state\") ? \"account\" : \"state\";\n    return Buffer.from(sha256.digest(`${ns}:${name}`)).slice(0, 8);\n}\n//# sourceMappingURL=state.js.map"]},"metadata":{},"sourceType":"module"}