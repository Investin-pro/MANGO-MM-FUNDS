{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.throwUndefined = exports.getMultipleAccounts = exports.getFilteredProgramAccounts = exports.createSignerKeyAndNonce = exports.createTokenAccountInstructions = exports.createAccountInstruction = exports.simulateTransaction = exports.sleep = exports.awaitTransactionSignatureConfirmation = exports.splitOpenOrders = exports.getWeights = exports.nativeI80F48ToUi = exports.nativeToUi = exports.uiToNative = exports.promiseUndef = exports.zeroKey = exports.ONE_BN = exports.ZERO_BN = void 0;\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst web3_js_1 = require(\"@solana/web3.js\");\n\nconst serum_1 = require(\"@project-serum/serum\");\n\nconst fixednum_1 = require(\"./fixednum\");\n/** @internal */\n\n\nexports.ZERO_BN = new bn_js_1.default(0);\n/** @internal */\n\nexports.ONE_BN = new bn_js_1.default(1);\n/** @internal */\n\nexports.zeroKey = new web3_js_1.PublicKey(new Uint8Array(32));\n/** @internal */\n\nfunction promiseUndef() {\n  return __awaiter(this, void 0, void 0, function* () {\n    return undefined;\n  });\n}\n\nexports.promiseUndef = promiseUndef;\n\nfunction uiToNative(amount, decimals) {\n  return new bn_js_1.default(Math.round(amount * Math.pow(10, decimals)));\n}\n\nexports.uiToNative = uiToNative;\n\nfunction nativeToUi(amount, decimals) {\n  return amount / Math.pow(10, decimals);\n}\n\nexports.nativeToUi = nativeToUi;\n\nfunction nativeI80F48ToUi(amount, decimals) {\n  return amount.div(fixednum_1.I80F48.fromNumber(Math.pow(10, decimals)));\n}\n\nexports.nativeI80F48ToUi = nativeI80F48ToUi;\n/**\n * Return weights corresponding to health type;\n * Weights are all 1 if no healthType provided\n */\n\nfunction getWeights(mangoGroup, marketIndex, healthType) {\n  if (healthType === 'Maint') {\n    return {\n      spotAssetWeight: mangoGroup.spotMarkets[marketIndex].maintAssetWeight,\n      spotLiabWeight: mangoGroup.spotMarkets[marketIndex].maintLiabWeight,\n      perpAssetWeight: mangoGroup.perpMarkets[marketIndex].maintAssetWeight,\n      perpLiabWeight: mangoGroup.perpMarkets[marketIndex].maintLiabWeight\n    };\n  } else if (healthType === 'Init') {\n    return {\n      spotAssetWeight: mangoGroup.spotMarkets[marketIndex].initAssetWeight,\n      spotLiabWeight: mangoGroup.spotMarkets[marketIndex].initLiabWeight,\n      perpAssetWeight: mangoGroup.perpMarkets[marketIndex].initAssetWeight,\n      perpLiabWeight: mangoGroup.perpMarkets[marketIndex].initLiabWeight\n    };\n  } else {\n    return {\n      spotAssetWeight: fixednum_1.ONE_I80F48,\n      spotLiabWeight: fixednum_1.ONE_I80F48,\n      perpAssetWeight: fixednum_1.ONE_I80F48,\n      perpLiabWeight: fixednum_1.ONE_I80F48\n    };\n  }\n}\n\nexports.getWeights = getWeights;\n\nfunction splitOpenOrders(openOrders) {\n  const quoteFree = fixednum_1.I80F48.fromU64(openOrders.quoteTokenFree.add(openOrders['referrerRebatesAccrued']));\n  const quoteLocked = fixednum_1.I80F48.fromU64(openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree));\n  const baseFree = fixednum_1.I80F48.fromU64(openOrders.baseTokenFree);\n  const baseLocked = fixednum_1.I80F48.fromU64(openOrders.baseTokenTotal.sub(openOrders.baseTokenFree));\n  return {\n    quoteFree,\n    quoteLocked,\n    baseFree,\n    baseLocked\n  };\n}\n\nexports.splitOpenOrders = splitOpenOrders;\n\nfunction awaitTransactionSignatureConfirmation(txid, timeout, connection, confirmLevel) {\n  return __awaiter(this, void 0, void 0, function* () {\n    let done = false;\n    const confirmLevels = ['finalized'];\n\n    if (confirmLevel === 'confirmed') {\n      confirmLevels.push('confirmed');\n    } else if (confirmLevel === 'processed') {\n      confirmLevels.push('confirmed');\n      confirmLevels.push('processed');\n    }\n\n    const result = yield new Promise((resolve, reject) => {\n      (() => __awaiter(this, void 0, void 0, function* () {\n        setTimeout(() => {\n          if (done) {\n            return;\n          }\n\n          done = true;\n          console.log('Timed out for txid', txid);\n          reject({\n            timeout: true\n          });\n        }, timeout);\n\n        try {\n          connection.onSignature(txid, result => {\n            // console.log('WS confirmed', txid, result);\n            done = true;\n\n            if (result.err) {\n              reject(result.err);\n            } else {\n              resolve(result);\n            }\n          }, 'processed'); // console.log('Set up WS connection', txid);\n        } catch (e) {\n          done = true;\n          console.log('WS error in setup', txid, e);\n        }\n\n        while (!done) {\n          // eslint-disable-next-line no-loop-func\n          (() => __awaiter(this, void 0, void 0, function* () {\n            try {\n              const signatureStatuses = yield connection.getSignatureStatuses([txid]);\n              const result = signatureStatuses && signatureStatuses.value[0];\n\n              if (!done) {\n                if (!result) {// console.log('REST null result for', txid, result);\n                } else if (result.err) {\n                  console.log('REST error for', txid, result);\n                  done = true;\n                  reject(result.err);\n                } else if (!(result.confirmations || confirmLevels.includes(result.confirmationStatus))) {\n                  console.log('REST not confirmed', txid, result);\n                } else {\n                  console.log('REST confirmed', txid, result);\n                  done = true;\n                  resolve(result);\n                }\n              }\n            } catch (e) {\n              if (!done) {\n                console.log('REST connection error: txid', txid, e);\n              }\n            }\n          }))();\n\n          yield sleep(300);\n        }\n      }))();\n    });\n    done = true;\n    return result;\n  });\n}\n\nexports.awaitTransactionSignatureConfirmation = awaitTransactionSignatureConfirmation;\n\nfunction sleep(ms) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return new Promise(resolve => setTimeout(resolve, ms));\n  });\n}\n\nexports.sleep = sleep;\n\nfunction simulateTransaction(connection, transaction, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // @ts-ignore\n    transaction.recentBlockhash = yield connection._recentBlockhash( // @ts-ignore\n    connection._disableBlockhashCaching);\n    const signData = transaction.serializeMessage(); // @ts-ignore\n\n    const wireTransaction = transaction._serialize(signData);\n\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config = {\n      encoding: 'base64',\n      commitment\n    };\n    const args = [encodedTransaction, config]; // @ts-ignore\n\n    const res = yield connection._rpcRequest('simulateTransaction', args);\n\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n\n    return res.result;\n  });\n}\n\nexports.simulateTransaction = simulateTransaction;\n\nfunction createAccountInstruction(connection, payer, space, owner, lamports) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const account = new web3_js_1.Account();\n    const instruction = web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account.publicKey,\n      lamports: lamports ? lamports : yield connection.getMinimumBalanceForRentExemption(space),\n      space,\n      programId: owner\n    });\n    return {\n      account,\n      instruction\n    };\n  });\n}\n\nexports.createAccountInstruction = createAccountInstruction;\n\nfunction createTokenAccountInstructions(connection, payer, account, mint, owner) {\n  return __awaiter(this, void 0, void 0, function* () {\n    return [web3_js_1.SystemProgram.createAccount({\n      fromPubkey: payer,\n      newAccountPubkey: account,\n      lamports: yield connection.getMinimumBalanceForRentExemption(165),\n      space: 165,\n      programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID\n    }), serum_1.TokenInstructions.initializeAccount({\n      account: account,\n      mint,\n      owner\n    })];\n  });\n}\n\nexports.createTokenAccountInstructions = createTokenAccountInstructions;\n\nfunction createSignerKeyAndNonce(programId, accountKey) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // let res = await PublicKey.findProgramAddress([accountKey.toBuffer()], programId);\n    // console.log(res);\n    // return {\n    //   signerKey: res[0],\n    //   signerNonce: res[1]\n    // };\n    for (let nonce = 0; nonce <= Number.MAX_SAFE_INTEGER; nonce++) {\n      try {\n        const nonceBuffer = Buffer.alloc(8);\n        nonceBuffer.writeUInt32LE(nonce, 0);\n        const seeds = [accountKey.toBuffer(), nonceBuffer];\n        const key = yield web3_js_1.PublicKey.createProgramAddress(seeds, programId);\n        return {\n          signerKey: key,\n          signerNonce: nonce\n        };\n      } catch (e) {\n        continue;\n      }\n    }\n\n    throw new Error('Could not generate signer key');\n  });\n}\n\nexports.createSignerKeyAndNonce = createSignerKeyAndNonce;\n\nfunction getFilteredProgramAccounts(connection, programId, filters) {\n  return __awaiter(this, void 0, void 0, function* () {\n    // @ts-ignore\n    const resp = yield connection._rpcRequest('getProgramAccounts', [programId.toBase58(), {\n      commitment: connection.commitment,\n      filters,\n      encoding: 'base64'\n    }]);\n\n    if (resp.error) {\n      throw new Error(resp.error.message);\n    }\n\n    return resp.result.map(_ref => {\n      let {\n        pubkey,\n        account: {\n          data,\n          executable,\n          owner,\n          lamports\n        }\n      } = _ref;\n      return {\n        publicKey: new web3_js_1.PublicKey(pubkey),\n        accountInfo: {\n          data: Buffer.from(data[0], 'base64'),\n          executable,\n          owner: new web3_js_1.PublicKey(owner),\n          lamports\n        }\n      };\n    });\n  });\n}\n\nexports.getFilteredProgramAccounts = getFilteredProgramAccounts;\n\nfunction getMultipleAccounts(connection, publicKeys, commitment) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const len = publicKeys.length;\n\n    if (len === 0) {\n      return [];\n    }\n\n    if (len > 100) {\n      const mid = Math.floor(publicKeys.length / 2);\n      return Promise.all([getMultipleAccounts(connection, publicKeys.slice(0, mid), commitment), getMultipleAccounts(connection, publicKeys.slice(mid, len), commitment)]).then(a => a[0].concat(a[1]));\n    }\n\n    const publicKeyStrs = publicKeys.map(pk => pk.toBase58()); // load connection commitment as a default\n\n    commitment || (commitment = connection.commitment);\n    const args = commitment ? [publicKeyStrs, {\n      commitment\n    }] : [publicKeyStrs]; // @ts-ignore\n\n    const resp = yield connection._rpcRequest('getMultipleAccounts', args);\n\n    if (resp.error) {\n      throw new Error(resp.error.message);\n    }\n\n    return resp.result.value.map((_ref2, i) => {\n      let {\n        data,\n        executable,\n        lamports,\n        owner\n      } = _ref2;\n      return {\n        publicKey: publicKeys[i],\n        context: resp.result.context,\n        accountInfo: {\n          data: Buffer.from(data[0], 'base64'),\n          executable,\n          owner: new web3_js_1.PublicKey(owner),\n          lamports\n        }\n      };\n    });\n  });\n}\n\nexports.getMultipleAccounts = getMultipleAccounts;\n/**\n * Throw if undefined; return value otherwise\n * @internal\n */\n\nfunction throwUndefined(x) {\n  if (x === undefined) {\n    throw new Error('Undefined');\n  }\n\n  return x;\n}\n\nexports.throwUndefined = throwUndefined;","map":{"version":3,"sources":["../../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.throwUndefined = exports.getMultipleAccounts = exports.getFilteredProgramAccounts = exports.createSignerKeyAndNonce = exports.createTokenAccountInstructions = exports.createAccountInstruction = exports.simulateTransaction = exports.sleep = exports.awaitTransactionSignatureConfirmation = exports.splitOpenOrders = exports.getWeights = exports.nativeI80F48ToUi = exports.nativeToUi = exports.uiToNative = exports.promiseUndef = exports.zeroKey = exports.ONE_BN = exports.ZERO_BN = void 0;\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst web3_js_1 = require(\"@solana/web3.js\");\nconst serum_1 = require(\"@project-serum/serum\");\nconst fixednum_1 = require(\"./fixednum\");\n/** @internal */\nexports.ZERO_BN = new bn_js_1.default(0);\n/** @internal */\nexports.ONE_BN = new bn_js_1.default(1);\n/** @internal */\nexports.zeroKey = new web3_js_1.PublicKey(new Uint8Array(32));\n/** @internal */\nfunction promiseUndef() {\n    return __awaiter(this, void 0, void 0, function* () {\n        return undefined;\n    });\n}\nexports.promiseUndef = promiseUndef;\nfunction uiToNative(amount, decimals) {\n    return new bn_js_1.default(Math.round(amount * Math.pow(10, decimals)));\n}\nexports.uiToNative = uiToNative;\nfunction nativeToUi(amount, decimals) {\n    return amount / Math.pow(10, decimals);\n}\nexports.nativeToUi = nativeToUi;\nfunction nativeI80F48ToUi(amount, decimals) {\n    return amount.div(fixednum_1.I80F48.fromNumber(Math.pow(10, decimals)));\n}\nexports.nativeI80F48ToUi = nativeI80F48ToUi;\n/**\n * Return weights corresponding to health type;\n * Weights are all 1 if no healthType provided\n */\nfunction getWeights(mangoGroup, marketIndex, healthType) {\n    if (healthType === 'Maint') {\n        return {\n            spotAssetWeight: mangoGroup.spotMarkets[marketIndex].maintAssetWeight,\n            spotLiabWeight: mangoGroup.spotMarkets[marketIndex].maintLiabWeight,\n            perpAssetWeight: mangoGroup.perpMarkets[marketIndex].maintAssetWeight,\n            perpLiabWeight: mangoGroup.perpMarkets[marketIndex].maintLiabWeight,\n        };\n    }\n    else if (healthType === 'Init') {\n        return {\n            spotAssetWeight: mangoGroup.spotMarkets[marketIndex].initAssetWeight,\n            spotLiabWeight: mangoGroup.spotMarkets[marketIndex].initLiabWeight,\n            perpAssetWeight: mangoGroup.perpMarkets[marketIndex].initAssetWeight,\n            perpLiabWeight: mangoGroup.perpMarkets[marketIndex].initLiabWeight,\n        };\n    }\n    else {\n        return {\n            spotAssetWeight: fixednum_1.ONE_I80F48,\n            spotLiabWeight: fixednum_1.ONE_I80F48,\n            perpAssetWeight: fixednum_1.ONE_I80F48,\n            perpLiabWeight: fixednum_1.ONE_I80F48,\n        };\n    }\n}\nexports.getWeights = getWeights;\nfunction splitOpenOrders(openOrders) {\n    const quoteFree = fixednum_1.I80F48.fromU64(openOrders.quoteTokenFree.add(openOrders['referrerRebatesAccrued']));\n    const quoteLocked = fixednum_1.I80F48.fromU64(openOrders.quoteTokenTotal.sub(openOrders.quoteTokenFree));\n    const baseFree = fixednum_1.I80F48.fromU64(openOrders.baseTokenFree);\n    const baseLocked = fixednum_1.I80F48.fromU64(openOrders.baseTokenTotal.sub(openOrders.baseTokenFree));\n    return { quoteFree, quoteLocked, baseFree, baseLocked };\n}\nexports.splitOpenOrders = splitOpenOrders;\nfunction awaitTransactionSignatureConfirmation(txid, timeout, connection, confirmLevel) {\n    return __awaiter(this, void 0, void 0, function* () {\n        let done = false;\n        const confirmLevels = [\n            'finalized',\n        ];\n        if (confirmLevel === 'confirmed') {\n            confirmLevels.push('confirmed');\n        }\n        else if (confirmLevel === 'processed') {\n            confirmLevels.push('confirmed');\n            confirmLevels.push('processed');\n        }\n        const result = yield new Promise((resolve, reject) => {\n            (() => __awaiter(this, void 0, void 0, function* () {\n                setTimeout(() => {\n                    if (done) {\n                        return;\n                    }\n                    done = true;\n                    console.log('Timed out for txid', txid);\n                    reject({ timeout: true });\n                }, timeout);\n                try {\n                    connection.onSignature(txid, (result) => {\n                        // console.log('WS confirmed', txid, result);\n                        done = true;\n                        if (result.err) {\n                            reject(result.err);\n                        }\n                        else {\n                            resolve(result);\n                        }\n                    }, 'processed');\n                    // console.log('Set up WS connection', txid);\n                }\n                catch (e) {\n                    done = true;\n                    console.log('WS error in setup', txid, e);\n                }\n                while (!done) {\n                    // eslint-disable-next-line no-loop-func\n                    (() => __awaiter(this, void 0, void 0, function* () {\n                        try {\n                            const signatureStatuses = yield connection.getSignatureStatuses([\n                                txid,\n                            ]);\n                            const result = signatureStatuses && signatureStatuses.value[0];\n                            if (!done) {\n                                if (!result) {\n                                    // console.log('REST null result for', txid, result);\n                                }\n                                else if (result.err) {\n                                    console.log('REST error for', txid, result);\n                                    done = true;\n                                    reject(result.err);\n                                }\n                                else if (!(result.confirmations ||\n                                    confirmLevels.includes(result.confirmationStatus))) {\n                                    console.log('REST not confirmed', txid, result);\n                                }\n                                else {\n                                    console.log('REST confirmed', txid, result);\n                                    done = true;\n                                    resolve(result);\n                                }\n                            }\n                        }\n                        catch (e) {\n                            if (!done) {\n                                console.log('REST connection error: txid', txid, e);\n                            }\n                        }\n                    }))();\n                    yield sleep(300);\n                }\n            }))();\n        });\n        done = true;\n        return result;\n    });\n}\nexports.awaitTransactionSignatureConfirmation = awaitTransactionSignatureConfirmation;\nfunction sleep(ms) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return new Promise((resolve) => setTimeout(resolve, ms));\n    });\n}\nexports.sleep = sleep;\nfunction simulateTransaction(connection, transaction, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        transaction.recentBlockhash = yield connection._recentBlockhash(\n        // @ts-ignore\n        connection._disableBlockhashCaching);\n        const signData = transaction.serializeMessage();\n        // @ts-ignore\n        const wireTransaction = transaction._serialize(signData);\n        const encodedTransaction = wireTransaction.toString('base64');\n        const config = { encoding: 'base64', commitment };\n        const args = [encodedTransaction, config];\n        // @ts-ignore\n        const res = yield connection._rpcRequest('simulateTransaction', args);\n        if (res.error) {\n            throw new Error('failed to simulate transaction: ' + res.error.message);\n        }\n        return res.result;\n    });\n}\nexports.simulateTransaction = simulateTransaction;\nfunction createAccountInstruction(connection, payer, space, owner, lamports) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const account = new web3_js_1.Account();\n        const instruction = web3_js_1.SystemProgram.createAccount({\n            fromPubkey: payer,\n            newAccountPubkey: account.publicKey,\n            lamports: lamports\n                ? lamports\n                : yield connection.getMinimumBalanceForRentExemption(space),\n            space,\n            programId: owner,\n        });\n        return { account, instruction };\n    });\n}\nexports.createAccountInstruction = createAccountInstruction;\nfunction createTokenAccountInstructions(connection, payer, account, mint, owner) {\n    return __awaiter(this, void 0, void 0, function* () {\n        return [\n            web3_js_1.SystemProgram.createAccount({\n                fromPubkey: payer,\n                newAccountPubkey: account,\n                lamports: yield connection.getMinimumBalanceForRentExemption(165),\n                space: 165,\n                programId: serum_1.TokenInstructions.TOKEN_PROGRAM_ID,\n            }),\n            serum_1.TokenInstructions.initializeAccount({\n                account: account,\n                mint,\n                owner,\n            }),\n        ];\n    });\n}\nexports.createTokenAccountInstructions = createTokenAccountInstructions;\nfunction createSignerKeyAndNonce(programId, accountKey) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // let res = await PublicKey.findProgramAddress([accountKey.toBuffer()], programId);\n        // console.log(res);\n        // return {\n        //   signerKey: res[0],\n        //   signerNonce: res[1]\n        // };\n        for (let nonce = 0; nonce <= Number.MAX_SAFE_INTEGER; nonce++) {\n            try {\n                const nonceBuffer = Buffer.alloc(8);\n                nonceBuffer.writeUInt32LE(nonce, 0);\n                const seeds = [accountKey.toBuffer(), nonceBuffer];\n                const key = yield web3_js_1.PublicKey.createProgramAddress(seeds, programId);\n                return {\n                    signerKey: key,\n                    signerNonce: nonce,\n                };\n            }\n            catch (e) {\n                continue;\n            }\n        }\n        throw new Error('Could not generate signer key');\n    });\n}\nexports.createSignerKeyAndNonce = createSignerKeyAndNonce;\nfunction getFilteredProgramAccounts(connection, programId, filters) {\n    return __awaiter(this, void 0, void 0, function* () {\n        // @ts-ignore\n        const resp = yield connection._rpcRequest('getProgramAccounts', [\n            programId.toBase58(),\n            {\n                commitment: connection.commitment,\n                filters,\n                encoding: 'base64',\n            },\n        ]);\n        if (resp.error) {\n            throw new Error(resp.error.message);\n        }\n        return resp.result.map(({ pubkey, account: { data, executable, owner, lamports } }) => ({\n            publicKey: new web3_js_1.PublicKey(pubkey),\n            accountInfo: {\n                data: Buffer.from(data[0], 'base64'),\n                executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports,\n            },\n        }));\n    });\n}\nexports.getFilteredProgramAccounts = getFilteredProgramAccounts;\nfunction getMultipleAccounts(connection, publicKeys, commitment) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const len = publicKeys.length;\n        if (len === 0) {\n            return [];\n        }\n        if (len > 100) {\n            const mid = Math.floor(publicKeys.length / 2);\n            return Promise.all([\n                getMultipleAccounts(connection, publicKeys.slice(0, mid), commitment),\n                getMultipleAccounts(connection, publicKeys.slice(mid, len), commitment),\n            ]).then((a) => a[0].concat(a[1]));\n        }\n        const publicKeyStrs = publicKeys.map((pk) => pk.toBase58());\n        // load connection commitment as a default\n        commitment || (commitment = connection.commitment);\n        const args = commitment ? [publicKeyStrs, { commitment }] : [publicKeyStrs];\n        // @ts-ignore\n        const resp = yield connection._rpcRequest('getMultipleAccounts', args);\n        if (resp.error) {\n            throw new Error(resp.error.message);\n        }\n        return resp.result.value.map(({ data, executable, lamports, owner }, i) => ({\n            publicKey: publicKeys[i],\n            context: resp.result.context,\n            accountInfo: {\n                data: Buffer.from(data[0], 'base64'),\n                executable,\n                owner: new web3_js_1.PublicKey(owner),\n                lamports,\n            },\n        }));\n    });\n}\nexports.getMultipleAccounts = getMultipleAccounts;\n/**\n * Throw if undefined; return value otherwise\n * @internal\n */\nfunction throwUndefined(x) {\n    if (x === undefined) {\n        throw new Error('Undefined');\n    }\n    return x;\n}\nexports.throwUndefined = throwUndefined;\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}