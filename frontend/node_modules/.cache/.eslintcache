[{"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/index.js":"1","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/reportWebVitals.js":"2","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/App.js":"3","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/store/globalState.js":"4","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Withdraw.js":"5","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Settlement.js":"6","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/InitForceSettle.js":"7","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/InitialisedFund.js":"8","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ForceUpdatePerp.js":"9","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ForceProcessWithdraws.js":"10","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Deposit.js":"11","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Reimbursement.js":"12","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/CustomNavbar.js":"13","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/DisplayInfo.js":"14","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/AllFundsInvestors.js":"15","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ProcessWithdraws.js":"16","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ProcessDeposits.js":"17","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/constants.js":"18","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/web3.js":"19","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/programLayouts.js":"20","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/solanaWeb3.js":"21","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ConnectWalletModal.js":"22","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/wallets/PhantomWallet.js":"23"},{"size":525,"mtime":1666367085721,"results":"24","hashOfConfig":"25"},{"size":362,"mtime":1666367085721,"results":"26","hashOfConfig":"25"},{"size":2814,"mtime":1666427674246,"results":"27","hashOfConfig":"25"},{"size":141,"mtime":1666367085722,"results":"28","hashOfConfig":"25"},{"size":15675,"mtime":1666367085721,"results":"29","hashOfConfig":"25"},{"size":4248,"mtime":1666367085721,"results":"30","hashOfConfig":"25"},{"size":6843,"mtime":1666367085719,"results":"31","hashOfConfig":"25"},{"size":5318,"mtime":1666367085719,"results":"32","hashOfConfig":"25"},{"size":6599,"mtime":1666367085719,"results":"33","hashOfConfig":"25"},{"size":5529,"mtime":1666367085719,"results":"34","hashOfConfig":"25"},{"size":5531,"mtime":1666367110396,"results":"35","hashOfConfig":"25"},{"size":15326,"mtime":1666427814163,"results":"36","hashOfConfig":"25"},{"size":303,"mtime":1666367085718,"results":"37","hashOfConfig":"25"},{"size":16514,"mtime":1666367085718,"results":"38","hashOfConfig":"25"},{"size":11053,"mtime":1666367110396,"results":"39","hashOfConfig":"25"},{"size":7013,"mtime":1666367085719,"results":"40","hashOfConfig":"25"},{"size":7086,"mtime":1666367085719,"results":"41","hashOfConfig":"25"},{"size":2068,"mtime":1666369406152,"results":"42","hashOfConfig":"25"},{"size":6897,"mtime":1666369464794,"results":"43","hashOfConfig":"25"},{"size":6084,"mtime":1666367110397,"results":"44","hashOfConfig":"25"},{"size":6770,"mtime":1666367085722,"results":"45","hashOfConfig":"25"},{"size":2562,"mtime":1666367085718,"results":"46","hashOfConfig":"25"},{"size":1525,"mtime":1666367085723,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"40bxkc",{"filePath":"51","messages":"52","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"50"},{"filePath":"60","messages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"50"},{"filePath":"63","messages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"50"},{"filePath":"66","messages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"50"},{"filePath":"72","messages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"82","usedDeprecatedRules":"50"},{"filePath":"83","messages":"84","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"50"},{"filePath":"86","messages":"87","errorCount":0,"fatalErrorCount":0,"warningCount":28,"fixableErrorCount":0,"fixableWarningCount":0,"source":"88","usedDeprecatedRules":"50"},{"filePath":"89","messages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"50"},{"filePath":"92","messages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"50"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"50"},{"filePath":"100","messages":"101","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"50"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"105","messages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"50"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/index.js",[],["110","111"],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/reportWebVitals.js",[],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/App.js",["112","113","114","115","116","117","118","119","120","121","122","123","124"],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/store/globalState.js",[],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Withdraw.js",["125","126","127","128","129","130","131","132","133","134"],"import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { connection,  FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID} from '../utils/constants';\r\n\r\nimport { struct, u32 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\r\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\r\nimport bs58 from 'bs58';\r\nimport BN from 'bn.js';\r\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\r\n\r\nexport const Withdraw = () => {\r\n\r\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\r\n  const [investments, setInvestments] = useState([]);\r\n\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\r\n  const ids = IDS['groups'][0]\r\n\r\n  const handleRequestWithdraw = async () => {\r\n\r\n    const key = walletProvider?.publicKey;\r\n\r\n    if (!key) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    };\r\n\r\n    console.log('selected Investment::', selectedInvestmentStateAcc.toString())\r\n  \r\n    let investmentStateInfo = await connection.getAccountInfo(new PublicKey(selectedInvestmentStateAcc))\r\n    let investmentState = INVESTOR_DATA.decode(investmentStateInfo.data)\r\n    console.log(\"fundState:: \", investmentState)\r\n\r\n    const transaction = new Transaction()\r\n    \r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 3,\r\n      },\r\n      data\r\n    )\r\n    const keys =  [\r\n      { pubkey: investmentState.fund, isSigner: false, isWritable: true }, //fund State Account\r\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true },\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n    ];\r\n\r\n    for(let i = 0; i<keys.length; i++){\r\n      console.log('>>',i, keys[i].pubkey.toBase58())\r\n    }\r\n\r\n\r\n    const instruction = new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data\r\n    });\r\n\r\n   \r\n    transaction.add(instruction)\r\n    transaction.feePayer = walletProvider?.publicKey;\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"tx\", transaction);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n\r\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    // console.log(\"signature tx:: \", sign)\r\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\r\n   \r\n\r\n      try {\r\n          await sendSignedTransactionAndNotify({\r\n              connection,\r\n              transaction: transaction,\r\n              successMessage: \"Investment successful\",\r\n              failMessage: \"Investment unsuccessful\",\r\n              wallet: walletProvider\r\n          })\r\n      } catch (error) {\r\n          console.error('handleMakeInvestment: ', error);\r\n      }\r\n\r\n  }\r\n\r\n  const handleWithdraw = async () => {\r\n\r\n    const key = walletProvider?.publicKey;\r\n\r\n    if (!key) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    };\r\n\r\n    console.log('selected Investment::', selectedInvestmentStateAcc.toString())\r\n    \r\n    let investmentStateInfo = await connection.getAccountInfo(new PublicKey(selectedInvestmentStateAcc))\r\n    let investmentState = INVESTOR_DATA.decode(investmentStateInfo.data)\r\n    console.log(\"InvestmentState:: \", investmentState)\r\n    let fundStateInfo = await connection.getAccountInfo(investmentState.fund)\r\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n    console.log(\"fundState:: \", fundState)\r\n    \r\n    const transaction = new Transaction()\r\n    \r\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 2,\r\n      },\r\n      data\r\n    )\r\n    const keys =  [\r\n      { pubkey: investmentState.fund, isSigner: false, isWritable: true }, //fund State Account\r\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true },\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true},\r\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true},\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false},\r\n    ];\r\n\r\n    for(let i = 0; i<keys.length; i++){\r\n      console.log('>>',i, keys[i].pubkey.toBase58())\r\n    }\r\n\r\n\r\n    const instruction = new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data\r\n    });\r\n\r\n   \r\n    transaction.add(instruction)\r\n    transaction.feePayer = walletProvider?.publicKey;\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"tx\", transaction);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n\r\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    // console.log(\"signature tx:: \", sign)\r\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\r\n   \r\n\r\n      try {\r\n          await sendSignedTransactionAndNotify({\r\n              connection,\r\n              transaction: transaction,\r\n              successMessage: \"Investment successful\",\r\n              failMessage: \"Investment unsuccessful\",\r\n              wallet: walletProvider\r\n          })\r\n      } catch (error) {\r\n          console.error('handleMakeInvestment: ', error);\r\n      }\r\n\r\n  }\r\n\r\n\r\n\r\n  // const handleWithdraw = async () => {\r\n\r\n  //   const key = walletProvider?.publicKey;\r\n\r\n  //   if (!key) {\r\n  //     alert(\"connect wallet\")\r\n  //     return;\r\n  //   };\r\n\r\n  //   if(!fundPDA) {\r\n  //     alert(\"no funds found\")\r\n  //     return\r\n  //   }\r\n    \r\n  //   const transaction = new Transaction()\r\n\r\n  //   const openOrdersLamports =\r\n  //   await connection.getMinimumBalanceForRentExemption(\r\n  //     INVESTOR_DATA.span,\r\n  //     'singleGossip'\r\n  //   )\r\n  //   let signers = []\r\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\r\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n\r\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\r\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n  //   console.log(\"fundState:: \", fundState)\r\n\r\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n  //   console.log(\"mango group:: \", mangoGroup)\r\n\r\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\r\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n  //   console.log(\"nodebank:: \", nodeBank)\r\n\r\n\r\n  //   const dataLayout = struct([u32('instruction')])\r\n  //   const data = Buffer.alloc(dataLayout.span)\r\n  //   dataLayout.encode(\r\n  //     {\r\n  //       instruction: 2,\r\n  //     },\r\n  //     data\r\n  //   )\r\n\r\n  //   const instruction = new TransactionInstruction({\r\n  //     keys: [\r\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\r\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n  //       { pubkey: key, isSigner: true, isWritable: true },\r\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\r\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n\r\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\r\n\r\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\r\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\r\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n  //     ],\r\n  //     programId,\r\n  //     data\r\n  //   });\r\n\r\n  //   transaction.add(instruction);\r\n  //   console.log(`transaction ::: `, transaction)\r\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n  //   transaction.feePayer = key;\r\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\r\n  //   console.log(\"blockhash\", hash);\r\n  //   transaction.recentBlockhash = hash.blockhash;\r\n  //   transaction.setSigners(key, investerStateAccount)\r\n  //   transaction.partialSign(...signers)\r\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\r\n  //   console.log(\"tx::: \", sign)\r\n  // }\r\n  \r\n  // const handleFunds = async () => {\r\n  \r\n  //   let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\r\n  //   console.log(`funds :::: `, funds)\r\n  //   const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\r\n\r\n  //   console.log(`decodedFunds ::: `, fundData)\r\n  //   let invFunds = []\r\n  //   for(let i=0; i<fundData.length; i++) {\r\n  //     let manager = fundData[i].manager_account;\r\n\r\n  //     let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\r\n  //     let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n\r\n  //     let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\r\n  //     let invState = await connection.getAccountInfo(invStateAccount);\r\n\r\n  //     if (invState == null) {\r\n  //       continue\r\n  //     }\r\n\r\n  //     let invStateData = INVESTOR_DATA.decode(invState.data)\r\n  //     console.log(invStateData)\r\n\r\n  //     // if (!invStateData.is_initialized) {\r\n  //     //   continue\r\n  //     // }\r\n  //     invFunds.push({\r\n  //       fundPDA: PDA[0].toBase58(),\r\n  //       fundManager: manager.toBase58(),\r\n  //     });\r\n  //   }\r\n  //   console.log(invFunds)\r\n  //   setFunds(invFunds);\r\n  // }\r\n\r\n  // const handleFundSelect = async(event) => {\r\n  \r\n  //   setFundPDA(event.target.value);\r\n  //   console.log(`setting fundPDA :::: `, event.target.value, fundPDA)\r\n  // }\r\n\r\n  const handleSelectInvestment = async(event) => {\r\n    setSelectedInvestmentStateAcc(event.target.value);\r\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\r\n  }\r\n  \r\n  const handleGetInvestments = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"Investor::\",investorAccount.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(2, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  const handleGetInvestmentsForWithdraw = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"Investor::\",investorAccount.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(4, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>Withdraw</h4>\r\n      <br />\r\n      <button onClick={handleGetInvestments}>Get Investments</button>\r\n      <br />\r\n      <label htmlFor=\"funds\">Select Investment:</label>\r\n\r\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\r\n        {\r\n          investments.map((i) => {\r\n            return (<option key={i} value={i}>{i}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleRequestWithdraw}>Request Withdraw</button>\r\n\r\n      <br />\r\n      <button onClick={handleGetInvestmentsForWithdraw}>Get Investments</button>\r\n      <br />\r\n      <label htmlFor=\"funds\">Select Investment:</label>\r\n\r\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\r\n        {\r\n          investments.map((i) => {\r\n            return (<option key={i} value={i}>{i}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleWithdraw}>Withdraw</button>\r\n\r\n      {/* <button onClick={handleFunds}>Load Investments</button> */}\r\n\r\n      <br />\r\n     \r\n      {/* <button onClick={handleWithdraw}>Withdraw from Fund</button>\r\n      <button onClick={handleHarvestMngo}>Harvest Mngo</button> */}\r\n  \r\n      <br />\r\n    </div>\r\n  )\r\n\r\n}","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Settlement.js",["135","136","137","138","139","140","141","142","143","144","145","146","147","148","149","150","151","152","153","154","155","156","157","158","159","160","161"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Settlement = () => {\n\n   const [fundAddress, setFundAddress] = useState('')\n\n\n  \n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handlePauseForSettlement = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA.toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA.toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n\n      const dataLayout = struct([u32('instruction')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 8,\n        },\n        data\n      )\n\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: fundPDA, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false},\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false}\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      // const sign = await signAndSendTransaction(walletProvider, transaction);\n      // console.log(\"signature tx:: \", sign)\n      try {\n        await sendSignedTransactionAndNotify({\n            connection,\n            transaction: transaction,\n            successMessage: \"Pause successful\",\n            failMessage: \"Pause unsuccessful\",\n            wallet: walletProvider\n        })\n      } catch (error) {\n          console.error('init e: ', error);\n      }\n  \n\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA;\n    })\n  }\n\n  \n\n\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Pause Fund</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      <br />\n      <button onClick={handlePauseForSettlement}>Pause</button>\n    </div>\n  )\n}\n\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/InitForceSettle.js",["162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const InitForceSettle = () => {\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('')\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handInitForceSettle= async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n    \n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 9,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      // { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      // { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      // { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      // { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      // { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      // { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>Init Force Settle</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      \n      <button onClick={handInitForceSettle}>Init</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/InitialisedFund.js",["179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const InitialisedFund = () => {\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitializeFund = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA[0].toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA[0].toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n\n      const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\",min_amount * (10 ** ids.tokens[0].decimals));\n      console.log(\"platform_fee_percentage * 100::\",platform_fee_percentage * 100)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          min_amount: min_amount * (10 ** ids.tokens[0].decimals),\n          performance_fee_percentage: platform_fee_percentage * 100,\n        },\n        data\n      )\n\n      const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction);\n      \n      // const fundBaseVault = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n\n      console.log(\"fundBaseVault:\",fundBaseVault.toBase58())\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n          { pubkey: fundBaseVault, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: delegate, isSigner: false, isWritable: false},\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false}\n\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      // const sign = await signAndSendTransaction(walletProvider, transaction);\n      // console.log(\"signature tx:: \", sign)\n      try {\n        await sendSignedTransactionAndNotify({\n            connection,\n            transaction: transaction,\n            successMessage: \"Investment successful\",\n            failMessage: \"Investment unsuccessful\",\n            wallet: walletProvider\n        })\n      } catch (error) {\n          console.error('init e: ', error);\n      }\n  \n\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA[0];\n    })\n  }\n\n  \n\n\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Initialise Fund</h4>\n      min_amount ::: {' '}\n      <input type=\"number\" value={min_amount} onChange={(event) => setMin_amount(event.target.value)} />\n      <br />\n      platform_fee_percentage ::: {' '}\n      <input type=\"number\" value={platform_fee_percentage} onChange={(event) => setPlatform_fee_percentage(event.target.value)} />\n      <br />\n      <button onClick={handleInitializeFund}>initialise fund</button>\n    </div>\n  )\n}\n\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ForceUpdatePerp.js",["199","200","201","202","203","204","205","206","207","208","209","210","211","212","213"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ForceUpdatePerp = () => {\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('')\n  const [perpIndex, setPerpIndex] = useState(0); \n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handInitForceSettle= async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\", mangoAcc.spotOpenOrders);\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n    \n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 10,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].publicKey), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].bidsKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].asksKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].eventsKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>Force Update Perp</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n        <input type=\"number\" value={perpIndex} onChange={(event) => setPerpIndex(event.target.value)} />\n        <br />\n      \n      <button onClick={handInitForceSettle}>Init</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ForceProcessWithdraws.js",["214","215","216","217","218","219","220","221","222","223","224","225","226","227"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ForceProcessWithdraws = () => {\n  \n\n  const [fundAddress, setFundAddress] = useState('')\n\n\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesWithdraw = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(4, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 12,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Force Process Withdraw</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      \n      <button onClick={handleprocesWithdraw}>Init</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Deposit.js",["228","229","230","231","232","233","234","235","236"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Deposit = () => {\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    console.log('selected FundPDA::', fundPDA)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    let signers = [];\n    \n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    let investorStateAccounts = \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('amount')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** ids.tokens[0].decimals)\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      // console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n\n\n  const handleFundSelect = async(event) => {\n  \n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `,event.target.value, fundPDA)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Investor Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\n        {\n          funds.map((fund) => {\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load Funds</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/Reimbursement.js",["237","238","239","240","241","242","243","244","245","246"],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/CustomNavbar.js",["247"],"import React from 'react';\nimport {\n  Button\n} from 'reactstrap';\nimport { ConnectWalletModal } from './ConnectWalletModal';\n\nexport const CustomNavbar = (props) => {\n\n  return (\n    <div className=\"d-flex flex-row-reverse p-2\">\n      <ConnectWalletModal buttonLabel=\"Connect Wallet\"/>\n    </div>\n  );\n}","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/DisplayInfo.js",["248","249","250","251","252","253","254","255","256","257","258","259","260","261","262","263"],"import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react'\nimport { GlobalState } from '../store/globalState';\n\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nimport { FUND_DATA, SPL_TOKEN_MINT_DATA } from '../utils/programLayouts';\n\nimport { Card, Col, Row ,Table} from 'reactstrap';\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout ,RootBankCacheLayout, RootBankLayout} from '@blockworks-foundation/mango-client';\n\n\nexport const DisplayInfo = (props) => {\n\n   const ids = IDS['groups'][0]\n   const [fundAddress, setFundAddress] = useState('')\n   const [fundData, setFundData] = useState(\"\");\n   const [mangoGroup, setMangoGroup] = useState({})\n   const [mangoAccount, setMangoAccount] = useState('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX')\n   const [mangoAccountData, setMangoAccountData] = useState({})\n   const [nodeBank, setNodeBank] = useState({})\n   const [rootBank, setRootBank] = useState({})\n   const walletProvider = GlobalState.useState(s => s.walletProvider);\n  \nconst programIdX = programId.toBase58();\nconst adminAccountX = adminAccount.toBase58();\n// const platformStateAccountX = platformStateAccount.toBase58();\n// const priceStateAccountX = priceStateAccount.toBase58();\n\nconst handleGetFundData = async () => {\n\n  if(!walletProvider) {\n    alert(\"connect wallet \")\n    return;\n  }\n  \n  // const key = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n  const key = walletProvider?.publicKey;  \n  if (!key ) {\n    alert(\"connect wallet \")\n    return;\n  }\n  const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n  console.log(\"fundPDA::\",fundPDA.toBase58())\n  setFundAddress(fundPDA.toBase58())\n\n\n    const fundDataAcc = await connection.getAccountInfo(fundPDA);\n    console.log(\"fundDataAcc::\",fundDataAcc);\n    if (fundDataAcc == null)\n    {\n       alert(\"fundDataAcc info not found\")\n      return;\n    }\n    const fundData = FUND_DATA.decode(fundDataAcc.data)\n    console.error(\"fundData::\",fundData);\n    setFundData(fundData);\n}\n\nconst getAllDecodeMangoData = async () => {\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n    let mangoGroupDecoded = {};\n    mangoGroupDecoded.admin = mangoGroup.admin.toBase58();\n    mangoGroupDecoded.dexProgramId = mangoGroup.dexProgramId.toBase58();\n    mangoGroupDecoded.insuranceVault = mangoGroup.insuranceVault.toBase58();\n    mangoGroupDecoded.mangoCache = mangoGroup.mangoCache.toBase58();\n\n    mangoGroupDecoded.msrmVault = mangoGroup.msrmVault.toBase58();\n    mangoGroupDecoded.numOracles = mangoGroup.numOracles.toString();\n\n    mangoGroupDecoded.oracles =  mangoGroup.oracles.map( i => i.toBase58());\n\n    mangoGroupDecoded.perpMarkets =  mangoGroup.perpMarkets.map( i => {\n      return {\n        baseLotSize: i.baseLotSize.toString(),\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        makerFee: i.makerFee.toString(),\n        perpMarket:  i.perpMarket.toBase58(),\n        quoteLotSize: i.quoteLotSize.toString(),\n        takerFee:  i.takerFee.toString(),\n      }\n    });\n\n    mangoGroupDecoded.spotMarkets =  mangoGroup.spotMarkets.map( i => {\n      return {\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        spotMarket:  i.spotMarket.toBase58(),\n      }\n    });\n\n    mangoGroupDecoded.tokens =  mangoGroup.tokens.map( i => {\n      return {\n        decimals: i.decimals,\n        mint: i.mint.toBase58(),\n        rootBank: i.rootBank.toBase58(),\n      }\n    });\n    setMangoGroup(mangoGroupDecoded)\n    console.error(\"mango group DECODED**:: \", mangoGroupDecoded)\n\n\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    console.log(\"nodebank:: \", nodeBank)\n    let nodeBankDecode = {\n      borrows:  nodeBank.borrows.toString(),\n      deposits: nodeBank.deposits.toString(),\n      vault: nodeBank.vault.toBase58()\n    }\n    setNodeBank(nodeBankDecode)\n    console.error(\"nodeBankDecode:: \", nodeBankDecode)\n\n    let rootBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].rootKey))\n    let rootBank = RootBankLayout.decode(rootBankInfo.data)\n    console.log(\"rootBank:: \", rootBank)\n    let rootBankDecode = {\n      optimalUtil:  rootBank.optimalUtil.toString(),\n      optimalRate: rootBank.optimalRate.toString(),\n      maxRate: rootBank.maxRate.toString(),\n      depositIndex:  rootBank.depositIndex.toString(),\n      borrowIndex: rootBank.borrowIndex.toString(),\n      lastUpdated: rootBank.lastUpdated.toString(),\n    }\n    setRootBank(rootBankDecode)\n    console.error(\"rootBankDecode:: \", rootBankDecode)\n\n    return;\n}\n\nconst getMangoAccountData = async () => {\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  console.log(\"Fetched Client\")\n  let mangoAcc = await client.getMangoAccount(new PublicKey(mangoAccount), new PublicKey(ids.serumProgramId))\n  console.log(\"mangoAccount:: \", mangoAccount)\n\n  let mangoAccountDecoded = {};\n  mangoAccountDecoded.mangoGroup = mangoAcc.mangoGroup.toBase58();\n  mangoAccountDecoded.borrows = mangoAcc.borrows.map( i => i.toString());\n  mangoAccountDecoded.clientOrderIds = mangoAcc.clientOrderIds.map( i => i.toString());\n  mangoAccountDecoded.deposits = mangoAcc.deposits.map( i => i.toString());\n  mangoAccountDecoded.orders = mangoAcc.orders.map( i => i.toString());\n\n  mangoAccountDecoded.perpAccounts =  mangoAcc.perpAccounts.map( i => {\n    return {\n      asksQuantity: i.asksQuantity.toString(),\n      basePosition: i.basePosition.toString(),\n      bidsQuantity: i.bidsQuantity.toString(),\n      longSettledFunding: i.longSettledFunding.toString(),\n      mngoAccrued: i.mngoAccrued.toString(),\n      quotePosition: i.quotePosition.toString(),\n      shortSettledFunding: i.shortSettledFunding.toString(),\n      takerBase: i.takerBase.toString(),\n      takerQuote: i.takerQuote.toString(),\n    }\n  });\n  mangoAccountDecoded.spotOpenOrders = mangoAcc.spotOpenOrders.map( i => i.toBase58());\n  setMangoAccountData(mangoAccountDecoded)\n  console.error(\"mangoAccountDecoded DECODED**:: \", mangoAccountDecoded)\n\n}\n\n\n  return (\n    <div className=\"form-div\">\n    <h4>Accounts</h4>\n      <p> programID : {programIdX}</p>\n      <p> adminAccount : {adminAccountX}</p>\n      <p> fundAddress : {fundAddress}</p>\n\n\n   \n     <hr/>\n     <h4>FUND DATA </h4>\n     <button onClick={handleGetFundData}>GET FUND STATE</button>\n      {\n        fundData &&\n          <>\n            <p> signer_nonce  : {fundData.signer_nonce}</p>\n          \n            <p> no_of_investments : {fundData.no_of_investments}</p>\n           <br/>\n\n            <p> min_amount  : {fundData.min_amount.toString()}</p>\n            <p> performance_fee_percentage  : {fundData.performance_fee_percentage.toString()}</p>\n         \n            <p> total_amount in fund USDC  : {fundData.total_amount.toString()}</p>\n            <p> current_index  : {fundData.current_index.toString()}</p>\n            <br/>\n\n            <p> pending_deposits  : {fundData.pending_deposits.toString()}</p>\n            <p> pending_withdrawals  : {fundData.pending_withdrawals.toString()}</p>\n\n            <p> manager_account  : {fundData.manager_account.toBase58()}</p>\n            <p> usdc_vault_key  : {fundData.usdc_vault_key.toBase58()}</p>\n            <p> mango_account  : {fundData.mango_account.toBase58()}</p>\n            <p> delegate  : {fundData.delegate.toBase58()}</p>\n            <p> Lockup  : {fundData.lockup.toString()}</p>\n\n            <br/>\n           \n          </>\n      }\n\n\n\n\n\n\n      <hr/>\n        Mango account  ::: {' '}\n        <input type=\"text\" value={mangoAccount} onChange={(event) => setMangoAccount(event.target.value)} />\n        <button onClick={getMangoAccountData}>GET  MANGO ACC DATA </button>\n        <br />\n      {\n        mangoAccount && mangoAccountData &&\n        <>\n         <h4>MANGO ACC :{mangoAccount} </h4>\n            <p> mangoGroup : {mangoAccountData.admin}</p>\n            <b> borrows :</b>\n            <p>\n             { \n             mangoAccountData?.borrows?.length &&\n             mangoAccountData.borrows.map((i,x)=> <> {x} = {i} <b>_||_</b></>  )\n                }\n            </p>\n           <b> clientOrderIds :</b>\n           { mangoAccountData?.clientOrderIds && mangoAccountData?.clientOrderIds.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n           <b> deposits :</b>\n           { mangoAccountData?.deposits && mangoAccountData?.deposits.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n  \n           <b> orders :</b>\n           { mangoAccountData?.orders && mangoAccountData?.orders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n          \n           <b> spotOpenOrders :</b>\n           { mangoAccountData?.spotOpenOrders && mangoAccountData?.spotOpenOrders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n\n           <b>perpAccounts</b>\n            {\n                 mangoAccountData.perpAccounts?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>index</th>\n\n                                        <th style={{ width: \"15%\" }}>asksQuantity</th>\n                                          <th style={{ width: \"15%\" }}>basePosition</th>\n                                          <th style={{ width: \"15%\" }}>bidsQuantity</th>\n                                          <th style={{ width: \"15%\" }}>longSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>mngoAccrued</th>\n                                          <th style={{ width: \"15%\" }}>quotePosition</th>\n\n                                          <th style={{ width: \"15%\" }}>shortSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>takerBase</th>\n                                          <th style={{ width: \"15%\" }}>takerQuote</th>\n\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoAccountData.perpAccounts && \n                            mangoAccountData.perpAccounts.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{x}</td>\n\n                                <td >{i?.asksQuantity}</td>\n                                <td >{i?.basePosition}</td>\n                                <td >{i?.bidsQuantity}</td>\n                                <td >{i?.longSettledFunding}</td>\n                                <td >{i?.mngoAccrued}</td>\n                                <td >{i?.quotePosition}</td>\n\n                                <td >{i?.shortSettledFunding}</td>\n                                <td >{i?.takerBase}</td>\n                                <td >{i?.takerQuote}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n  \n        \n        </>\n      }\n\n\n\n\n\n      <hr/>\n      <h4>MANGO GRP </h4>\n      <button onClick={getAllDecodeMangoData}>GET ALL MANGO DATA </button>\n      {\n        mangoGroup &&\n          <>\n           \n            <p> admin : {mangoGroup.admin}</p>\n            <p> dexProgramId : {mangoGroup.dexProgramId}</p>\n            <p> insuranceVault : {mangoGroup.insuranceVault}</p>\n            <p> mangoCache : {mangoGroup.mangoCache}</p>\n            <p> msrmVault : {mangoGroup.msrmVault}</p>\n\n            <p> numOracles : {mangoGroup.numOracles}</p>\n            <b>mangoGroup-oracles</b>\n            <ul>\n            {\n              mangoGroup.oracles &&\n              mangoGroup.oracles.map((i,x)=> <li key={x}> <b>{x}</b> {i}</li> )\n            }\n            </ul>\n\n            <b>spotMarkets</b>\n            {\n                 mangoGroup.spotMarkets?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>initAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>initLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>liquidationFee</th>\n                                          <th style={{ width: \"15%\" }}>maintAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>maintLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>spotMarket</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.spotMarkets && \n                            mangoGroup.spotMarkets.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.initAssetWeight}</td>\n                                <td >{i?.initLiabWeight}</td>\n                                <td >{i?.liquidationFee}</td>\n                                <td >{i?.maintAssetWeight}</td>\n                                <td >{i?.maintLiabWeight}</td>\n                                <td >{i?.spotMarket}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n            <b>TOKENS</b>\n             {\n                 mangoGroup.tokens?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                          <th style={{ width: \"15%\" }}>mint</th>\n                                          <th style={{ width: \"15%\" }}>rootBank</th>\n                                          <th style={{ width: \"15%\" }}>decimals</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.tokens && \n                            mangoGroup.tokens.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.mint}</td>\n                                <td >{i?.rootBank}</td>\n                                <td >{i?.decimals}</td>\n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n\n           </> \n      }\n      <h4>USDC NODE BANK {ids.tokens[0].nodeKeys[0]}</h4>\n      {nodeBank && \n        <>\n            <p> borrows : {nodeBank.borrows}</p>\n            <p> deposits : {nodeBank.deposits}</p>\n            <p> vault : {nodeBank.vault}</p>\n        </>\n      }\n      <h4>USDC ROOT BANK {ids.tokens[0].rootKey}</h4>\n      {rootBank && \n        <>\n            <p> depositIndex : {rootBank.depositIndex}</p>\n            <p> borrowIndex : {rootBank.borrowIndex}</p>\n            <p> lastUpdated : {rootBank.lastUpdated}</p>\n            <p> maxRate : {rootBank.maxRate}</p>\n            <p> optimalUtil : {rootBank.optimalUtil}</p>\n            <p> optimalRate : {rootBank.optimalRate}</p>\n\n        </>\n      }\n\n      \n   \n  </div>\n  )\n}\n\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/AllFundsInvestors.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278","279","280","281","282","283","284","285","286","287","288","289","290","291"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, FUND_ACCOUNT_KEY, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, INVESTOR_DATA, PLATFORM_DATA, SPL_TOKEN_MINT_DATA, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { Card, Col, Row, Table } from 'reactstrap';\nimport { Blob, seq, struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\nimport { MangoClient } from '@blockworks-foundation/mango-client';\nimport bs58 from 'bs58';\n\nexport const AllFundsInvestors = () => {\n\n  const [investments, setInvestments] = useState([])\n  const [funds, setFunds] = useState([])\n\n  const handleGetAllInvestments = async () => {\n\n    //  const userkey = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n    //  const key = walletProvider?.publicKey;\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [\n        { dataSize: INVESTOR_DATA.span },\n        {\n          // memcmp: { offset: INVESTOR_DATA.offsetOf('owner'), bytes: userkey.toBase58() },\n        memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(1, 'le')).toArray())}\n        }\n      ]\n    });\n    // console.log(\"investments::\",investments)\n    const newInvestors = []\n    for (const investment of investments) {\n      const invStateData = INVESTOR_DATA.decode(investment.account.data)\n      invStateData['ivnStatePubKey'] = investment.pubkey;\n      if (invStateData.is_initialized) {\n        newInvestors.push(invStateData)\n      }\n    }\n    console.log(\"newInvestors::\", newInvestors)\n    setInvestments(newInvestors);\n  }\n\n  const handleGetAllFunds = async () => {\n    const managers = []\n    const allFunds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(\"allFunds len\",allFunds.length);\n    const MANGO_PROGRAM_ID_V3 = new PublicKey('mv3ekLzLbnVPNxjSKvqBpU3ZeZXPQdEC3bp5MDEBG68');\n    const SERUM_PROGRAM_ID_V3 = new PublicKey('9xQeWvG816bUx9EPjHmaT23yvVM2ZWbrrpZb9PusVFin');\n    const MANGO_GROUP_ACCOUNT_V3 = new PublicKey('98pjRuQjK3qA6gXts96PqZT4Ze5QmnCmt3QYjhbUSPue');\n\n    const client = new MangoClient(connection, MANGO_PROGRAM_ID_V3)\n    let mangoGroup = await client.getMangoGroup(MANGO_GROUP_ACCOUNT_V3)\n    const mangoCache = await mangoGroup.loadCache(connection);\n    const rootBanks = await mangoGroup.loadRootBanks(connection) // necessay for loading deposit rates\n\n    for (const data of allFunds) {\n      const decodedData = FUND_DATA.decode(data.account.data);\n      let mangoAccount = await client.getMangoAccount(decodedData.mango_account, SERUM_PROGRAM_ID_V3)\n\n      if (decodedData.is_initialized) {\n        managers.push({\n          fundState: decodedData,\n          fundPDA: data.pubkey.toBase58(),\n          no_of_investments: decodedData.no_of_investments,\n          min_amount: decodedData.min_amount.toString(),\n          performance_fee_percentage: decodedData.performance_fee_percentage.toString(),\n          total_amount: decodedData.total_amount.toString(),\n\n          current_index: decodedData.current_index.toString(),\n\n          pending_deposits: decodedData.pending_deposits.toString(),\n          pending_withdrawals: decodedData.pending_withdrawals.toString(),\n\n\n          manager_account: decodedData.manager_account.toBase58(),\n          usdc_vault_key: decodedData.usdc_vault_key.toBase58(),\n          mango_account: decodedData.mango_account.toBase58(),\n          delegate: decodedData.delegate.toBase58(),\n\n          index0: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[0], mangoGroup, 0)).toFixed(6),\n          index1: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[1], mangoGroup, 1)).toFixed(6),\n          index2: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[2], mangoGroup, 2)).toFixed(6),\n          index3: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[3], mangoGroup, 3)).toFixed(6),\n          index4: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[4], mangoGroup, 4)).toFixed(6),\n          index5: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[5], mangoGroup, 5)).toFixed(6),\n          index6: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[6], mangoGroup, 6)).toFixed(6),\n          // index7: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[7], mangoGroup, 7)).toFixed(6),\n          index8: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[8], mangoGroup, 8)).toFixed(6),\n          // index9: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[9], mangoGroup, 9)).toFixed(6),\n          index10: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[10], mangoGroup, 10)).toFixed(6),\n          index11: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[11], mangoGroup, 11)).toFixed(6),\n          index12: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[12], mangoGroup, 12)).toFixed(6),\n          // index13: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[13], mangoGroup, 13)).toFixed(6),\n          index14: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[14], mangoGroup, 14)).toFixed(6),\n          index15: (mangoAccount.getUiDeposit(mangoCache.rootBankCache[15], mangoGroup, 15)).toFixed(6),\n\n        });\n      } else {\n        console.log(\"not init fund :\",data.pubkey.toBase58())\n      }\n    }\n    console.log(\"managers:\", managers);\n    setFunds(managers);\n  }\n\n  return (\n    <div className=\"form-div\">\n      <Card className=\"justify-content-center\">\n        <Row className=\"justify-content-between\">\n          <Col lg=\"12\" xs=\"12\">\n            <h4>Investments</h4>\n            <button onClick={handleGetAllInvestments}> get All Investments</button>\n\n            <Table\n              className=\"tablesorter\"\n              responsive\n              width=\"100%\"\n              style={{ overflow: 'hidden !important', textAlign: 'center' }}\n            >\n              <thead className=\"text-primary\">\n                <tr>\n                  <th style={{ width: \"15%\" }}>index</th>\n                  <th style={{ width: \"15%\" }}>ivnStatePubKey</th>\n                  <th style={{ width: \"15%\" }}>fund</th>\n                  <th style={{ width: \"15%\" }}>owner</th>\n                  <th style={{ width: \"15%\" }}>investment_status</th>\n                  <th style={{ width: \"15%\" }}>amount</th>\n                  <th style={{ width: \"15%\" }}>start_index</th>\n\n                \n\n                \n                </tr>\n              </thead>\n              <tbody>\n                {\n                  investments &&\n\n                  investments.map((i, x) => {\n                    return <tr key={i?.ivnStatePubKey?.toBase58()}>\n                      <td >{x}</td>\n                      <td >{i?.ivnStatePubKey?.toBase58()}</td>\n                      <td >{i?.fund?.toBase58()}</td>\n                      <td >{i?.owner?.toBase58()}</td>\n                      <td>{i?.investment_status}</td>\n                      <td>{i?.amount?.toString() / 10 ** 6}</td>\n                      <td>{i?.start_index?.toString()}</td>\n\n                  \n\n                    </tr>\n                  })\n                }\n              </tbody>\n            </Table>\n\n\n          </Col>\n        </Row>\n        <Row className=\"justify-content-between\">\n          <Col lg=\"12\" xs=\"12\">\n            <h4>Funds</h4>\n\n            <button onClick={handleGetAllFunds}> get All Funds</button>\n\n            <Table\n              className=\"tablesorter\"\n              responsive\n              width=\"100%\"\n              style={{ overflow: 'hidden !important', textAlign: 'center' }}\n            >\n              <thead className=\"text-primary\">\n                <tr>\n                  <th style={{ width: \"15%\" }}>index</th>\n                  <th style={{ width: \"15%\" }}>fundManager</th>\n                  <th style={{ width: \"15%\" }}>fundPDA</th>\n\n                  <th style={{ width: \"15%\" }}>min_amount</th>\n                  <th style={{ width: \"15%\" }}>performance_fee_percentage</th>\n                  <th style={{ width: \"15%\" }}>total_amount</th>\n\n                  <th style={{ width: \"15%\" }}>current_index</th>\n                  <th style={{ width: \"15%\" }}>mango_account</th>\n\n                  <th style={{ width: \"15%\" }}>0</th>\n                  <th style={{ width: \"15%\" }}>1</th>\n                  <th style={{ width: \"15%\" }}>2</th>\n                  <th style={{ width: \"15%\" }}>3</th>\n                  <th style={{ width: \"15%\" }}>4</th>\n                  <th style={{ width: \"15%\" }}>5</th>\n                  <th style={{ width: \"15%\" }}>6</th>\n                  {/* <th style={{ width: \"15%\" }}>7</th> */}\n                  <th style={{ width: \"15%\" }}>8</th>\n                  {/* <th style={{ width: \"15%\" }}>9</th> */}\n                  <th style={{ width: \"15%\" }}>10</th>\n                  <th style={{ width: \"15%\" }}>11</th>\n                  <th style={{ width: \"15%\" }}>12</th>\n                  {/* <th style={{ width: \"15%\" }}>13</th> */}\n                  <th style={{ width: \"15%\" }}>14</th>\n                  <th style={{ width: \"15%\" }}>15</th>\n\n                </tr>\n              </thead>\n\n\n              <tbody>\n                {\n                  funds &&\n\n                  funds.map((i, x) => {\n                    return <tr key={x}>\n                      <td >{x}</td>\n                      <td >{i?.manager_account}</td>\n                      <td >{i?.fundPDA}</td>\n\n                      <td >{i?.min_amount}</td>\n                      <td >{i?.performance_fee_percentage}</td>\n                      <td >{i?.total_amount}</td>\n                      <td >{i?.current_index}</td>\n                      <td >{i?.mango_account}</td>\n\n                      <td >{i?.index0}</td>\n                      <td >{i?.index1}</td>\n                      <td >{i?.index2}</td>\n                      <td >{i?.index3}</td>\n                      <td >{i?.index4}</td>\n                      <td >{i?.index5}</td>\n                      <td >{i?.index6}</td>\n                      {/* <td >{i?.index7}</td> */}\n                      <td >{i?.index8}</td>\n                      {/* <td >{i?.index9}</td> */}\n                      <td >{i?.index10}</td>\n                      <td >{i?.index11}</td>\n                      <td >{i?.index12}</td>\n                      {/* <td >{i?.index13}</td> */}\n                      <td >{i?.index14}</td>\n                      <td >{i?.index15}</td>\n\n                    </tr>\n                  })\n                }\n              </tbody>\n            </Table>\n\n          </Col>\n        </Row>\n      </Card>\n    </div>\n  )\n}\n\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ProcessWithdraws.js",["292","293","294","295","296","297","298","299","300","301","302","303"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ProcessWithdraws = () => {\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesWithdraw = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 5,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n  const handleSelectInvestment = async(event) => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Process Withdraw</h4>\n      \n      <button onClick={handleGetInvestors}>Load Investments of my fund</button>\n      <br />\n      <label htmlFor=\"funds\">Select Investment Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\n        {\n          investments.map((i) => {\n            return (<option key={i} value={i}>{i}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleprocesWithdraw}> Process Withdraw</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ProcessDeposits.js",["304","305","306","307","308","309","310","311","312","313","314","315","316"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ProcessDeposits = () => {\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 4,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(1, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n  const handleSelectInvestment = async(event) => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Process Deposit</h4>\n      \n      <br />\n      <label htmlFor=\"funds\">Select Investment Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\n        {\n          investments.map((i) => {\n            return (<option key={i} value={i}>{i}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleprocesDeposit}> Process Deposit</button>\n      <button onClick={handleGetInvestors}>Load Investments of my fund</button>\n    </div>\n  )\n}\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/constants.js",[],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/web3.js",["317","318","319"],"import { initializeAccount } from \"@project-serum/serum/lib/token-instructions\";\nimport { PublicKey, sendAndConfirmTransaction, SystemProgram, Transaction, sendTransaction, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, connection, RENT_PROGRAM_ID, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"./constants\";\n\nconst GREETING_SIZE = 171;\n\nexport async function setWalletTransaction(\n  instruction,\n  publicKey\n) {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = publicKey;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\n\nexport async function signAndSendTransaction(\n  wallet,\n  transaction\n) {\n  console.log(`wallet :::`, wallet)\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize(), {\n    skipPreflight : true,\n    // maxRetries : 3\n    preflightCommitment : 'confirmed'\n  });\n  console.log(\"send raw transaction\");\n  return signature;\n}\n\nexport const createKeyIfNotExists = async (wallet, payerAccount, programId, seed, size, transaction) => {\n  const greetedPubkey = await PublicKey.createWithSeed(\n    wallet.publicKey,\n    seed,\n    programId,\n  );\n\n  console.log(`greetedPubkey :: `, greetedPubkey)\n\n  // Check if the greeting account has already been created\n  const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n\n  console.log(`greetedAccount ::: `, greetedAccount)\n  if (greetedAccount === null) {\n    console.log(\n      'Creating account',\n      greetedPubkey.toBase58(),\n      'to say hello to',\n    );\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n      size,\n    );\n\n    // const transaction = new Transaction().add(\n\n    // );\n    console.log(`lamports :::: `, lamports)\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: seed,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: size,\n        programId,\n      }))\n\n    // await sendAndConfirmTransaction(connection, transaction, [payerAccount]);\n\n    //await signAndSendTransaction(wallet, transaction)\n  }\n  return greetedPubkey;\n}\n\nexport async function createProgramAccountIfNotExist(\n  connection,\n  account,\n  owner,\n  programId,\n  lamports,\n  size,\n  transaction,\n  signer\n) {\n  let publicKey\n\n  if (account) {\n    publicKey = new PublicKey(account)\n  } else {\n    const newAccount = new Account()\n    publicKey = newAccount.publicKey\n\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: owner,\n        newAccountPubkey: publicKey,\n        lamports: lamports ?? (await connection.getMinimumBalanceForRentExemption(size)),\n        space: size,\n        programId\n      })\n    )\n\n    signer.push(newAccount)\n  }\n\n  return publicKey\n}\n\nexport async function createAccountInstruction(\n  connection,\n  payer,\n  space,\n  programId,\n  lamports,\n  transaction,\n  signers\n) {\n  const account = new Account();\n  const instruction = SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    lamports: lamports ? lamports : await connection.getMinimumBalanceForRentExemption(space),\n    space,\n    programId\n  })\n\n  transaction.add(instruction);\n  signers.push(account);\n\n  return account.publicKey;\n}\n\n\nexport async function createTokenAccountIfNotExist(\n  connection,\n  account,\n  owner,\n  mintAddress,\n  lamports,\n  transaction,\n  signer\n) {\n  let publicKey\n\n  if (account) {\n    publicKey = new PublicKey(account)\n  } else {\n    publicKey = await createProgramAccountIfNotExist(\n      connection,\n      account,\n      owner,\n      TOKEN_PROGRAM_ID,\n      lamports,\n      165,\n      transaction,\n      signer\n    )\n\n    transaction.add(\n      initializeAccount({\n        account: publicKey,\n        mint: new PublicKey(mintAddress),\n        owner\n      })\n    )\n  }\n\n  return publicKey\n}\n\n// associated address \n\n\nexport async function findProgramAddress(seeds, programId) {\n  const [publicKey, nonce] = await PublicKey.findProgramAddress(seeds, programId)\n  return { publicKey, nonce }\n}\n\n\nexport async function findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  const { publicKey } = await findProgramAddress(\n    [walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  )\n  return publicKey\n}\n\n\n\nexport async function createAssociatedTokenAccountIfNotExist(\n  wallet,\n  tokenMintAddress,\n  owner,\n  transaction\n) {\n  const associatedTokenAddress = await findAssociatedTokenAddress(owner, tokenMintAddress)\n  \n  const tokenAccount = await connection.getAccountInfo(associatedTokenAddress);\n  \n  if (tokenAccount == null)\n  {\n    const keys = [\n      {\n        pubkey: wallet.publicKey,\n        isSigner: true,\n        isWritable: true\n      },\n      {\n        pubkey: associatedTokenAddress,\n        isSigner: false,\n        isWritable: true\n      },\n      {\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: tokenMintAddress,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: SYSTEM_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: RENT_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }\n    ]\n    transaction.add(\n      new TransactionInstruction({\n        keys,\n        programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n        data: Buffer.from([])\n      }))\n    //await signAndSendTransaction(wallet, transaction)\n  }\n  return associatedTokenAddress\n}\n\nexport const commitment = 'confirmed'\n\n\nexport async function signTransaction(\n  connection,\n  wallet,\n  transaction,\n  signers = []\n) {\n  transaction.recentBlockhash = (await connection.getRecentBlockhash(commitment)).blockhash\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey))\n  if (signers.length > 0) {\n    transaction.partialSign(...signers)\n  }\n  return await wallet.signTransaction(transaction)\n}\n\nexport async function sendNewTransaction(\n  connection,\n  wallet,\n  transaction,\n  signers = [],\n) {\n  const signedTransaction = await signTransaction(connection, wallet, transaction, signers)\n  return await sendSignedTransaction(connection, signedTransaction)\n}\n\nexport async function sendSignedTransaction(connection, signedTransaction) {\n  const rawTransaction = signedTransaction.serialize()\n\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n    preflightCommitment: commitment\n  })\n\n  return txid\n}","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/programLayouts.js",["320"],"import { Blob, seq, struct, u32, u8, u16, ns64 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { I80F48Layout } from '@blockworks-foundation/mango-client';\nimport BN from 'bn.js';\n\n\nclass PublicKeyLayout extends Blob {\n  constructor(property) {\n    super(32, property);\n  }\n\n  decode(b, offset) {\n    return new PublicKey(super.decode(b, offset));\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toBuffer(), b, offset);\n  }\n}\n\nexport function publicKeyLayout(property = \"\") {\n  return new PublicKeyLayout(property);\n}\n\nclass BNLayout extends Blob {\n  constructor(number, property) {\n    super(number, property);\n    // restore prototype chain\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n\n  decode(b, offset) {\n    return new BN(super.decode(b, offset), 10, 'le');\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nclass U64F64Layout extends Blob {\n  constructor(property) {\n    super(16, property);\n  }\n\n  decode(b, offset) {\n    const raw = new BN(super.decode(b, offset), 10, 'le');\n\n    return raw / Math.pow(2, 64);\n  }\n\n  encode(src, b, offset) {\n    console.log(\"src ::: \", src)\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nexport function U64F64(property = \"\") {\n  return new U64F64Layout(property)\n}\n\nexport function I80F48(property = \"\") {\n  return new I80F48Layout(property)\n}\n\nexport function u64(property = \"\") {\n  return new BNLayout(8, property);\n}\n\nexport function u128(property = \"\") {\n  return new BNLayout(16, property);\n}\n\n\nexport function i64(property = '') {\n  return new BNLayout(8, property, true);\n}\n\nexport const FUND_DATA = struct([\n  u8('is_initialized'),\n  u8('signer_nonce'),\n  u8('block_deposits'),\n  u8('paused_for_settlement'),\n  u32('no_of_investments'),\n  u32('no_of_pending_withdrawals'),\n  u32('no_of_settle_withdrawals'),\n\n  u64('min_amount'),\n  I80F48('performance_fee_percentage'),\n  I80F48('total_amount'),\n  I80F48('performance_fee'),\n  I80F48('current_index'),\n\n  u64('pending_deposits'),\n  u64('pending_withdrawals'),\n\n  publicKeyLayout('manager_account'),\n  publicKeyLayout('usdc_vault_key'),\n  publicKeyLayout('mango_account'),\n  publicKeyLayout('delegate'),\n  seq(\n    struct([\n    I80F48('share'),\n    u8('ready_for_settlement'),\n    seq(u8('spot'), 15, 'spot'),\n    seq(u8('perp'), 15, 'perp'),\n    u8('padding'),\n    I80F48('penalty'),\n\n  ]), 1, 'forceSettleData'),\n  I80F48('lockup'),\n\n  publicKeyLayout('reimbursement_vault_key'), // 32\n\n  seq(u8('padding'), 112, 'padding'),\n\n\n])\n\nexport const INVESTOR_DATA = struct([\n  u8('is_initialized'),\n  u8('investment_status'),\n  seq(u8('padding'), 6),\n\n  u64('amount'),\n  I80F48('start_index'),\n  u64('returns'),\n  publicKeyLayout('owner'),\n  publicKeyLayout('fund'),\n  seq(u8('extra_padding'), 160),\n\n])\n\nexport const OLD_INVESTOR_DATA = struct([\n  u8('is_initialized'),\n  u8('has_withdrawn'),\n  u8('withdrawn_from_margin'),\n  seq(u8('padding'), 5),\n\n\n  publicKeyLayout('owner'),\n  u64('amount'),\n  U64F64('start_performance'),\n  u64('amount_in_router'),\n  publicKeyLayout('manager'),\n  seq(U64F64(), 2, 'margin_debt'),\n  seq(u64(), 2, 'margin_position_id'),\n\n  seq(u8(), 8, 'token_indexes'),\n  seq(u64(), 8, 'token_debts'),\n  U64F64('share'),\n  u64('frikuld'),\n  u64('frikfcd'),\n\n\n])\n\nexport const OLD_FUND_DATA = struct([\n  u8('is_initialized'),\n  u8('number_of_active_investments'),\n  u8('no_of_investments'),\n  u8('signer_nonce'),\n  u8('no_of_margin_positions'),\n  u8('no_of_assets'),\n  u16('position_count'),\n\n  u8('version'),\n  u8('is_private'),\n  u16('fund_v3_index'),\n  seq(u8(), 4, 'padding'),\n\n  u64('min_amount'),\n  U64F64('min_return'),\n  U64F64('performance_fee_percentage'),\n  U64F64('total_amount'),\n  U64F64('prev_performance'),\n\n  u64('amount_in_router'),\n  U64F64('performance_fee'),\n  publicKeyLayout('manager_account'),\n  publicKeyLayout('fund_pda'),\n  seq(\n    struct([\n      u8('is_active'),\n      seq(u8(),3,'index'),\n      u8('mux'),\n      u8('is_on_mango'),\n      seq(u8(), 2, 'padding'),\n      u64('balance'),\n      u64('debt'),\n      publicKeyLayout('vault')\n    ]),\n    8, 'tokens'\n  ),\n  seq(publicKeyLayout(), 10, 'investors'),\n  \n  struct([\n      publicKeyLayout('mango_account'),\n      seq(u8(),4,'perp_markets'),\n      u8('deposit_index'),\n      u8('markets_active'),\n      u8('deposits_active'),\n      u8('xpadding'),\n      seq(u64(), 2, 'investor_debts'),\n      seq(u8('padding'), 24),\n    ],'mango_positions'),\n\n  // mangoInfoLayout('mango_positions'),\n  \n     \n  seq(u8(), 80, 'margin_update_padding'),\n  seq(u8(), 32, 'padding'),\n\n])\n\n\n\nexport const AMM_INFO_LAYOUT_V4 = struct([\n  u64('status'),\n  u64('nonce'),\n  u64('orderNum'),\n  u64('depth'),\n  u64('coinDecimals'),\n  u64('pcDecimals'),\n  u64('state'),\n  u64('resetFlag'),\n  u64('minSize'),\n  u64('volMaxCutRatio'),\n  u64('amountWaveRatio'),\n  u64('coinLotSize'),\n  u64('pcLotSize'),\n  u64('minPriceMultiplier'),\n  u64('maxPriceMultiplier'),\n  u64('systemDecimalsValue'),\n  // Fees\n  u64('minSeparateNumerator'),\n  u64('minSeparateDenominator'),\n  u64('tradeFeeNumerator'),\n  u64('tradeFeeDenominator'),\n  u64('pnlNumerator'),\n  u64('pnlDenominator'),\n  u64('swapFeeNumerator'),\n  u64('swapFeeDenominator'),\n  // OutPutData\n  u64('needTakePnlCoin'),\n  u64('needTakePnlPc'),\n  u64('totalPnlPc'),\n  u64('totalPnlCoin'),\n  u128('poolTotalDepositPc'),\n  u128('poolTotalDepositCoin'),\n  u128('swapCoinInAmount'),\n  u128('swapPcOutAmount'),\n  u64('swapCoin2PcFee'),\n  u128('swapPcInAmount'),\n  u128('swapCoinOutAmount'),\n  u64('swapPc2CoinFee'),\n\n  publicKeyLayout('poolCoinTokenAccount'),\n  publicKeyLayout('poolPcTokenAccount'),\n  publicKeyLayout('coinMintAddress'),\n  publicKeyLayout('pcMintAddress'),\n  publicKeyLayout('lpMintAddress'),\n  publicKeyLayout('ammOpenOrders'),\n  publicKeyLayout('serumMarket'),\n  publicKeyLayout('serumProgramId'),\n  publicKeyLayout('ammTargetOrders'),\n  publicKeyLayout('poolWithdrawQueue'),\n  publicKeyLayout('poolTempLpTokenAccount'),\n  publicKeyLayout('ammOwner'),\n  publicKeyLayout('pnlOwner')\n])","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/solanaWeb3.js",[],"/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/components/ConnectWalletModal.js",["321","322"],"\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { GlobalState } from '../store/globalState'\nimport SolanaWalletAdapter from '@project-serum/sol-wallet-adapter'\nimport { cluster } from '../utils/constants';\nimport { PhantomWalletAdapter } from '../utils/wallets/PhantomWallet';\n\nconst connectWalletButtonLabel = 'Connect Wallet'\n\nexport const ConnectWalletModal = (props) => {\n\n  const [modal, setModal] = useState(false);\n  const [buttonLabel, setButtonLabel] = useState(connectWalletButtonLabel);\n\n  const toggle = () => setModal(!modal);\n\n  const providers = ['Sollet Extension', 'Sollet', 'Phantom'];\n\n  const handleSelectProvider = async (provider) => {\n    let walletProvider = {};\n    switch (provider) {\n      case providers[0]: {\n        walletProvider = new SolanaWalletAdapter(window.sollet, cluster)\n        break;\n      }\n      case providers[1]: {\n        walletProvider = new SolanaWalletAdapter(\"https://www.sollet.io\", cluster);\n        break;\n      }\n      case providers[2]: {\n        walletProvider = new PhantomWalletAdapter();\n        break;\n      }\n      default:\n        break;\n    }\n    await walletProvider.connect();\n    console.log(`walletProvider ::: `, walletProvider)\n    walletProvider.on('connect', publicKey => {\n      console.log('Connected to ' + publicKey.toBase58())\n      console.log(`walletProvider :: `, walletProvider)\n      GlobalState.update(s => {\n        s.walletProvider = walletProvider;\n        s.address = publicKey.toBase58();\n      })\n      setButtonLabel(provider);\n      toggle()\n    });\n  }\n\n  return (\n    <div>\n      <Button color=\"dark\"\n        onClick={toggle}>\n        {buttonLabel == connectWalletButtonLabel ? connectWalletButtonLabel : `Connected to ${buttonLabel}`}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>Choose Provider</ModalHeader>\n        <ModalBody>\n          {\n            providers.map((x) => {\n              return (\n                <div key={x} className=\"provider\" onClick={() => handleSelectProvider(x)}>{x}</div>\n              )\n            })\n          }\n        </ModalBody>\n        {/* <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter> */}\n      </Modal>\n    </div>\n  );\n}\n\nConnectWalletModal.propTypes = {\n  buttonLabel: PropTypes.string,\n  className: PropTypes.string\n};\n","/Users/raashid/investin/MANGO-MM-FUNDS/frontend/src/utils/wallets/PhantomWallet.js",[],{"ruleId":"323","replacedBy":"324"},{"ruleId":"325","replacedBy":"326"},{"ruleId":"327","severity":1,"message":"328","line":4,"column":10,"nodeType":"329","messageId":"330","endLine":4,"endColumn":19},{"ruleId":"327","severity":1,"message":"331","line":7,"column":10,"nodeType":"329","messageId":"330","endLine":7,"endColumn":25},{"ruleId":"327","severity":1,"message":"332","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":17},{"ruleId":"327","severity":1,"message":"333","line":11,"column":10,"nodeType":"329","messageId":"330","endLine":11,"endColumn":25},{"ruleId":"327","severity":1,"message":"334","line":15,"column":10,"nodeType":"329","messageId":"330","endLine":15,"endColumn":21},{"ruleId":"327","severity":1,"message":"335","line":19,"column":10,"nodeType":"329","messageId":"330","endLine":19,"endColumn":26},{"ruleId":"327","severity":1,"message":"336","line":20,"column":10,"nodeType":"329","messageId":"330","endLine":20,"endColumn":20},{"ruleId":"327","severity":1,"message":"337","line":21,"column":10,"nodeType":"329","messageId":"330","endLine":21,"endColumn":25},{"ruleId":"327","severity":1,"message":"338","line":22,"column":10,"nodeType":"329","messageId":"330","endLine":22,"endColumn":25},{"ruleId":"327","severity":1,"message":"339","line":23,"column":10,"nodeType":"329","messageId":"330","endLine":23,"endColumn":31},{"ruleId":"327","severity":1,"message":"340","line":27,"column":9,"nodeType":"329","messageId":"330","endLine":27,"endColumn":23},{"ruleId":"327","severity":1,"message":"341","line":29,"column":10,"nodeType":"329","messageId":"330","endLine":29,"endColumn":22},{"ruleId":"327","severity":1,"message":"342","line":29,"column":24,"nodeType":"329","messageId":"330","endLine":29,"endColumn":39},{"ruleId":"327","severity":1,"message":"343","line":4,"column":23,"nodeType":"329","messageId":"330","endLine":4,"endColumn":39},{"ruleId":"327","severity":1,"message":"344","line":7,"column":10,"nodeType":"329","messageId":"330","endLine":7,"endColumn":30},{"ruleId":"327","severity":1,"message":"345","line":7,"column":32,"nodeType":"329","messageId":"330","endLine":7,"endColumn":54},{"ruleId":"327","severity":1,"message":"346","line":9,"column":10,"nodeType":"329","messageId":"330","endLine":9,"endColumn":34},{"ruleId":"327","severity":1,"message":"347","line":9,"column":41,"nodeType":"329","messageId":"330","endLine":9,"endColumn":52},{"ruleId":"327","severity":1,"message":"348","line":9,"column":54,"nodeType":"329","messageId":"330","endLine":9,"endColumn":68},{"ruleId":"327","severity":1,"message":"349","line":9,"column":70,"nodeType":"329","messageId":"330","endLine":9,"endColumn":86},{"ruleId":"327","severity":1,"message":"350","line":21,"column":9,"nodeType":"329","messageId":"330","endLine":21,"endColumn":20},{"ruleId":"351","severity":1,"message":"352","line":314,"column":11,"nodeType":"353","messageId":"354","endLine":314,"endColumn":17},{"ruleId":"351","severity":1,"message":"352","line":348,"column":11,"nodeType":"353","messageId":"354","endLine":348,"endColumn":17},{"ruleId":"327","severity":1,"message":"328","line":1,"column":17,"nodeType":"329","messageId":"330","endLine":1,"endColumn":26},{"ruleId":"327","severity":1,"message":"355","line":2,"column":10,"nodeType":"329","messageId":"330","endLine":2,"endColumn":38},{"ruleId":"327","severity":1,"message":"356","line":2,"column":40,"nodeType":"329","messageId":"330","endLine":2,"endColumn":78},{"ruleId":"327","severity":1,"message":"344","line":2,"column":80,"nodeType":"329","messageId":"330","endLine":2,"endColumn":100},{"ruleId":"327","severity":1,"message":"357","line":2,"column":102,"nodeType":"329","messageId":"330","endLine":2,"endColumn":130},{"ruleId":"327","severity":1,"message":"358","line":2,"column":132,"nodeType":"329","messageId":"330","endLine":2,"endColumn":158},{"ruleId":"327","severity":1,"message":"359","line":2,"column":160,"nodeType":"329","messageId":"330","endLine":2,"endColumn":180},{"ruleId":"327","severity":1,"message":"345","line":2,"column":182,"nodeType":"329","messageId":"330","endLine":2,"endColumn":204},{"ruleId":"327","severity":1,"message":"360","line":3,"column":22,"nodeType":"329","messageId":"330","endLine":3,"endColumn":30},{"ruleId":"327","severity":1,"message":"343","line":3,"column":32,"nodeType":"329","messageId":"330","endLine":3,"endColumn":48},{"ruleId":"327","severity":1,"message":"361","line":3,"column":50,"nodeType":"329","messageId":"330","endLine":3,"endColumn":70},{"ruleId":"327","severity":1,"message":"362","line":3,"column":72,"nodeType":"329","messageId":"330","endLine":3,"endColumn":92},{"ruleId":"327","severity":1,"message":"363","line":3,"column":94,"nodeType":"329","messageId":"330","endLine":3,"endColumn":114},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"365","line":5,"column":24,"nodeType":"329","messageId":"330","endLine":5,"endColumn":26},{"ruleId":"327","severity":1,"message":"366","line":6,"column":21,"nodeType":"329","messageId":"330","endLine":6,"endColumn":34},{"ruleId":"327","severity":1,"message":"367","line":7,"column":10,"nodeType":"329","messageId":"330","endLine":7,"endColumn":26},{"ruleId":"327","severity":1,"message":"368","line":8,"column":21,"nodeType":"329","messageId":"330","endLine":8,"endColumn":34},{"ruleId":"327","severity":1,"message":"369","line":8,"column":36,"nodeType":"329","messageId":"330","endLine":8,"endColumn":39},{"ruleId":"327","severity":1,"message":"370","line":8,"column":41,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"371","line":9,"column":10,"nodeType":"329","messageId":"330","endLine":9,"endColumn":15},{"ruleId":"327","severity":1,"message":"372","line":10,"column":15,"nodeType":"329","messageId":"330","endLine":10,"endColumn":33},{"ruleId":"327","severity":1,"message":"373","line":33,"column":9,"nodeType":"329","messageId":"330","endLine":33,"endColumn":19},{"ruleId":"327","severity":1,"message":"374","line":112,"column":10,"nodeType":"329","messageId":"330","endLine":112,"endColumn":20},{"ruleId":"327","severity":1,"message":"375","line":112,"column":22,"nodeType":"329","messageId":"330","endLine":112,"endColumn":35},{"ruleId":"327","severity":1,"message":"376","line":113,"column":10,"nodeType":"329","messageId":"330","endLine":113,"endColumn":33},{"ruleId":"327","severity":1,"message":"377","line":113,"column":35,"nodeType":"329","messageId":"330","endLine":113,"endColumn":61},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"343","line":4,"column":55,"nodeType":"329","messageId":"330","endLine":4,"endColumn":71},{"ruleId":"327","severity":1,"message":"367","line":4,"column":73,"nodeType":"329","messageId":"330","endLine":4,"endColumn":89},{"ruleId":"327","severity":1,"message":"379","line":4,"column":91,"nodeType":"329","messageId":"330","endLine":4,"endColumn":108},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"356","line":6,"column":84,"nodeType":"329","messageId":"330","endLine":6,"endColumn":122},{"ruleId":"327","severity":1,"message":"346","line":6,"column":124,"nodeType":"329","messageId":"330","endLine":6,"endColumn":148},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"381","line":15,"column":10,"nodeType":"329","messageId":"330","endLine":15,"endColumn":21},{"ruleId":"327","severity":1,"message":"382","line":51,"column":9,"nodeType":"329","messageId":"330","endLine":51,"endColumn":17},{"ruleId":"351","severity":1,"message":"352","line":60,"column":11,"nodeType":"353","messageId":"354","endLine":60,"endColumn":17},{"ruleId":"327","severity":1,"message":"383","line":145,"column":9,"nodeType":"329","messageId":"330","endLine":145,"endColumn":27},{"ruleId":"351","severity":1,"message":"352","line":154,"column":11,"nodeType":"353","messageId":"354","endLine":154,"endColumn":17},{"ruleId":"327","severity":1,"message":"328","line":1,"column":17,"nodeType":"329","messageId":"330","endLine":1,"endColumn":26},{"ruleId":"327","severity":1,"message":"355","line":2,"column":10,"nodeType":"329","messageId":"330","endLine":2,"endColumn":38},{"ruleId":"327","severity":1,"message":"344","line":2,"column":80,"nodeType":"329","messageId":"330","endLine":2,"endColumn":100},{"ruleId":"327","severity":1,"message":"357","line":2,"column":102,"nodeType":"329","messageId":"330","endLine":2,"endColumn":130},{"ruleId":"327","severity":1,"message":"358","line":2,"column":132,"nodeType":"329","messageId":"330","endLine":2,"endColumn":158},{"ruleId":"327","severity":1,"message":"359","line":2,"column":160,"nodeType":"329","messageId":"330","endLine":2,"endColumn":180},{"ruleId":"327","severity":1,"message":"345","line":2,"column":182,"nodeType":"329","messageId":"330","endLine":2,"endColumn":204},{"ruleId":"327","severity":1,"message":"343","line":3,"column":32,"nodeType":"329","messageId":"330","endLine":3,"endColumn":48},{"ruleId":"327","severity":1,"message":"361","line":3,"column":50,"nodeType":"329","messageId":"330","endLine":3,"endColumn":70},{"ruleId":"327","severity":1,"message":"362","line":3,"column":72,"nodeType":"329","messageId":"330","endLine":3,"endColumn":92},{"ruleId":"327","severity":1,"message":"363","line":3,"column":94,"nodeType":"329","messageId":"330","endLine":3,"endColumn":114},{"ruleId":"327","severity":1,"message":"365","line":5,"column":24,"nodeType":"329","messageId":"330","endLine":5,"endColumn":26},{"ruleId":"327","severity":1,"message":"366","line":6,"column":21,"nodeType":"329","messageId":"330","endLine":6,"endColumn":34},{"ruleId":"327","severity":1,"message":"367","line":7,"column":10,"nodeType":"329","messageId":"330","endLine":7,"endColumn":26},{"ruleId":"327","severity":1,"message":"368","line":8,"column":21,"nodeType":"329","messageId":"330","endLine":8,"endColumn":34},{"ruleId":"327","severity":1,"message":"369","line":8,"column":36,"nodeType":"329","messageId":"330","endLine":8,"endColumn":39},{"ruleId":"327","severity":1,"message":"370","line":8,"column":41,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"371","line":9,"column":10,"nodeType":"329","messageId":"330","endLine":9,"endColumn":15},{"ruleId":"327","severity":1,"message":"372","line":10,"column":15,"nodeType":"329","messageId":"330","endLine":10,"endColumn":33},{"ruleId":"327","severity":1,"message":"373","line":29,"column":9,"nodeType":"329","messageId":"330","endLine":29,"endColumn":19},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"343","line":4,"column":55,"nodeType":"329","messageId":"330","endLine":4,"endColumn":71},{"ruleId":"327","severity":1,"message":"367","line":4,"column":73,"nodeType":"329","messageId":"330","endLine":4,"endColumn":89},{"ruleId":"327","severity":1,"message":"379","line":4,"column":91,"nodeType":"329","messageId":"330","endLine":4,"endColumn":108},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"356","line":6,"column":84,"nodeType":"329","messageId":"330","endLine":6,"endColumn":122},{"ruleId":"327","severity":1,"message":"346","line":6,"column":124,"nodeType":"329","messageId":"330","endLine":6,"endColumn":148},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"382","line":51,"column":9,"nodeType":"329","messageId":"330","endLine":51,"endColumn":17},{"ruleId":"327","severity":1,"message":"383","line":134,"column":9,"nodeType":"329","messageId":"330","endLine":134,"endColumn":27},{"ruleId":"351","severity":1,"message":"352","line":143,"column":11,"nodeType":"353","messageId":"354","endLine":143,"endColumn":17},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"343","line":4,"column":55,"nodeType":"329","messageId":"330","endLine":4,"endColumn":71},{"ruleId":"327","severity":1,"message":"379","line":4,"column":91,"nodeType":"329","messageId":"330","endLine":4,"endColumn":108},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"356","line":6,"column":84,"nodeType":"329","messageId":"330","endLine":6,"endColumn":122},{"ruleId":"327","severity":1,"message":"346","line":6,"column":124,"nodeType":"329","messageId":"330","endLine":6,"endColumn":148},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"381","line":19,"column":10,"nodeType":"329","messageId":"330","endLine":19,"endColumn":21},{"ruleId":"327","severity":1,"message":"384","line":19,"column":23,"nodeType":"329","messageId":"330","endLine":19,"endColumn":37},{"ruleId":"351","severity":1,"message":"352","line":71,"column":11,"nodeType":"353","messageId":"354","endLine":71,"endColumn":17},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"347","line":8,"column":54,"nodeType":"329","messageId":"330","endLine":8,"endColumn":65},{"ruleId":"327","severity":1,"message":"385","line":49,"column":9,"nodeType":"329","messageId":"330","endLine":49,"endColumn":30},{"ruleId":"327","severity":1,"message":"386","line":122,"column":11,"nodeType":"329","messageId":"330","endLine":122,"endColumn":20},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"387","line":1,"column":90,"nodeType":"329","messageId":"330","endLine":1,"endColumn":97},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"347","line":8,"column":54,"nodeType":"329","messageId":"330","endLine":8,"endColumn":65},{"ruleId":"327","severity":1,"message":"388","line":12,"column":8,"nodeType":"329","messageId":"330","endLine":12,"endColumn":18},{"ruleId":"327","severity":1,"message":"389","line":30,"column":18,"nodeType":"329","messageId":"330","endLine":30,"endColumn":27},{"ruleId":"390","severity":1,"message":"391","line":125,"column":6,"nodeType":"392","endLine":125,"endColumn":15,"suggestions":"393"},{"ruleId":"327","severity":1,"message":"386","line":362,"column":11,"nodeType":"329","messageId":"330","endLine":362,"endColumn":20},{"ruleId":"327","severity":1,"message":"394","line":3,"column":3,"nodeType":"329","messageId":"330","endLine":3,"endColumn":9},{"ruleId":"327","severity":1,"message":"395","line":1,"column":21,"nodeType":"329","messageId":"330","endLine":1,"endColumn":43},{"ruleId":"327","severity":1,"message":"328","line":2,"column":17,"nodeType":"329","messageId":"330","endLine":2,"endColumn":26},{"ruleId":"327","severity":1,"message":"343","line":5,"column":36,"nodeType":"329","messageId":"330","endLine":5,"endColumn":52},{"ruleId":"327","severity":1,"message":"396","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":14},{"ruleId":"327","severity":1,"message":"364","line":6,"column":16,"nodeType":"329","messageId":"330","endLine":6,"endColumn":20},{"ruleId":"327","severity":1,"message":"397","line":6,"column":22,"nodeType":"329","messageId":"330","endLine":6,"endColumn":28},{"ruleId":"327","severity":1,"message":"398","line":6,"column":30,"nodeType":"329","messageId":"330","endLine":6,"endColumn":33},{"ruleId":"327","severity":1,"message":"365","line":6,"column":35,"nodeType":"329","messageId":"330","endLine":6,"endColumn":37},{"ruleId":"327","severity":1,"message":"399","line":7,"column":21,"nodeType":"329","messageId":"330","endLine":7,"endColumn":40},{"ruleId":"327","severity":1,"message":"400","line":9,"column":10,"nodeType":"329","messageId":"330","endLine":9,"endColumn":14},{"ruleId":"327","severity":1,"message":"401","line":9,"column":16,"nodeType":"329","messageId":"330","endLine":9,"endColumn":19},{"ruleId":"327","severity":1,"message":"402","line":9,"column":21,"nodeType":"329","messageId":"330","endLine":9,"endColumn":24},{"ruleId":"327","severity":1,"message":"403","line":10,"column":28,"nodeType":"329","messageId":"330","endLine":10,"endColumn":34},{"ruleId":"327","severity":1,"message":"404","line":10,"column":52,"nodeType":"329","messageId":"330","endLine":10,"endColumn":69},{"ruleId":"327","severity":1,"message":"349","line":10,"column":71,"nodeType":"329","messageId":"330","endLine":10,"endColumn":87},{"ruleId":"327","severity":1,"message":"405","line":10,"column":89,"nodeType":"329","messageId":"330","endLine":10,"endColumn":108},{"ruleId":"327","severity":1,"message":"328","line":1,"column":17,"nodeType":"329","messageId":"330","endLine":1,"endColumn":26},{"ruleId":"327","severity":1,"message":"355","line":2,"column":10,"nodeType":"329","messageId":"330","endLine":2,"endColumn":38},{"ruleId":"327","severity":1,"message":"356","line":2,"column":40,"nodeType":"329","messageId":"330","endLine":2,"endColumn":78},{"ruleId":"327","severity":1,"message":"344","line":2,"column":80,"nodeType":"329","messageId":"330","endLine":2,"endColumn":100},{"ruleId":"327","severity":1,"message":"357","line":2,"column":102,"nodeType":"329","messageId":"330","endLine":2,"endColumn":130},{"ruleId":"327","severity":1,"message":"358","line":2,"column":132,"nodeType":"329","messageId":"330","endLine":2,"endColumn":158},{"ruleId":"327","severity":1,"message":"359","line":2,"column":160,"nodeType":"329","messageId":"330","endLine":2,"endColumn":180},{"ruleId":"327","severity":1,"message":"345","line":2,"column":182,"nodeType":"329","messageId":"330","endLine":2,"endColumn":204},{"ruleId":"327","severity":1,"message":"343","line":3,"column":22,"nodeType":"329","messageId":"330","endLine":3,"endColumn":38},{"ruleId":"327","severity":1,"message":"362","line":3,"column":40,"nodeType":"329","messageId":"330","endLine":3,"endColumn":60},{"ruleId":"327","severity":1,"message":"363","line":3,"column":62,"nodeType":"329","messageId":"330","endLine":3,"endColumn":82},{"ruleId":"327","severity":1,"message":"406","line":4,"column":10,"nodeType":"329","messageId":"330","endLine":4,"endColumn":21},{"ruleId":"327","severity":1,"message":"407","line":5,"column":21,"nodeType":"329","messageId":"330","endLine":5,"endColumn":32},{"ruleId":"327","severity":1,"message":"395","line":5,"column":34,"nodeType":"329","messageId":"330","endLine":5,"endColumn":56},{"ruleId":"327","severity":1,"message":"367","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":26},{"ruleId":"327","severity":1,"message":"368","line":7,"column":36,"nodeType":"329","messageId":"330","endLine":7,"endColumn":49},{"ruleId":"327","severity":1,"message":"399","line":7,"column":51,"nodeType":"329","messageId":"330","endLine":7,"endColumn":70},{"ruleId":"327","severity":1,"message":"370","line":7,"column":72,"nodeType":"329","messageId":"330","endLine":7,"endColumn":78},{"ruleId":"327","severity":1,"message":"371","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":15},{"ruleId":"327","severity":1,"message":"408","line":11,"column":10,"nodeType":"329","messageId":"330","endLine":11,"endColumn":14},{"ruleId":"327","severity":1,"message":"409","line":11,"column":16,"nodeType":"329","messageId":"330","endLine":11,"endColumn":19},{"ruleId":"327","severity":1,"message":"397","line":11,"column":21,"nodeType":"329","messageId":"330","endLine":11,"endColumn":27},{"ruleId":"327","severity":1,"message":"398","line":11,"column":29,"nodeType":"329","messageId":"330","endLine":11,"endColumn":32},{"ruleId":"327","severity":1,"message":"365","line":11,"column":34,"nodeType":"329","messageId":"330","endLine":11,"endColumn":36},{"ruleId":"327","severity":1,"message":"410","line":11,"column":38,"nodeType":"329","messageId":"330","endLine":11,"endColumn":41},{"ruleId":"327","severity":1,"message":"411","line":11,"column":43,"nodeType":"329","messageId":"330","endLine":11,"endColumn":47},{"ruleId":"327","severity":1,"message":"364","line":11,"column":49,"nodeType":"329","messageId":"330","endLine":11,"endColumn":53},{"ruleId":"327","severity":1,"message":"412","line":57,"column":11,"nodeType":"329","messageId":"330","endLine":57,"endColumn":20},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"343","line":4,"column":55,"nodeType":"329","messageId":"330","endLine":4,"endColumn":71},{"ruleId":"327","severity":1,"message":"379","line":4,"column":91,"nodeType":"329","messageId":"330","endLine":4,"endColumn":108},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"356","line":6,"column":84,"nodeType":"329","messageId":"330","endLine":6,"endColumn":122},{"ruleId":"327","severity":1,"message":"346","line":6,"column":124,"nodeType":"329","messageId":"330","endLine":6,"endColumn":148},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"351","severity":1,"message":"352","line":136,"column":11,"nodeType":"353","messageId":"354","endLine":136,"endColumn":17},{"ruleId":"327","severity":1,"message":"378","line":1,"column":58,"nodeType":"329","messageId":"330","endLine":1,"endColumn":64},{"ruleId":"327","severity":1,"message":"362","line":4,"column":33,"nodeType":"329","messageId":"330","endLine":4,"endColumn":53},{"ruleId":"327","severity":1,"message":"343","line":4,"column":55,"nodeType":"329","messageId":"330","endLine":4,"endColumn":71},{"ruleId":"327","severity":1,"message":"379","line":4,"column":91,"nodeType":"329","messageId":"330","endLine":4,"endColumn":108},{"ruleId":"327","severity":1,"message":"364","line":5,"column":10,"nodeType":"329","messageId":"330","endLine":5,"endColumn":14},{"ruleId":"327","severity":1,"message":"344","line":6,"column":10,"nodeType":"329","messageId":"330","endLine":6,"endColumn":30},{"ruleId":"327","severity":1,"message":"358","line":6,"column":32,"nodeType":"329","messageId":"330","endLine":6,"endColumn":58},{"ruleId":"327","severity":1,"message":"345","line":6,"column":60,"nodeType":"329","messageId":"330","endLine":6,"endColumn":82},{"ruleId":"327","severity":1,"message":"356","line":6,"column":84,"nodeType":"329","messageId":"330","endLine":6,"endColumn":122},{"ruleId":"327","severity":1,"message":"346","line":6,"column":124,"nodeType":"329","messageId":"330","endLine":6,"endColumn":148},{"ruleId":"327","severity":1,"message":"380","line":8,"column":10,"nodeType":"329","messageId":"330","endLine":8,"endColumn":47},{"ruleId":"327","severity":1,"message":"413","line":45,"column":11,"nodeType":"329","messageId":"330","endLine":45,"endColumn":29},{"ruleId":"351","severity":1,"message":"352","line":140,"column":11,"nodeType":"353","messageId":"354","endLine":140,"endColumn":17},{"ruleId":"327","severity":1,"message":"414","line":2,"column":21,"nodeType":"329","messageId":"330","endLine":2,"endColumn":46},{"ruleId":"327","severity":1,"message":"415","line":2,"column":76,"nodeType":"329","messageId":"330","endLine":2,"endColumn":91},{"ruleId":"327","severity":1,"message":"416","line":5,"column":7,"nodeType":"329","messageId":"330","endLine":5,"endColumn":20},{"ruleId":"327","severity":1,"message":"411","line":1,"column":43,"nodeType":"329","messageId":"330","endLine":1,"endColumn":47},{"ruleId":"327","severity":1,"message":"417","line":3,"column":49,"nodeType":"329","messageId":"330","endLine":3,"endColumn":60},{"ruleId":"418","severity":1,"message":"419","line":57,"column":22,"nodeType":"420","messageId":"354","endLine":57,"endColumn":24},"no-native-reassign",["421"],"no-negated-in-lhs",["422"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'InitialisedFund' is defined but never used.","'Deposit' is defined but never used.","'ProcessDeposits' is defined but never used.","'DisplayInfo' is defined but never used.","'ProcessWithdraws' is defined but never used.","'Settlement' is defined but never used.","'InitForceSettle' is defined but never used.","'ForceUpdatePerp' is defined but never used.","'ForceProcessWithdraws' is defined but never used.","'walletProvider' is assigned a value but never used.","'transactions' is assigned a value but never used.","'setTransactions' is assigned a value but never used.","'FUND_ACCOUNT_KEY' is defined but never used.","'createKeyIfNotExists' is defined but never used.","'signAndSendTransaction' is defined but never used.","'createAccountInstruction' is defined but never used.","'MangoClient' is defined but never used.","'NodeBankLayout' is defined but never used.","'PerpMarketLayout' is defined but never used.","'fundAccount' is assigned a value but never used.","no-dupe-keys","Duplicate key 'memcmp'.","ObjectExpression","unexpected","'createAssociatedTokenAccount' is defined but never used.","'createAssociatedTokenAccountIfNotExist' is defined but never used.","'createTokenAccountIfNotExist' is defined but never used.","'findAssociatedTokenAddress' is defined but never used.","'setWalletTransaction' is defined but never used.","'delegate' is defined but never used.","'MARGIN_ACCOUNT_KEY_1' is defined but never used.","'platformStateAccount' is defined but never used.","'PLATFORM_ACCOUNT_KEY' is defined but never used.","'nu64' is defined but never used.","'u8' is defined but never used.","'SystemProgram' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'PLATFORM_DATA' is defined but never used.","'u64' is defined but never used.","'U64F64' is defined but never used.","'Badge' is defined but never used.","'MangoAccountLayout' is defined but never used.","'mangoGroup' is assigned a value but never used.","'min_amount' is assigned a value but never used.","'setMin_amount' is assigned a value but never used.","'platform_fee_percentage' is assigned a value but never used.","'setPlatform_fee_percentage' is assigned a value but never used.","'create' is defined but never used.","'SYSTEM_PROGRAM_ID' is defined but never used.","'awaitTransactionSignatureConfirmation' is defined but never used.","'investments' is assigned a value but never used.","'nodeBank' is assigned a value but never used.","'handleGetInvestors' is assigned a value but never used.","'setInvestments' is assigned a value but never used.","'investorStateAccounts' is assigned a value but never used.","'fundState' is assigned a value but never used.","'Keypair' is defined but never used.","'NodeWallet' is defined but never used.","'setAmount' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'doSomething'. Either include it or remove the dependency array.","ArrayExpression",["423"],"'Button' is defined but never used.","'TransactionInstruction' is defined but never used.","'blob' is defined but never used.","'struct' is defined but never used.","'u32' is defined but never used.","'SPL_TOKEN_MINT_DATA' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'I80F48' is defined but never used.","'PerpAccountLayout' is defined but never used.","'RootBankCacheLayout' is defined but never used.","'GlobalState' is defined but never used.","'Transaction' is defined but never used.","'Blob' is defined but never used.","'seq' is defined but never used.","'u16' is defined but never used.","'ns64' is defined but never used.","'rootBanks' is assigned a value but never used.","'openOrdersLamports' is assigned a value but never used.","'sendAndConfirmTransaction' is defined but never used.","'sendTransaction' is defined but never used.","'GREETING_SIZE' is assigned a value but never used.","'ModalFooter' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","no-global-assign","no-unsafe-negation",{"desc":"424","fix":"425"},"Update the dependencies array to be: [doSomething, fundPDA]",{"range":"426","text":"427"},[4637,4646],"[doSomething, fundPDA]"]