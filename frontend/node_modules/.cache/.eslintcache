[{"/Users/zohebshahzan/code/Solana-2/frontend/src/index.js":"1","/Users/zohebshahzan/code/Solana-2/frontend/src/reportWebVitals.js":"2","/Users/zohebshahzan/code/Solana-2/frontend/src/App.js":"3","/Users/zohebshahzan/code/Solana-2/frontend/src/components/CustomNavbar.js":"4","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transactions.js":"5","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ClaimFee.js":"6","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js":"7","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js":"8","/Users/zohebshahzan/code/Solana-2/frontend/src/components/AllFundsInvestors.js":"9","/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js":"10","/Users/zohebshahzan/code/Solana-2/frontend/src/store/globalState.js":"11","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/getTransactions.js":"12","/Users/zohebshahzan/code/Solana-2/frontend/src/components/DisplayInfo.js":"13","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/constants.js":"14","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transfer.js":"15","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ConnectWalletModal.js":"16","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/pools.js":"17","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/safe-math.js":"18","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/programLayouts.js":"19","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/web3.js":"20","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/tokens.js":"21","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/MangoLayout.js":"22","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/mango.js":"23","/Users/zohebshahzan/code/Solana-2/frontend/src/programData/GreetingAccount.js":"24","/Users/zohebshahzan/code/Solana-2/frontend/src/programData/GreetingSchema.js":"25","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/wallets/PhantomWallet.js":"26","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/solanaWeb3.js":"27","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessDeposits.js":"28","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessWithdraws.js":"29","/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js":"30","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/index.js":"31","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/App.js":"32","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/reportWebVitals.js":"33","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/CustomNavbar.js":"34","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ProcessWithdraws.js":"35","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Deposit.js":"36","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ProcessDeposits.js":"37","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/AllFundsInvestors.js":"38","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Settlement.js":"39","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/InitialisedFund.js":"40","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/InitForceSettle.js":"41","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/DisplayInfo.js":"42","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Withdraw.js":"43","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ForceProcessWithdraws.js":"44","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/store/globalState.js":"45","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ConnectWalletModal.js":"46","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/constants.js":"47","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/programLayouts.js":"48","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/web3.js":"49","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/solanaWeb3.js":"50","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/wallets/PhantomWallet.js":"51","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ForceUpdatePerp.js":"52","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/FakeInvestorDeposit.js":"53"},{"size":525,"mtime":1645786245899,"results":"54","hashOfConfig":"55"},{"size":362,"mtime":1645786245900,"results":"56","hashOfConfig":"55"},{"size":2451,"mtime":1656019058151,"results":"57","hashOfConfig":"55"},{"size":303,"mtime":1645786245897,"results":"58","hashOfConfig":"55"},{"size":1017,"mtime":1645786245899,"results":"59","hashOfConfig":"55"},{"size":4820,"mtime":1649757408745,"results":"60","hashOfConfig":"55"},{"size":5528,"mtime":1655502162609,"results":"61","hashOfConfig":"55"},{"size":15675,"mtime":1655557963338,"results":"62","hashOfConfig":"55"},{"size":6692,"mtime":1655829115404,"results":"63","hashOfConfig":"55"},{"size":21760,"mtime":1655474307525,"results":"64","hashOfConfig":"55"},{"size":141,"mtime":1655469635371,"results":"65","hashOfConfig":"55"},{"size":770,"mtime":1645786245900,"results":"66","hashOfConfig":"55"},{"size":16455,"mtime":1655982798302,"results":"67","hashOfConfig":"55"},{"size":1916,"mtime":1655889341038,"results":"68","hashOfConfig":"55"},{"size":7017,"mtime":1649757408747,"results":"69","hashOfConfig":"55"},{"size":2562,"mtime":1655296350730,"results":"70","hashOfConfig":"55"},{"size":70969,"mtime":1649757408748,"results":"71","hashOfConfig":"55"},{"size":1661,"mtime":1645786245901,"results":"72","hashOfConfig":"55"},{"size":4081,"mtime":1656005961607,"results":"73","hashOfConfig":"55"},{"size":6897,"mtime":1655556211849,"results":"74","hashOfConfig":"55"},{"size":48850,"mtime":1649757408749,"results":"75","hashOfConfig":"55"},{"size":8315,"mtime":1650124164118,"results":"76","hashOfConfig":"55"},{"size":32906,"mtime":1649757408747,"results":"77","hashOfConfig":"55"},{"size":144,"mtime":1645786245899,"results":"78","hashOfConfig":"55"},{"size":177,"mtime":1645786245900,"results":"79","hashOfConfig":"55"},{"size":1525,"mtime":1645786245902,"results":"80","hashOfConfig":"55"},{"size":6770,"mtime":1655498684733,"results":"81","hashOfConfig":"55"},{"size":7086,"mtime":1655555706793,"results":"82","hashOfConfig":"55"},{"size":7013,"mtime":1655751553837,"results":"83","hashOfConfig":"55"},{"size":5318,"mtime":1655982084734,"results":"84","hashOfConfig":"55"},{"size":525,"mtime":1656019705231,"results":"85","hashOfConfig":"86"},{"size":2645,"mtime":1661383204945,"results":"87","hashOfConfig":"86"},{"size":362,"mtime":1656019705232,"results":"88","hashOfConfig":"86"},{"size":303,"mtime":1656019705224,"results":"89","hashOfConfig":"86"},{"size":7013,"mtime":1656019705230,"results":"90","hashOfConfig":"86"},{"size":5528,"mtime":1656019705225,"results":"91","hashOfConfig":"86"},{"size":7086,"mtime":1659471932684,"results":"92","hashOfConfig":"86"},{"size":6692,"mtime":1656019705224,"results":"93","hashOfConfig":"86"},{"size":4248,"mtime":1656019705230,"results":"94","hashOfConfig":"86"},{"size":5318,"mtime":1656019705229,"results":"95","hashOfConfig":"86"},{"size":7411,"mtime":1661361002132,"results":"96","hashOfConfig":"86"},{"size":16514,"mtime":1663327331683,"results":"97","hashOfConfig":"86"},{"size":15675,"mtime":1656019705231,"results":"98","hashOfConfig":"86"},{"size":5529,"mtime":1663327241997,"results":"99","hashOfConfig":"86"},{"size":141,"mtime":1656019705233,"results":"100","hashOfConfig":"86"},{"size":2562,"mtime":1656019705224,"results":"101","hashOfConfig":"86"},{"size":1916,"mtime":1661385324049,"results":"102","hashOfConfig":"86"},{"size":6030,"mtime":1663254813956,"results":"103","hashOfConfig":"86"},{"size":6897,"mtime":1656019705237,"results":"104","hashOfConfig":"86"},{"size":6770,"mtime":1656019705236,"results":"105","hashOfConfig":"86"},{"size":1525,"mtime":1656019705236,"results":"106","hashOfConfig":"86"},{"size":6599,"mtime":1661361002131,"results":"107","hashOfConfig":"86"},{"size":11210,"mtime":1661394436080,"results":"108","hashOfConfig":"86"},{"filePath":"109","messages":"110","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},"17wpfg0",{"filePath":"112","messages":"113","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"114","messages":"115","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"111"},{"filePath":"119","messages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"122"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"122"},{"filePath":"126","messages":"127","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"111"},{"filePath":"129","messages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"111"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"111"},{"filePath":"135","messages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"137"},{"filePath":"138","messages":"139","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"140","messages":"141","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"122"},{"filePath":"143","messages":"144","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"145","usedDeprecatedRules":"111"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"150","usedDeprecatedRules":"122"},{"filePath":"151","messages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"111"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"122"},{"filePath":"157","messages":"158","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"159","messages":"160","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"111"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"111"},{"filePath":"165","messages":"166","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"122"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170"},{"filePath":"171","messages":"172","errorCount":0,"fatalErrorCount":0,"warningCount":26,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"122"},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"122"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"122"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"111"},{"filePath":"183","messages":"184","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"111"},{"filePath":"186","messages":"187","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"111"},{"filePath":"189","messages":"190","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"111"},{"filePath":"192","messages":"193","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},"1qfjy7l",{"filePath":"195","messages":"196","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"197","usedDeprecatedRules":"194"},{"filePath":"198","messages":"199","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"200","messages":"201","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"118","usedDeprecatedRules":"194"},{"filePath":"202","messages":"203","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"194"},{"filePath":"204","messages":"205","errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"194"},{"filePath":"206","messages":"207","errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"185","usedDeprecatedRules":"194"},{"filePath":"208","messages":"209","errorCount":0,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"194"},{"filePath":"210","messages":"211","errorCount":0,"fatalErrorCount":0,"warningCount":27,"fixableErrorCount":0,"fixableWarningCount":0,"source":"212","usedDeprecatedRules":"194"},{"filePath":"213","messages":"214","errorCount":0,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"194"},{"filePath":"215","messages":"216","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"217","usedDeprecatedRules":"194"},{"filePath":"218","messages":"219","errorCount":0,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"220","messages":"221","errorCount":0,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"194"},{"filePath":"222","messages":"223","errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"224","messages":"225","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"226","messages":"227","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"153","usedDeprecatedRules":"194"},{"filePath":"228","messages":"229","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"230","messages":"231","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"232","messages":"233","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"194"},{"filePath":"234","messages":"235","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"236","messages":"237","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"194"},{"filePath":"238","messages":"239","errorCount":0,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"240","usedDeprecatedRules":"194"},{"filePath":"241","messages":"242","errorCount":0,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"194"},"/Users/zohebshahzan/code/Solana-2/frontend/src/index.js",[],["244","245"],"/Users/zohebshahzan/code/Solana-2/frontend/src/reportWebVitals.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/App.js",["246","247","248","249"],"/Users/zohebshahzan/code/Solana-2/frontend/src/components/CustomNavbar.js",["250"],"import React from 'react';\nimport {\n  Button\n} from 'reactstrap';\nimport { ConnectWalletModal } from './ConnectWalletModal';\n\nexport const CustomNavbar = (props) => {\n\n  return (\n    <div className=\"d-flex flex-row-reverse p-2\">\n      <ConnectWalletModal buttonLabel=\"Connect Wallet\"/>\n    </div>\n  );\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transactions.js",["251","252"],"import React from \"react\";\n\n// import \"./TransactionView.css\";\n\n\n\nconst TransactionsView = ({ transactions }) => {\n  const getTransactions = () => {\n    return transactions?.map((trans) => {\n      return <TransactionItemView key={trans.signature} transaction={trans} />;\n    });\n  };\n\n  return <div>{getTransactions()}</div>;\n};\n\n\nconst TransactionItemView = ({ transaction }) => {\n  const getTransactionItems = () => {\n    const signature = transaction.signature?.toString();\n    const meta = transaction.confirmedTransaction.meta;\n    const trans = transaction.confirmedTransaction.transaction;\n    let amount = 0;\n    if (meta) {\n      amount = meta.preBalances[0] - meta.postBalances[0];\n    }\n    return (\n      <>\n        <li key={signature + \"signature\"}>\n          <label>Tx:</label> &nbsp;\n          {signature}\n        </li>\n      </>\n    );\n  };\n\n  return (\n    <div className=\"trans-item\">\n      <ul className=\"trans-meta\">{getTransactionItems()}</ul>\n    </div>\n  );\n};\n\nexport default TransactionsView;\n",["253","254"],"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ClaimFee.js",["255","256","257","258","259"],"import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, priceStateAccount, connection, programId, TOKEN_PROGRAM_ID, FUND_ACCOUNT_KEY, idsIndex } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { TEST_TOKENS } from '../utils/tokens'\nimport { FUND_DATA } from '../utils/programLayouts';\nimport { devnet_pools } from '../utils/pools'\nimport { updatePoolPrices } from './updatePrices';\nimport { IDS } from '@blockworks-foundation/mango-client';\n\n\nexport const Claim = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n    const [fundPDA, setFundPDA] = useState('');\n    const [fundStateAccount, setFundStateAccount] = useState('');\n    const [performanceFee, setPerformanceFee] = useState(0);\n\n    const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n    const handleClaim = async () => {\n    \n        const key = walletProvider?.publicKey;\n        \n        const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n        \n\n        console.log(\"FUND STTE:: \", fundStateAccount.toBase58())\n        setFundStateAccount(fundStateAccount.toBase58())\n\n        let x = await connection.getAccountInfo(fundStateAccount)\n        if (x == null)\n        {\n          alert(\"fund account not found\")\n          return\n        }\n\n        if (!key) {\n          alert(\"connect wallet\")\n          return;\n        };\n\n        if (fundStateAccount == ''){\n          alert(\"get info first!\")\n          return\n        }\n\n        const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n        const managerBaseTokenAccount = await findAssociatedTokenAddress(key, new PublicKey(ids.tokens[0].mintKey));\n        const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), adminAccount); \n        \n        const transaction = new Transaction()\n\n        updatePoolPrices(transaction, devnet_pools)\n\n        const dataLayout = struct([u8('instruction')])\n        const data = Buffer.alloc(dataLayout.span)\n        dataLayout.encode(\n            {\n            instruction: 5,\n            },\n            data\n        )\n        \n        const claim_instruction = new TransactionInstruction({\n        keys: [\n        {pubkey: fundStateAccount, isSigner: false, isWritable: true},\n\n        {pubkey: priceStateAccount, isSigner: false, isWritable:true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable:true},\n\n        {pubkey: key, isSigner: true, isWritable: true },\n        {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: managerBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: investinBaseTokenAccount, isSigner: false, isWritable:true},\n        {pubkey: fundPDA[0], isSigner: false, isWritable:true},\n        {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true},\n\n    ],\n    programId,\n    data\n    });\n    \n    transaction.add(claim_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"tx perf: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n  }\n    \n  const handleGetFee = async () => {\n\n    const key = walletProvider?.publicKey;  \n    if (!key ) {\n      alert(\"connect wallet\")\n      return;\n    }\n\n    const fundStateAcc = await PublicKey.createWithSeed(\n      key,\n      FUND_ACCOUNT_KEY,\n      programId,\n    );\n\n    console.log(\"FUND STTE:: \", fundStateAcc.toBase58())\n    setFundStateAccount(fundStateAcc)\n\n    let x = await connection.getAccountInfo(fundStateAcc)\n    if (x == null)\n    {\n      alert(\"fund account not found\")\n      return\n    }\n    console.log(x)\n    let fundState = FUND_DATA.decode(x.data)\n    if (!fundState.is_initialized) {\n      alert(\"fund not initialized!\")\n      return\n    }\n    console.log(fundState)\n    setPerformanceFee(parseInt(fundState.performance_fee) / (10**fundState.tokens[0].decimals))\n  }\n    \n\n    return (\n        <div className=\"form-div\">\n            <h4>Claim Performance Fee</h4>\n         \n          <br />\n          <button onClick={handleClaim}>Claim Performance Fee</button>\n          <button onClick={handleGetFee}>Get Claimable Fee</button>\n          <br />\n          Fees to claim:: {performanceFee}\n\n        </div>\n      )\n}\n\n    ","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Deposit.js",["260","261","262","263","264","265","266","267","268"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Deposit = () => {\n\n  const [amount, setAmount] = useState(0);\n  const [fundPDA, setFundPDA] = useState('');\n  const [funds, setFunds] = useState([]);\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    console.log('selected FundPDA::', fundPDA)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    let signers = [];\n    \n    const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    let investorStateAccounts = \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('amount')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 1,\n        amount: amount * ( 10 ** ids.tokens[0].decimals)\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: investerStateAccount, isSigner: false, isWritable: true },\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Base Token Account\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleFunds = async () => {\n    let managers = []\n\n    let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n    console.log(`funds :::: `, funds)\n    const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\n\n    console.log(`decodedFunds ::: `, fundData)\n    \n    for(let i=0; i<fundData.length; i++) {\n      let manager = fundData[i].manager_account;\n      let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n      let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n      console.log(`PDA[0]`, PDA)\n      managers.push({\n        fundPDA: PDA[0].toBase58(),\n        fundManager: manager.toBase58(),\n      });\n    }\n    console.log(managers)\n    setFunds(managers);\n  }\n\n\n\n  const handleFundSelect = async(event) => {\n  \n    setFundPDA(event.target.value);\n    console.log(`setting fundPDA :::: `,event.target.value, fundPDA)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Investor Deposit</h4>\n      amount ::: {' '}\n      <input type=\"number\" value={amount} onChange={(event) => setAmount(event.target.value)} />\n      <br />\n      <label htmlFor=\"funds\">Select Fund Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleFundSelect}>\n        {\n          funds.map((fund) => {\n            return (<option key={fund.fundPDA} value={fund.fundPDA}>{fund.fundPDA}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleDeposit}>Deposit</button>\n      <button onClick={handleFunds}>Load Funds</button>\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/Withdraw.js",["269","270","271","272","273","274","275","276","277","278"],"import { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\r\nimport React, { useState } from 'react'\r\nimport { GlobalState } from '../store/globalState';\r\nimport { connection,  FUND_ACCOUNT_KEY, programId, TOKEN_PROGRAM_ID} from '../utils/constants';\r\n\r\nimport { struct, u32 } from 'buffer-layout';\r\nimport { createKeyIfNotExists, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\r\nimport { INVESTOR_DATA, FUND_DATA } from '../utils/programLayouts';\r\nimport { createAccountInstruction, IDS, MangoClient, NodeBankLayout, PerpMarketLayout } from '@blockworks-foundation/mango-client';\r\nimport bs58 from 'bs58';\r\nimport BN from 'bn.js';\r\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\r\n\r\nexport const Withdraw = () => {\r\n\r\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\r\n  const [investments, setInvestments] = useState([]);\r\n\r\n\r\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\r\n  const fundAccount = GlobalState.useState(s => s.createFundPublicKey);\r\n  const ids = IDS['groups'][0]\r\n\r\n  const handleRequestWithdraw = async () => {\r\n\r\n    const key = walletProvider?.publicKey;\r\n\r\n    if (!key) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    };\r\n\r\n    console.log('selected Investment::', selectedInvestmentStateAcc.toString())\r\n  \r\n    let investmentStateInfo = await connection.getAccountInfo(new PublicKey(selectedInvestmentStateAcc))\r\n    let investmentState = INVESTOR_DATA.decode(investmentStateInfo.data)\r\n    console.log(\"fundState:: \", investmentState)\r\n\r\n    const transaction = new Transaction()\r\n    \r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 3,\r\n      },\r\n      data\r\n    )\r\n    const keys =  [\r\n      { pubkey: investmentState.fund, isSigner: false, isWritable: true }, //fund State Account\r\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true },\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n    ];\r\n\r\n    for(let i = 0; i<keys.length; i++){\r\n      console.log('>>',i, keys[i].pubkey.toBase58())\r\n    }\r\n\r\n\r\n    const instruction = new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data\r\n    });\r\n\r\n   \r\n    transaction.add(instruction)\r\n    transaction.feePayer = walletProvider?.publicKey;\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"tx\", transaction);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n\r\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    // console.log(\"signature tx:: \", sign)\r\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\r\n   \r\n\r\n      try {\r\n          await sendSignedTransactionAndNotify({\r\n              connection,\r\n              transaction: transaction,\r\n              successMessage: \"Investment successful\",\r\n              failMessage: \"Investment unsuccessful\",\r\n              wallet: walletProvider\r\n          })\r\n      } catch (error) {\r\n          console.error('handleMakeInvestment: ', error);\r\n      }\r\n\r\n  }\r\n\r\n  const handleWithdraw = async () => {\r\n\r\n    const key = walletProvider?.publicKey;\r\n\r\n    if (!key) {\r\n      alert(\"connect wallet\")\r\n      return;\r\n    };\r\n\r\n    console.log('selected Investment::', selectedInvestmentStateAcc.toString())\r\n    \r\n    let investmentStateInfo = await connection.getAccountInfo(new PublicKey(selectedInvestmentStateAcc))\r\n    let investmentState = INVESTOR_DATA.decode(investmentStateInfo.data)\r\n    console.log(\"InvestmentState:: \", investmentState)\r\n    let fundStateInfo = await connection.getAccountInfo(investmentState.fund)\r\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n    console.log(\"fundState:: \", fundState)\r\n    \r\n    const transaction = new Transaction()\r\n    \r\n    const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n    const dataLayout = struct([u32('instruction')])\r\n    const data = Buffer.alloc(dataLayout.span)\r\n    dataLayout.encode(\r\n      {\r\n        instruction: 2,\r\n      },\r\n      data\r\n    )\r\n    const keys =  [\r\n      { pubkey: investmentState.fund, isSigner: false, isWritable: true }, //fund State Account\r\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true },\r\n      { pubkey: key, isSigner: true, isWritable: true },\r\n      { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true},\r\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true},\r\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false},\r\n    ];\r\n\r\n    for(let i = 0; i<keys.length; i++){\r\n      console.log('>>',i, keys[i].pubkey.toBase58())\r\n    }\r\n\r\n\r\n    const instruction = new TransactionInstruction({\r\n      keys,\r\n      programId,\r\n      data\r\n    });\r\n\r\n   \r\n    transaction.add(instruction)\r\n    transaction.feePayer = walletProvider?.publicKey;\r\n    let hash = await connection.getRecentBlockhash();\r\n    console.log(\"tx\", transaction);\r\n    transaction.recentBlockhash = hash.blockhash;\r\n\r\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\r\n    // console.log(\"signature tx:: \", sign)\r\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\r\n   \r\n\r\n      try {\r\n          await sendSignedTransactionAndNotify({\r\n              connection,\r\n              transaction: transaction,\r\n              successMessage: \"Investment successful\",\r\n              failMessage: \"Investment unsuccessful\",\r\n              wallet: walletProvider\r\n          })\r\n      } catch (error) {\r\n          console.error('handleMakeInvestment: ', error);\r\n      }\r\n\r\n  }\r\n\r\n\r\n\r\n  // const handleWithdraw = async () => {\r\n\r\n  //   const key = walletProvider?.publicKey;\r\n\r\n  //   if (!key) {\r\n  //     alert(\"connect wallet\")\r\n  //     return;\r\n  //   };\r\n\r\n  //   if(!fundPDA) {\r\n  //     alert(\"no funds found\")\r\n  //     return\r\n  //   }\r\n    \r\n  //   const transaction = new Transaction()\r\n\r\n  //   const openOrdersLamports =\r\n  //   await connection.getMinimumBalanceForRentExemption(\r\n  //     INVESTOR_DATA.span,\r\n  //     'singleGossip'\r\n  //   )\r\n  //   let signers = []\r\n  //   const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, openOrdersLamports, transaction, signers);\r\n  //   const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\r\n\r\n  //   let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA ))\r\n  //   let fundState = FUND_DATA.decode(fundStateInfo.data)\r\n  //   console.log(\"fundState:: \", fundState)\r\n\r\n  //   let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\r\n  //   let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\r\n  //   console.log(\"mango group:: \", mangoGroup)\r\n\r\n  //   let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\r\n  //   let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\r\n  //   console.log(\"nodebank:: \", nodeBank)\r\n\r\n\r\n  //   const dataLayout = struct([u32('instruction')])\r\n  //   const data = Buffer.alloc(dataLayout.span)\r\n  //   dataLayout.encode(\r\n  //     {\r\n  //       instruction: 2,\r\n  //     },\r\n  //     data\r\n  //   )\r\n\r\n  //   const instruction = new TransactionInstruction({\r\n  //     keys: [\r\n  //       { pubkey: fundPDA, isSigner: false, isWritable: true },\r\n  //       { pubkey: investerStateAccount, isSigner: false, isWritable: true }, //fund State Account\r\n  //       { pubkey: key, isSigner: true, isWritable: true },\r\n  //       { pubkey: fundState.vault_key, isSigner: false, isWritable: true }, // Router Base Token Account\r\n  //       { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\r\n\r\n  //       { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: false },\r\n  //       { pubkey: mangoGroup.mangoCache , isSigner: false, isWritable: false },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].publicKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].bidsKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].asksKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.perpMarkets[0].eventsKey), isSigner: false, isWritable: true },\r\n\r\n  //       { pubkey: new PublicKey(ids.tokens[0].rootKey), isSigner: false, isWritable: true },\r\n  //       { pubkey: new PublicKey(ids.tokens[0].nodeKeys[0]), isSigner: false, isWritable: true },\r\n  //       { pubkey: nodeBank.vault, isSigner: false, isWritable: true },\r\n  //       { pubkey: investorBaseTokenAccount, isSigner: false, isWritable: true }, // Investor Token Accounts\r\n  //       { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\r\n  //       { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: true },\r\n  //       { pubkey: PublicKey.default, isSigner: false, isWritable: true },\r\n  //     ],\r\n  //     programId,\r\n  //     data\r\n  //   });\r\n\r\n  //   transaction.add(instruction);\r\n  //   console.log(`transaction ::: `, transaction)\r\n  //   console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey.toBase58())\r\n  //   transaction.feePayer = key;\r\n  //   let hash = await connection.getRecentBlockhash(\"finalized\");\r\n  //   console.log(\"blockhash\", hash);\r\n  //   transaction.recentBlockhash = hash.blockhash;\r\n  //   transaction.setSigners(key, investerStateAccount)\r\n  //   transaction.partialSign(...signers)\r\n  //   const sign = await signAndSendTransaction(walletProvider, transaction);\r\n  //   console.log(\"tx::: \", sign)\r\n  // }\r\n  \r\n  // const handleFunds = async () => {\r\n  \r\n  //   let funds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\r\n  //   console.log(`funds :::: `, funds)\r\n  //   const fundData = funds.map(f => FUND_DATA.decode(f.account.data))\r\n\r\n  //   console.log(`decodedFunds ::: `, fundData)\r\n  //   let invFunds = []\r\n  //   for(let i=0; i<fundData.length; i++) {\r\n  //     let manager = fundData[i].manager_account;\r\n\r\n  //     let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\r\n  //     let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n\r\n  //     let invStateAccount = await PublicKey.createWithSeed(walletProvider?.publicKey, PDA[0].toBase58().substr(0, 31), programId);\r\n  //     let invState = await connection.getAccountInfo(invStateAccount);\r\n\r\n  //     if (invState == null) {\r\n  //       continue\r\n  //     }\r\n\r\n  //     let invStateData = INVESTOR_DATA.decode(invState.data)\r\n  //     console.log(invStateData)\r\n\r\n  //     // if (!invStateData.is_initialized) {\r\n  //     //   continue\r\n  //     // }\r\n  //     invFunds.push({\r\n  //       fundPDA: PDA[0].toBase58(),\r\n  //       fundManager: manager.toBase58(),\r\n  //     });\r\n  //   }\r\n  //   console.log(invFunds)\r\n  //   setFunds(invFunds);\r\n  // }\r\n\r\n  // const handleFundSelect = async(event) => {\r\n  \r\n  //   setFundPDA(event.target.value);\r\n  //   console.log(`setting fundPDA :::: `, event.target.value, fundPDA)\r\n  // }\r\n\r\n  const handleSelectInvestment = async(event) => {\r\n    setSelectedInvestmentStateAcc(event.target.value);\r\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\r\n  }\r\n  \r\n  const handleGetInvestments = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"Investor::\",investorAccount.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(2, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  const handleGetInvestmentsForWithdraw = async () => {\r\n\r\n    const investorAccount = walletProvider?.publicKey;\r\n    console.log(\"Investor::\",investorAccount.toBase58())\r\n\r\n    let investments = await connection.getProgramAccounts(programId, { \r\n      filters: [\r\n        {\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('owner') , bytes : investorAccount.toString()},\r\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(4, 'le')).toArray())}\r\n        },\r\n        { dataSize: INVESTOR_DATA.span }\r\n      ]\r\n     });\r\n    console.log(`found investments :::: `, investments)\r\n\r\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\r\n\r\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\r\n    console.log(`decodedInvestments ::: `, investmentsData)\r\n    \r\n    // for(let i=0; i<investments.length; i++) {\r\n    //   let fund = investmentsData[i].fund;\r\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\r\n    //   console.log(`PDA[0]`, PDA)\r\n    //   managers.push({\r\n    //     fundPDA: PDA[0].toBase58(),\r\n    //     fundManager: manager.toBase58(),\r\n    //   });\r\n    // }\r\n    // console.log(managers)\r\n    setInvestments(investmentStateAccs);\r\n  }\r\n\r\n  return (\r\n    <div className=\"form-div\">\r\n      <h4>Withdraw</h4>\r\n      <br />\r\n      <button onClick={handleGetInvestments}>Get Investments</button>\r\n      <br />\r\n      <label htmlFor=\"funds\">Select Investment:</label>\r\n\r\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\r\n        {\r\n          investments.map((i) => {\r\n            return (<option key={i} value={i}>{i}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleRequestWithdraw}>Request Withdraw</button>\r\n\r\n      <br />\r\n      <button onClick={handleGetInvestmentsForWithdraw}>Get Investments</button>\r\n      <br />\r\n      <label htmlFor=\"funds\">Select Investment:</label>\r\n\r\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\r\n        {\r\n          investments.map((i) => {\r\n            return (<option key={i} value={i}>{i}</option>)\r\n          })\r\n        }\r\n      </select>\r\n      <button onClick={handleWithdraw}>Withdraw</button>\r\n\r\n      {/* <button onClick={handleFunds}>Load Investments</button> */}\r\n\r\n      <br />\r\n     \r\n      {/* <button onClick={handleWithdraw}>Withdraw from Fund</button>\r\n      <button onClick={handleHarvestMngo}>Harvest Mngo</button> */}\r\n  \r\n      <br />\r\n    </div>\r\n  )\r\n\r\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/components/AllFundsInvestors.js",["279","280","281","282","283","284","285","286","287","288","289","290","291","292","293","294","295","296","297","298","299","300","301","302","303","304","305","306","307"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, FUND_ACCOUNT_KEY, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { PublicKey, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, INVESTOR_DATA, PLATFORM_DATA, SPL_TOKEN_MINT_DATA, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport BN from 'bn.js';\nimport { Card, Col, Row, Table } from 'reactstrap';\nimport { Blob, seq, struct, u32, u8, u16, ns64, nu64 } from 'buffer-layout';\n\nexport const AllFundsInvestors = () => {\n\n  const [investments, setInvestments] = useState([])\n  const [funds, setFunds] = useState([])\n\n  const handleGetAllInvestments = async () => {\n\n    //  const userkey = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n    //  const key = walletProvider?.publicKey;\n    let investments = await connection.getProgramAccounts(programId, {\n      filters: [\n        { dataSize: INVESTOR_DATA.span },\n        // {\n        //   memcmp: { offset: INVESTOR_DATA.offsetOf('owner'), bytes: userkey.toBase58() }\n        // }\n      ]\n    });\n    // console.log(\"investments::\",investments)\n    const newInvestors = []\n    for (const investment of investments) {\n      const invStateData = INVESTOR_DATA.decode(investment.account.data)\n      invStateData['ivnStatePubKey'] = investment.pubkey;\n      if (invStateData.is_initialized) {\n        newInvestors.push(invStateData)\n      }\n    }\n    console.log(\"newInvestors::\", newInvestors)\n    setInvestments(newInvestors);\n  }\n\n  const handleGetAllFunds = async () => {\n    const managers = []\n    const allFunds = await connection.getProgramAccounts(programId, { filters: [{ dataSize: FUND_DATA.span }] });\n\n    for (const data of allFunds) {\n      const decodedData = FUND_DATA.decode(data.account.data);\n\n      if (decodedData.is_initialized) {\n        managers.push({\n          fundState: decodedData,\n          fundPDA: data.pubkey.toBase58(),\n          no_of_investments: decodedData.no_of_investments,\n          min_amount: decodedData.min_amount.toString(),\n          performance_fee_percentage: decodedData.performance_fee_percentage.toString(),\n          total_amount: decodedData.total_amount.toString(),\n\n          current_index: decodedData.current_index.toString(),\n\n          pending_deposits: decodedData.pending_deposits.toString(),\n          pending_withdrawals: decodedData.pending_withdrawals.toString(),\n\n\n          manager_account: decodedData.manager_account.toBase58(),\n          usdc_vault_key: decodedData.usdc_vault_key.toBase58(),\n          mango_account: decodedData.mango_account.toBase58(),\n          delegate: decodedData.delegate.toBase58(),\n\n        });\n      }\n    }\n    console.log(\"managers:\", managers);\n    setFunds(managers);\n  }\n\n  return (\n    <div className=\"form-div\">\n      <Card className=\"justify-content-center\">\n        <Row className=\"justify-content-between\">\n          <Col lg=\"12\" xs=\"12\">\n            <h4>Investments</h4>\n            <button onClick={handleGetAllInvestments}> get All Investments</button>\n\n            <Table\n              className=\"tablesorter\"\n              responsive\n              width=\"100%\"\n              style={{ overflow: 'hidden !important', textAlign: 'center' }}\n            >\n              <thead className=\"text-primary\">\n                <tr>\n                  <th style={{ width: \"15%\" }}>index</th>\n                  <th style={{ width: \"15%\" }}>ivnStatePubKey</th>\n                  <th style={{ width: \"15%\" }}>fund</th>\n                  <th style={{ width: \"15%\" }}>owner</th>\n                  <th style={{ width: \"15%\" }}>investment_status</th>\n                  <th style={{ width: \"15%\" }}>amount</th>\n                  <th style={{ width: \"15%\" }}>start_index</th>\n                \n                </tr>\n              </thead>\n              <tbody>\n                {\n                  investments &&\n\n                  investments.map((i, x) => {\n                    return <tr key={i?.ivnStatePubKey?.toBase58()}>\n                      <td >{x}</td>\n                      <td >{i?.ivnStatePubKey?.toBase58()}</td>\n                      <td >{i?.fund?.toBase58()}</td>\n                      <td >{i?.owner?.toBase58()}</td>\n                      <td>{i?.investment_status}</td>\n                      <td>{i?.amount?.toString() / 10 ** 6}</td>\n                      <td>{i?.start_index?.toString()}</td>\n\n                    </tr>\n                  })\n                }\n              </tbody>\n            </Table>\n\n\n          </Col>\n        </Row>\n        <Row className=\"justify-content-between\">\n          <Col lg=\"12\" xs=\"12\">\n            <h4>Funds</h4>\n\n            <button onClick={handleGetAllFunds}> get All Funds</button>\n\n            <Table\n              className=\"tablesorter\"\n              responsive\n              width=\"100%\"\n              style={{ overflow: 'hidden !important', textAlign: 'center' }}\n            >\n              <thead className=\"text-primary\">\n                <tr>\n                  <th style={{ width: \"15%\" }}>index</th>\n                  <th style={{ width: \"15%\" }}>fundManager</th>\n                  <th style={{ width: \"15%\" }}>fundPDA</th>\n\n                  <th style={{ width: \"15%\" }}>min_amount</th>\n                  <th style={{ width: \"15%\" }}>performance_fee_percentage</th>\n                  <th style={{ width: \"15%\" }}>total_amount</th>\n\n                  <th style={{ width: \"15%\" }}>current_index</th>\n                  <th style={{ width: \"15%\" }}>mango_account</th>\n\n\n                </tr>\n              </thead>\n\n\n              <tbody>\n                {\n                  funds &&\n\n                  funds.map((i, x) => {\n                    return <tr key={x}>\n                      <td >{x}</td>\n                      <td >{i?.manager_account}</td>\n                      <td >{i?.fundPDA}</td>\n\n                      <td >{i?.min_amount}</td>\n                      <td >{i?.performance_fee_percentage}</td>\n                      <td >{i?.total_amount}</td>\n                      <td >{i?.current_index}</td>\n                      <td >{i?.mango_account}</td>\n\n                    </tr>\n                  })\n                }\n              </tbody>\n            </Table>\n\n          </Col>\n        </Row>\n      </Card>\n    </div>\n  )\n}\n\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/MangoPlaceOrder.js",[],["308","309"],"/Users/zohebshahzan/code/Solana-2/frontend/src/store/globalState.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/utils/getTransactions.js",["310"],"export class TransactionWithSignature {\n  constructor(\n    signature,\n    confirmedTransaction\n  ) { }\n}\n\nexport async function getTransactions(\n  connection,\n  address\n) {\n  const transSignatures = await connection.getConfirmedSignaturesForAddress2(\n    address\n  );\n\n  const transactions = [];\n  for (let i = 0; i < transSignatures.length; i++) {\n    const signature = transSignatures[i].signature;\n    const confirmedTransaction = await connection.getConfirmedTransaction(\n      signature\n    );\n    console.log(`confirmedTransaction ::: `, confirmedTransaction)\n    if (confirmedTransaction) {\n      const transWithSignature = {\n        signature,\n        confirmedTransaction\n      };\n      transactions.push(transWithSignature);\n    }\n  }\n  return transactions;\n}\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/DisplayInfo.js",["311","312","313","314","315","316","317","318","319","320","321","322","323","324","325","326"],"import { PublicKey, TransactionInstruction } from '@solana/web3.js';\nimport React, { useEffect, useState } from 'react'\nimport { GlobalState } from '../store/globalState';\n\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, programId } from '../utils/constants';\nimport { blob, nu64, struct, u32, u8 } from 'buffer-layout';\nimport { FUND_DATA, SPL_TOKEN_MINT_DATA } from '../utils/programLayouts';\n\nimport { Card, Col, Row ,Table} from 'reactstrap';\nimport { IDS, MangoClient, I80F48, NodeBankLayout, PerpAccountLayout, PerpMarketLayout ,RootBankCacheLayout, RootBankLayout} from '@blockworks-foundation/mango-client';\n\n\nexport const DisplayInfo = (props) => {\n\n   const ids = IDS['groups'][0]\n   const [fundAddress, setFundAddress] = useState('')\n   const [fundData, setFundData] = useState(\"\");\n   const [mangoGroup, setMangoGroup] = useState({})\n   const [mangoAccount, setMangoAccount] = useState('7BLzTNvjNjaCnZ2Nnpu1aFYqTBsL8Lz2FUxknSAZ8tDX')\n   const [mangoAccountData, setMangoAccountData] = useState({})\n   const [nodeBank, setNodeBank] = useState({})\n   const [rootBank, setRootBank] = useState({})\n   const walletProvider = GlobalState.useState(s => s.walletProvider);\n  \nconst programIdX = programId.toBase58();\nconst adminAccountX = adminAccount.toBase58();\n// const platformStateAccountX = platformStateAccount.toBase58();\n// const priceStateAccountX = priceStateAccount.toBase58();\n\nconst handleGetFundData = async () => {\n\n  if(!walletProvider) {\n    alert(\"connect wallet \")\n    return;\n  }\n  \n  // const key = new PublicKey('zRzdC1b2zJte4rMjfaSFZwbnBfL1kNYaTAF4UC4bqpx');\n  const key = walletProvider?.publicKey;  \n  if (!key ) {\n    alert(\"connect wallet \")\n    return;\n  }\n\n  const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n  console.log(\"fundPDA::\",fundPDA.toBase58())\n  setFundAddress(fundPDA.toBase58())\n\n\n    const fundDataAcc = await connection.getAccountInfo(fundPDA);\n    console.log(\"fundDataAcc::\",fundDataAcc);\n    if (fundDataAcc == null)\n    {\n       alert(\"fundDataAcc info not found\")\n      return;\n    }\n    const fundData = FUND_DATA.decode(fundDataAcc.data)\n    console.error(\"fundData::\",fundData);\n    setFundData(fundData);\n}\n\nconst getAllDecodeMangoData = async () => {\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    console.log(\"mango group:: \", mangoGroup)\n    let mangoGroupDecoded = {};\n    mangoGroupDecoded.admin = mangoGroup.admin.toBase58();\n    mangoGroupDecoded.dexProgramId = mangoGroup.dexProgramId.toBase58();\n    mangoGroupDecoded.insuranceVault = mangoGroup.insuranceVault.toBase58();\n    mangoGroupDecoded.mangoCache = mangoGroup.mangoCache.toBase58();\n\n    mangoGroupDecoded.msrmVault = mangoGroup.msrmVault.toBase58();\n    mangoGroupDecoded.numOracles = mangoGroup.numOracles.toString();\n\n    mangoGroupDecoded.oracles =  mangoGroup.oracles.map( i => i.toBase58());\n\n    mangoGroupDecoded.perpMarkets =  mangoGroup.perpMarkets.map( i => {\n      return {\n        baseLotSize: i.baseLotSize.toString(),\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        makerFee: i.makerFee.toString(),\n        perpMarket:  i.perpMarket.toBase58(),\n        quoteLotSize: i.quoteLotSize.toString(),\n        takerFee:  i.takerFee.toString(),\n      }\n    });\n\n    mangoGroupDecoded.spotMarkets =  mangoGroup.spotMarkets.map( i => {\n      return {\n        initAssetWeight: i.initAssetWeight.toString(),\n        initLiabWeight: i.initLiabWeight.toString(),\n        liquidationFee: i.liquidationFee.toString(),\n        maintAssetWeight: i.maintAssetWeight.toString(),\n        maintLiabWeight: i.maintLiabWeight.toString(),\n        spotMarket:  i.spotMarket.toBase58(),\n      }\n    });\n\n    mangoGroupDecoded.tokens =  mangoGroup.tokens.map( i => {\n      return {\n        decimals: i.decimals,\n        mint: i.mint.toBase58(),\n        rootBank: i.rootBank.toBase58(),\n      }\n    });\n    setMangoGroup(mangoGroupDecoded)\n    console.error(\"mango group DECODED**:: \", mangoGroupDecoded)\n\n\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n    console.log(\"nodebank:: \", nodeBank)\n    let nodeBankDecode = {\n      borrows:  nodeBank.borrows.toString(),\n      deposits: nodeBank.deposits.toString(),\n      vault: nodeBank.vault.toBase58()\n    }\n    setNodeBank(nodeBankDecode)\n    console.error(\"nodeBankDecode:: \", nodeBankDecode)\n\n    let rootBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].rootKey))\n    let rootBank = RootBankLayout.decode(rootBankInfo.data)\n    console.log(\"rootBank:: \", rootBank)\n    let rootBankDecode = {\n      optimalUtil:  rootBank.optimalUtil.toString(),\n      optimalRate: rootBank.optimalRate.toString(),\n      maxRate: rootBank.maxRate.toString(),\n      depositIndex:  rootBank.depositIndex.toString(),\n      borrowIndex: rootBank.borrowIndex.toString(),\n      lastUpdated: rootBank.lastUpdated.toString(),\n    }\n    setRootBank(rootBankDecode)\n    console.error(\"rootBankDecode:: \", rootBankDecode)\n\n    return;\n}\n\nconst getMangoAccountData = async () => {\n  let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  console.log(\"Fetched Client\")\n  let mangoAcc = await client.getMangoAccount(new PublicKey(mangoAccount), new PublicKey(ids.serumProgramId))\n  console.log(\"mangoAccount:: \", mangoAccount)\n\n  let mangoAccountDecoded = {};\n  mangoAccountDecoded.mangoGroup = mangoAcc.mangoGroup.toBase58();\n  mangoAccountDecoded.borrows = mangoAcc.borrows.map( i => i.toString());\n  mangoAccountDecoded.clientOrderIds = mangoAcc.clientOrderIds.map( i => i.toString());\n  mangoAccountDecoded.deposits = mangoAcc.deposits.map( i => i.toString());\n  mangoAccountDecoded.orders = mangoAcc.orders.map( i => i.toString());\n\n  mangoAccountDecoded.perpAccounts =  mangoAcc.perpAccounts.map( i => {\n    return {\n      asksQuantity: i.asksQuantity.toString(),\n      basePosition: i.basePosition.toString(),\n      bidsQuantity: i.bidsQuantity.toString(),\n      longSettledFunding: i.longSettledFunding.toString(),\n      mngoAccrued: i.mngoAccrued.toString(),\n      quotePosition: i.quotePosition.toString(),\n      shortSettledFunding: i.shortSettledFunding.toString(),\n      takerBase: i.takerBase.toString(),\n      takerQuote: i.takerQuote.toString(),\n    }\n  });\n  mangoAccountDecoded.spotOpenOrders = mangoAcc.spotOpenOrders.map( i => i.toBase58());\n  setMangoAccountData(mangoAccountDecoded)\n  console.error(\"mangoAccountDecoded DECODED**:: \", mangoAccountDecoded)\n\n}\n\n\n  return (\n    <div className=\"form-div\">\n    <h4>Accounts</h4>\n      <p> programID : {programIdX}</p>\n      <p> adminAccount : {adminAccountX}</p>\n      <p> fundAddress : {fundAddress}</p>\n\n\n   \n     <hr/>\n     <h4>FUND DATA </h4>\n     <button onClick={handleGetFundData}>GET FUND STATE</button>\n      {\n        fundData &&\n          <>\n            <p> signer_nonce  : {fundData.signer_nonce}</p>\n          \n            <p> no_of_investments : {fundData.no_of_investments}</p>\n           <br/>\n\n            <p> min_amount  : {fundData.min_amount.toString()}</p>\n            <p> performance_fee_percentage  : {fundData.performance_fee_percentage.toString()}</p>\n         \n            <p> total_amount in fund USDC  : {fundData.total_amount.toString()}</p>\n            <p> current_index  : {fundData.current_index.toString()}</p>\n            <br/>\n\n            <p> pending_deposits  : {fundData.pending_deposits.toString()}</p>\n            <p> pending_withdrawals  : {fundData.pending_withdrawals.toString()}</p>\n\n            <p> manager_account  : {fundData.manager_account.toBase58()}</p>\n            <p> usdc_vault_key  : {fundData.usdc_vault_key.toBase58()}</p>\n            <p> mango_account  : {fundData.mango_account.toBase58()}</p>\n            <p> delegate  : {fundData.delegate.toBase58()}</p>\n            <br/>\n           \n          </>\n      }\n\n\n\n\n\n\n      <hr/>\n        Mango account  ::: {' '}\n        <input type=\"text\" value={mangoAccount} onChange={(event) => setMangoAccount(event.target.value)} />\n        <button onClick={getMangoAccountData}>GET  MANGO ACC DATA </button>\n        <br />\n      {\n        mangoAccount && mangoAccountData &&\n        <>\n         <h4>MANGO ACC :{mangoAccount} </h4>\n            <p> mangoGroup : {mangoAccountData.admin}</p>\n            <b> borrows :</b>\n            <p>\n             { \n             mangoAccountData?.borrows?.length &&\n             mangoAccountData.borrows.map((i,x)=> <> {x} = {i} <b>_||_</b></>  )\n                }\n            </p>\n           <b> clientOrderIds :</b>\n           { mangoAccountData?.clientOrderIds && mangoAccountData?.clientOrderIds.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n           <b> deposits :</b>\n           { mangoAccountData?.deposits && mangoAccountData?.deposits.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n  \n           <b> orders :</b>\n           { mangoAccountData?.orders && mangoAccountData?.orders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n          \n           <b> spotOpenOrders :</b>\n           { mangoAccountData?.spotOpenOrders && mangoAccountData?.spotOpenOrders.map((i,x)=> <>{x} = {i} <b>_||_</b></>  )}\n           <br/>\n\n           <b>perpAccounts</b>\n            {\n                 mangoAccountData.perpAccounts?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>index</th>\n\n                                        <th style={{ width: \"15%\" }}>asksQuantity</th>\n                                          <th style={{ width: \"15%\" }}>basePosition</th>\n                                          <th style={{ width: \"15%\" }}>bidsQuantity</th>\n                                          <th style={{ width: \"15%\" }}>longSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>mngoAccrued</th>\n                                          <th style={{ width: \"15%\" }}>quotePosition</th>\n\n                                          <th style={{ width: \"15%\" }}>shortSettledFunding</th>\n                                          <th style={{ width: \"15%\" }}>takerBase</th>\n                                          <th style={{ width: \"15%\" }}>takerQuote</th>\n\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoAccountData.perpAccounts && \n                            mangoAccountData.perpAccounts.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{x}</td>\n\n                                <td >{i?.asksQuantity}</td>\n                                <td >{i?.basePosition}</td>\n                                <td >{i?.bidsQuantity}</td>\n                                <td >{i?.longSettledFunding}</td>\n                                <td >{i?.mngoAccrued}</td>\n                                <td >{i?.quotePosition}</td>\n\n                                <td >{i?.shortSettledFunding}</td>\n                                <td >{i?.takerBase}</td>\n                                <td >{i?.takerQuote}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n  \n        \n        </>\n      }\n\n\n\n\n\n      <hr/>\n      <h4>MANGO GRP </h4>\n      <button onClick={getAllDecodeMangoData}>GET ALL MANGO DATA </button>\n      {\n        mangoGroup &&\n          <>\n           \n            <p> admin : {mangoGroup.admin}</p>\n            <p> dexProgramId : {mangoGroup.dexProgramId}</p>\n            <p> insuranceVault : {mangoGroup.insuranceVault}</p>\n            <p> mangoCache : {mangoGroup.mangoCache}</p>\n            <p> msrmVault : {mangoGroup.msrmVault}</p>\n\n            <p> numOracles : {mangoGroup.numOracles}</p>\n            <b>mangoGroup-oracles</b>\n            <ul>\n            {\n              mangoGroup.oracles &&\n              mangoGroup.oracles.map((i,x)=> <li key={x}> <b>{x}</b> {i}</li> )\n            }\n            </ul>\n\n            <b>spotMarkets</b>\n            {\n                 mangoGroup.spotMarkets?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                        <th style={{ width: \"15%\" }}>initAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>initLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>liquidationFee</th>\n                                          <th style={{ width: \"15%\" }}>maintAssetWeight</th>\n                                          <th style={{ width: \"15%\" }}>maintLiabWeight</th>\n                                          <th style={{ width: \"15%\" }}>spotMarket</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.spotMarkets && \n                            mangoGroup.spotMarkets.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.initAssetWeight}</td>\n                                <td >{i?.initLiabWeight}</td>\n                                <td >{i?.liquidationFee}</td>\n                                <td >{i?.maintAssetWeight}</td>\n                                <td >{i?.maintLiabWeight}</td>\n                                <td >{i?.spotMarket}</td>\n                               \n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n            <b>TOKENS</b>\n             {\n                 mangoGroup.tokens?.length &&\n                 <Table  className=\"tablesorter\" responsive width=\"100%\" style={{ overflow: 'hidden !important', textAlign: 'center' }}\n                    >\n                        <thead className=\"text-primary\">\n                                        <tr>\n                                          <th style={{ width: \"15%\" }}>mint</th>\n                                          <th style={{ width: \"15%\" }}>rootBank</th>\n                                          <th style={{ width: \"15%\" }}>decimals</th>\n                                        </tr>\n                        </thead>\n                        <tbody>\n                          {\n                            mangoGroup.tokens && \n                            mangoGroup.tokens.map((i,x)=>{\n                              return <tr key={x}>\n                                <td >{i?.mint}</td>\n                                <td >{i?.rootBank}</td>\n                                <td >{i?.decimals}</td>\n                              </tr>\n                            })\n                          }\n                        </tbody>\n                </Table>\n            }\n\n           </> \n      }\n      <h4>USDC NODE BANK {ids.tokens[0].nodeKeys[0]}</h4>\n      {nodeBank && \n        <>\n            <p> borrows : {nodeBank.borrows}</p>\n            <p> deposits : {nodeBank.deposits}</p>\n            <p> vault : {nodeBank.vault}</p>\n        </>\n      }\n      <h4>USDC ROOT BANK {ids.tokens[0].rootKey}</h4>\n      {rootBank && \n        <>\n            <p> depositIndex : {rootBank.depositIndex}</p>\n            <p> borrowIndex : {rootBank.borrowIndex}</p>\n            <p> lastUpdated : {rootBank.lastUpdated}</p>\n            <p> maxRate : {rootBank.maxRate}</p>\n            <p> optimalUtil : {rootBank.optimalUtil}</p>\n            <p> optimalRate : {rootBank.optimalRate}</p>\n\n        </>\n      }\n\n      \n   \n  </div>\n  )\n}\n\n","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/constants.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/components/Transfer.js",["327","328","329","330","331","332","333","334","335","336","337","338","339","340","341","342","343","344","345","346"],"import { PublicKey, SYSVAR_CLOCK_PUBKEY, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { adminAccount, connection, FUND_ACCOUNT_KEY, idsIndex, MANGO_GROUP_ACCOUNT, MANGO_PROGRAM_ID, platformStateAccount, priceStateAccount, programId, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction, createAssociatedTokenAccountIfNotExist } from '../utils/web3';\nimport { FUND_DATA, FUND_PDA_DATA, INVESTOR_DATA, PLATFORM_DATA, PRICE_DATA } from '../utils/programLayouts';\nimport { devnet_pools, orcaPools, pools, raydiumPools } from '../utils/pools'\n\nimport { updatePoolPrices } from './updatePrices';\nimport {\n  IDS,\n  MangoClient, MangoGroupLayout, MarginAccountLayout\n} from '@blockworks-foundation/mango-client'\nimport { TOKENS } from '../utils/tokens';\n\nexport const Transfer = () => {\n\n  const ids= IDS['groups'][idsIndex];\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleTransfer = async () => {\n\n    console.log(\"**handleTransfer :\")\n\n    const key = walletProvider?.publicKey;\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n    const transaction = new Transaction()\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n    // const fundStateAccount = await PublicKey.createWithSeed(\n    //   key,\n    //   FUND_ACCOUNT_KEY,\n    //   programId,\n    // );\n\n    let fundPDAState = await connection.getAccountInfo(fundPDA[0])\n    if (fundPDAState == null) {\n      alert(\"fundPDAState account not found\")\n      return\n    }\n    console.log(\"fundPDAState:\",fundPDAState)\n    let fund_data = FUND_PDA_DATA.decode(fundPDAState.data)\n    if (!fund_data.is_initialized) {\n      alert(\"fund not initialized!\")\n      return\n    }\n    console.log(\"fund_data::\",fund_data)\n\n    let fundInvestorAccs = []\n    for (let i = 0; i < 10; i++) {\n      if(fund_data.investors[i].toBase58() !== '11111111111111111111111111111111'){\n        fundInvestorAccs.push({\n          pubkey: new PublicKey(fund_data.investors[i].toBase58()) ,\n          isSigner: false,\n          isWritable: true \n        })\n       }\n    }\n\n    console.log(\"** fundInvestorAccs:\",fundInvestorAccs)\n\n\n    let fund_mango_account = fund_data.mango_positions.mango_account\n\n    let platData = await connection.getAccountInfo(platformStateAccount)\n    let platform_data = PLATFORM_DATA.decode(platData.data)\n    console.log(\"plat info:: \", platform_data)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    // let mangoCache = await mangoGroup.loadCache(connection)\n    console.log(\"mangoCache:\",mangoGroup.mangoCache.toBase58())\n\n\n    let filt_pools = []\n    let WSOLWhitelisted = false;\n    let MSOLWhitelisted = false;\n\n    for (let i = 1; i<8; i++) {\n      if (fund_data.tokens[i].balance > 0) {\n        let mint = platform_data.token_list[fund_data.tokens[i].index[fund_data.tokens[i].mux]].mint;\n        if(mint.toBase58() === TOKENS.WSOL.mintAddress){\n          WSOLWhitelisted=true;\n        } else if(mint.toBase58() === TOKENS.MSOL.mintAddress){\n          MSOLWhitelisted=true;\n        }\n        if(fund_data.tokens[i].mux === 0){\n          let x = raydiumPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        } else {\n          let x = orcaPools.find(p => p.coin.mintAddress == mint.toBase58())\n          filt_pools.push(x)\n        }\n      }  \n    }\n    //send WSOL everytime \n    if(!WSOLWhitelisted){\n      const wsol_usdc_pool = raydiumPools.find(p => p.name == 'WSOL-USDC');\n      console.log(\"pushing WSOL pool\")\n      filt_pools.push(wsol_usdc_pool)\n    }\n    if(!MSOLWhitelisted){\n      const msol_usdc_pool = orcaPools.find(p => p.name == 'MSOL-USDC');\n      console.log(\"pushing MSOL pool\")\n      filt_pools.push(msol_usdc_pool)\n    }\n    console.log(\"filt_pools:\",filt_pools)\n    // updatePoolPrices(transaction, devnet_pools)\n    // console.log(\"after updatePoolPrices:: \")\n\n\n    // -------------\n\n    const routerPDA = await PublicKey.findProgramAddress([Buffer.from(\"router\")], programId);\n    const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n    const routerBaseTokenAccount = await findAssociatedTokenAddress(routerPDA[0], new PublicKey(TOKENS.USDC.mintAddress));\n\n    const managerBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), key, transaction);\n    const investinBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(TOKENS.USDC.mintAddress), adminAccount, transaction);\n\n\n    const dataLayout = struct([u8('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 2,\n      },\n      data\n    )\n\n    console.log(\"keys : fund_mango_account,platform_data.investin_vault:: \",fund_mango_account.toBase58() ,platform_data.investin_vault.toBase58())\n    const transfer_instruction = new TransactionInstruction({\n      keys: [\n        { pubkey: platformStateAccount, isSigner: false, isWritable: true },\n        { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n        { pubkey: fund_mango_account, isSigner: false, isWritable: true },\n        { pubkey: MANGO_GROUP_ACCOUNT, isSigner: false, isWritable: true },\n        { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n        { pubkey: MANGO_PROGRAM_ID, isSigner: false, isWritable: false },\n\n        { pubkey: key, isSigner: true, isWritable: true },\n\n        { pubkey: routerBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: fundBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: managerBaseTokenAccount, isSigner: false, isWritable: true },\n        { pubkey: platform_data.investin_vault, isSigner: false, isWritable: true },\n\n        { pubkey: routerPDA[0], isSigner: false, isWritable: true },\n\n        { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n\n\n        //investor state accounts\n        ...fundInvestorAccs\n\n      ],\n      programId,\n      data\n    });\n\n    transaction.add(transfer_instruction);\n    transaction.feePayer = key;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"blockhash\", hash);\n    transaction.recentBlockhash = hash.blockhash;\n\n    const sign = await signAndSendTransaction(walletProvider, transaction);\n    console.log(\"signature tx:: \", sign)\n    console.log(\"signature tx url:: \", `https://solscan.io/tx/${sign}`) \n\n  }\n\n  \n  return (\n    <div className=\"form-div\">\n      <h4>Manager Transfer</h4>\n\n      <button onClick={handleTransfer}>Transfer</button>\n      <br />\n\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ConnectWalletModal.js",["347","348"],"\nimport React, { useState } from 'react';\nimport { Button, Modal, ModalHeader, ModalBody, ModalFooter } from 'reactstrap';\nimport PropTypes from 'prop-types';\nimport { GlobalState } from '../store/globalState'\nimport SolanaWalletAdapter from '@project-serum/sol-wallet-adapter'\nimport { cluster } from '../utils/constants';\nimport { PhantomWalletAdapter } from '../utils/wallets/PhantomWallet';\n\nconst connectWalletButtonLabel = 'Connect Wallet'\n\nexport const ConnectWalletModal = (props) => {\n\n  const [modal, setModal] = useState(false);\n  const [buttonLabel, setButtonLabel] = useState(connectWalletButtonLabel);\n\n  const toggle = () => setModal(!modal);\n\n  const providers = ['Sollet Extension', 'Sollet', 'Phantom'];\n\n  const handleSelectProvider = async (provider) => {\n    let walletProvider = {};\n    switch (provider) {\n      case providers[0]: {\n        walletProvider = new SolanaWalletAdapter(window.sollet, cluster)\n        break;\n      }\n      case providers[1]: {\n        walletProvider = new SolanaWalletAdapter(\"https://www.sollet.io\", cluster);\n        break;\n      }\n      case providers[2]: {\n        walletProvider = new PhantomWalletAdapter();\n        break;\n      }\n      default:\n        break;\n    }\n    await walletProvider.connect();\n    console.log(`walletProvider ::: `, walletProvider)\n    walletProvider.on('connect', publicKey => {\n      console.log('Connected to ' + publicKey.toBase58())\n      console.log(`walletProvider :: `, walletProvider)\n      GlobalState.update(s => {\n        s.walletProvider = walletProvider;\n        s.address = publicKey.toBase58();\n      })\n      setButtonLabel(provider);\n      toggle()\n    });\n  }\n\n  return (\n    <div>\n      <Button color=\"dark\"\n        onClick={toggle}>\n        {buttonLabel == connectWalletButtonLabel ? connectWalletButtonLabel : `Connected to ${buttonLabel}`}\n      </Button>\n      <Modal isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle}>Choose Provider</ModalHeader>\n        <ModalBody>\n          {\n            providers.map((x) => {\n              return (\n                <div key={x} className=\"provider\" onClick={() => handleSelectProvider(x)}>{x}</div>\n              )\n            })\n          }\n        </ModalBody>\n        {/* <ModalFooter>\n          <Button color=\"primary\" onClick={toggle}>Do Something</Button>{' '}\n          <Button color=\"secondary\" onClick={toggle}>Cancel</Button>\n        </ModalFooter> */}\n      </Modal>\n    </div>\n  );\n}\n\nConnectWalletModal.propTypes = {\n  buttonLabel: PropTypes.string,\n  className: PropTypes.string\n};\n","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/pools.js",["349","350"],"import { LP_TOKENS, NATIVE_SOL, RAY_TOKENS, TOKENS } from \"./tokens\";\nimport { TEST_TOKENS, TEST_LP_TOKENS } from \"./tokens\";\n\nimport { LIQUIDITY_POOL_PROGRAM_ID_V4, ORCA_SWAP_PROGRAM_ID, SERUM_PROGRAM_ID_V3 } from \"./constants\";\n\nexport const  DEV_TOKENS = {\n USDC:  {\n    \"symbol\": \"USDC\",\n    \"mintKey\": \"8FRFC6MoGGkMFQwngccyu69VnYbzykGeez7ignHVAFSN\",\n    \"decimals\": 6,\n    \"rootKey\": \"HUBX4iwWEUK5VrXXXcB7uhuKrfT4fpu2T9iZbg712JrN\",\n    \"nodeKeys\": [\"J2Lmnc1e4frMnBEJARPoHtfpcohLfN67HdK1inXjTFSM\"]\n},\nMNGO: {\n    \"symbol\": \"MNGO\",\n    \"mintKey\": \"Bb9bsTQa1bGEtQ5KagGkvSHyuLqDWumFUcRqFusFNJWC\",\n    \"decimals\": 6,\n    \"rootKey\": \"CY4nMV9huW5KCYFxWChrmoLwGCsZiXoiREeo2PMrBm5o\",\n    \"nodeKeys\": [\"6rkPNJTXF37X6Pf5ct5Y6E91PozpZpZNNU1AGATomKjD\"]\n},\nBTC: {\n    \"symbol\": \"BTC\",\n    \"mintKey\": \"3UNBZ6o52WTWwjac2kPUb4FyodhU1vFkRJheu1Sh2TvU\",\n    \"decimals\": 6,\n    \"rootKey\": \"BeEoyDq1v2DYJCoXDQAJKfmrsoRRvfmV856f2ijkXbtp\",\n    \"nodeKeys\": [\"4X3nP921qyh6BKJSAohKGNCykSXahFFwg1LxtC993Fai\"]\n},\nETH : {\n    \"symbol\": \"ETH\",\n    \"mintKey\": \"Cu84KB3tDL6SbFgToHMLYVDJJXdJjenNzSKikeAvzmkA\",\n    \"decimals\": 6,\n    \"rootKey\": \"AxwY5sgwSq5Uh8GD6A6ZtSzGd5fqvW2hwgGLLgZ4v2eW\",\n    \"nodeKeys\": [\"3FPjawEtvrwvwtAetaURTbkkucu9BJofxWZUNPGHJtHg\"]\n},\nSOL : {\n    \"symbol\": \"SOL\",\n    \"mintKey\": \"So11111111111111111111111111111111111111112\",\n    \"decimals\": 9,\n    \"rootKey\": \"8GC81raaLjhTx3yedctxCJW46qdmmSRybH2s1eFYFFxT\",\n    \"nodeKeys\": [\"7mYqCavd1K24fnL3oKTpX3YM66W5gfikmVHJWM3nrWKe\"]\n},\nSRM : {\n    \"symbol\": \"SRM\",\n    \"mintKey\": \"AvtB6w9xboLwA145E221vhof5TddhqsChYcx7Fy3xVMH\",\n    \"decimals\": 6,\n    \"rootKey\": \"73W29LAZog2zSyE1uNYivBW8SMZQX3WBX4qfTMrMJxW2\",\n    \"nodeKeys\": [\"9wkpWmkSUSn9fitLhVh12cLbiDa5Bbhf6ZBGmPtcdMqN\"]\n},\nRAY: {\n    \"symbol\": \"RAY\",\n    \"mintKey\": \"3YFQ7UYJ7sNGpXTKBxM3bYLVxKpzVudXAe4gLExh5b3n\",\n    \"decimals\": 6,\n    \"rootKey\": \"49S76N83tSBBozugLtNYrMojFqDb3VvYq4wBB6bcAhfV\",\n    \"nodeKeys\": [\"JBHBTED3ttzk5u3U24txdjBFadm4Dnohb7g2pwcxU4rx\"]\n}\n}\n\nexport const devnet_pools = [\n  {\n    name: 'BTC-USDC',\n    coin: {...DEV_TOKENS.BTC},\n    pc: {...DEV_TOKENS.USDC},\n    // programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    poolCoinTokenAccount: 'Fq8nURZFto3bTPaKqmDqbBAFfArwYvfVuFKVoFyZZVD6',\n    poolPcTokenAccount: 'BvuamxaDy5VKnoCshtFmbFNviWbu2VzW2Gecuf12meUA',\n\n    poolTempLpTokenAccount: \"BFj4YocjRu7iektWiZynM8W3U51HMZiCcJVJSZYDw2Hc\",\n    poolWithdrawQueue: \"2gzLc4rNHR8kdxMfYGtu8RAUfzx4yt8BQKjSHi33UfMm\",\n    programId: \"9rpQHSyFVM1dkkHFQ2TtTzPEW7DVmEyPmN8wVniqJtuC\",\n    serumAsks: \"998DHpQmViDq67vMFKYYXgaHs3CJ5YHEBQSoiwxCjsCW\",\n    serumBids: \"PuDcnQDEpoR3WwVAi8PqnHJxHbVEwiusM4PnyHEykFT\",\n    serumCoinVaultAccount: \"7X9oKH5LbvzYeXzEMwBssbkP2wJNxhAGDGZmDAQyNv4m\",\n    serumEventQueue: \"CQxwLPMoqAwi5wcfkULzF6Fwh7cf4Aiz8tR6DY4NNCN1\",\n    serumMarket: \"DW83EpHFywBxCHmyARxwj3nzxJd7MUdSeznmrdzZKNZB\",\n    serumPcVaultAccount: \"Ex3pFp17g3NNgstLRR5mQYcSDMcak19zKG61C5JtW5Wj\",\n    serumProgramId: \"DESVgJVGajEgKGXhb6XmqDHGz3VjdgP7rEVESBgxmroY\",\n    serumVaultSigner: \"EY6yYbSyDTT7S5zrm94H8usLBRR4NE8YJ4hQJDmnxwUR\",\n\n    ammAuthority: \"DhVpojXMTbZMuTaCgiiaFU7U8GvEEhnYo4G9BUdiEYGh\",\n    ammId: \"88CJ7Zqe6RdBSHetEkruSNRpSGibexoGWKo2Jf8pPPf6\",\n    ammOpenOrders: \"AiyGzGf6bN5ozTNK69d3KrHS9hvQuZD6wZqU2ejBgZ1Q\",\n    ammQuantities: \"11111111111111111111111111111111\",\n    ammTargetOrders: \"71h5own84dbX5TD4CworR7GBJYgZ2nVrjgK7u56ZiJum\",\n\n  },\n  {\n    name: 'MNGO-USDC',\n    coin: {...DEV_TOKENS.MNGO},\n    pc: {...DEV_TOKENS.USDC},\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    poolCoinTokenAccount: '3Rg73PnXckaMr715Jvc3dWEt2tEBX1cjQ88SYmpqqnpw',\n    poolPcTokenAccount: 'H2DfYoN52NTs1hMkyZiK8XGJKUqyRgCWhxwC5MC48KPk',\n  },\n  {\n    name: 'ETH-USDC',\n    coin: {...DEV_TOKENS.ETH},\n    pc: {...DEV_TOKENS.USDC},\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    poolCoinTokenAccount: '2RF2cAAACsvft5g6SZU6yPidBQ8RptExAt3DXAhnyUvq',\n    poolPcTokenAccount: '7D35qDSvfgcmVaMgZt4HH8R1ruDog5d2ZTS79Jgpa7yQ',\n  },\n  {\n    name: 'SOL-USDC',\n    coin: {...DEV_TOKENS.SOL},\n    pc: {...DEV_TOKENS.USDC},\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    poolCoinTokenAccount: 'v77vV7yh5LuEKabKdNWhM8X5wpDhuPidjp7eucbHGfy',\n    poolPcTokenAccount: 'CYv6PtaGV2D2gj6pD9io1PjJbUrcE7gyBmDethawZmMm',\n  },\n \n  \n]\nexport const devnet2_pools = [\n  {\n    name: 'ALPHA-USDP',\n    coin: { ...TEST_TOKENS.ALPHA },\n    pc: { ...TEST_TOKENS.USDP },\n    lp: { ...LP_TOKENS['RAY-USDP-V4'] },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'DVa7Qmb5ct9RCpaU7UTpSaf3GVMYz17vNVU67XpdCRut',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'HboQAt9BXyejnh6SzdDNTx4WELMtRRPCr7pRSLpAW7Eq',\n    ammTargetOrders: '3K2uLkKwVVPvZuMhcQAPLF8hw95somMeNwJS7vgWYrsJ',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n\n    poolCoinTokenAccount: 'DUn4i71SXksHN7KtveP4uauWqsnfdSHa4PoEkzN8qqN6',\n    poolPcTokenAccount: 'BUdDS4AUMSsvQ1QyHe4LLagvkFfUU4TW17udvxaDJaxR',\n\n    // dont care\n    poolWithdrawQueue: '8VuvrSWfQP8vdbuMAP9AkfgLxU9hbRR6BmTJ8Gfas9aK',\n    poolTempLpTokenAccount: 'FBzqDD1cBgkZ1h6tiZNFpkh4sZyg6AG8K5P9DSuJoS5F',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'teE55QrL4a4QSfydR9dnHF97jgCfptpuigbb53Lo95g',\n    serumBids: 'AvKStCiY8LTp3oDFrMkiHHxxhxk4sQUWnGVcetm4kRpy',\n    serumAsks: 'Hj9kckvMX96mQokfMBzNCYEYMLEBYKQ9WwSc1GxasW11',\n    serumEventQueue: '58KcficuUqPDcMittSddhT8LzsPJoH46YP4uURoMo5EB',\n    serumCoinVaultAccount: '2kVNVEgHicvfwiyhT2T51YiQGMPFWLMSp8qXc1hHzkpU',\n    serumPcVaultAccount: '5AXZV7XfR7Ctr6yjQ9m9dbgycKeUXWnWqHwBTZT6mqC7',\n    serumVaultSigner: 'HzWpBN6ucpsA9wcfmhLAFYqEUmHjE9n2cGHwunG5avpL'\n  },\n  {\n    name: 'BETA-USDP',\n    coin: { ...TEST_TOKENS.BETA },\n    pc: { ...TEST_TOKENS.USDP },\n    lp: { ...LP_TOKENS['ETH-USDT-V4'] },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'He3iAEV5rYjv6Xf7PxKro19eVrC3QAcdic5CF2D2obPt',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '8x4uasC632WSrk3wgwoCWHy7MK7Xo2WKAe9vV93tj5se',\n    ammTargetOrders: 'G1eji3rrfRFfvHUbPEEbvnjmJ4eEyXeiJBVbMTUPfKL1',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    \n    poolCoinTokenAccount: '2Ab9oAp9XcarKgdthdAtTitAHctuEkafKHh2GtzSJRyt',\n    poolPcTokenAccount: 'BUdDS4AUMSsvQ1QyHe4LLagvkFfUU4TW17udvxaDJaxR',\n    \n    // dont care\n    poolWithdrawQueue: 'EispXkJcfh2PZA2fSXWsAanEGq1GHXzRRtu1DuqADQsL',\n    poolTempLpTokenAccount: '9SrcJk8TB4JvutZcA4tMvvkdnxCXda8Gtepre7jcCaQr',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '7dLVkUfBVfCGkFhSXDCq1ukM9usathSgS716t643iFGF',\n    serumBids: 'J8a3dcUkMwrE5kxN86gsL1Mwrg63RnGdvWsPbgdFqC6X',\n    serumAsks: 'F6oqP13HNZho3bhwuxTmic4w5iNgTdn89HdihMUNR24i',\n    serumEventQueue: 'CRjXyfAxboMfCAmsvBw7pdvkfBY7XyGxB7CBTuDkm67v',\n    serumCoinVaultAccount: '2CZ9JbDYPux5obFXb9sefwKyG6cyteNBSzbstYQ3iZxE',\n    serumPcVaultAccount: 'D2f4NG1NC1yeBM2SgRe5YUF91w3M4naumGQMWjGtxiiE',\n    serumVaultSigner: 'CVVGPFejAj3A75qPy2116iJFma7zGEuL8DgnxhwUaFBF'\n  },\n]\n\nexport const orcaPools = [\n  {\n    name: 'WSOL-USDC',\n    coin: { ...TOKENS.WSOL },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'EGZ7tiLeH62TPV1gL8WwbXGzEPa9zmcpVnnkPKKnrE2U',\n    ammAuthority: 'JU8kmKzDHF9sXWsnoznaFDFezLsE5uomX2JkRMbmsQP',\n    feeAccount: '8JnSiuvQq3BVuCU3n4DrSTw9chBSPvEMswrhtifVkr1o',\n    lpMintAddress: 'APDFRM3HMr8CAGXwKHiu2f5ePSpaiEJhaURwhsRrUUt9',\n    poolCoinTokenAccount: 'ANP74VNsHwSrq9uUSjiSNyNWvf6ZPrKTmE4gHoNd13Lg',\n    poolPcTokenAccount: '75HgnSvXbWKZBpZHveX68ZzAhDqMzNDS29X6BGLtxMo1',\n  },\n  {\n    name: 'SHDW-USDC',\n    coin: { ...TOKENS.SHDW },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '25bQ6UzZpgFgnU7MqZdqM9Axi6oJunytRL2LgXruDWZB',\n    ammAuthority: 'BjnfpyU3Verx99dKcEJZpL1AqLTPrkAUcd44LpXcXVvn',\n    feeAccount: '9wmHbXURZ4zTPSj1KqoRSCdBRGUF7jrURzf7BB39cxM4',\n    lpMintAddress: 'DJqqvzSuPaWThfzwMjXx7H2ZmHDdwxza6NtFudtuXcpc',\n    poolCoinTokenAccount: '8ZVaNyNZQkcMzF7esuZoRgRo7Rc9eKEN18v4zw7Ng8JZ',\n    poolPcTokenAccount: 'H8A2xivBXr1RMCYmuhJ7dyEXJqPxaGDyQaaim8WucU7c',\n  },\n  {\n    name: 'IVN-WSOL',\n    coin: { ...TOKENS.IVN },\n    pc: { ...TOKENS.WSOL },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'CFCivUWXBuULVNfJezj1fAhX6hdwVFi2BsCtpu6m96bR',\n    ammAuthority: 'JGhNs5r7YNnJokzzXZWE3REKV8x4GiUvn2xSg7XGg59',\n    feeAccount: 'HwwgrSjJGFBtRN8h2daWnVLBciwoo79wNeKi6b5SZmE2',\n    lpMintAddress: 'DfgCnzaiTXfPkAH1C1Z441b5MzjjTCEh134ioxqRZxYf',\n    poolCoinTokenAccount: 'C5yDeB3jBz5yZPa6FgP6b7HNoFxLP63Pyzpaosnkikis',\n    poolPcTokenAccount: 'CCm846T6xj9VAhSAifuUJAXYCR3kaGp5KqhXFHCaeWUh',\n  },\n  {\n    name: 'LIQ-USDC',\n    coin: { ...TOKENS.LIQ },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'AXSeEafwPUGSamiZWH8m2PJtvpDVtrofxvycNwxiysdh',\n    ammAuthority: '6Y5TnCwgifc8Z7QYo672nT9uNd2hcivVR1NT6oDkJx6P',\n    feeAccount: 'FSVPcprrTkQLRtDACFEpa2rhEVx4kBvjPuQaxj572SaC',\n    lpMintAddress: '3PD9SZFwXKkXr4akLf4ofo37ZUMycwML89R2P3qxcbZG',\n    poolCoinTokenAccount: 'CVspL8Tj5YdqntXJegNeDXHiBn3648QDNB7gex6D9MgY',\n    poolPcTokenAccount: '8YzLsZ1FtsruswkBogEaXwmRTf5PMuyVcfSZXRAdi8qA',\n  },\n  {\n    name: 'ORCA-USDC',\n    coin: { ...TOKENS.ORCA },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '2p7nYbtPBgtmY69NsE8DAW6szpRJn7tQvDnqvoEWQvjY',\n    ammAuthority: '3fr1AhdiAmWLeNrS24CMoAu9pPgbzVhwLtJ6QUPmw2ob',\n    feeAccount: '7CXZED4jfRp3qdHB9Py3up6v1C4UhHofFvfT6RXbJLRN',\n    lpMintAddress: 'n8Mpu28RjeYD7oUX3LG1tPxzhRZh3YYLRSHcHRdS3Zx',\n    poolCoinTokenAccount: '9vYWHBPz817wJdQpE8u3h8UoY3sZ16ZXdCcvLB7jY4Dj',\n    poolPcTokenAccount: '6UczejMUv1tzdvUzKpULKHxrK9sqLm8edR1v9jinVWm9',\n  },\n  {\n    name: 'ETH-USDC',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'FgZut2qVQEyPBibaTJbbX2PxaMZvT1vjDebiVaDp5BWP',\n    ammAuthority: '4dfCZR32xXhoTgMRhnViNaTFwiKP9A34TDjHCR3xM5rg',\n    feeAccount: 'DLWewB12jzGn4wXJmFCddWDeof1Ma4cZYNRv9CP5hTvX',\n    lpMintAddress: '3e1W6Aqcbuk2DfHUwRiRcyzpyYRRjg6yhZZcyEARydUX',\n    poolCoinTokenAccount: 'H9h5yTBfCHcb4eRP87fXczzXgNaMzKihr7bf1sjw7iuZ',\n    poolPcTokenAccount: 'JA98RXv2VdxQD8pRQq4dzJ1Bp4nH8nokCGmxvPWKJ3hx',\n  },\n  {\n    name: 'ATLAS-USDC',\n    coin: { ...TOKENS.ATLAS },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '3V5sjXj1mrWjjB1Xt6Xwp554QwHE5fppGSxbk4GzAtEW',\n    ammAuthority: '8UYN675AJn5htWydDs724xqintBZ4XzsCWqMozUSDU8m',\n    feeAccount: 'CFN4DQ2p3qroX92pPNy3mov3Dw1aCNGLrU5AXHpHxbko',\n    lpMintAddress: 'FZ8x1LCRSPDeHBDoAc3Gc6Y7ETCynuHEr5q5YWV7uRCJ',\n    poolCoinTokenAccount: 'xotXsNCx4tBhnwhrajGTaVgKq1sfuMkeYHc77ZegCqE',\n    poolPcTokenAccount: '8YswVYsTi66umBF2Bnkh4LB2VWMKPssDpe54VAgiuJZQ',\n  },\n  {\n    name: 'POLIS-USDC',\n    coin: { ...TOKENS.POLIS },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'CdKPtCb5fBRaGFS4bJgytfReeHuFyhpe9YUyWHPnEWZG',\n    ammAuthority: '8XB9V3VuHtPBzHqvxzcmpkpaoXNXjZMD8VBHC79SxcEL',\n    feeAccount: '3gZQ2YnrXbnRwJj5poffLirF7CwacatvtfGCNRFrbJdr',\n    lpMintAddress: 'GteBdo9sqE7T41G8AJsaG9WHW48uXBwsLLznmu2TBdgy',\n    poolCoinTokenAccount: 'EbXNEUiKxSU1vwwhrbVNVk3qX4o1yU3p75SQUUMfc1zH',\n    poolPcTokenAccount: 'CLCj9b1vdPutrkvZS8ACTM5q42SXB2Q7khnMLVxDMGEK',\n  },\n  {\n    name: 'ABR-USDC',\n    coin: { ...TOKENS.ABR },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'rxwsjytcEBvXpXrXBL1rpsjhoh78imBn8WbxjKmLRge',\n    ammAuthority: 'AcaxutE6Rh9vRxipTLdqinEdRK6R4ayUAAv2bZPh6UU9',\n    feeAccount: '7pPJGwd8Vq7aYmHaocQpQSfTn3UWYGKUgFkFhpMmRdDF',\n    lpMintAddress: 'GMzPbaCuQmeMUm1opH3oSCgKUjVgJUW14myq99RVPGX5',\n    poolCoinTokenAccount: '6FRxhbY7bvSiDojPiqoidjTyDjxaUyCoPQk3ifEdfFbm',\n    poolPcTokenAccount: '8aTapFecZRZmC2bTeKr2voHFW2twNvbrh8nWYdXYQWkZ',\n  },\n  {\n    name: 'SBR-USDC',\n    coin: { ...TOKENS.SBR },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'HiYggjP2fN53Jw46e5UuskqNP3HH98jceRxEgVoeRwNw',\n    ammAuthority: 'ATkEV1nEkdp7zgaGpzFCsJ5WAyejcJbxqzGhQpfcDW4S',\n    feeAccount: '7S3KKuvcHfcKWBGLDwmoTgtB97JE8LHruP8jbmQkGfH',\n    lpMintAddress: 'CS7fA5n4c2D82dUoHrYzS3gAqgqaoVSfgsr18kitp2xo',\n    poolCoinTokenAccount: 'DrJTQqNZqNCf2HDLpYg9zRCMRwnhZEVQuGjeaWtX6CA7',\n    poolPcTokenAccount: 'DEVLUv1uiUSukQoBdy9fDQyehi4N2Boojy8J2LQ8bK2E',\n  },\n  {\n    name: 'SUNNY-USDC',\n    coin: { ...TOKENS.SUNNY },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '3Ukqqshh3kZ8UPbcYYFSRaeJcsgttcmShtNNn12F1rj2',\n    ammAuthority: '7NP8DTzPdpbQofhNyhLW3j2khutmfy1kuFp2AjaD8rrp',\n    feeAccount: 'CCuSVbnnq8SUj7cpPe7BbHLuKanyxfvfrwypzCBnaDdf',\n    lpMintAddress: 'GHuoeq9UnFBsBhMwH43eL3RWX5XVXbSRYJymmyMYpT7n',\n    poolCoinTokenAccount: 'F6nCAMYEFxsyRDVonQXLNufXgAHsgAa1Br8DhBoX3KAV',\n    poolPcTokenAccount: 'HWCTHmQppFSsKQEk1bHUqPC2WLaidgnfTG9MQGD4XKEt',\n  },\n  {\n    name: 'SAMO-USDC',\n    coin: { ...TOKENS.SAMO },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'Epvp7qMYAF21VVjacdB3VfKn6nnXQSF4rGYu8sD6Bkow',\n    ammAuthority: 'AB4rTE2JiKFhnfynUQCovbW75CUxT9LxcJX2SDTbY9gy',\n    feeAccount: '9U8UF7d8kBvsS25XoZnjmVQ9vGkP4BUnHJgfc615BvG1',\n    lpMintAddress: '6VK1ksrmYGMBWUUZfygGF8tHRGpNxQEWv8pfvzQHdyyc',\n    poolCoinTokenAccount: '7jwHW4Lw3nVaSJXskN5pUoKU6YB9RBVfZtGBp3VbR43U',\n    poolPcTokenAccount: 'G7Gqjxk9EaJMeFfoFTSy9WfH8uurgQkbNQCREWAc56DZ',\n  },\n  {\n    name: 'PORT-USDC',\n    coin: { ...TOKENS.PORT },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '4if9Gy7dvjU7XwunKxdnCcPsaT3yAHPXdz2XS1eo19LG',\n    ammAuthority: 'BshtCZRCHj2RZYC7u5sW3ioRJo9ZiYA4T5p8muFwrKnb',\n    feeAccount: '5JZXUbCfaSo3y9PYq47Hj5Yc6hVFa4j7MkDzBJfMSRSN',\n    lpMintAddress: 'F8gPSpwVHj8FdAJAYULDuZBxFEJut87hUbARYYx3471w',\n    poolCoinTokenAccount: '2wuSqR5z2Guft2yt57Hx7K6i1AYNoUi8fjxHUeAgaKXo',\n    poolPcTokenAccount: 'AvP1Db3SyUxLGMSc4nSXjJkjm1kAjiLjog7cup19eWa3',\n  },\n  {\n    name: 'MSOL-USDC',\n    coin: { ...TOKENS.MSOL },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'Hme4Jnqhdz2jAPUMnS7jGE5zv6Y1ynqrUEhmUAWkXmzn',\n    ammAuthority: '9Z7E42k46kxnBjAh8YGXDw3rRGwwxQUBYM7Ccrmwg6ZP',\n    feeAccount: '3W3Skj2vQsNEMhGRQprFXQy3Q8ZbM6ojdgiDCokVPWno',\n    lpMintAddress: '8PSfyiTVwPb6Rr2iZ8F3kNpbg65BCfJM9v8LfB916r44',\n    poolCoinTokenAccount: 'GBa7G5f1FqAXEgByuHXsqsEdpyMjRgT9SNxZwmmnEJAY',\n    poolPcTokenAccount: '7hFgNawzzmpDM8TTVCKm8jykBrym8C3TQdb8TDAfAVkD',\n  },\n  {\n    name: 'BTC-MSOL',\n    coin: { ...TOKENS.BTC },\n    pc: { ...TOKENS.MSOL },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '8DRw5wQE1pyg6RB1UwypGNFgb2Pzp2hpyDDNwo76Lcc8',\n    ammAuthority: '3X1aLdyvcQNc8TvBMPiucMsRCnGMBnGsjJHpZEyCf3pn',\n    feeAccount: 'AqiLHbUAy4UWWKGVVgbHsaUVCMg1zemNkgsYBPSirT92',\n    lpMintAddress: '8nKJ4z9FSw6wrVZKASqBiS9DS1CiNsRnqwCCKVQjqdkB',\n    poolCoinTokenAccount: '6D3sxC6yEe84FUnF5Kpbgx6gN57N9poJCKAtrCeCWdJo',\n    poolPcTokenAccount: 'EPoVJLhi9QtVPVo8n31M5k5Knvb48j8zbYyRrUbrHwC5',\n  },\n  {\n    name: 'MNDE-MSOL',\n    coin: { ...TOKENS.MNDE },\n    pc: { ...TOKENS.MSOL },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: 'vjHagYsgZwG9icyFLHu2xWHWdtiS5gfeNzRhDcPt5xq',\n    ammAuthority: '3HWcojnC1ruEMmsE92Ez1BoebdDXzYQa4USaeWX7eTuM',\n    feeAccount: '46mdANZ2DCA2sTFchvD7WwbffbLQa4jCFkkRL23WuYG8',\n    lpMintAddress: '5PHS5w6hQwFNnLz1jJFe7TVTxSQ98cDYC3akmiAoFMXs',\n    poolCoinTokenAccount: '2LferrWvYWtHFfdkmixzt9g3aKa3yBNfgbRrP1CcWMMp',\n    poolPcTokenAccount: 'GimsuZjYqMXM6xK6S3e9JpGvX6jaMPuNeR6s2piDESmy',\n  },\n  {\n    name: 'NINJA-WSOL',\n    coin: { ...TOKENS.NINJA },\n    pc: { ...TOKENS.WSOL },\n\n    version: 4,\n    programId: ORCA_SWAP_PROGRAM_ID,\n\n    ammId: '3ECUtPokme1nimJfuAkMtcm7QYjDEfXRQzmGC16LuYnz',\n    ammAuthority: 'H8f9n2PfehUc73gRWSRTPXvqUhUHVywdAxcfEtYmmyAo',\n    feeAccount: '43ViAbUVujnYtJyzGP4AhabMYCbLsExenT3WKsZjqJ7N',\n    lpMintAddress: '4X1oYoFWYtLebk51zuh889r1WFLe8Z9qWApj87hQMfML',\n    poolCoinTokenAccount: '6Y9VyEYHgxVahiixzphNh4HAywpab9zVoD4S8q1sfuL8',\n    poolPcTokenAccount: '9SxzphwrrDVDkwkyvmtag9NLgpjSkTw35cRwg9rLMYWk',\n  },\n];\n\nexport const raydiumPools = [\n  {\n    name: 'WSOL-USDC',\n    coin: { ...TOKENS.WSOL },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '58oQChx4yWmvKdwLLZzBi4ChoCc2fqCUWBkwMihLYQo2',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'HRk9CMrpq7Jn9sh7mzxE8CChHG8dneX9p475QKz4Fsfc',\n    ammTargetOrders: 'CZza3Ej4Mc58MnxWA385itCC9jCo3L1D7zc3LKy1bZMR',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'DQyrAcCrDXQ7NeoqGgDCZwBvWDcYmFCjSb9JtteuvPpz',\n    poolPcTokenAccount: 'HLmqeL62xR1QoZ1HKKbXRrdN1p3phKpxRMb2VVopvBBz',\n    poolWithdrawQueue: 'G7xeGGLevkRwB5f44QNgQtrPKBdMfkT6ZZwpS9xcC97n',\n    poolTempLpTokenAccount: 'Awpt6N7ZYPBa4vG4BQNFhFxDj4sxExAA9rpBAoBw2uok',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '9wFFyRfZBsuAha4YcuxcXLKwMxJR43S7fPfQLusDBzvT',\n    serumBids: '14ivtgssEBoBjuZJtSAPKYgpUK7DmnSwuPMqJoVTSgKJ',\n    serumAsks: 'CEQdAFKdycHugujQg9k2wbmxjcpdYZyVLfV9WerTnafJ',\n    serumEventQueue: '5KKsLVU6TcbVDK4BS6K1DGDxnh4Q9xjYJ8XaDCG5t8ht',\n    serumCoinVaultAccount: '36c6YqAwyGKQG66XEp2dJc5JqjaBNv7sVghEtJv4c7u6',\n    serumPcVaultAccount: '8CFo8bL8mZQK8abbFyypFMwEDd8tVJjHTTojMLgQTUSZ',\n    serumVaultSigner: 'F8Vyqk3unwxkXukZFQeYyGmFfTG3CAX4v24iyrjEYBJV',\n    official: true\n  },\n  {\n    name: 'IVN-USDC',\n    coin: { ...TOKENS.IVN },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'BLR7Kae1QnryMyX196WRo6nvg5hzQpcRs2LpfTCYX77U',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '7Prd335q7gBkJvor1wVRH4rnuAtqKZYg1Pa4g6xWHEXM',\n    ammTargetOrders: '6mNKzgYvtQ4UwixNvCstaVQvxZyMxufHQwLyxVumYDTs',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'HNLcv94duK6MkLFuoTCN8pEgZXgh9EyaeohimdkoRfZx',\n    poolPcTokenAccount: 'Gb51dCpBDpjJFF6nL2Du7PwNczAsr2hFXLZLU6rCAEfU',\n    poolWithdrawQueue: '9EvpGNnjytA45c61a7NuoVJ1coNYLuhBdnFZdvBX6WbH',\n    poolTempLpTokenAccount: '6JFsYcPxtwJEphHNisrJER68ySXfQkiADqCtgwai7Qb9',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '4JDhmLVobWpUaV8tr3ZGAXmSp3vMf24a2D2dVfoH1E5T',\n    serumBids: 'BD6mgaiQTC13YCMWmT9hV2TTH9VpWMG8JGNCn8rLx14M',\n    serumAsks: 'CAfG1TSFihYBVHhwAy6Ys2CAD9rkkb3wiv7dLNu67g9r',\n    serumEventQueue: '3mJbEYfyyBLGPqexGGFgW5CPVqJC1nZ7FVtav7BBJFGn',\n    serumCoinVaultAccount: 'GXQb7pVCzcRxburpaeY3utfA1sz1pgSK4GPRugjQ6Mmr',\n    serumPcVaultAccount: '7L6WzCKKSeGyZ1P8L9UK9zzCnoJSFguH2wHfWGfPTWJM',\n    serumVaultSigner: 'Eos7UyWRrfuU5PB4D2D3kY5ZVj3YdSNoYSK7WosCsVSF',\n    official: true\n  },\n  {\n    name: 'ATS-USDC',\n    coin: {...TOKENS.ATS},\n    pc: {...TOKENS.USDC},\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: 'GTg2JHaaTyz7DXknwCNVPSMPLognrqXUm6uoHA3j1JRb',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '3atg3g6TkshhS9fsnBf9hArsHCYyUQG9fdPLC5SNzgEW',\n    ammTargetOrders: 'CJ6X2FuFbDbADzZuAiTbtRsfh8j7EZzcFnMXEndnceqS',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'BA6pvLDkEipsxWTQTFTL76Npozy8KGmPwWBzQ4hyPxrx',\n    poolPcTokenAccount: '4kUo3sQMRjVwbyxPtVS4hgANXpCvXEtKVhdgijyhXv98',\n    poolWithdrawQueue: '9bMsYn9jr1TvYfktB4Js8hvwTjuxbMNZPFk6AJVp3icL',\n    poolTempLpTokenAccount: 'Gu72XLrP2yKyRpVK65Xf7eEgJFTWQEZ5Uk9D145LuSkv',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '6NvErACd7kKz5uPDAfXKahW9sFooUJvtfRh5Kzq6GH9z',\n    serumBids: '26X4cVMDaLtjBZCB61zvWfUUhBKuJxLypR3q6KxWisXD',\n    serumAsks: 'DasuF3LWfqooCqTnBhUKMLb5MdUbBg9sXqCDKcXksTXN',\n    serumEventQueue: 'D96hP36dLrTshHQb6hEcrNvhpAHeLhNxxk3tjqNSfAcG',\n    serumCoinVaultAccount: '4zEPqVMTPqtGXB8ciRvdrLPEAwr4RaV3ZECuptqMxYbf',\n    serumPcVaultAccount: 'ASZPLhbA2aH6Lqjt94vbeUEQtcj17oX9tKVU7wRSiyDt',\n    serumVaultSigner: 'HydTyLGBPmkhxhTENw1B1FEtYYccqF1SWfHa8AEkKxRh',\n    official: true\n  },\n  {\n    name: 'PRISM-USDC',\n    coin: { ...TOKENS.PRISM },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: '4ZYiiVakejxGyJ3tuBzYWoHyEV1rk7Hm7viydG6DNaUN',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'BbLHAwRx9RtGCSYrFM9wzxqx3ZmhLMHHSYRNpKnYwrsh',\n    ammTargetOrders: '4MchsSuWUvVLWQGFsFxjEDY6vM8FhHBpkVEuYPdC8qq5',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'Fjrkf7uoCLgZG8jTWo71kyqUubqsi6YRagQGMxmQEvQe',\n    poolPcTokenAccount: '5xR14K7Wn1ABG3HyNCboR8VVwVAk9Rj2uShVVnCwFiNd',\n    poolWithdrawQueue: '9bMsYn9jr1TvYfktB4Js8hvwTjuxbMNZPFk6AJVp3icL',\n    poolTempLpTokenAccount: 'Gu72XLrP2yKyRpVK65Xf7eEgJFTWQEZ5Uk9D145LuSkv',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '2MvXnxngd1gKp6gE8Q63wiPHSpveWcx8x4wf43VpyiA6',\n    serumBids: 'FYWe7bjakwEz22Tz9ujt3vNtzuAZX5B9ceVutUrqHS1v',\n    serumAsks: '8vD5fzFY3AVv6m6oB88shTbaDxYa6ufVeTHhy5zJ5RkR',\n    serumEventQueue: 'LczT5PA64Uq8CBYCN73DH27e2X5r2PwPZLFCTTCUoJS',\n    serumCoinVaultAccount: 'pLX8sCH4jNJVS57goC6Y7ujzLH1gG88Mej5UWwc3eFo',\n    serumPcVaultAccount: '4mBaTptwEPRwdBzBfLu2SixTAawqqrP6UsoFgfUcfZr9',\n    serumVaultSigner: '74GRGpvNtRDZkx8M9SVBU5Z4of6j4vPFWQyFX3ZvV3fg',\n    official: true\n  },\n  {\n    name: 'UXP-USDC',\n    coin: { ...TOKENS.UXP },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: '6tmFJbMk5yVHFcFy7X2K8RwHjKLr6KVFLYXpgpBNeAxB',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '7AP5KPxkc9TYtYvqyXc4RK9GRVutGSne8Pj4ryKJoY4Z',\n    ammTargetOrders: 'DfEhXNWDjsDNz1bqz6GinQU8RepjFneosamAM2XZ3heT',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '3Dtb2kDA3pJkUrULXmQa8qn1RkmgnEM4eo2nf6Uuq3K3',\n    poolPcTokenAccount: 'Gh2YaVC1sjzZQMixnHNXDin6awBAV6p2D5zY8STMu4p4',\n    poolWithdrawQueue: 'BngHmGEaQbDF9LacaSs1hQRFMVmkvEqFpo5h5gkiWQRB',\n    poolTempLpTokenAccount: '5wdZqTKhpnFwWSC3mxEH4QHd9o8Jwt7swqB2QPBJb5yf',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '7KQpsp914VYnh62yV6AGfoG9hprfA14SgzEyqr6u9NY1',\n    serumBids: 'L6vnHnDLf8EPKXyaNAyhpkCdocvtkpNX8euVFZtqjCQ',\n    serumAsks: '68xmWKfE32qDoFL4iKBsjKpDyAfaiW4efdTDSAm33sKj',\n    serumEventQueue: 'Cta4TEwKCKhSphkMNzXsURVr2V6mozm2SPaV8tCgDPwy',\n    serumCoinVaultAccount: '9QGayBN3ycectkhLKiTPcfM9iFVtFpefSGWRr3XUoLwk',\n    serumPcVaultAccount: 'EiVf38NCvDFVJQqF5FgX1zeQ26Mzr88iELFugUSMJzu9',\n    serumVaultSigner: '5F4DUyyDR2uH7VTADLzi1CFmsVBVqPXk4TM4yHf9WDJi',\n    official: true\n  },\n  {\n    name: 'AURY-USDC',\n    coin: { ...TOKENS.AURY },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: 'Ek8uoHjADzbNk2yr2HysybwFk1h2j9XXDsWAjAJN38n1',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'BnGTcze1GXtCMkFPceWfUC4HPRXjJo5dGb2bmevHfgL3',\n    ammTargetOrders: '2h5kDQddqUTUaAjFv3FHNMtvVVCYo1PY6BxkxtkhVzkH',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'JBvjQsg5YasDvmSKnetHZzUesa1Aucp6gXwGtPhjefGY',\n    poolPcTokenAccount: '2auTq31drUwTmMKsJcD2KqZnKgiTRTN1XDKS9CQ7wzGe',\n    poolWithdrawQueue: 'BngHmGEaQbDF9LacaSs1hQRFMVmkvEqFpo5h5gkiWQRB',\n    poolTempLpTokenAccount: '5wdZqTKhpnFwWSC3mxEH4QHd9o8Jwt7swqB2QPBJb5yf',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '461R7gK9GK1kLUXQbHgaW9L6PESQFSLGxKXahvcHEJwD',\n    serumBids: 'B8yZ7jW9UAKLTtPTGzfobqfn9J4obmwy8BtdX17joKVt',\n    serumAsks: '8cytrpCzPUiFub2Zjxhz4VN6sz5UycVYWPEpyVteARXh',\n    serumEventQueue: 'Dg1CmXWtyHwoi71GVgpp9N4u7wQtcmuGcXbh9Bgpd9wb',\n    serumCoinVaultAccount: 'HbYw9LSKVepB9mYwbTeDy6oAj5TPrw3GqAFtKWm99jNd',\n    serumPcVaultAccount: '6DbF2jRhrNgeZnHGR6c1UfGmQxk4qtBueox56huK8Etr',\n    serumVaultSigner: '639H2jxUJRbvNiCQnkypf4Nvz72bSdbexchvcCg2jHYR',\n    official: true\n  },\n  {\n    name: 'YFI-USDC',\n    coin: { ...TOKENS.YFI },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '83xxjVczDseaCzd7D61BRo7LcP7cMXut5n7thhB4rL4d',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'DdBAps8e64hpjdWqAAHTThcVFz8mQ6WU2h6s1Kjgb9vk',\n    ammTargetOrders: '8BFicQN1AKaVbf1KNoUieULun1bvpdMxsyjrgC15acM6',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'HhhqmQvx2GMQ6SRQh6nZ1A4C5KjCFLQ6yga1ZXDzRJ92',\n    poolPcTokenAccount: '4J4Y6qkF9yzxz1EsZYTSqviMz3Lo1VHx9ViCUoJph167',\n    poolWithdrawQueue: 'FPkMHzDo46vzy1eW9FuQFz7TdAp1MNCkZFgKxrHiuh3W',\n    poolTempLpTokenAccount: 'DuTzisr6Z2D37yTyY9E4jPMCxhQk3HCNxaL1zKqvwRjR',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '7qcCo8jqepnjjvB5swP4Afsr3keVBs6gNpBTNubd1Kr2',\n    serumBids: '8L8kU4H9Ah3fgbczYKFU9WUR1HgAghso1kKwWAPrmLfS',\n    serumAsks: '4M9kDzMGsNHT3k31i54wf2ceeApvx3224pLbhDvnoj2s',\n    serumEventQueue: '6wKPYgydqNrmcXwbfPeNwkzXmjKMgkUhQcGoGYrm9fS4',\n    serumCoinVaultAccount: '2N59Aig7wqhfffAUjMit7T9tk4FmSRzmByMD7mncTesq',\n    serumPcVaultAccount: 'FcDTYePeh2KJts4nroCghgceiJmSBRgq2Xd3PfpernZm',\n    serumVaultSigner: 'HDdQQNNf9EoCGWhWUgkQHRJVbG3huDXs2z6Fcow3grCr',\n    official: true\n  },\n  {\n    name: 'SRM-USDC',\n    coin: { ...TOKENS.SRM },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '8tzS7SkUZyHPQY7gLqsMCXZ5EDCgjESUHcB17tiR1h3Z',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'GJwrRrNeeQKY2eGzuXGc3KBrBftYbidCYhmA6AZj2Zur',\n    ammTargetOrders: '26LLpo8rscCpMxyAnJsqhqESPnzjMGiFdmXA4eF2Jrk5',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'zuLDJ5SEe76L3bpFp2Sm9qTTe5vpJL3gdQFT5At5xXG',\n    poolPcTokenAccount: '4usvfgPDwXBX2ySX11ubTvJ3pvJHbGEW2ytpDGCSv5cw',\n    poolWithdrawQueue: '7c1VbXTB7Xqx5eQQeUxAu5o6GHPq3P1ByhDsnRRUWYxB',\n    poolTempLpTokenAccount: '2sozAi6zXDUCCkpgG3usphzeCDm4e2jTFngbm5atSdC9',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'ByRys5tuUWDgL73G8JBAEfkdFf8JWBzPBDHsBVQ5vbQA',\n    serumBids: 'AuL9JzRJ55MdqzubK4EutJgAumtkuFcRVuPUvTX39pN8',\n    serumAsks: '8Lx9U9wdE3afdqih1mCAXy3unJDfzSaXFqAvoLMjhwoD',\n    serumEventQueue: '6o44a9xdzKKDNY7Ff2Qb129mktWbsCT4vKJcg2uk41uy',\n    serumCoinVaultAccount: 'Ecfy8et9Mft9Dkavnuh4mzHMa2KWYUbBTA5oDZNoWu84',\n    serumPcVaultAccount: 'hUgoKy5wjeFbZrXDW4ecr42T4F5Z1Tos31g68s5EHbP',\n    serumVaultSigner: 'GVV4ZT9pccwy9d17STafFDuiSqFbXuRTdvKQ1zJX6ttX',\n    official: true\n  },\n  {\n    name: 'FTT-USDC',\n    coin: { ...TOKENS.FTT },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '4C2Mz1bVqe42QDDTyJ4HFCFFGsH5YDzo91Cen5w5NGun',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '23WS5XY3srvBtnP6hXK64HAsXTuj1kT7dd7srjrJUNTR',\n    ammTargetOrders: 'CYbPm6BCkMyX8NnnS7AoCUkpxHVwYyxvjQWwZLsrFcLR',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '4TaBaR1ZgHNuQM3QNHnjJdAT4Sws9cz46MtVWVebg7Ax',\n    poolPcTokenAccount: '7eDiHvsfcZf1VFC2sUDJwr5EMMr66TpQ2nmAreUjoASV',\n    poolWithdrawQueue: '36Aa83kffwBuEP7AqNU1w5c9oB9kLxmR4FMfadXfjNbJ',\n    poolTempLpTokenAccount: '8hdJm5bvgXVtb5LA18QgGeKxnXBcp3cYKwRz8vb3fV44',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '2Pbh1CvRVku1TgewMfycemghf6sU9EyuFDcNXqvRmSxc',\n    serumBids: '9HTDV2r7cQBUKL3fgcJZCUfmJsKA9qCP7nZAXyoyaQou',\n    serumAsks: 'EpnUJCMCQNZi45nCBoNs6Bugy67Kj3bCSTLYPfz6jkYH',\n    serumEventQueue: '2XHxua6ZaPKpCGUNvSvTwc9teJBmexp8iMWCLu4mtzGb',\n    serumCoinVaultAccount: '4LXjM6rptNvhBZTcWk4AL49oF4oA8AH7D4CV6z7tmpX3',\n    serumPcVaultAccount: '2ycZAqQ3YNPfBZnKTbz2FqPiV7fmTQpzF95vjMUekP5z',\n    serumVaultSigner: 'B5b9ddFHrjndUieLAKkyzB1xmq8sNqGGZPmbyYWPzCyu',\n    official: true\n  },\n  {\n    name: 'BTC-USDC',\n    coin: { ...TOKENS.BTC },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '6kbC5epG18DF2DwPEW34tBy5pGFS7pEGALR3v5MGxgc5',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'L6A7qW935i2HgaiaRx6xNGCGQfFr4myFU51dUSnCshd',\n    ammTargetOrders: '6DGjaczWfFthTYW7oBk3MXP2mMwrYq86PA3ki5YF6hLg',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'HWTaEDR6BpWjmyeUyfGZjeppLnH7s8o225Saar7FYDt5',\n    poolPcTokenAccount: '7iGcnvoLAxthsXY3AFSgkTDoqnLiuti5fyPNm2VwZ3Wz',\n    poolWithdrawQueue: '8g6jrVU7E7eghT3FQa7uPbwHUHwHHLVCEjBh94pA1NVk',\n    poolTempLpTokenAccount: '2Nhg2RBqHBx7R74VSEAbfSF8Kmi1x3HxyzCu3oFgpRJJ',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'A8YFbxQYFVqKZaoYJLLUVcQiWP7G2MeEgW5wsAQgMvFw',\n    serumBids: '6wLt7CX1zZdFpa6uGJJpZfzWvG6W9rxXjquJDYiFwf9K',\n    serumAsks: '6EyVXMMA58Nf6MScqeLpw1jS12RCpry23u9VMfy8b65Y',\n    serumEventQueue: '6NQqaa48SnBBJZt9HyVPngcZFW81JfDv9EjRX2M4WkbP',\n    serumCoinVaultAccount: 'GZ1YSupuUq9kB28kX9t1j9qCpN67AMMwn4Q72BzeSpfR',\n    serumPcVaultAccount: '7sP9fug8rqZFLbXoEj8DETF81KasaRA1fr6jQb6ScKc5',\n    serumVaultSigner: 'GBWgHXLf1fX4J1p5fAkQoEbnjpgjxUtr4mrVgtj9wW8a',\n    official: true\n  },\n  {\n    name: 'SUSHI-USDC',\n    coin: { ...TOKENS.SUSHI },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '5dHEPTgvscKkAc54R77xUeGdgShdG9Mf6gJ9bwBqyb3V',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '7a8WXaxsvDV9CjSxgSpJG8LZgdxmSps1ehvtgQj2qt4j',\n    ammTargetOrders: '9f5b3uy3hQutS6pka2GxcSoKjvKaTcB1ivkj1GK43UAV',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'B8vMKgzKHkapzdDu1jW76ALFvVYzHGGKhR5Afz3A4mZd',\n    poolPcTokenAccount: 'Hsxi4jvmszcMaWfU3tk98fQa9pVXtRktfKvKJ7rKBQYi',\n    poolWithdrawQueue: 'AgEspvUPUuaTqyJTjZMCAW3zTuxQBSaU17GhLJoc6Jad',\n    poolTempLpTokenAccount: 'BHLDqVcYUrAwv8RvDUQ76BQDQzvb2yftFN8UccpA2stx',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'A1Q9iJDVVS8Wsswr9ajeZugmj64bQVCYLZQLra2TMBMo',\n    serumBids: 'J8JVRuBojWcHFRGosQKRdDtzxwux8fy2dwfk42Z3dCaf',\n    serumAsks: '6DScSyKZKBi9cXhD3mRkTkpsxrhw6HABFxebsteCP1zU',\n    serumEventQueue: 'Hvpz2Cv2LgWUfTtdfjpnefYrjQuaw8gGjKoDAeGxzrwE',\n    serumCoinVaultAccount: 'BJfPQ2iKTJknyWo2wtCVEpRGWVt8sgpvmSQVNwLioQrk',\n    serumPcVaultAccount: '2UN8qfXzoUDAxZMX1KqKut93frkt5hFREL8xcw6Hgtsg',\n    serumVaultSigner: 'uWhVkK44yR6V5XywVom4oWzDQACSPYHhNjkwXprtUij',\n    official: true\n  },\n  {\n    name: 'TOMO-USDC',\n    coin: { ...TOKENS.TOMO },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '8mBJC9qdPNDyrpAbrdwGbBpEAjPqwtvZQVmbnKFXXY2P',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'H11WJQWj51KyYU5gdrnsXvpaYZM6ZLGULV93VbTmvaBL',\n    ammTargetOrders: '5E9x2QRpTM2oTtwb62C4rDYR8nJZxN8NFhAtnr2uYFKt',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '5swtuQhJQFid8uMd3DsegoxFKXVS8WoiiB3t9Pos9UHj',\n    poolPcTokenAccount: 'Eqbux46eaW4aZiuy6VUX6z7MJ2TsszeSA7TPnpdw3jVf',\n    poolWithdrawQueue: 'Hwtv6M9iTJc8SH49WjQx5rbRwzAryGm8f1NSQDmnY2iq',\n    poolTempLpTokenAccount: '7YXJQ4rM59A69ow3M21MKbWEEKHbNeZQ1XFESVnbwEPx',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '8BdpjpSD5n3nk8DQLqPUyTZvVqFu6kcff5bzUX5dqDpy',\n    serumBids: 'DriSFYDLxWCEHcnFVaxKu2NrsWGB2htWhD1wkp39qxwU',\n    serumAsks: 'jd3YYp9WqjzyPxhBvj4ixa4DY3bCG1b74VquM4oCUbH',\n    serumEventQueue: 'J82jqHzNAzVYs9ZV3zuRgzRKuu1nGDFMrzJwdxvipjXk',\n    serumCoinVaultAccount: '9tQtmWT3LCbVEoHFK5WK93wmDXv4us5s7NRYhficg9ih',\n    serumPcVaultAccount: 'HRFqUnxuegNbAf2auxqRwECyDijkVGDw25BCJkf5ohM5',\n    serumVaultSigner: '7i7rf8LANeECyi8TAwwLTyvfiVUo4x12iJtKeeA6eG53',\n    official: true\n  },\n  {\n    name: 'LINK-USDC',\n    coin: { ...TOKENS.LINK },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'Hr8i6MAm4W5Lwb2fB2CD44A2t3Ag3gGc1rmd6amrWsWC',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'G4WdXwbczwDSs6iQmYt1F3sHDhfL6aD2uBkbAoMaaTt4',\n    ammTargetOrders: 'Hf3g2Q63UPSLFSCKZBPJvjVVZxVr83rXm1xWR7yC6spn',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '2ueuL35kQShG1ebZz3Cov4ug9Ex6xVXx4Fc4ZKvxFqMz',\n    poolPcTokenAccount: '66JxeTwodpafkYLPYYAFoVoTh6ukNYoHvtwMMSzSPBCb',\n    poolWithdrawQueue: 'AgVo29AiDosdiXysfwMj8bF2AyD1Nvmn971x8PLwaNAA',\n    poolTempLpTokenAccount: '58EPUPaefpjDxUppc4oyDeDGc9n7sUo7vapinKXigbd',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '3hwH1txjJVS8qv588tWrjHfRxdqNjBykM1kMcit484up',\n    serumBids: 'GhmGNpJhGDz6zhmJ2kskmETbX9SGxhstRsmUejMXC24t',\n    serumAsks: '83KiGivH1w4SiSK9YoN9WZrTSmtwveuCUd1nuZ9AFd2V',\n    serumEventQueue: '9ZZ8eGhTEYK3uBNaFWSYo6ugLD6UVvudxpFXff7XSrmx',\n    serumCoinVaultAccount: '9BswoEnX3SN7YUnRujZa5ygiL8AXVHXE4xqp8USX4QSY',\n    serumPcVaultAccount: '9TibPFxakkdogUYizRhj9Av92fxuY2HxS3nrmme81Sma',\n    serumVaultSigner: '8zqs77myZg6wkPjbh9YdSKtNmfPh4FJTzeo9R39mbjCm',\n    official: true\n  },\n  {\n    name: 'ETH-USDC',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'AoPebtuJC4f2RweZSxcVCcdeTgaEXY64Uho8b5HdPxAR',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '7PwhFjfFaYp7w9N8k2do5Yz7c1G5ebp3YyJRhV4pkUJW',\n    ammTargetOrders: 'BV2ucC7miDqsmABSkXGzsibCVWBp7gGPcvkhevDSTyZ1',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'EHT99uYfAnVxWHPLUMJRTyhD4AyQZDDknKMEssHDtor5',\n    poolPcTokenAccount: '58tgdkogRoMsrXZJubnFPsFmNp5mpByEmE1fF6FTNvDL',\n    poolWithdrawQueue: '9qPsKm82ZFacGn4ipV1DH85k7efP21Zbxrxbxm5v3GPb',\n    poolTempLpTokenAccount: '2WtX2ow4h5FK1vb8VjwpJ3hmwmYKfJfa1hy1rcDBohBT',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '4tSvZvnbyzHXLMTiFonMyxZoHmFqau1XArcRCVHLZ5gX',\n    serumBids: '8tFaNpFPWJ8i7inhKSfAcSestudiFqJ2wHyvtTfsBZZU',\n    serumAsks: '2po4TC8qiTgPsqcnbf6uMZRMVnPBzVwqqYfHP15QqREU',\n    serumEventQueue: 'Eac7hqpaZxiBtG4MdyKpsgzcoVN6eMe9tAbsdZRYH4us',\n    serumCoinVaultAccount: '7Nw66LmJB6YzHsgEGQ8oDSSsJ4YzUkEVAvysQuQw7tC4',\n    serumPcVaultAccount: 'EsDTx47jjFACkBhy48Go2W7AQPk4UxtT4765f3tpK21a',\n    serumVaultSigner: 'C5v68qSzDdGeRcs556YoEMJNsp8JiYEiEhw2hVUR8Z8y',\n    official: true\n  },\n  {\n    name: 'xCOPE-USDC',\n    coin: { ...TOKENS.xCOPE },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '3mYsmBQLB8EZSjRwtWjPbbE8LiM1oCCtNZZKiVBKsePa',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '4tN7g8KbPt5bU9YDpeAsUNs2FY4G6GRvajTwCCHXt9Lk',\n    ammTargetOrders: 'Fe5ZjyEhnB7mCgFhRkSLWNgvtkrut4iRzk1ydfJxwA9b',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'Guw4ErphtZQRC1foic6WweDSvA9AfuqJHKDXDcbrWH4f',\n    poolPcTokenAccount: '86WgydpDUFRWa9aHzd9JgcKBELPJZVrkZ3uwxiiC3w2V',\n    poolWithdrawQueue: 'Gvmc1zR72pdgoWSzNBqMyNoVHe78nxKgd7FSCE422Lcp',\n    poolTempLpTokenAccount: '6FpDRYsKds3WkiCLjqpDzNBHWZP2Bz6CK9dZryBLKB9D',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '7MpMwArporUHEGW7quUpkPZp5L5cHPs9eKUfKCdaPHq2',\n    serumBids: '5SZ6xDgLzp3QbzkqT68BBAB7orCezSsV5Gb9eAk84zdY',\n    serumAsks: 'Gwt93Xzp8aFrP8YFV8YSuHmYbkrGURBVVHnE6AqDT4Hp',\n    serumEventQueue: 'Ea4bQ4wBJ5MXAwTG1hKzEv1zry5WnGY2G58YR8hcZTk3',\n    serumCoinVaultAccount: '6LtcYXZVb7zfQG33F5dCDKZ29hyQaUh6BBhWjdHp8moy',\n    serumPcVaultAccount: 'FCqm5xfy8ZvMxifVFfSz9Gxv1CTRABVMyLXuJrWvzAq7',\n    serumVaultSigner: 'XoGZnpfyqj539wneBe8xUQyD282mwy5AMUaChz12JCH',\n    official: true\n  },\n  {\n    name: 'STEP-USDC',\n    coin: { ...TOKENS.STEP },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '4Sx1NLrQiK4b9FdLKe2DhQ9FHvRzJhzKN3LoD6BrEPnf',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'EXgME2sUuzBxEc2wuyoSZ8FZNZMC3ChhZgFZRAW3nCQG',\n    ammTargetOrders: '78bwAGKJjaiPQqmwKmbj4fhrRTLAdzwqNwpFdpTzrhk1',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '8Gf8Cc6yrxtfUZqM2vf2kg5uR9bGPfCHfzdYRVBAJSJj',\n    poolPcTokenAccount: 'ApLc86fHjVbGbU9QFzNPNuWM5VYckZM92q6sgJN1SGYn',\n    poolWithdrawQueue: '5bzBcB7cnJYGYvGPFxKcZETn6sGAyBbXgFhUbefbagYh',\n    poolTempLpTokenAccount: 'CpfWKDYNYfvgk42tqR8HEHUWohGSJjASXfRBm3yaKJre',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '97qCB4cAVSTthvJu3eNoEx6AY6DLuRDtCoPm5Tdyg77S',\n    serumBids: '5Xdpf7CMGFDkJj1smcVQAAZG6GY9gqAns18QLKbPZKsw',\n    serumAsks: '6Tqwg8nrKJrcqsr4zR9wJuPv3iXsHAMN65FxwJ3RMH8S',\n    serumEventQueue: '5frw4m8pEZHorTKVzmMzvf8xLUrj65vN7wA57KzaZFK3',\n    serumCoinVaultAccount: 'CVNye3Xr9Jv26c8TVqZZHq4F43BhoWWfmrzyp1M9YA67',\n    serumPcVaultAccount: 'AnGbReAhCDFkR83nB8mXTDX5dQJFB8Pwicu6pGMfCLjt',\n    serumVaultSigner: 'FbwU5U1Doj2PSKRJi7pnCny4dFPPJURwALkFhHwdHaMW',\n    official: true\n  },\n  {\n    name: 'MEDIA-USDC',\n    coin: { ...TOKENS.MEDIA },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '94CQopiGxxUXf2avyMZhAFaBdNatd62ttYGoTVQBRGdi',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'EdS5vqjihxRbRujPkqqzHYwBqcTP9QPbrBc9CDtnBDwo',\n    ammTargetOrders: '6Rfew8qvNp97PVN14C9Wg8ybqRdF9HUEUhuqqZBWcAUW',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '7zfTWDFmMi3Tzbbd3FZ2vZDdBm1w7whiZq1DrCxAHwMj',\n    poolPcTokenAccount: 'FWUnfg1hHuanU8LxJv31TAfEWSvuWWffeMmHpcZ9BYVr',\n    poolWithdrawQueue: 'F7MUnGrShtQqSvi9DoWyBNRo7FUpRiYPsS9aw77auhiS',\n    poolTempLpTokenAccount: '7oX2VcPYwEV6EUUyMUoTKVVxAPAvGQZcGiGzotX43wNM',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'FfiqqvJcVL7oCCu8WQUMHLUC2dnHQPAPjTdSzsERFWjb',\n    serumBids: 'GmqbTDL5QSAhWL7UsE8MriTHSnodWM1HyGR8Cn8GzZV5',\n    serumAsks: 'CrTBp7ThkRRYJBL4tprke2VbKYj2wSxJp3Q1LDoHcQwP',\n    serumEventQueue: 'HomZxFZNGmH2XedBavMsrXgLnWFpMLT95QV8nCYtKszd',\n    serumCoinVaultAccount: 'D8ToFvpVWmNnfJzjHuumRJ4eoJc39hsWWcLtFZQpzQTt',\n    serumPcVaultAccount: '6RSpnBYaegSKisXaJxeP36mkdVPe9SP3p2kDERz8Ahhi',\n    serumVaultSigner: 'Cz2m3hW2Vcb8oEFz12uoWcdq8mKb9D1N7RTyXpigoFXU',\n    official: true\n  },\n  {\n    name: 'ROPE-USDC',\n    coin: { ...TOKENS.ROPE },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'BuS4ScFcZjEBixF1ceCTiXs4rqt4WDfXLoth7VcM2Eoj',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'ASkE1yKPBei2aUxKHrLRptB2gpC3a6oTSxafMikoHYTG',\n    ammTargetOrders: '5isDwR41fBJocfmcrcfwRtTnmSf7CdssdpsmBy2N2Eym',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '3mS8mb1vDrD45v4zoxbSdrvbyVM1pBLM31cYLT2RfS2U',\n    poolPcTokenAccount: 'BWfzmvvXhQ5V8ZWDMC4u82sEWgc6HyRLnq6nauwrtz5x',\n    poolWithdrawQueue: '9T1cwwE5zZr3D2Rim8e5xnJoPJ9yKbTXvaRoxeVoqffo',\n    poolTempLpTokenAccount: 'FTFx4Vg6hgKLZMLBUvazvPbM7AzDe5GpfeBZexe2S6WJ',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '4Sg1g8U2ZuGnGYxAhc6MmX9MX7yZbrrraPkCQ9MdCPtF',\n    serumBids: 'BDYAnAUSoBTtX7c8TKHeqmSy7U91V2pDg8ojvLs2fnCb',\n    serumAsks: 'Bdm3R8X7Vt1FpTruE9SQVESSd3BjAyFhcobPwAoK2LSw',\n    serumEventQueue: 'HVzqLTfcZKVC2PanNpyt8jVRJfDW8M5LgDs5NVVDa4G3',\n    serumCoinVaultAccount: 'F8PdvS5QFhSqgVdUFo6ivXdXC4nDEiKGc4XU97ZhCKgH',\n    serumPcVaultAccount: '61zxdnLpgnFgdk9Jom5f6d6cZ6cTbwnC6QqmJag1N9jB',\n    serumVaultSigner: 'rCFXUwdmQvRK9jtnCip3SdDm1cLn8nB6HHgEHngzfjQ',\n    official: true\n  },\n  {\n    name: 'MER-USDC',\n    coin: { ...TOKENS.MER },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'BkfGDk676QFtTiGxn7TtEpHayJZRr6LgNk9uTV2MH4bR',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'FNwXaqyYNKNwJ8Qc39VGzuGnPcNTCVKExrgUKTLCcSzU',\n    ammTargetOrders: 'DKgXbNmsm1uCJ2eyh6xcnTe1G6YUav8RgzaxrbkG4xxe',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '6XZ1hoJQZARtyA17mXkfnKSHWK2RvocC3UDNsY7f4Lf6',\n    poolPcTokenAccount: 'F4opwQUoVhVRaf3CpMuCPpWNcB9k3AXvMMsfQh52pa66',\n    poolWithdrawQueue: '8mqpqWGL7W2xh8B1s6XDZJsmPuo5zRedcM5sF55hhEKo',\n    poolTempLpTokenAccount: '9ex6kCZsLR4ZbMCN4TcCuFzkw8YhiC9sdsJPavsrqCws',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'G4LcexdCzzJUKZfqyVDQFzpkjhB1JoCNL8Kooxi9nJz5',\n    serumBids: 'DVjhW8nLFWrpRwzaEi1fgJHJ5heMKddssrqE3AsGMCHp',\n    serumAsks: 'CY2gjuWxUFGcgeCy3UiureS3kmjgDSRF59AQH6TENtfC',\n    serumEventQueue: '8w4n3fcajhgN8TF74j42ehWvbVJnck5cewpjwhRQpyyc',\n    serumCoinVaultAccount: '4ctYuY4ZvCVRvF22QDw8LzUis9yrnupoLQNXxmZy1BGm',\n    serumPcVaultAccount: 'DovDds7NEzFn493DJ2yKBRgqsYgDXg6z38pUGXe1AAWQ',\n    serumVaultSigner: 'BUDJ4F1ZknbZiwHb6xHEsH6o1LuW394DE8wKT8CoAYNF',\n    official: true\n  },\n  {\n    name: 'COPE-USDC',\n    coin: { ...TOKENS.COPE },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'DiWxV1SPXPNJRCt5Ao1mJRAxjw97hJVyj8qGzZwFbAFb',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'jg8ayFZLH2cEUJULUirWy7wNggN1eyRnTMt6EjbJUun',\n    ammTargetOrders: '8pE4fzFzRT6aje7B3hYHXrZakeEqNF2kFmJtxkrxUK9b',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'FhjBg8vpVgsiW9oCUxujqoWWSPSRvnWNXucEF1G1F39Z',\n    poolPcTokenAccount: 'Dv95skm7AUr33x1p2Bu5EgvE3usB1TxgZoxjBe2rpfm6',\n    poolWithdrawQueue: '4An6jy1JocXGUjayXqVTx1jvs79o8LgsRk3VvmRgXxaq',\n    poolTempLpTokenAccount: '57hiWKd47VHVD7y8BenqnakSdgQNBvyUrkSpf9BDP6UQ',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '6fc7v3PmjZG9Lk2XTot6BywGyYLkBQuzuFKd4FpCsPxk',\n    serumBids: 'FLjCjU5wLUsqF6FeYJaH5JtTTFSTZzTCingxN1uyr9zn',\n    serumAsks: '7TcstD7AdWqjuFoRVK24zFv66v1qyMYDNDT1V5RNWKRz',\n    serumEventQueue: '2dQ1Spgc7rGSuE1t3Fb9RL7zvGc7F7pH9XwJ46u3QiJr',\n    serumCoinVaultAccount: '2ShBow4Bof4dkLjx8VTRjLXXvUydiBNF7bHzDaxPjpKq',\n    serumPcVaultAccount: 'EFdqJhawpCReiK2DcrbbUUWWc6cd8mqgZm5MSbQ3TR33',\n    serumVaultSigner: 'A6q5h5Wx9iqeoVsvYWA7xofUcKx6XUPPab8BTVrW91Bs',\n    official: true\n  },\n  {\n    name: 'ALEPH-USDC',\n    coin: { ...TOKENS.ALEPH },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'GDHXjn9wF2zxW35DBkCegWQdoTfFBC9LXt7D5ovJxQ5B',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'AtUeUK7MZayoDktjrRSJAFsyPiPwPsbAeTsunM5pSnnK',\n    ammTargetOrders: 'FMYSGYEL1CPYz8cpgAor5jV2HqeEQRDLMEggoz6wAiFV',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'BT3QMKHrha4fhqpisnYKaPDsv42XeHU2Aovhdu5Bazru',\n    poolPcTokenAccount: '9L4tXPyuwuLhmtmX4yaRTK6TB7tYFNHupeENoCdPceq',\n    poolWithdrawQueue: '4nRbmEUp7DQroG71jXv6cJjrhnh91ePdPhzmBSjinwB8',\n    poolTempLpTokenAccount: '9JdpGvmo6aPZYf4hkiZNUjceXgd2RtR1fJgvjuoAuhsM',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'GcoKtAmTy5QyuijXSmJKBtFdt99e6Buza18Js7j9AJ6e',\n    serumBids: 'HmpcmzzajDvhFSXb4pmJo5mb23zW8Cj9FEeB3hVT78jV',\n    serumAsks: '8sfGm6jsFTAcb4oLuqMKr1xNEBd5CXuNPAKZEdbeezA',\n    serumEventQueue: '99Cd6D9QnFfTdKpcwtoF3zAZdQAuZQi5NsPMERresj1r',\n    serumCoinVaultAccount: 'EBRqW7DaUGFBHRbfgRagpSf9jTSS3yp9MAi3RvabdBGz',\n    serumPcVaultAccount: '9QTMfdkgPWqLriB9J7FcYvroUEqfw6zW2VCi1dAabdUt',\n    serumVaultSigner: 'HKt6xFufxTBBs719WQPbro9t1DfDxffurxFhTPntMgoe',\n    official: true\n  },\n  {\n    name: 'TULIP-USDC',\n    coin: { ...TOKENS.TULIP },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '96hPvuJ3SRT82m7BAc7G1AUVPVcoj8DABAa5gT7wjgzX',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '6GtSWZfdUFtT47RPk2oSxoB6RbNkp9aM6yP77jB4XmZB',\n    ammTargetOrders: '9mB928abAihkhqM6AKLMW4cZkHBXFn2TmcxEKhTqs6Yr',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 's9Xp7GV1jGvixdSfY6wPgivsTd3c4TzjW1eJGyojwV4',\n    poolPcTokenAccount: 'wcyW58QFNfppgm4Wi7cKhSftdVNfpLdn67YvvCNMWrt',\n    poolWithdrawQueue: '59NA3khShyZk4dhDjFN564nScNdEi3UR4wrCnLN6rRgX',\n    poolTempLpTokenAccount: '71oLQgsHknJVHGJDCaBVUnb6udGepK7kwkHXGy47u2i4',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '8GufnKq7YnXKhnB3WNhgy5PzU9uvHbaaRrZWQK6ixPxW',\n    serumBids: '69W6zLetZ7FgXPXgHRp4i4wNd422tXeZzDuBzdkjgoBW',\n    serumAsks: '42RcphsKYsVWDhaqJRETmx74RHXtHJDjZLFeeDrEL2F9',\n    serumEventQueue: 'ExbLY71YpFaAGKuHjJKXSsWLA8hf1hGLoUYHNtzvbpGJ',\n    serumCoinVaultAccount: '6qH3FNTSGKw34SEEj7GXbQ6kMQXHwuyGsAAeV5hLPhJc',\n    serumPcVaultAccount: '6AdJbeH76BBSJ34DeQ6LLdauF6W8fZRrMKEfLt3YcMcT',\n    serumVaultSigner: '5uJEd4wfVH84HyFEBf5chfJMTTPHBddXi1S7GmBE6x14',\n    official: true\n  },\n  {\n    name: 'WOO-USDC',\n    coin: { ...TOKENS.WOO },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'DSkXJYPZqJ3yHQECyVyh3xiE3HBrt7ARmepwNDA9rREn',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '6WHHLn8ia2eHZnPFPDwBKaW2nt7vTRNsvrbgzS55gVwi',\n    ammTargetOrders: 'HuSyM774u2zhjbG8rQYCrALBHhK7yVWgUP36rNEtfTs2',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'HeMxCh5SozqLth4QPpU1cbEw29ueqFUKSYP6369GX1HV',\n    poolPcTokenAccount: 'J3jwx9wsRAq1sBu5tSsKpA4ixQVzLiLyRKdxkjMcRenv',\n    poolWithdrawQueue: 'FRSDrhT8Q28yZ3dGhVwNoAbzWawsE3qgmAAEwxTNtE6y',\n    poolTempLpTokenAccount: 'GP8hM7HRSjcsQfTbvHKNAWnwhqdn2Nxthb4UJiKXkfJC',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '2Ux1EYeWsxywPKouRCNiALCZ1y3m563Tc4hq1kQganiq',\n    serumBids: '34oLSEmDGyH4NyP84mUXCHbpW9JvG5anNd3iPaCF55zE',\n    serumAsks: 'Lp7h84DcAmWqhDbJ6LpvVX9m45GJQfpvMbWPTg4qtkF',\n    serumEventQueue: '8Y7MaACCFcTdjcUSLsGkxqxMLDaJDPSZtT5R1kuUL1Hk',\n    serumCoinVaultAccount: '54vv5QSZkmHpQzpvUmpS5ZreDwmbuXPdbGp9ybzgcsTM',\n    serumPcVaultAccount: '7PL69dV89XXJg9V6wzzdu9p2ymhVwBWqp82sUzWvjnp2',\n    serumVaultSigner: 'CTcvsPoWroF2e2iiZWe6ztBwNQHiDyAVCs8EbQ5Annig',\n    official: true\n  },\n  {\n    name: 'SNY-USDC',\n    coin: { ...TOKENS.SNY },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '5TgJXpv6H3KJhHCuP7KoDLSCmi8sM8nABizP7CmYAKm1',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '2Nr82a2ZxqsQYwBbpeLWQedy1s9kAi2U2AbeuMKjgFzw',\n    ammTargetOrders: 'Cts3uDVAgUSaXAHMEfLPnQWF4W5TpGdiB7WhYDAaQbSy',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'FaUYbopmMVdNRe3rLnqGPBA2KB96nLHudKaEgAUcvHXn',\n    poolPcTokenAccount: '9YiW8N9QdEsAdTQN8asjebwwEmDXAHRnb1E3nvz64vjg',\n    poolWithdrawQueue: 'HpWzYHXNeQkmW9oxFjHFozyy6sVxetqJBZdhNSTwcNid',\n    poolTempLpTokenAccount: '7QAVG74PVZntmFqvnGYwYySRBjB13HSeSNABwMPtfAPR',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'DPfj2jYwPaezkCmUNm5SSYfkrkz8WFqwGLcxDDUsN3gA',\n    serumBids: 'CFFoYkeUJaAEh6kQyVEbAgkWfABnH7c8Lynr2hk8ycJT',\n    serumAsks: 'AVQEVeftGzTV6Yj2jEPFGgWHyTYs5uyT3ZFFyTaLgTAP',\n    serumEventQueue: 'H6UE5r8zMsaHW9fha6Xm7bsWrYbyaL8WbBjhbqbZYPQM',\n    serumCoinVaultAccount: 'CddTJJj2tDWUk6Kteh3KSBJJh4HvkoWMXcQjZuXaaAzP',\n    serumPcVaultAccount: 'BGr1LWgHKaekkmScogSU1SYSRUaJBBPFeBAEBvuwf7CE',\n    serumVaultSigner: '3APrMUDUQ16iEsL4vTaovTf5fPXAEwtXmWXvD9xQVPaB',\n    official: true\n  },\n  {\n    name: 'SLRS-USDC',\n    coin: { ...TOKENS.SLRS },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '7XXKU8oGDbeGrkPyK5yHKzdsrMJtB7J2TMugjbrXEhB5',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '3wNRVMaot3R2piZkzmKsAqewcZ5ABktqrJZrc4Vz3uWs',\n    ammTargetOrders: 'BwSmQF7nxRqzzVdfaynxM98dNbXFi94cemDDtxMfV3SB',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '6vjnbp6vhw4RxNqN3e2tfE3VnkbCx8RCLt8RBmHZvuoC',\n    poolPcTokenAccount: '2anKifuiizorX69zWQddupMqawGfk3TMPGZs4t7ZZk43',\n    poolWithdrawQueue: 'Fh5WTfP9jCbkLPzsspCs4WCSPGqE5GYE8v7kqFXijMSA',\n    poolTempLpTokenAccount: '9oiniKrJ7r1cHw97gv4XPxTFS9i61vSa7PkpRcm8qGeK',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '2Gx3UfV831BAh8uQv1FKSPKS9yajfeeD8GJ4ZNb2o2YP',\n    serumBids: '6kMW5vafM4mWZJdBNpH4EsVjFSuSTUokx5meYoVY8GTw',\n    serumAsks: 'D5asu2BVatxtgGFugwmNubdknAsLSJDZcqRHvkaS8UBd',\n    serumEventQueue: '66Go3JcjNJaDHHvJyaFaV8rh8GAciLzvM8WzN7fRE3HM',\n    serumCoinVaultAccount: '6B527pfkvbvbLRDgjASLGygdaQ1fFLwmmqyFCgTacsKH',\n    serumPcVaultAccount: 'Bsa11vdveUhSouxAXSYCE4yXToUP58N9EEeM1P8qbtp3',\n    serumVaultSigner: 'CjiJdQ9a7dnjTKfVPZ2fwn31NtgJA1kRU55pwDE8HHrM',\n    official: true\n  },\n  {\n    name: 'renBTC-USDC',\n    coin: { ...TOKENS.renBTC },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '61JtCkTQKSeBU8ztEScByZiBhS6KAHSXfQduVyA4s1h7',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'AtFR9ub2dbNJJod7gPL81F7gRxVtpcR1n4GczqgasqX2',\n    ammTargetOrders: 'ZVmcXezubm6FXvS8Wtvah66vqZRW6NKD17tea7FcGsB',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '2cA595zqm12sRtsiNvV6AqD8WDYYiJoLwEYNQ1FZG2ep',\n    poolPcTokenAccount: 'Fxn92YfcVsd9diz32YtKixqmuezgLeSWqd1gypFL5qe',\n    poolWithdrawQueue: 'ioR3UfTLnz6t9Bzbcu7TPmw1xYQRwXCgGqcpvzRmCQx',\n    poolTempLpTokenAccount: '8VEBvPwhBwu9D4e4Zei6X31ZBs5udL5epJHp935LVMv1',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '74Ciu5yRzhe8TFTHvQuEVbFZJrbnCMRoohBK33NNiPtv',\n    serumBids: 'B1xjpD5EEVtLWnWioHc7pCJLj1WVGyKdyMV1NzY4q5pa',\n    serumAsks: '6NZf4f6dxxv83Bdfiyf1R1vMFo5QP8BLB862qrVkmhuS',\n    serumEventQueue: '7RbmehbSunJLpg7N6kaCX5SenR1N79xHN8jKnuvXoEHC',\n    serumCoinVaultAccount: 'EqnX836tGG4PYSBPgzzQecbTP47AZQRVfcy4RqQW8F3D',\n    serumPcVaultAccount: '7yiA6p6BXxZwcm38St3vTzyGNEmZjw8x7Ko2nyTfvVx3',\n    serumVaultSigner: '9aZNHmGZrNnB3fKmBj5B9oD7moA1nFviZqNUSkx2tctg',\n    official: true\n  },\n  {\n    name: 'renDOGE-USDC',\n    coin: { ...TOKENS.renDOGE },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '34oD4akb2DeNcCw1smKHPsD3iqQQQWmNy3cY81nz7HP8',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '92QStSTSQHYFg2ZxJjxWETwiS3zYsKnJm9BznJ8JDvrh',\n    ammTargetOrders: 'EHjwgEneTm6DZWGbictuSxf7NfcirEjyYdzYaSyNkhT1',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'EgNtpEoLCiSJx8TtVLWUBpXhUWmqzBrymgweihtmnd83',\n    poolPcTokenAccount: 'HZHCa82ezeYegyQWtsWW3vznpoiRaa3ewtxYvm5X6tTz',\n    poolWithdrawQueue: 'FbWCd9uQfAD5M62Pyceff5S2WFeN9Z5rL6azysGdhais',\n    poolTempLpTokenAccount: 'H12qWVeehVN6CQGfwCnSH2LxcHJ9we33U6gPmiViueu5',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '5FpKCWYXgHWZ9CdDMHjwxAfqxJLdw2PRXuAmtECkzADk',\n    serumBids: 'EdXd7dZLfkjz4k38VoP8d8ij7UJdrnZ3EoR9RHr5ThqX',\n    serumAsks: 'DuGkNca9NtZByzAxQsbt5yPFNF8pyv2PqB2sjSbBGEWi',\n    serumEventQueue: 'AeRsgcjxerNiMK1wpPyt7TSkH9Ps1mTr9Ac1bbWvYhdp',\n    serumCoinVaultAccount: '5UbUbaVLXnZq1eibQSUxdsk6Lp38bgdTjbjQPssXGgwW',\n    serumPcVaultAccount: '4KMsmK7gPdKMAKmEcHqtBB5EhNnWVRd71v3a5uBwhQ2T',\n    serumVaultSigner: 'Gwe1pE3rV4LLviNZqrEFPAeLchwvHrftBUQsnJtEkpSa',\n    official: true\n  },\n  {\n    name: 'RAY-USDC',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '6UmmUiYoBjSrhakAobJw8BvkmJtDVxaeBtbt7rxWo1mg',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'J8u8nTHYtvudyqwLrXZboziN95LpaHFHpd97Jm5vtbkW',\n    ammTargetOrders: '3cji8XW5uhtsA757vELVFAeJpskyHwbnTSceMFY5GjVT',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'FdmKUE4UMiJYFK5ogCngHzShuVKrFXBamPWcewDr31th',\n    poolPcTokenAccount: 'Eqrhxd7bDUCH3MepKmdVkgwazXRzY6iHhEoBpY7yAohk',\n    poolWithdrawQueue: 'ERiPLHrxvjsoMuaWDWSTLdCMzRkQSo8SkLBLYEmSokyr',\n    poolTempLpTokenAccount: 'D1V5GMf3N26owUFcbz2qR5N4G81qPKQvS2Vc4SM73XGB',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '2xiv8A5xrJ7RnGdxXB42uFEkYHJjszEhaJyKKt4WaLep',\n    serumBids: 'Hf84mYadE1VqSvVWAvCWc9wqLXak4RwXiPb4A91EAUn5',\n    serumAsks: 'DC1HsWWRCXVg3wk2NndS5LTbce3axwUwUZH1RgnV4oDN',\n    serumEventQueue: 'H9dZt8kvz1Fe5FyRisb77KcYTaN8LEbuVAfJSnAaEABz',\n    serumCoinVaultAccount: 'GGcdamvNDYFhAXr93DWyJ8QmwawUHLCyRqWL3KngtLRa',\n    serumPcVaultAccount: '22jHt5WmosAykp3LPGSAKgY45p7VGh4DFWSwp21SWBVe',\n    serumVaultSigner: 'FmhXe9uG6zun49p222xt3nG1rBAkWvzVz7dxERQ6ouGw',\n    official: true\n  },\n  {\n    name: 'DXL-USDC',\n    coin: { ...TOKENS.DXL },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'asdEJnE7osjgnSyQkSZJ3e5YezbmXuDQPiyeyiBxoUm',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '4zuyAKT81y9mSSrjq8sN872zwgcD5ncQGyCXwRJDn6tC',\n    ammTargetOrders: 'H2GMj87upPeBQT3ywzqudJodwyTFpPmwuwtiZ7DQB8Md',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'FHAqAqqdyZFaxUTCg19hH9pRfKKChwNekFrY428NVPtT',\n    poolPcTokenAccount: '7jzwUCSq1R1QX72PKRDjZ4xgUm6Q6iiLW9BY8tnj8wkc',\n    poolWithdrawQueue: '3WBnh4HbddG6sMvv6s1GALVLPq6xfwVat3WqufZKKFXa',\n    poolTempLpTokenAccount: '9DRSmvcrXC7AtNrhf9tgfBuwT4q5hXyWaAybe5yfRU7q',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'DYfigimKWc5VhavR4moPBibx9sMcWYVSjVdWvPztBPTa',\n    serumBids: '2Z6Do29oGtze6dnVMXAVw8mkRxFpLGc8uS2RjfrWoCyy',\n    serumAsks: 'FosLnuNKUKqfqYviAPdp1doC3dKpXQXvAeRGM5xAoUCJ',\n    serumEventQueue: 'EW5QgqGUZ7dSmXLXiuWB8AAsjSjpb8kaaoxAUqK1DWyg',\n    serumCoinVaultAccount: '9ZaKDVrjCaPRZTqnuteGc8iBmJhdaGVf8JV2HBT67wbX',\n    serumPcVaultAccount: '5Y65XyuJemmRU7G1AQQTvWKSge8WDVYhb2knd7htJHoh',\n    serumVaultSigner: 'y6FHXgMwWvvpoiox6Ut6mUAUHgbJMXNJnXQm7MQkEdE',\n    official: true\n  },\n  {\n    name: 'LIKE-USDC',\n    coin: { ...TOKENS.LIKE },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'GmaDNMWsTYWjaXVBjJTHNmCWAKU6cn5hhtWWYEZt4odo',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'Crn5beRFeyj4Xw13E2wdJ9YkkLLEZzKYmtTV4LFDx3MN',\n    ammTargetOrders: '7XjS6MrvBRi9JeFWBMAYPaKhKgR3b7xnVdYDBkFb4CXR',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '8LoHX6f6bMdQVs4mThoH2KwX2dQDSkqVFADi4ZjDQv9T',\n    poolPcTokenAccount: '2Fwm8M8vuPXEXxvKz98VdawDxsK9W8uRuJyJhvtRdhid',\n    poolWithdrawQueue: 'CW9zJ2JbBekkdd5SdvPapPcbziR8d1UHBzW7nNn1W3ga',\n    poolTempLpTokenAccount: 'FVHsnC1nhwMcrAzFwcK4dgUtDdYFM1VrTJ8Rp8Mb1LkY',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '3WptgZZu34aiDrLMUiPntTYZGNZ72yT1yxHYxSdbTArX',\n    serumBids: 'GzHpnQSfS7KdqLKgiEEP7pkYnwEBz9zaE7De2CjmCrNV',\n    serumAsks: 'FpEBAT9qP1so4ASUTiEWxyXH2SJvgoBYUiZ1AbPimcS7',\n    serumEventQueue: 'CUMDMV9KtE22RUZECUNHxiq7FmUiRusyKa1rHUJfRptq',\n    serumCoinVaultAccount: 'Dd9F1fugQj2xtduyNvFS5TtxP9vKnuxVMcrPsHFnLyqp',\n    serumPcVaultAccount: 'BnXXu8kLUXrwg3MpcVRVPLZw9bpX2mLd95qtCMnSUtu7',\n    serumVaultSigner: 'MKCHeoqNGWU8TJBkdF1M76nMUteJCwuBRUJfCtR3iV7',\n    official: true\n  },\n\n  {\n    name: 'PORT-USDC',\n    coin: { ...TOKENS.PORT },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '6nJes56KF999Q8VtQTrgWEHJGAfGMuJktGb8x2uWff2u',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'ENfqr7WFKJy9VRwfDkgL4HvMM6GU7pHyowzZsZwx8P39',\n    ammTargetOrders: '9wjp6tFY1XNH6KhdCHeDgeUsNLVjTwxA3iC9k5aun2NW',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'GGurDvQctUDgcegSYZetkNGytcWEfLes6yXzYruhLuLP',\n    poolPcTokenAccount: '3FmHEQRHaKMS4vA41eYTVmfxX9ErxdAScS2tvgWvNHSz',\n    poolWithdrawQueue: 'ETie1oDMcoTD8jzrseAcvTqZYyyoWxR92LH15nA6Lfub',\n    poolTempLpTokenAccount: 'GEJfHTwURq89KcM1RgvFZRweb4f7H8NAsmyMg2kTPBEs',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '8x8jf7ikJwgP9UthadtiGFgfFuyyyYPHL3obJAuxFWko',\n    serumBids: '9Y24T3co7Cc7cGbG2mFc9n3LQonAWgtayqfLz3p28JPa',\n    serumAsks: '8uQcJBapCnxy3tNEB8tfmssUvqYWvuCsSHYtdNFbFFjm',\n    serumEventQueue: '8ptDxtRLWXAKYQYRoRXpKmrJje31p8dsDsxeZHEksqtV',\n    serumCoinVaultAccount: '8rNKJFsd9yuGx7xTTm9sb23JLJuWJ29zTSTznGFpUBZB',\n    serumPcVaultAccount: '5Vs1UWLxZHHRW6yRYEEK3vpzE5HbQ8BFm27PnAaDjqgb',\n    serumVaultSigner: '63ZaXnSj7SxWLFEcjmK79fyGokJxhR3UEXomN7q7Po25',\n    official: true\n  },\n  {\n    name: 'MNGO-USDC',\n    coin: { ...TOKENS.MNGO },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '34tFULRrRwh4bMcBLPtJaNqqe5pVgGZACi5sR8Xz95KC',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '58G7RrYRntVvVj9rVgDwGhAJoWhMWHNyDCoMydYUwSR6',\n    ammTargetOrders: '2qBcjDqDywhB7Kgb1VYq8K5svJh37BB8oC5kBE4VqA7q',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '91fMidHL8Yr8KRcu4Zu2RPRRg1FbXxZ7DV43rAyKRLjn',\n    poolPcTokenAccount: '93oFfbcayY2WkcR6d9AyqPcRC121dXmWarFJkwPErRRE',\n    poolWithdrawQueue: 'FhnSdMoRPj75bLs6yzaDPFfiuucUZhVDiyM78WEhaKJo',\n    poolTempLpTokenAccount: 'FZAwAb6UxNiwDTbQZ3bPKYA4PkbYpurh8YpAH8G424Lv',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '3d4rzwpy9iGdCZvgxcu7B1YocYffVLsQXPXkBZKt2zLc',\n    serumBids: '3nAdH9wTEhPoW4e2s8K2cXfn4jZH8FBCkUqtzWpsZaGb',\n    serumAsks: 'HxbWm3iabHEFeHG9LVGYycTwn7aJVYYHbpQyhZhAYnfn',\n    serumEventQueue: 'H1VVmwbM96BiBJq46zubSBm6VBhfM2FUhLVUqKGh1ee9',\n    serumCoinVaultAccount: '7Ex7id4G37HynuiCAv5hTYM4BnPB9y4NU85QcaNWZy3G',\n    serumPcVaultAccount: '9UB1NhGeDuV1apHdtK5LeAEjP7kZFH8vVYGdh2yGFRi8',\n    serumVaultSigner: 'BFkxdUwW17eANhfs1xNmBqEcegb4EStQxVb5VaMS2dq6',\n    official: true\n  },\n  {\n    name: 'ATLAS-USDC',\n    coin: { ...TOKENS.ATLAS },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '2bnZ1edbvK3CK3LTNZ5jH9anvXYCmzPR4W2HQ6Ngsv5K',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'EzYB1U93e8E1KGJdUzmnwgNBFMP9E1XAuyosmiPGLAvD',\n    ammTargetOrders: 'DVxJDo3E9zfGgvSkC2DYS5fsv5AyXA7gXpcs1fHFrP3y',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'FpFV46UVvRtcrRvYtKYgJpJtP1tZkvssjhrLUfoj8Cvo',\n    poolPcTokenAccount: 'GzwX68f1ZF4dKnAJ58RdET8sPvvnYktbDEHmjoGw7Umk',\n    poolWithdrawQueue: '26SuCukyzbYo5kzeufaSoMjRPStAwqfVzTXb4QGynTit',\n    poolTempLpTokenAccount: 'HcoA8ucDBjEUVMjvURaS9CZgdEUbq8jRieGabq48mCL8',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'Di66GTLsV64JgCCYGVcY21RZ173BHkjJVgPyezNN7P1K',\n    serumBids: '2UabAccF1AFPcNqv9D46JgyGnErnaYAJuCwyaT5dCkHc',\n    serumAsks: '9umNLTbks7S51TEB8XF4jeCxwyq3qmdHrFDMFB8cT1gv',\n    serumEventQueue: 'EYU32k5waRUxF521k2KFSuhEj11HQvg4MbQ9tFXuixLi',\n    serumCoinVaultAccount: '22a8dDQwHmmnW4M4WuSXHC9NdQAufZ2V8at3EtPzBqFj',\n    serumPcVaultAccount: '5Wu76Qx7EoiR79zVVV49cZDYZ5csZaKFiHKYtCjF9FNU',\n    serumVaultSigner: 'FiyZW6n5VE64Yubn2PUFAxbmB2FZXhYce74LzJUhqSZg',\n    official: true\n  },\n  {\n    name: 'POLIS-USDC',\n    coin: { ...TOKENS.POLIS },\n    pc: { ...TOKENS.USDC },\n\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '9xyCzsHi1wUWva7t5Z8eAvZDRmUCVhRrbaFfm3VbU4Mf',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '12A4SGay36i2cSwA4JSdvg7rWSmCz8JzhsoDqMM8Yns7',\n    ammTargetOrders: '6bszsB6zxw2YowrEm26XYhh57HKQEVMRx5YMvPSSVQNh',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '7HgvC7GdmUt7kMivdLMovLStW25avFsW9GDXgNr525Uy',\n    poolPcTokenAccount: '9FknRLGpWBqYg7fXQaBDyWWdu1v2RwUM6zRV6CiPjWBD',\n    poolWithdrawQueue: '6uN62R1i31QVoy9cmQAeDrfLccMZDjQ2gmwv2D4iBTJT',\n    poolTempLpTokenAccount: 'FJV66MrqZW8VYGmTuAupstwYtqfF6ULLPP9voYtnc8DS',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'HxFLKUAmAMLz1jtT3hbvCMELwH5H9tpM2QugP8sKyfhW',\n    serumBids: 'Bc5wovapX1tRjZfyZVpsGH73Gq5LGN4ANsj8kaEhfY7c',\n    serumAsks: '4EHg2ANFFEKLFkpLxgiyinJ1UDWsG2p8rVoAjFfjMDKc',\n    serumEventQueue: 'qeQC4u5vpo5QMC17V5UMkQfK67vu3DHtBYVT1hFSGCK',\n    serumCoinVaultAccount: '5XQ7xYE3ujVA21HGbvFGVG4pLgqVHSfR9anz2EfmZ3nA',\n    serumPcVaultAccount: 'ArUDWPwzGQFfa7t7nSdkp1Dj6tYA3icXEq8K7goz9WoG',\n    serumVaultSigner: 'FHX9fPAUVA1MxPme28f4eeVH81QVRHDWofa2V6FUJaiR',\n    official: true\n  },\n  {\n    name: 'stSOL-USDC',\n    coin: { ...TOKENS.stSOL },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '6a1CsrpeZubDjEJE9s1CMVheB6HWM5d7m1cj2jkhyXhj',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '28NQqHxrqMYMQ67aWyn9AzZ1F16PYd4zvLpiiKnEZpsD',\n    ammTargetOrders: 'B8nmqinHQjyqAnMWNiqSzs1Jb8VbMpX5k9VUMnDp1gUA',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'DD6oh3HRCvMzqHkGeUW3za4pLgWNPJdV6aNYW3gVjXXi',\n    poolPcTokenAccount: '6KR4qkJN91LGko2gdizheri8LMtCwsJrhtsQt6QPwCi5',\n    poolWithdrawQueue: '5i9pTTk9x7r8fx8mJMBCEN85URVLAnkLzZXKyoutUJhU',\n    poolTempLpTokenAccount: 'GiuNbiBirwsBp9GuxGYgNUMMKGM6Qf6wqgnxbJFHTYFa',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '5F7LGsP1LPtaRV7vVKgxwNYX4Vf22xvuzyXjyar7jJqp',\n    serumBids: 'HjJSzUbis6VhBZLCbSFN1YtvWLLdxutb7WEvymCLrBJt',\n    serumAsks: '9e37wf6QUqe2s4J6UUNsuv6REQkwTxd47hXhDanm1adp',\n    serumEventQueue: 'CQY7LwdZJrfLRZcmEzUYp34XJbxhnxgF4UXmLKqJPLCk',\n    serumCoinVaultAccount: '4gqecEySZu6SEgCNhBJm7cEn2TFqCMsMNoiyski5vMTD',\n    serumPcVaultAccount: '6FketuhRzyTpevhgjz4fFgd5GL9fHeBeRsq9uJvu8h9m',\n    serumVaultSigner: 'x1vRSsrhXkSn7xzJfu9mYP2i19SPqG1gjyj3vUWhim1',\n    official: true\n  },\n  {\n    name: 'GRAPE-USDC',\n    coin: { ...TOKENS.GRAPE },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: 'vVXfY15WdPsCmLvbiP4hWWECPFeAvPTuPNq3Q4BXfhy',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'A7RFkvmDFN4Qev8XgGAqSr5W75sNhhtCY3ZcGHZiDDo1',\n    ammTargetOrders: 'HRiPQyFJfzF7WgC4g2cFbxuKgqn1vKVRjTCuZTNGim36',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'BKqBnj1TLpW4UEBbZn6aVoPLLBHDB6NTEL5nFNRqX7e7',\n    poolPcTokenAccount: 'AN7XxHrrcFL7629WySWVA2Tq9inczxkbE6YqgZ31rDnG',\n    poolWithdrawQueue: '29WgH1suwTnhL4JUwDMUQQpUzypet8PHEh8jQpZtiDBK',\n    poolTempLpTokenAccount: '3XCGBJpfHV5VYkz92nqzRtHahTiHXjYzVs4PargSpYwS',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '72aW3Sgp1hMTXUiCq8aJ39DX2Jr7sZgumAvdLrLuCMLe',\n    serumBids: 'F3PQsAGiFf8fSySjUGgP3NQdAGSnioAThncyfd26GKZ3',\n    serumAsks: '6KyB4XprAw7Mgp1YMMsxRGx8T59Y5Lcu6s1FcwFrXy3i',\n    serumEventQueue: 'Due4ZmGX2u7an9DPMvk3uX3sXYgngRatP1XmwzEgk1tT',\n    serumCoinVaultAccount: '8FMjC6yopBVYTXcYSGdFgoh6AFpwTdkJAGXxBeoV8xSq',\n    serumPcVaultAccount: '5vgxuCqMn7DUt6Le6EGhdMzZjPQrtD1x4TD9zGw3mPte',\n    serumVaultSigner: 'FCZkJzztVTx6qKVec25jA3m4XjeGBH1iukGdDqDBHPvG',\n    official: true\n  },\n  {\n    name: 'CRP-USDC',\n    coin: { ...TOKENS.CRP },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n\n    ammId: '85UTLhndd3WZrhQvtQfUy4qfnbVggLJmQPB3SqgYjMoL',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'GUMBzhhoxtNi5KedB2X6ntBCiSbutX163qi6wZr3acnu',\n    ammTargetOrders: '429EUzQyGEjNh5TYhShcsdwEtpRXCX5u7e6HMzWvFMxW',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'EU5ZnN5yYzcagJDYH9aMWyKwvcvFg4HLM93Hmidb1ZRC',\n    poolPcTokenAccount: '2qg8HoEQZPtphvM1pGcqXp2J8wYS3Y8cRYbnZLcMsABX',\n    poolWithdrawQueue: '355TZub7bs41F4T6qtcdrJvbZEL7YnFvk7zQ931EKY6J',\n    poolTempLpTokenAccount: '14twNfUndjFSR1UFNvDemkWhX8TVScMhSfTPoFFYJBaZ',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '93mtNf4qzvytwp5sWrSC7JNUccPAomEE39ztErUq5V3F',\n    serumBids: '7ztk2qtQ77eqLzZywgqm4FLSByyLgXHQSizyStKAXa9N',\n    serumAsks: '4X4zBRcAwraoFRhe7CFf2t7e5npGs3PNKrv221YKfXAs',\n    serumEventQueue: 'DPXCqjL2yExT62MnxXPMcQEF4buVFyTiV6TvuP3f8dS7',\n    serumCoinVaultAccount: 'GEtKdDB6DBpsptKtx1uZtYgD7GbAbfPCfAteGzUTAsRj',\n    serumPcVaultAccount: '5P3thVSnx1rwhZnrXs8GHFLP5tCABjCt3jQqyGVVqx4V',\n    serumVaultSigner: '2w3KjXxiZqYYT1gzEXy6bLyzAvb45H2WGrLheZFXShKf',\n    official: true\n  },\n  {\n    name: 'SLND-USDC',\n    coin: { ...TOKENS.SLND },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: 'GRM4jGMtx64sEocBFz6ZgdogF2fyTWiixht8thZoHjkK',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'GLgrNWTUfX4n165WaMG4dELg4e7E7RBNWMzBFvYKbcbs',\n    ammTargetOrders: 'FCa9xL1TeJrDvhxyuc9J3o4KNtXBZREC3Kxr5sYVZNtQ',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'DCHrCqguY9Jtn8xutdVPAhCbLayYaksPSwqg5aZzFXVM',\n    poolPcTokenAccount: 'BxzizWAWk91TKbMAZM4F9zhUM5omdtdhjQQSdEM5sEXA',\n    poolWithdrawQueue: '2TYYWf8RKyu5YoH5bwxiJnCyHdAeWUMadBDMotuNWoR8',\n    poolTempLpTokenAccount: '53KFE2hkixwSRMj8Co9dZfG8uj2PXmfm1pBBUaqCocsA',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'F9y9NM83kBMzBmMvNT18mkcFuNAPhNRhx7pnz9EDWwfv',\n    serumBids: 'EcwoMdYezDRLVNFzSzf7jKEuUe32KHp5ddU7RZWdAnWh',\n    serumAsks: '4iLAK21RWx2XRyXzHhhuoj7hhjVFcrUiMqMSRGandobn',\n    serumEventQueue: '8so7uCu3u53PUWU8UZSTJG1b9agvQtQms9gDDsynuXr1',\n    serumCoinVaultAccount: '5JDR5i3wqrLxoZfaytoW14hti9pxVEouRy5pUtyhisYD',\n    serumPcVaultAccount: '6ktrwB3FevRNdNHXW7n6ufk2h1jwKnWFtjhHgNwYaxJb',\n    serumVaultSigner: 'HP7nqJpWXBS91fRncBCawqidJhxqNwKbS84Ni3HBTiGG',\n    official: true\n  },\n  {\n    name: 'FAB-USDC',\n    coin: { ...TOKENS.FAB },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: '7eM9KWYiJmNfDfeztMoEZE1KPyWD54LRxM9GmRY9ske6',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: '4JJD9FBTigYALJgmJ5NN7uSAdm4UF3MqcfQG6zaDcZSj',\n    ammTargetOrders: 'PknPGRn3K3HPzjyaKjSAqDWqXm65TRzQzsSjG6dibPn',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'Dz7UPsYuDnCPfomPDS1qzhGXqerPhoy7PYScv99JDefh',\n    poolPcTokenAccount: '3Xo2iExmhn4X3yrKmwsRTMMTg2mXdWuEQD2BVweNyCCr',\n    poolWithdrawQueue: '4bneChpQF8xrjB7TAYZvBm5xgxncZgn4skZxKV4r3ByM',\n    poolTempLpTokenAccount: '7npJaUpN2TFcMStrQKVPjEcKD9Ju5wpyJHcnVW54Z1Ye',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: 'Cud48DK2qoxsWNzQeTL5D8sAiHsGwG8Ev1VMNcYLayxt',\n    serumBids: 'FWSRaqAPmbwepdz49MVvvioTLWTXW18XCtEvfSv3ytBV',\n    serumAsks: '21CBXgZHF58nfFJVts6rAphuPNsbj6JY8CacokMdhpNB',\n    serumEventQueue: '6qdexKV3nXYtkZkh49fSFrzEStdmaGj8HttNWSG2ZViT',\n    serumCoinVaultAccount: '71E7dr2Rodeneu6wPn8oofCpLQJjfDHr6r76HGCDv491',\n    serumPcVaultAccount: '8gU7HWyk3X41ebNkMH44JhEWq1nzRGdWwGgZaJfr4zGR',\n    serumVaultSigner: 'GuLwNbHHLDyNtYF5qv16boMKvdek5AFK8v7PZ2hMgvdv',\n    official: true\n  },\n  {\n    name: 'IN-USDC',\n    coin: { ...TOKENS.IN },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: '5DECiJuqwmeCptoBEpyJtXKrVfiUrG9nBbBGkxGkPYyF',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'GujdDreXBSEXUCjk39tRnM8ZYCrtyambNSa3JjJVGvLJ',\n    ammTargetOrders: 'D4dBV5v9AMfGzgf1eBrpAUom72YVLYeZr1ufnY1dJd8W',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: '2z4day3sVMRULUtFJ4sbTvKrkjMsc42rjXHDQtggbSE9',\n    poolPcTokenAccount: '9PVPqk5RYf5x9nRYbEzotVNpk36NJ6bAZJaaSnaaZrYn',\n    poolWithdrawQueue: '3xxiFPPRwy4bshMeG3bN4yCNDiFsbVdPq29qK2bddJ9J',\n    poolTempLpTokenAccount: 'EbDVS5gwPdVYK7f14g2B9zNesgEfAcgnxQzTYf7GYw9j',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '49vwM54DX3JPXpey2daePZPmimxA4CrkXLZ6E1fGxx2Z',\n    serumBids: '8hU3yAFb1429V1TTSKqpgJ7XJyQQQoLq76wxHeM1WYo',\n    serumAsks: 'CEdiYZ2Cp62ECHgkz2mPiK9A6HcMG2jSmrppxiENzgKT',\n    serumEventQueue: 'DJgsxzKvBY2wTqAWEmiqV8quTR7k9GZ7rsmvov3yzXPw',\n    serumCoinVaultAccount: 'De4wrN3UtHs783VTZjqoFZtP2v95pMWFx1KCqmkWBXqU',\n    serumPcVaultAccount: 'DiiAfxX3J5apQ8SJ42Z4z2USTK3QbhksTzniAugLaG91',\n    serumVaultSigner: 'D8QQQMut9bbPfpCXHgbwoPSF4KNYSg7SyRUGF828dBfZ',\n    official: true\n  },\n  {\n    name: 'DFL-USDC',\n    coin: { ...TOKENS.DFL },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: '8GJdzPuEBPP3BHJpcspBcfpRZV4moZMFwhTAuXebaPL8',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'zZgp9gm6MCFSvub491ncJQ78zRF4WymJErhy2cR7nnU',\n    ammTargetOrders: 'GKo4P3uofE47wug87QE6QGSRHa8wBLDEiW4nXEWeDUb4',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'GteHVo2oJUJC2tFYe1QHS7MyasCVooPJdHfxwdF6hPZ2',\n    poolPcTokenAccount: 'FHqPtKCB2w9C94oupinMgykxuzjF6pQRVaBVNzqemXc7',\n    poolWithdrawQueue: '495s2Vr8PPXofHsJtkvazG77qNUHrhEpS86XkiFrTQgp',\n    poolTempLpTokenAccount: '6eXLVRMNEVFF7adfkbAQni537VrbPpR8LE3PEXbWxS67',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '9UBuWgKN8ZYXcZWN67Spfp3Yp67DKBq1t31WLrVrPjTR',\n    serumBids: 'xNgA2EugkNq9M9yZeshGSbP7Epy85p8NHhrwkffYyAY',\n    serumAsks: 'CcCDWuH5zW9577wtoMVUZU6PXoT5ZhiL5dadDo4124c5',\n    serumEventQueue: '9U9u5GLjbNNYaqECQATcMAuETbnh2QGjpJJVGoFxjLfm',\n    serumCoinVaultAccount: 'CvCsGEAe3Lxwo7zQ5Acqd34jjpS1iFWKp9h9Vt2KExpj',\n    serumPcVaultAccount: 'EGiCYaiiL65yx8uHkQKAmCv8U1fuDN4su6pSdsL3tQqB',\n    serumVaultSigner: '98fhGkizAxyzvsFZMAyt342wkNP6BGa8wfcHkJJURYrN',\n    official: true\n  },\n  {\n    name: 'SONAR-USDC',\n    coin: { ...TOKENS.SONAR },\n    pc: { ...TOKENS.USDC },\n    version: 4,\n    programId: LIQUIDITY_POOL_PROGRAM_ID_V4,\n    ammId: 'CrWbfKwyAaUfYctXWF9iaDUP4AH5t6k6bbaWnXBL8nHm',\n    ammAuthority: '5Q544fKrFoe6tsEbD7S8EmxGTJYAKtTVhAW5Q5pge4j1',\n    ammOpenOrders: 'Ei23wxsu7WVsXv72yaTohSVASLqseinqA7DqXktprSSz',\n    ammTargetOrders: 'NheF95jviuoA9Rv5QPQgXDT3oQUbyoHJcyY5yXAFFnh',\n    // no need\n    ammQuantities: NATIVE_SOL.mintAddress,\n    poolCoinTokenAccount: 'DQX9NhwznyWTYcTJ8uiqZP3PrzqRmfGNj4XNQzVKG8hW',\n    poolPcTokenAccount: 'AseLV5kWbAjNETCKJsXcrrs6ksvBefEPdRa7pKXFsvYE',\n    poolWithdrawQueue: '5mkppasqox6XpdcHhYAfM1GKTckQemqtANP85FphThw8',\n    poolTempLpTokenAccount: '9TjtDU6TMgHqAEdnUTBCgVJapGsqKnDTCFzDG2y4higa',\n    serumProgramId: SERUM_PROGRAM_ID_V3,\n    serumMarket: '9YdVSNrDsKDaGyhKL2nqEFKvxe3MSqMjmAvcjndVg1kj',\n    serumBids: 'B6t3JoptHoNer3YgEUZASeQwcXEnhvGH4ovYeVdGW2c7',\n    serumAsks: 'ACEdfnzBEFRopUkLwqowPuQpiMbuYR4uCk85wdxUvVWp',\n    serumEventQueue: 'Vq6g4iaDJhqB8PeUPf99JixtpdQ6zrdXXNuQ2LrGyvV',\n    serumCoinVaultAccount: 'EzMjpFVMZE4VrqbeGCXssfvDbpvHGMtHvkiLbX1YUTs7',\n    serumPcVaultAccount: 'B8A7V1124ka8WVKDHyWMAgbHCaCdhbU7JHy2nB7e2o6E',\n    serumVaultSigner: '44rLzbRfxmpsmHPZUEuLS6rxv9pyDBVnzUSps8mGaEr2',\n    official: true\n  },\n] ","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/safe-math.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/utils/programLayouts.js",["351","352","353"],"import { Blob, seq, struct, u32, u8, u16, ns64 } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport { I80F48Layout } from '@blockworks-foundation/mango-client';\nimport BN from 'bn.js';\n\n\nclass PublicKeyLayout extends Blob {\n  constructor(property) {\n    super(32, property);\n  }\n\n  decode(b, offset) {\n    return new PublicKey(super.decode(b, offset));\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toBuffer(), b, offset);\n  }\n}\n\nexport function publicKeyLayout(property = \"\") {\n  return new PublicKeyLayout(property);\n}\n\nclass BNLayout extends Blob {\n  constructor(number, property) {\n    super(number, property);\n    // restore prototype chain\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n\n  decode(b, offset) {\n    return new BN(super.decode(b, offset), 10, 'le');\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nclass U64F64Layout extends Blob {\n  constructor(property) {\n    super(16, property);\n  }\n\n  decode(b, offset) {\n    const raw = new BN(super.decode(b, offset), 10, 'le');\n\n    return raw / Math.pow(2, 64);\n  }\n\n  encode(src, b, offset) {\n    console.log(\"src ::: \", src)\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nexport function I80F48(property = \"\") {\n  return new I80F48Layout(property)\n}\n\nexport function u64(property = \"\") {\n  return new BNLayout(8, property);\n}\n\nexport function u128(property = \"\") {\n  return new BNLayout(16, property);\n}\n\n\nexport function i64(property = '') {\n  return new BNLayout(8, property, true);\n}\n\nexport const FUND_DATA = struct([\n  u8('is_initialized'),\n  u8('signer_nonce'),\n  u8('block_deposits'),\n  u8('paused_for_settlement'),\n  u32('no_of_investments'),\n  u32('no_of_pending_withdrawals'),\n  u32('no_of_settle_withdrawals'),\n\n  u64('min_amount'),\n  I80F48('performance_fee_percentage'),\n  I80F48('total_amount'),\n  I80F48('performance_fee'),\n  I80F48('current_index'),\n\n  u64('pending_deposits'),\n  u64('pending_withdrawals'),\n\n  publicKeyLayout('manager_account'),\n  publicKeyLayout('usdc_vault_key'),\n  publicKeyLayout('mango_account'),\n  publicKeyLayout('delegate'),\n  seq(\n    struct([\n    I80F48('share'),\n    u8('ready_for_settlement'),\n    seq(u8('spot'), 15, 'spot'),\n    seq(u8('perp'), 15, 'perp'),\n  ]), 1, 'forceSettleData'),\n\n])\n\nexport const INVESTOR_DATA = struct([\n  u8('is_initialized'),\n  u8('investment_status'),\n  seq(u8('padding'), 6),\n\n  u64('amount'),\n  I80F48('start_index'),\n  u64('returns'),\n  publicKeyLayout('owner'),\n  publicKeyLayout('fund'),\n  seq(u8('extra_padding'), 160),\n\n])\n\n\n\nexport const AMM_INFO_LAYOUT_V4 = struct([\n  u64('status'),\n  u64('nonce'),\n  u64('orderNum'),\n  u64('depth'),\n  u64('coinDecimals'),\n  u64('pcDecimals'),\n  u64('state'),\n  u64('resetFlag'),\n  u64('minSize'),\n  u64('volMaxCutRatio'),\n  u64('amountWaveRatio'),\n  u64('coinLotSize'),\n  u64('pcLotSize'),\n  u64('minPriceMultiplier'),\n  u64('maxPriceMultiplier'),\n  u64('systemDecimalsValue'),\n  // Fees\n  u64('minSeparateNumerator'),\n  u64('minSeparateDenominator'),\n  u64('tradeFeeNumerator'),\n  u64('tradeFeeDenominator'),\n  u64('pnlNumerator'),\n  u64('pnlDenominator'),\n  u64('swapFeeNumerator'),\n  u64('swapFeeDenominator'),\n  // OutPutData\n  u64('needTakePnlCoin'),\n  u64('needTakePnlPc'),\n  u64('totalPnlPc'),\n  u64('totalPnlCoin'),\n  u128('poolTotalDepositPc'),\n  u128('poolTotalDepositCoin'),\n  u128('swapCoinInAmount'),\n  u128('swapPcOutAmount'),\n  u64('swapCoin2PcFee'),\n  u128('swapPcInAmount'),\n  u128('swapCoinOutAmount'),\n  u64('swapPc2CoinFee'),\n\n  publicKeyLayout('poolCoinTokenAccount'),\n  publicKeyLayout('poolPcTokenAccount'),\n  publicKeyLayout('coinMintAddress'),\n  publicKeyLayout('pcMintAddress'),\n  publicKeyLayout('lpMintAddress'),\n  publicKeyLayout('ammOpenOrders'),\n  publicKeyLayout('serumMarket'),\n  publicKeyLayout('serumProgramId'),\n  publicKeyLayout('ammTargetOrders'),\n  publicKeyLayout('poolWithdrawQueue'),\n  publicKeyLayout('poolTempLpTokenAccount'),\n  publicKeyLayout('ammOwner'),\n  publicKeyLayout('pnlOwner')\n])","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/web3.js",["354","355","356"],"import { initializeAccount } from \"@project-serum/serum/lib/token-instructions\";\nimport { PublicKey, sendAndConfirmTransaction, SystemProgram, Transaction, sendTransaction, Account, TransactionInstruction } from \"@solana/web3.js\";\nimport { ASSOCIATED_TOKEN_PROGRAM_ID, connection, RENT_PROGRAM_ID, SYSTEM_PROGRAM_ID, TOKEN_PROGRAM_ID } from \"./constants\";\n\nconst GREETING_SIZE = 171;\n\nexport async function setWalletTransaction(\n  instruction,\n  publicKey\n) {\n  const transaction = new Transaction();\n  transaction.add(instruction);\n  transaction.feePayer = publicKey;\n  let hash = await connection.getRecentBlockhash();\n  console.log(\"blockhash\", hash);\n  transaction.recentBlockhash = hash.blockhash;\n  return transaction;\n}\n\nexport async function signAndSendTransaction(\n  wallet,\n  transaction\n) {\n  console.log(`wallet :::`, wallet)\n  let signedTrans = await wallet.signTransaction(transaction);\n  console.log(\"sign transaction\");\n  let signature = await connection.sendRawTransaction(signedTrans.serialize(), {\n    skipPreflight : true,\n    // maxRetries : 3\n    preflightCommitment : 'confirmed'\n  });\n  console.log(\"send raw transaction\");\n  return signature;\n}\n\nexport const createKeyIfNotExists = async (wallet, payerAccount, programId, seed, size, transaction) => {\n  const greetedPubkey = await PublicKey.createWithSeed(\n    wallet.publicKey,\n    seed,\n    programId,\n  );\n\n  console.log(`greetedPubkey :: `, greetedPubkey)\n\n  // Check if the greeting account has already been created\n  const greetedAccount = await connection.getAccountInfo(greetedPubkey);\n\n  console.log(`greetedAccount ::: `, greetedAccount)\n  if (greetedAccount === null) {\n    console.log(\n      'Creating account',\n      greetedPubkey.toBase58(),\n      'to say hello to',\n    );\n    const lamports = await connection.getMinimumBalanceForRentExemption(\n      size,\n    );\n\n    // const transaction = new Transaction().add(\n\n    // );\n    console.log(`lamports :::: `, lamports)\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: wallet.publicKey,\n        basePubkey: wallet.publicKey,\n        seed: seed,\n        newAccountPubkey: greetedPubkey,\n        lamports,\n        space: size,\n        programId,\n      }))\n\n    // await sendAndConfirmTransaction(connection, transaction, [payerAccount]);\n\n    //await signAndSendTransaction(wallet, transaction)\n  }\n  return greetedPubkey;\n}\n\nexport async function createProgramAccountIfNotExist(\n  connection,\n  account,\n  owner,\n  programId,\n  lamports,\n  size,\n  transaction,\n  signer\n) {\n  let publicKey\n\n  if (account) {\n    publicKey = new PublicKey(account)\n  } else {\n    const newAccount = new Account()\n    publicKey = newAccount.publicKey\n\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: owner,\n        newAccountPubkey: publicKey,\n        lamports: lamports ?? (await connection.getMinimumBalanceForRentExemption(size)),\n        space: size,\n        programId\n      })\n    )\n\n    signer.push(newAccount)\n  }\n\n  return publicKey\n}\n\nexport async function createAccountInstruction(\n  connection,\n  payer,\n  space,\n  programId,\n  lamports,\n  transaction,\n  signers\n) {\n  const account = new Account();\n  const instruction = SystemProgram.createAccount({\n    fromPubkey: payer,\n    newAccountPubkey: account.publicKey,\n    lamports: lamports ? lamports : await connection.getMinimumBalanceForRentExemption(space),\n    space,\n    programId\n  })\n\n  transaction.add(instruction);\n  signers.push(account);\n\n  return account.publicKey;\n}\n\n\nexport async function createTokenAccountIfNotExist(\n  connection,\n  account,\n  owner,\n  mintAddress,\n  lamports,\n  transaction,\n  signer\n) {\n  let publicKey\n\n  if (account) {\n    publicKey = new PublicKey(account)\n  } else {\n    publicKey = await createProgramAccountIfNotExist(\n      connection,\n      account,\n      owner,\n      TOKEN_PROGRAM_ID,\n      lamports,\n      390,\n      transaction,\n      signer\n    )\n\n    transaction.add(\n      initializeAccount({\n        account: publicKey,\n        mint: new PublicKey(mintAddress),\n        owner\n      })\n    )\n  }\n\n  return publicKey\n}\n\n// associated address \n\n\nexport async function findProgramAddress(seeds, programId) {\n  const [publicKey, nonce] = await PublicKey.findProgramAddress(seeds, programId)\n  return { publicKey, nonce }\n}\n\n\nexport async function findAssociatedTokenAddress(walletAddress, tokenMintAddress) {\n  const { publicKey } = await findProgramAddress(\n    [walletAddress.toBuffer(), TOKEN_PROGRAM_ID.toBuffer(), tokenMintAddress.toBuffer()],\n    ASSOCIATED_TOKEN_PROGRAM_ID\n  )\n  return publicKey\n}\n\n\n\nexport async function createAssociatedTokenAccountIfNotExist(\n  wallet,\n  tokenMintAddress,\n  owner,\n  transaction\n) {\n  const associatedTokenAddress = await findAssociatedTokenAddress(owner, tokenMintAddress)\n  \n  const tokenAccount = await connection.getAccountInfo(associatedTokenAddress);\n  \n  if (tokenAccount == null)\n  {\n    const keys = [\n      {\n        pubkey: wallet.publicKey,\n        isSigner: true,\n        isWritable: true\n      },\n      {\n        pubkey: associatedTokenAddress,\n        isSigner: false,\n        isWritable: true\n      },\n      {\n        pubkey: owner,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: tokenMintAddress,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: SYSTEM_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      },\n      {\n        pubkey: RENT_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }\n    ]\n    transaction.add(\n      new TransactionInstruction({\n        keys,\n        programId: ASSOCIATED_TOKEN_PROGRAM_ID,\n        data: Buffer.from([])\n      }))\n    //await signAndSendTransaction(wallet, transaction)\n  }\n  return associatedTokenAddress\n}\n\nexport const commitment = 'confirmed'\n\n\nexport async function signTransaction(\n  connection,\n  wallet,\n  transaction,\n  signers = []\n) {\n  transaction.recentBlockhash = (await connection.getRecentBlockhash(commitment)).blockhash\n  transaction.setSigners(wallet.publicKey, ...signers.map((s) => s.publicKey))\n  if (signers.length > 0) {\n    transaction.partialSign(...signers)\n  }\n  return await wallet.signTransaction(transaction)\n}\n\nexport async function sendNewTransaction(\n  connection,\n  wallet,\n  transaction,\n  signers = [],\n) {\n  const signedTransaction = await signTransaction(connection, wallet, transaction, signers)\n  return await sendSignedTransaction(connection, signedTransaction)\n}\n\nexport async function sendSignedTransaction(connection, signedTransaction) {\n  const rawTransaction = signedTransaction.serialize()\n\n  const txid = await connection.sendRawTransaction(rawTransaction, {\n    skipPreflight: true,\n    preflightCommitment: commitment\n  })\n\n  return txid\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/tokens.js",["357","358"],"import { cloneDeep } from \"lodash\";\n\nexport function getTokenByMintAddress(mintAddress) {\n  if (mintAddress === NATIVE_SOL.mintAddress) {\n    return cloneDeep(NATIVE_SOL)\n  }\n\n  let token = null\n\n  for (const symbol of Object.keys(TOKENS)) {\n    const info = cloneDeep(TOKENS[symbol])\n\n    if (info.mintAddress === mintAddress) {\n      token = info\n    }\n  }\n\n  return token\n}\n\nexport const NATIVE_SOL = {\n  symbol: 'SOL',\n  name: 'Native Solana',\n  mintAddress: '11111111111111111111111111111111',\n  decimals: 9\n}\n\nexport const TEST_TOKENS = {\n  'USDR': {\n    symbol: 'USDR',\n    name: 'RAY Devnet Base Test Token',\n    mintAddress: 'FSRvxBNrQWX2Fy2qvKMLL3ryEdRtE3PUTZBcdKwASZTU',\n    decimals: 6\n  },\n\n  'RAYT': {\n    symbol: 'RAYT',\n    name: 'RAY Devnet Test Token',\n    mintAddress: 'BEcGFQK1T1tSu3kvHC17cyCkQ5dvXqAJ7ExB2bb5Do7a',\n    decimals: 6\n  },\n\n  'ALPHA': {\n    symbol: 'ALPHA',\n    name: 'ALPHA coin',\n    mintAddress: 'HUHuQCZUvxCiuFg54vRStrXSbCFeBhmXRqSuR5eEVB6o',\n    decimals: 9,\n  }\n}\n\n\n\n// export const MANGO_TOKENS = {\n  \n//   'BTC': {\n//     symbol: 'BTC',\n//     name: 'BTC MANGO Test Token',\n//     mintAddress: 'bypQzRBaSDWiKhoAw3hNkf35eF3z3AZCU8Sxks6mTPP',\n//     decimals: 6\n//   },\n\n//   'ETH': {\n//     symbol: 'ETH',\n//     name: 'ETH coin',\n//     mintAddress: 'ErWGBLBQMwdyC4H3MR8ef6pFK6gyHAyBxy4o1mHoqKzm',\n//     decimals: 6,\n//   },\n\n//   'SOL': {\n//     symbol: 'SOL',\n//     name: 'SOL coin',\n//     mintAddress: 'So11111111111111111111111111111111111111112',\n//     decimals: 9,\n//   },\n\n//   'SRM': {\n//     symbol: 'SRM',\n//     name: 'SRM coin',\n//     mintAddress: '9FbAMDvXqNjPqZSYt4EWTguJuDrGkfvwr3gSFpiSbX9S',\n//     decimals: 6,\n//   },\n//   'USDC': {\n//     symbol: 'USDC',\n//     name: 'USDC MANGO Base Test Token',\n//     mintAddress: 'EMjjdsqERN4wJUR9jMBax2pzqQPeGLNn5NeucbHpDUZK',\n//     decimals: 9\n//   },\n// }\n\nexport const TEST_TOKENS2 = {\n  'USDP': {\n    symbol: 'USDP',\n    name: 'USDP Test Token',\n    mintAddress: 'DdzREMVFg6pa5825HBKVzeCrEi8EJiREfb8UrxSZB64w',\n    decimals: 9\n  },\n  'ALPHA': {\n    symbol: 'ALPHA',\n    name: 'ALPHA coin',\n    mintAddress: 'HUHuQCZUvxCiuFg54vRStrXSbCFeBhmXRqSuR5eEVB6o',\n    decimals: 9,\n  },\n  'BETA': {\n    symbol: 'BETA',\n    name: 'BETA coin',\n    mintAddress: 'HW18fiAHKzs7ZSaT5ibAhnSWVde25sazTSbMzss4Fcty',\n    decimals: 9  \n  },\n}\n\nexport const TOKENS = {\n  WSOL: {\n    symbol: 'WSOL',\n    name: 'Wrapped Solana',\n    mintAddress: 'So11111111111111111111111111111111111111112',\n    decimals: 9,\n    referrer: 'HTcarLHe7WRxBQCWvhVB8AP56pnEtJUV2jDGvcpY3xo5',\n    tags: ['raydium']\n  },\n  BTC: {\n    symbol: 'BTC',\n    name: 'Wrapped Bitcoin',\n    mintAddress: '9n4nbM75f5Ui33ZbPYXn59EwSgE8CGsHtAeTH5YFeJ9E',\n    decimals: 6,\n    referrer: 'GZpS8cY8Nt8HuqxzJh6PXTdSxc38vFUjBmi7eEUkkQtG',\n    tags: ['raydium']\n  },\n  ETH: {\n    symbol: 'ETH',\n    name: 'Wrapped Ethereum',\n    mintAddress: '2FPyTwcZLUg1MDrwsyoP4D6s1tM7hAkHYRjkNb5w6Pxk',\n    decimals: 6,\n    referrer: 'CXPTcSxxh4AT38gtv3SPbLS7oZVgXzLbMb83o4ziXjjN',\n    tags: ['raydium']\n  },\n  USDT: {\n    symbol: 'USDT',\n    name: 'USDT',\n    mintAddress: 'Es9vMFrzaCERmJfrF4H2FYD4KCoNkY11McCe8BenwNYB',\n    decimals: 6,\n    referrer: '8DwwDNagph8SdwMUdcXS5L9YAyutTyDJmK6cTKrmNFk3',\n    tags: ['raydium']\n  },\n  WUSDT: {\n    symbol: 'WUSDT',\n    name: 'Wrapped USDT',\n    mintAddress: 'BQcdHdAQW1hczDbBi9hiegXAR7A98Q9jx3X3iBBBDiq4',\n    decimals: 6,\n    referrer: 'CA98hYunCLKgBuD6N8MJSgq1GbW9CXdksLf5mw736tS3',\n    tags: ['raydium']\n  },\n  USDC: {\n    symbol: 'USDC',\n    name: 'USDC',\n    mintAddress: 'EPjFWdd5AufqSSqeM2qN1xzybapC8G4wEGGkZwyTDt1v',\n    decimals: 6,\n    referrer: '92vdtNjEg6Zth3UU1MgPgTVFjSEzTHx66aCdqWdcRkrg',\n    tags: ['raydium']\n  },\n  WUSDC: {\n    symbol: 'WUSDC',\n    name: 'Wrapped USDC',\n    mintAddress: 'BXXkv6z8ykpG1yuvUDPgh732wzVHB69RnB9YgSYh3itW',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  YFI: {\n    symbol: 'YFI',\n    name: 'Wrapped YFI',\n    mintAddress: '3JSf5tPeuscJGtaCp5giEiDhv51gQ4v3zWg8DGgyLfAB',\n    decimals: 6,\n    referrer: 'DZjgzKfYzZBBSTo5vytMYvGdNF933DvuX8TftDMrThrb',\n    tags: ['raydium']\n  },\n  LINK: {\n    symbol: 'LINK',\n    name: 'Wrapped Chainlink',\n    mintAddress: 'CWE8jPTUYhdCTZYWPTe1o5DFqfdjzWKc9WKz6rSjQUdG',\n    decimals: 6,\n    referrer: 'DRSKKsYZaPEFkRgGywo7KWBGZikf71R9aDr8tjtpr41V',\n    tags: ['raydium']\n  },\n  XRP: {\n    symbol: 'XRP',\n    name: 'Wrapped XRP',\n    mintAddress: 'Ga2AXHpfAF6mv2ekZwcsJFqu7wB4NV331qNH7fW9Nst8',\n    decimals: 6,\n    referrer: '6NeHPXG142tAE2Ej3gHgT2N66i1KH6PFR6PBZw6RyrwH',\n    tags: ['raydium']\n  },\n  SUSHI: {\n    symbol: 'SUSHI',\n    name: 'Wrapped SUSHI',\n    mintAddress: 'AR1Mtgh7zAtxuxGd2XPovXPVjcSdY3i4rQYisNadjfKy',\n    decimals: 6,\n    referrer: '59QxHeHgb28tDc3gStnrW8FNKC9qWuRmRZHBaAqCerJX',\n    tags: ['raydium']\n  },\n  ALEPH: {\n    symbol: 'ALEPH',\n    name: 'Wrapped ALEPH',\n    mintAddress: 'CsZ5LZkDS7h9TDKjrbL7VAwQZ9nsRu8vJLhRYfmGaN8K',\n    decimals: 6,\n    referrer: '8FKAKrenJMDd7V6cxnM5BsymHTjqxgodtHbLwZReMnWW',\n    tags: ['raydium']\n  },\n  SXP: {\n    symbol: 'SXP',\n    name: 'Wrapped SXP',\n    mintAddress: 'SF3oTvfWzEP3DTwGSvUXRrGTvr75pdZNnBLAH9bzMuX',\n    decimals: 6,\n    referrer: '97Vyotr284UM2Fyq9gbfQ3azMYtgf7cjnsf8pN1PFfY9',\n    tags: ['raydium']\n  },\n  HGET: {\n    symbol: 'HGET',\n    name: 'Wrapped HGET',\n    mintAddress: 'BtZQfWqDGbk9Wf2rXEiWyQBdBY1etnUUn6zEphvVS7yN',\n    decimals: 6,\n    referrer: 'AGY2wy1ANzLM2jJLSkVxPUYAY5iAYXYsLMQkoQsAhucj',\n    tags: ['raydium']\n  },\n  CREAM: {\n    symbol: 'CREAM',\n    name: 'Wrapped CREAM',\n    mintAddress: '5Fu5UUgbjpUvdBveb3a1JTNirL8rXtiYeSMWvKjtUNQv',\n    decimals: 6,\n    referrer: '7WPzEiozJ69MQe8bfbss1t2unR6bHR4S7FimiUVRgu7P',\n    tags: ['raydium']\n  },\n  UBXT: {\n    symbol: 'UBXT',\n    name: 'Wrapped UBXT',\n    mintAddress: '873KLxCbz7s9Kc4ZzgYRtNmhfkQrhfyWGZJBmyCbC3ei',\n    decimals: 6,\n    referrer: '9aocFzNkSVj9TCS6cJk2uYyuzEpXPWT7xoBBF9JcZ879',\n    tags: ['raydium']\n  },\n  HNT: {\n    symbol: 'HNT',\n    name: 'Wrapped HNT',\n    mintAddress: 'HqB7uswoVg4suaQiDP3wjxob1G5WdZ144zhdStwMCq7e',\n    decimals: 6,\n    referrer: 'B61oHrGCFh8P75Z2cRDiw2nbEwbMyhVfZhMWiwxU2qCV',\n    tags: ['raydium']\n  },\n  FRONT: {\n    symbol: 'FRONT',\n    name: 'Wrapped FRONT',\n    mintAddress: '9S4t2NEAiJVMvPdRYKVrfJpBafPBLtvbvyS3DecojQHw',\n    decimals: 6,\n    referrer: 'FnasnCc7c43hd2nanSmRjh9Sf9Cgz6aEvNj6wpDznS5h',\n    tags: ['raydium']\n  },\n  AKRO: {\n    symbol: 'AKRO',\n    name: 'Wrapped AKRO',\n    mintAddress: '6WNVCuxCGJzNjmMZoKyhZJwvJ5tYpsLyAtagzYASqBoF',\n    decimals: 6,\n    referrer: 'FihBmWJbiLSEvq4QZpPPdjokdMgxqq6pESZ7oMkE1qJH',\n    tags: ['raydium']\n  },\n  HXRO: {\n    symbol: 'HXRO',\n    name: 'Wrapped HXRO',\n    mintAddress: 'DJafV9qemGp7mLMEn5wrfqaFwxsbLgUsGVS16zKRk9kc',\n    decimals: 6,\n    referrer: '4NgrGZDRCzyqiwYvKPEePTKfQXtWzKmSDBoZJjRw6wNC',\n    tags: ['raydium']\n  },\n  UNI: {\n    symbol: 'UNI',\n    name: 'Wrapped UNI',\n    mintAddress: 'DEhAasscXF4kEGxFgJ3bq4PpVGp5wyUxMRvn6TzGVHaw',\n    decimals: 6,\n    referrer: '4ntxDv95ajBbXfZyGy3UhcQDx8xmH1yJ6eKvuNNH466x',\n    tags: ['raydium']\n  },\n  SRM: {\n    symbol: 'SRM',\n    name: 'Serum',\n    mintAddress: 'SRMuApVNdxXokk5GT7XD5cUUgXMBCoAz2LHeuAoKWRt',\n    decimals: 6,\n    referrer: 'HYxa4Ea1dz7ya17Cx18rEGUA1WbCvKjXjFKrnu8CwugH',\n    tags: ['raydium']\n  },\n  FTT: {\n    symbol: 'FTT',\n    name: 'Wrapped FTT',\n    mintAddress: 'AGFEad2et2ZJif9jaGpdMixQqvW5i81aBdvKe7PHNfz3',\n    decimals: 6,\n    referrer: 'CafpgSh8KGL2GPTjdXfctD3vXngNZDJ3Q92FTfV71Hmt',\n    tags: ['raydium']\n  },\n  MSRM: {\n    symbol: 'MSRM',\n    name: 'MegaSerum',\n    mintAddress: 'MSRMcoVyrFxnSgo5uXwone5SKcGhT1KEJMFEkMEWf9L',\n    decimals: 0,\n    referrer: 'Ge5q9x8gDUNYqqLA1MdnCzWNJGsbj3M15Yxse2cDbw9z',\n    tags: ['raydium']\n  },\n  TOMO: {\n    symbol: 'TOMO',\n    name: 'Wrapped TOMO',\n    mintAddress: 'GXMvfY2jpQctDqZ9RoU3oWPhufKiCcFEfchvYumtX7jd',\n    decimals: 6,\n    referrer: '9fexfN3eZomF5gfenG5L9ydbKRQkPhq6x74rb5iLrvXP',\n    tags: ['raydium']\n  },\n  KARMA: {\n    symbol: 'KARMA',\n    name: 'Wrapped KARMA',\n    mintAddress: 'EcqExpGNFBve2i1cMJUTR4bPXj4ZoqmDD2rTkeCcaTFX',\n    decimals: 4,\n    tags: ['raydium']\n  },\n  LUA: {\n    symbol: 'LUA',\n    name: 'Wrapped LUA',\n    mintAddress: 'EqWCKXfs3x47uVosDpTRgFniThL9Y8iCztJaapxbEaVX',\n    decimals: 6,\n    referrer: 'HuZwNApjVFuFSDgrwZA8GP2JD7WMby4qt6rkWDnaMo7j',\n    tags: ['raydium']\n  },\n  MATH: {\n    symbol: 'MATH',\n    name: 'Wrapped MATH',\n    mintAddress: 'GeDS162t9yGJuLEHPWXXGrb1zwkzinCgRwnT8vHYjKza',\n    decimals: 6,\n    referrer: 'C9K1M8sJX8WMdsnFT7DuzdiHHunEj79EsLuz4DixQYGm',\n    tags: ['raydium']\n  },\n  KEEP: {\n    symbol: 'KEEP',\n    name: 'Wrapped KEEP',\n    mintAddress: 'GUohe4DJUA5FKPWo3joiPgsB7yzer7LpDmt1Vhzy3Zht',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  SWAG: {\n    symbol: 'SWAG',\n    name: 'Wrapped SWAG',\n    mintAddress: '9F9fNTT6qwjsu4X4yWYKZpsbw5qT7o6yR2i57JF2jagy',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  FIDA: {\n    symbol: 'FIDA',\n    name: 'Bonfida',\n    mintAddress: 'EchesyfXePKdLtoiZSL8pBe8Myagyy8ZRqsACNCFGnvp',\n    decimals: 6,\n    referrer: 'AeAsG75UmyPDB271c6NHonHxXAPXfkvhcf2xjfJhReS8',\n    tags: ['raydium']\n  },\n  KIN: {\n    symbol: 'KIN',\n    name: 'KIN',\n    mintAddress: 'kinXdEcpDQeHPEuQnqmUgtYykqKGVFq6CeVX5iAHJq6',\n    decimals: 5,\n    referrer: 'AevFXmApVxN2yk1iemSxXc6Wy7Z1udUEfST11kuYKmr9',\n    tags: ['raydium']\n  },\n  MAPS: {\n    symbol: 'MAPS',\n    name: 'MAPS',\n    mintAddress: 'MAPS41MDahZ9QdKXhVa4dWB9RuyfV4XqhyAZ8XcYepb',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  OXY: {\n    symbol: 'OXY',\n    name: 'OXY',\n    mintAddress: 'z3dn17yLaGMKffVogeFHQ9zWVcXgqgf3PQnDsNs2g6M',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  RAY: {\n    symbol: 'RAY',\n    name: 'Raydium',\n    mintAddress: '4k3Dyjzvzp8eMZWUXbBCjEvwSkkk59S5iCNLY3QrkX6R',\n    decimals: 6,\n    referrer: '33XpMmMQRf6tSPpmYyzpwU4uXpZHkFwCZsusD9dMYkjy',\n    tags: ['raydium']\n  },\n  xCOPE: {\n    symbol: 'xCOPE',\n    name: 'xCOPE',\n    mintAddress: '3K6rftdAaQYMPunrtNRHgnK2UAtjm2JwyT2oCiTDouYE',\n    decimals: 0,\n    referrer: '8DTehuES4tfnd2SrqcjN52XofxWXGjiLZRgM12U9pB6f',\n    tags: ['raydium']\n  },\n  COPE: {\n    symbol: 'COPE',\n    name: 'COPE',\n    mintAddress: '8HGyAAB1yoM1ttS7pXjHMa3dukTFGQggnFFH3hJZgzQh',\n    decimals: 6,\n    referrer: 'G7UYwWhkmgeL57SUKFF45K663V9TdXZw6Ho6ZLQ7p4p',\n    tags: ['raydium']\n  },\n  STEP: {\n    symbol: 'STEP',\n    name: 'STEP',\n    mintAddress: 'StepAscQoEioFxxWGnh2sLBDFp9d8rvKz2Yp39iDpyT',\n    decimals: 9,\n    referrer: 'EFQVX1S6dFroDDhJDAnMTX4fCfjt4fJXHdk1eEtJ2uRY',\n    tags: ['raydium']\n  },\n  MEDIA: {\n    symbol: 'MEDIA',\n    name: 'MEDIA',\n    mintAddress: 'ETAtLmCmsoiEEKfNrHKJ2kYy3MoABhU6NQvpSfij5tDs',\n    decimals: 6,\n    referrer: 'AYnaG3AidNWFzjq9U3BJSsQ9DShE8g7FszriBDtRFvsx',\n\n    details:\n      'Media Network is a new protocol that bypasses traditional CDN providers’ centralized approach for a self-governed and open source solution where everyone can participate. Media Network creates a distributed bandwidth market that enables service providers such as media platforms to hire resources from the network and dynamically come and go as the demand for last-mile data delivery shifts. It allows anyone to organically serve content without introducing any trust assumptions or pre-authentication requirements. Participants earn MEDIA rewards for their bandwidth contributions, a fixed supply SPL token minted on Solana’s Blockchain.',\n    docs: {\n      website: 'https://media.network/',\n      whitepaper: 'https://media.network/whitepaper.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/Media_FDN',\n      Telegram: 'https://t.me/Media_FDN',\n      Medium: 'https://mediafoundation.medium.com/'\n    },\n    tags: ['raydium']\n  },\n  ROPE: {\n    symbol: 'ROPE',\n    name: 'ROPE',\n    mintAddress: '8PMHT4swUMtBzgHnh5U564N5sjPSiUz2cjEQzFnnP1Fo',\n    decimals: 9,\n    referrer: '5sGVVniBSPLTwRHDETShovq7STRH2rJwbvdvvH3NcVTF',\n    tags: ['raydium']\n  },\n  MER: {\n    symbol: 'MER',\n    name: 'Mercurial',\n    mintAddress: 'MERt85fc5boKw3BW1eYdxonEuJNvXbiMbs6hvheau5K',\n    decimals: 6,\n    referrer: '36F4ryvqaNW2yKQsAry4ZHCZ3j7tz3gtEz7NEwv7pSRu',\n\n    details:\n      'Mercurial Finance\\nMercurial is building DeFi’s first dynamic vaults for stable assets on Solana, providing the technical tools for users to easily deposit, swap and mint stable assets.\\n\\nInnovations\\nMercurial will be introducing several key new technical innovations, including on-chain algorithms to regulate the flow of assets and dynamic fees that tap on the market and price data to assist LPs in optimizing performance. We will also be developing a unique pricing curve that will be the first to combine high efficiency, multi-token support, and generalizability for all types of token sets.\\n\\nMaximizing Capital Utlilization\\nMercurial vaults will dynamically utilize assets for a wide range of use cases, like low slippage swaps, lending, flash loans, and external third-party decentralized protocols. To increase pegged assets availability on Solana, we will allow the creation of synthetics, like mUSD or mBTC, which can be added to our vaults to improve liquidity for other stables and facilitate interaction with other third-party decentralized protocols.\\n\\nStarting with a vault for the most common stables, for example, USDC, USDT, wUSDC, and wDAI, we will be facilitating low slippage swaps with dynamic fees. Features will be added as key technical and ecosystem pieces become available on Solana, i.e. inter-program composability, price oracles, etc.\\n\\nMER\\nThe MER token will be used to accrue value for the holder via fees from swaps, commission from yield farms, and as collateral for synthetic stables like mUSD. MER will also be intrinsically linked to the governance and growth of Mercurial, playing a crucial role in regulating the system across governance, insurance, and bootstrapping.',\n    docs: {\n      website: 'https://www.mercurial.finance/',\n      whitepaper: 'https://www.mercurial.finance/Mercurial-Lite-Paper-v1.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/MercurialFi',\n      Telegram: 'https://t.me/MercurialFi',\n      Medium: 'https://mercurialfi.medium.com/'\n    },\n    tags: ['raydium']\n  },\n  TULIP: {\n    symbol: 'TULIP',\n    name: 'TULIP',\n    mintAddress: 'TuLipcqtGVXP9XR62wM8WWCm6a9vhLs7T1uoWBk6FDs',\n    decimals: 6,\n    referrer: 'Bcw1TvX8jUj6CtY2a7GU2THeYVAudvmT8yzRypVMVsSH',\n    tags: ['raydium']\n  },\n  SNY: {\n    symbol: 'SNY',\n    name: 'SNY',\n    mintAddress: '4dmKkXNHdgYsXqBHCuMikNQWwVomZURhYvkkX5c4pQ7y',\n    decimals: 6,\n    referrer: 'G7gyaTNn2hgjF67SWs4Ee9PEaFU2xadhtXL8HmkJ2cNL',\n\n    detailLink: 'https://raydium.medium.com/synthetify-launching-on-acceleraytor-3755b4903f88',\n    details:\n      'Synthetify is a decentralized protocol that allows for the creation and exchange of synthetic assets that closely track the price of underlying assets. Synthetify’s synthetics adhere to the SPL token standard, allowing them to be easily integrated with DeFi applications across the Solana ecosystem.\\n\\nSynthetify leverages Solana to enable a fast, cheap and intuitive trading experience for users of the platform while staying fully decentralized thanks to an infrastructure that relies on smart contracts and blockchain oracles.\\n\\nThe Synthetify Token (SNY) gives the ability to participate in the protocol through staking. Stakers receive a pro rata share of fees generated by the exchange as well as additional rewards. SNY acts as a collateral token for all synthetic assets created on the platform and each token will have voting power on future governance proposals.',\n    docs: {\n      website: 'https://synthetify.io/',\n      whitepaper: 'https://resources.synthetify.io/synthetify-whitepaper.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/synthetify',\n      Telegram: 'https://t.me/synthetify',\n      Medium: 'https://synthetify.medium.com/'\n    },\n    tags: ['raydium']\n  },\n  SLRS: {\n    symbol: 'SLRS',\n    name: 'SLRS',\n    mintAddress: 'SLRSSpSLUTP7okbCUBYStWCo1vUgyt775faPqz8HUMr',\n    decimals: 6,\n    referrer: 'AmqeHgTdm6kBzy5ewZFKuMAfbynZmhve1GQxbJzQFLbP',\n\n    detailLink: 'https://raydium.medium.com/solrise-is-launching-on-acceleraytor-c2c980362037',\n    details:\n      'Solrise Finance is a fully decentralized and non-custodial protocol for investment funds on Solana. What this means in practice is that anyone can open a fund, and anyone can invest in it.\\n\\nSolrise’s platform allows fund managers from all across the globe — whether they are well-established and looking for a new channel, or ambitious rookies with something to prove — to open a fund, with performance kept completely transparent.\\n\\nExisting decentralized fund management platforms on Ethereum are suffering from brutally high transaction fees. With Solrise, you can create, enter, and exit funds all for under $0.01.',\n    docs: {\n      website: 'https://solrise.finance/',\n      docs: 'https://docs.solrise.finance/'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/SolriseFinance',\n      Telegram: 'https://t.me/solrisefinance',\n      Medium: 'https://blog.solrise.finance/'\n    },\n    tags: ['raydium']\n  },\n  WOO: {\n    symbol: 'WOO',\n    name: 'Wootrade Network',\n    mintAddress: 'E5rk3nmgLUuKUiS94gg4bpWwWwyjCMtddsAXkTFLtHEy',\n    decimals: 6,\n    referrer: '7UbeAZxpza5zN3QawQ5KsUo88zXvohUncYB9Zk5QCiim',\n    tags: ['raydium']\n  },\n  BOP: {\n    symbol: 'BOP',\n    name: 'Boring Protocol',\n    mintAddress: 'BLwTnYKqf7u4qjgZrrsKeNs2EzWkMLqVCu6j8iHyrNA3',\n    decimals: 8,\n    referrer: 'FWxBZmNsvNckx8DnaL2NuyMtiQmT1x529WwV4e1UWiGk',\n    tags: ['raydium']\n  },\n  SAMO: {\n    symbol: 'SAMO',\n    name: 'Samoyed Coin',\n    mintAddress: '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',\n    decimals: 9,\n    referrer: 'FnMDNFL9t8EpbADSU3hLWBtx7SuwRBB6NM84U3PzSkUu',\n    tags: ['raydium']\n  },\n  renBTC: {\n    symbol: 'renBTC',\n    name: 'renBTC',\n    mintAddress: 'CDJWUqTcYTVAKXAVXoQZFes5JUFc7owSeq7eMQcDSbo5',\n    decimals: 8,\n    referrer: '7rr64uygy3o5RKVeNv12JGDUFMXVdr2YHvA3NTxzbZT6',\n    tags: ['raydium']\n  },\n  renDOGE: {\n    symbol: 'renDOGE',\n    name: 'renDOGE',\n    mintAddress: 'ArUkYE2XDKzqy77PRRGjo4wREWwqk6RXTfM9NeqzPvjU',\n    decimals: 8,\n    referrer: 'J5g7uvJRGnpRyLnRQjFs1MqMkiTVgjxVJCXocu4B4BcZ',\n    tags: ['raydium']\n  },\n  LIKE: {\n    symbol: 'LIKE',\n    name: 'LIKE',\n    mintAddress: '3bRTivrVsitbmCTGtqwp7hxXPsybkjn4XLNtPsHqa3zR',\n    decimals: 9,\n    referrer: '2rnVeVGfM88XqyNyBzGWEb7JViYKqncFzjWq5h1ujS9A',\n\n    detailLink: 'https://raydium.medium.com/only1-is-launching-on-acceleraytor-41ecb89dcc4e',\n    details:\n      'Only1 is the first NFT-powered social platform built on the Solana blockchain. Mixing social media, an NFT marketplace, a scalable blockchain, and the native token — $LIKE, Only1 offers fans a unique way of connecting with the creators they love.\\n\\nBy using the Only1 platform, fans will have the ability to invest, access, and earn from the limited edition contents created by the world’s largest influencers/celebrities, all powered by NFTs.',\n    docs: {\n      website: 'https://only1.io/',\n      whitepaper: 'https://only1.io/pitch-deck.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/only1nft',\n      Telegram: 'https://t.me/only1nft',\n      Medium: 'https://medium.com/@only1nft',\n      Discord: 'https://discord.gg/sUu7KZwNCB'\n    },\n    tags: ['raydium']\n  },\n  DXL: {\n    symbol: 'DXL',\n    name: 'DXL',\n    mintAddress: 'GsNzxJfFn6zQdJGeYsupJWzUAm57Ba7335mfhWvFiE9Z',\n    decimals: 6,\n    referrer: 'HF7mhT9YgD5CULAFDYQmhnUMi1FnNbKeBFCy9SZDh2XE',\n    tags: ['raydium']\n  },\n  MSOL: {\n    symbol: 'MSOL',\n    name: 'Marinade staked SOL (mSOL)',\n    mintAddress: 'mSoLzYCxHdYgdzU16g5QSh3i5K3z3KZK7ytfqcJm7So',\n    decimals: 9,\n    referrer: '7h5bckf8P29RdviNoKjDyH3Ky3uwdrBiPgYuSCD4asV5',\n    tags: ['raydium']\n  },\n  MNDE: {\n    symbol: 'MNDE',\n    name: 'Marinade (MNDE)',\n    mintAddress: 'MNDEFzGvMt87ueuHvVU9VcTqsAP5b3fTGPsHuuPA5ey',\n    decimals: 9,\n    referrer: '7h5bckf8P29RdviNoKjDyH3Ky3uwdrBiPgYuSCD4asV5',\n    tags: ['orca']\n  },\n  PAI: {\n    symbol: 'PAI',\n    name: 'PAI (Parrot)',\n    mintAddress: 'Ea5SjE2Y6yvCeW5dYTn7PYMuW5ikXkvbGdcmSnXeaLjS',\n    decimals: 6,\n    referrer: '54X98LAxRR2j1KMBBXkbYyUaAWi1iKW9G1Y4TnTJVY2e',\n    tags: ['raydium']\n  },\n  PORT: {\n    symbol: 'PORT',\n    name: 'PORT',\n    mintAddress: 'PoRTjZMPXb9T7dyU7tpLEZRQj7e6ssfAE62j2oQuc6y',\n    decimals: 6,\n    referrer: '5Ve8q9fb7R2DhdqGV4o1RVy7xxo4D6ifQfbxGiASdxEH',\n    tags: ['raydium']\n  },\n  MNGO: {\n    symbol: 'MNGO',\n    name: 'Mango',\n    mintAddress: 'MangoCzJ36AjZyKwVj3VnYU4GTonjfVEnJmvvWaxLac',\n    decimals: 6,\n    referrer: 'CijuvE6qDpxZ5WqdEQEe7mS11fXEKiiHc7RR8wRiGzjY',\n    tags: ['raydium']\n  },\n  CRP: {\n    symbol: 'CRP',\n    name: 'CRP',\n    mintAddress: 'DubwWZNWiNGMMeeQHPnMATNj77YZPZSAz2WVR5WjLJqz',\n    decimals: 9,\n    referrer: 'FKocyVJptELTbnkUkDRmT7y6hUem2JYrqHoph9uyvQXt',\n    tags: ['raydium']\n  },\n  ATLAS: {\n    symbol: 'ATLAS',\n    name: 'ATLAS',\n    mintAddress: 'ATLASXmbPQxBUYbxPsV97usA3fPQYEqzQBUHgiFCUsXx',\n    decimals: 8,\n    referrer: '9t9mzbkMtLdazj1D9JycS15Geb1KVtcDt4XyAkpM72Ee',\n\n    detailLink: 'https://raydium.medium.com/star-atlas-is-launching-on-acceleraytor-fa35cfe3291f',\n    details:\n      'POLIS is the primary governance token of Star Atlas.\\n\\nStar Atlas is a grand strategy game that combines space exploration, territorial conquest, and political domination. In the distant future, players can join one of three galactic factions to directly influence the course of the metaverse and earn real-world income for their contributions.\\n\\nThe Star Atlas offers a unique gaming experience by combining block chain mechanics with traditional game mechanics. All assets in the metaverse are directly owned by players, and can be traded on the marketplace or exchanged on other cryptocurrency networks.',\n    docs: {\n      website: 'https://staratlas.com/',\n      whitepaper: 'https://staratlas.com/files/star-atlas-white-paper.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/staratlas',\n      Telegram: 'https://t.me/staratlasgame',\n      Medium: 'https://medium.com/star-atlas',\n      Discord: 'https://discord.gg/staratlas',\n      Twitch: 'https://www.twitch.tv/staratlasgame',\n      Youtube: 'https://www.youtube.com/channel/UCt-y8Npwje5KDG5MSZ0a9Jw/videos'\n    },\n    tags: ['raydium']\n  },\n  POLIS: {\n    symbol: 'POLIS',\n    name: 'POLIS',\n    mintAddress: 'poLisWXnNRwC6oBu1vHiuKQzFjGL4XDSu4g9qjz9qVk',\n    decimals: 8,\n    referrer: 'CQ7HWCeSSp3tAfWzqH7ZEzgnTBr5Tvz1No3Y1xbiWzBm',\n\n    detailLink: 'https://raydium.medium.com/star-atlas-is-launching-on-acceleraytor-fa35cfe3291f',\n    details:\n      'POLIS is the primary governance token of Star Atlas.\\n\\nStar Atlas is a grand strategy game that combines space exploration, territorial conquest, and political domination. In the distant future, players can join one of three galactic factions to directly influence the course of the metaverse and earn real-world income for their contributions.\\n\\nThe Star Atlas offers a unique gaming experience by combining block chain mechanics with traditional game mechanics. All assets in the metaverse are directly owned by players, and can be traded on the marketplace or exchanged on other cryptocurrency networks.',\n    docs: {\n      website: 'https://staratlas.com/',\n      whitepaper: 'https://staratlas.com/files/star-atlas-white-paper.pdf'\n    },\n    socials: {\n      Twitter: 'https://twitter.com/staratlas',\n      Telegram: 'https://t.me/staratlasgame',\n      Medium: 'https://medium.com/star-atlas',\n      Discord: 'https://discord.gg/staratlas',\n      Twitch: 'https://www.twitch.tv/staratlasgame',\n      Youtube: 'https://www.youtube.com/channel/UCt-y8Npwje5KDG5MSZ0a9Jw/videos'\n    },\n    tags: ['raydium']\n  },\n  GRAPE: {\n    symbol: 'GRAPE',\n    name: 'GRAPE',\n    mintAddress: '8upjSpvjcdpuzhfR1zriwg5NXkwDruejqNE9WNbPRtyA',\n    decimals: 6,\n    referrer: 'M4nDMB9krXbaNFPVu1DjrBTfqPUHbKEQLZSSDNH2JrL',\n\n    detailLink: 'https://raydium.medium.com/grape-protocol-launching-on-acceleraytor-547f58c12937',\n    details:\n      'The GRAPE “Great Ape” community is a token-based membership community focused on accelerating the growth and adoption of Solana. GRAPE token holders at different tiers are rewarded with exclusive benefits and monthly emissions of GRAPE. You can find more details on the GRAPE membership tiers and benefits here.\\n\\nThe GRAPE toolset creates a framework for decentralized and tokenized communities to better organize and coordinate their activities, unlocking a whole new world of possibility for these dynamic groups. The GRAPE roadmap includes modules for DAO Management, non-custodial tipping, escrow, and event planning to be deployed in the next 6 months.\\n\\nGRAPE protocol’s first tool, Grape Access, creates a Dynamic Balance-Based Membership solution by connecting members’ social accounts to cryptographic keys. All Solana tokens are supported by Multi-Coin configurations, which grants users permission and access rights based on SPL tokens, token pairs, and LP tokens in their wallet.',\n    docs: {\n      website: 'https://grapes.network/'\n      // whitepaper: '' // TODO\n    },\n    socials: {\n      Discord: 'https://discord.com/invite/greatape',\n      Medium: 'https://medium.com/great-ape',\n      Twitter: 'https://twitter.com/grapeprotocol',\n      Twitch: 'https://www.twitch.tv/whalesfriend'\n    },\n    tags: ['raydium']\n  },\n  CHEEMS: {\n    symbol: 'CHEEMS',\n    name: 'CHEEMS',\n    mintAddress: '3FoUAsGDbvTD6YZ4wVKJgTB76onJUKz7GPEBNiR5b8wc',\n    decimals: 4,\n    referrer: '',\n    tags: ['raydium']\n  },\n  stSOL: {\n    symbol: 'stSOL',\n    name: 'stSOL',\n    mintAddress: '7dHbWXmci3dT8UFYWYZweBLXgycu7Y3iL6trKn1Y7ARj',\n    decimals: 9,\n    referrer: '8Mq4Tugv1fcT4gb1wf5ChdEFmdqNGKxFVCnM9TVe44vD',\n    tags: ['raydium']\n  },\n  LIQ: {\n    symbol: 'LIQ',\n    name: 'LIQ',\n    mintAddress: '4wjPQJ6PrkC4dHhYghwJzGBVP78DkBzA2U3kHoFNBuhj',\n    decimals: 6,\n    tags: ['orca']\n  },\n  ORCA: {\n    symbol: 'ORCA',\n    name: 'ORCA',\n    mintAddress: 'orcaEKTdK7LKz57vaAYr9QeNsVEPfiu6QeMU1kektZE',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  ABR: {\n    symbol: 'ABR',\n    name: 'ABR',\n    mintAddress: 'a11bdAAuV8iB2fu7X6AxAvDTo1QZ8FXB3kk5eecdasp',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  SHDW: {\n    symbol: 'SHDW',\n    name: 'Shadow Token',\n    mintAddress: 'SHDWyBxihqiCj6YekG2GUr7wqKLeLAMK1gHZck9pL6y',\n    decimals: 9,\n    tags: ['orca']\n  },\n  SBR: {\n    symbol: 'SBR',\n    name: 'SBR',\n    mintAddress: 'Saber2gLauYim4Mvftnrasomsv6NvAuncvMEZwcLpD1',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  SUNNY: {\n    symbol: 'SUNNY',\n    name: 'SUNNY',\n    mintAddress: 'SUNNYWgPQmFxe9wTZzNK7iPnJ3vYDrkgnxJRJm1s3ag',\n    decimals: 6,\n    tags: ['orca']\n  },\n  DFL: {\n    symbol: 'DFL',\n    name: 'DeFi Land',\n    mintAddress: 'DFL1zNkaGPWm1BqAVqRjCZvHmwTFrEaJtbzJWgseoNJh',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  SAMO: {\n    symbol: 'SAMO',\n    name: 'Samoyed Coin',\n    mintAddress: '7xKXtg2CW87d97TXJSDpbD5jBkheTqA83TZRuJosgAsU',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  PORT: {\n    symbol: 'PORT',\n    name: 'PORT',\n    mintAddress: 'PoRTjZMPXb9T7dyU7tpLEZRQj7e6ssfAE62j2oQuc6y',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  AURY: {\n    symbol: 'AURY',\n    name: 'AURY',\n    mintAddress: 'AURYydfxJib1ZkTir1Jn1J9ECYUtjb6rKQVmtYaixWPP',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  IVN: {\n    symbol: 'IVN',\n    name: 'IVN',\n    mintAddress: 'iVNcrNE9BRZBC9Aqf753iZiZfbszeAVUoikgT9yvr2a',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  SLND: {\n    symbol: 'SLND',\n    name: 'SLND',\n    mintAddress: 'SLNDpmoWTVADgEdndyvWzroNL7zSi1dF9PC3xHGtPwp',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  FAB: {\n    symbol: 'FAB',\n    name: 'FAB',\n    mintAddress: 'EdAhkbj5nF9sRM7XN7ewuW8C9XEUMs8P7cnoQ57SYE96',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  NINJA: {\n    symbol: 'NINJA',\n    name: 'NINJA',\n    mintAddress: 'FgX1WD9WzMU3yLwXaFSarPfkgzjLb2DZCqmkx9ExpuvJ',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  IN: {\n    symbol: 'IN',\n    name: 'IN',\n    mintAddress: 'inL8PMVd6iiW3RCBJnr5AsrRN6nqr4BTrcNuQWQSkvY',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  SONAR: {\n    symbol: 'SONAR',\n    name: 'SONAR',\n    mintAddress: 'sonarX4VtVkQemriJeLm6CKeW3GDMyiBnnAEMw1MRAE',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  ATS: {\n    symbol: 'ATS',\n    name: 'Atlas DEX',\n    mintAddress: 'HJbNXx2YMRxgfUJ6K4qeWtjatMK5KYQT1QnsCdDWywNv',\n    decimals: 9,\n    tags: ['raydium']\n  },\n  PRISM: {\n    symbol: 'PRISM',\n    name: 'PRISM',\n    mintAddress: 'PRSMNsEPqhGVCH1TtWiJqPjJyh2cKrLostPZTNy1o5x',\n    decimals: 6,\n    tags: ['raydium']\n  },\n  UXP: {\n    symbol: 'UXP',\n    name: 'UXP',\n    mintAddress: 'UXPhBoR3qG4UCiGNJfV7MqhHyFqKN68g45GoYvAeL2M',\n    decimals: 9,\n    tags: ['raydium']\n  },\n}\n\nexport const LP_TOKENS = {\n  'RAY-WUSDT': {\n    symbol: 'RAY-WUSDT',\n    name: 'RAY-WUSDT V2 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.WUSDT },\n\n    mintAddress: 'CzPDyvotTcxNqtPne32yUiEVQ6jk42HZi1Y3hUu7qf7f',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SOL': {\n    symbol: 'RAY-SOL',\n    name: 'RAY-SOL LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: '134Cct3CSdRCbYgq5SkwmHgfwjJ7EM5cG9PzqffWqECx',\n    decimals: TOKENS.RAY.decimals\n  },\n  'LINK-WUSDT': {\n    symbol: 'LINK-WUSDT',\n    name: 'LINK-WUSDT LP',\n    coin: { ...TOKENS.LINK },\n    pc: { ...TOKENS.WUSDT },\n\n    mintAddress: 'EVDmwajM5U73PD34bYPugwiA4Eqqbrej4mLXXv15Z5qR',\n    decimals: TOKENS.LINK.decimals\n  },\n  'ETH-WUSDT': {\n    symbol: 'ETH-WUSDT',\n    name: 'ETH-WUSDT LP',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.WUSDT },\n\n    mintAddress: 'KY4XvwHy7JPzbWYAbk23jQvEb4qWJ8aCqYWREmk1Q7K',\n    decimals: TOKENS.ETH.decimals\n  },\n  'RAY-USDC': {\n    symbol: 'RAY-USDC',\n    name: 'RAY-USDC V2 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'FgmBnsF5Qrnv8X9bomQfEtQTQjNNiBCWRKGpzPnE5BDg',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SRM': {\n    symbol: 'RAY-SRM',\n    name: 'RAY-SRM V2 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: '5QXBMXuCL7zfAk39jEVVEvcrz1AvBGgT9wAhLLHLyyUJ',\n    decimals: TOKENS.RAY.decimals\n  },\n  // v3\n  'RAY-WUSDT-V3': {\n    symbol: 'RAY-WUSDT',\n    name: 'RAY-WUSDT V3 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.WUSDT },\n\n    mintAddress: 'FdhKXYjCou2jQfgKWcNY7jb8F2DPLU1teTTTRfLBD2v1',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-USDC-V3': {\n    symbol: 'RAY-USDC',\n    name: 'RAY-USDC V3 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'BZFGfXMrjG2sS7QT2eiCDEevPFnkYYF7kzJpWfYxPbcx',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SRM-V3': {\n    symbol: 'RAY-SRM',\n    name: 'RAY-SRM V3 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'DSX5E21RE9FB9hM8Nh8xcXQfPK6SzRaJiywemHBSsfup',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SOL-V3': {\n    symbol: 'RAY-SOL',\n    name: 'RAY-SOL V3 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: 'F5PPQHGcznZ2FxD9JaxJMXaf7XkaFFJ6zzTBcW8osQjw',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-ETH-V3': {\n    symbol: 'RAY-ETH',\n    name: 'RAY-ETH V3 LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.ETH },\n\n    mintAddress: '8Q6MKy5Yxb9vG1mWzppMtMb2nrhNuCRNUkJTeiE3fuwD',\n    decimals: TOKENS.RAY.decimals\n  },\n  // v4\n  'FIDA-RAY-V4': {\n    symbol: 'FIDA-RAY',\n    name: 'FIDA-RAY LP',\n    coin: { ...TOKENS.FIDA },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'DsBuznXRTmzvEdb36Dx3aVLVo1XmH7r1PRZUFugLPTFv',\n    decimals: TOKENS.FIDA.decimals\n  },\n  'OXY-RAY-V4': {\n    symbol: 'OXY-RAY',\n    name: 'OXY-RAY LP',\n    coin: { ...TOKENS.OXY },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'FwaX9W7iThTZH5MFeasxdLpxTVxRcM7ZHieTCnYog8Yb',\n    decimals: TOKENS.OXY.decimals\n  },\n  'MAPS-RAY-V4': {\n    symbol: 'MAPS-RAY',\n    name: 'MAPS-RAY LP',\n    coin: { ...TOKENS.MAPS },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'CcKK8srfVdTSsFGV3VLBb2YDbzF4T4NM2C3UEjC39RLP',\n    decimals: TOKENS.MAPS.decimals\n  },\n  'KIN-RAY-V4': {\n    symbol: 'KIN-RAY',\n    name: 'KIN-RAY LP',\n    coin: { ...TOKENS.KIN },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'CHT8sft3h3gpLYbCcZ9o27mT5s3Z6VifBVbUiDvprHPW',\n    decimals: 6\n  },\n  'RAY-USDT-V4': {\n    symbol: 'RAY-USDT',\n    name: 'RAY-USDT LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'C3sT1R3nsw4AVdepvLTLKr5Gvszr7jufyBWUCvy4TUvT',\n    decimals: TOKENS.RAY.decimals\n  },\n  'SOL-USDC-V4': {\n    symbol: 'SOL-USDC',\n    name: 'SOL-USDC LP',\n    coin: { ...NATIVE_SOL },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '8HoQnePLqPj4M7PUDzfw8e3Ymdwgc7NLGnaTUapubyvu',\n    decimals: NATIVE_SOL.decimals\n  },\n  'YFI-USDC-V4': {\n    symbol: 'YFI-USDC',\n    name: 'YFI-USDC LP',\n    coin: { ...TOKENS.YFI },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '865j7iMmRRycSYUXzJ33ZcvLiX9JHvaLidasCyUyKaRE',\n    decimals: TOKENS.YFI.decimals\n  },\n  'SRM-USDC-V4': {\n    symbol: 'SRM-USDC',\n    name: 'SRM-USDC LP',\n    coin: { ...TOKENS.SRM },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '9XnZd82j34KxNLgQfz29jGbYdxsYznTWRpvZE3SRE7JG',\n    decimals: TOKENS.SRM.decimals\n  },\n  'FTT-USDC-V4': {\n    symbol: 'FTT-USDC',\n    name: 'FTT-USDC LP',\n    coin: { ...TOKENS.FTT },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '75dCoKfUHLUuZ4qEh46ovsxfgWhB4icc3SintzWRedT9',\n    decimals: TOKENS.FTT.decimals\n  },\n  'BTC-USDC-V4': {\n    symbol: 'BTC-USDC',\n    name: 'BTC-USDC LP',\n    coin: { ...TOKENS.BTC },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2hMdRdVWZqetQsaHG8kQjdZinEMBz75vsoWTCob1ijXu',\n    decimals: TOKENS.BTC.decimals\n  },\n  'SUSHI-USDC-V4': {\n    symbol: 'SUSHI-USDC',\n    name: 'SUSHI-USDC LP',\n    coin: { ...TOKENS.SUSHI },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2QVjeR9d2PbSf8em8NE8zWd8RYHjFtucDUdDgdbDD2h2',\n    decimals: TOKENS.SUSHI.decimals\n  },\n  'TOMO-USDC-V4': {\n    symbol: 'TOMO-USDC',\n    name: 'TOMO-USDC LP',\n    coin: { ...TOKENS.TOMO },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'CHyUpQFeW456zcr5XEh4RZiibH8Dzocs6Wbgz9aWpXnQ',\n    decimals: TOKENS.TOMO.decimals\n  },\n  'LINK-USDC-V4': {\n    symbol: 'LINK-USDC',\n    name: 'LINK-USDC LP',\n    coin: { ...TOKENS.LINK },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'BqjoYjqKrXtfBKXeaWeAT5sYCy7wsAYf3XjgDWsHSBRs',\n    decimals: TOKENS.LINK.decimals\n  },\n  'ETH-USDC-V4': {\n    symbol: 'ETH-USDC',\n    name: 'ETH-USDC LP',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '13PoKid6cZop4sj2GfoBeujnGfthUbTERdE5tpLCDLEY',\n    decimals: TOKENS.ETH.decimals\n  },\n  'xCOPE-USDC-V4': {\n    symbol: 'xCOPE-USDC',\n    name: 'xCOPE-USDC LP',\n    coin: { ...TOKENS.xCOPE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2Vyyeuyd15Gp8aH6uKE72c4hxc8TVSLibxDP9vzspQWG',\n    decimals: TOKENS.xCOPE.decimals\n  },\n  'SOL-USDT-V4': {\n    symbol: 'SOL-USDT',\n    name: 'SOL-USDT LP',\n    coin: { ...NATIVE_SOL },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'Epm4KfTj4DMrvqn6Bwg2Tr2N8vhQuNbuK8bESFp4k33K',\n    decimals: NATIVE_SOL.decimals\n  },\n  'YFI-USDT-V4': {\n    symbol: 'YFI-USDT',\n    name: 'YFI-USDT LP',\n    coin: { ...TOKENS.YFI },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'FA1i7fej1pAbQbnY8NbyYUsTrWcasTyipKreDgy1Mgku',\n    decimals: TOKENS.YFI.decimals\n  },\n  'SRM-USDT-V4': {\n    symbol: 'SRM-USDT',\n    name: 'SRM-USDT LP',\n    coin: { ...TOKENS.SRM },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'HYSAu42BFejBS77jZAZdNAWa3iVcbSRJSzp3wtqCbWwv',\n    decimals: TOKENS.SRM.decimals\n  },\n  'FTT-USDT-V4': {\n    symbol: 'FTT-USDT',\n    name: 'FTT-USDT LP',\n    coin: { ...TOKENS.FTT },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: '2cTCiUnect5Lap2sk19xLby7aajNDYseFhC9Pigou11z',\n    decimals: TOKENS.FTT.decimals\n  },\n  'BTC-USDT-V4': {\n    symbol: 'BTC-USDT',\n    name: 'BTC-USDT LP',\n    coin: { ...TOKENS.BTC },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'DgGuvR9GSHimopo3Gc7gfkbKamLKrdyzWkq5yqA6LqYS',\n    decimals: TOKENS.BTC.decimals\n  },\n  'SUSHI-USDT-V4': {\n    symbol: 'SUSHI-USDT',\n    name: 'SUSHI-USDT LP',\n    coin: { ...TOKENS.SUSHI },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'Ba26poEYDy6P2o95AJUsewXgZ8DM9BCsmnU9hmC9i4Ki',\n    decimals: TOKENS.SUSHI.decimals\n  },\n  'TOMO-USDT-V4': {\n    symbol: 'TOMO-USDT',\n    name: 'TOMO-USDT LP',\n    coin: { ...TOKENS.TOMO },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'D3iGro1vn6PWJXo9QAPj3dfta6dKkHHnmiiym2EfsAmi',\n    decimals: TOKENS.TOMO.decimals\n  },\n  'LINK-USDT-V4': {\n    symbol: 'LINK-USDT',\n    name: 'LINK-USDT LP',\n    coin: { ...TOKENS.LINK },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'Dr12Sgt9gkY8WU5tRkgZf1TkVWJbvjYuPAhR3aDCwiiX',\n    decimals: TOKENS.LINK.decimals\n  },\n  'ETH-USDT-V4': {\n    symbol: 'ETH-USDT',\n    name: 'ETH-USDT LP',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.USDT },\n\n    mintAddress: 'nPrB78ETY8661fUgohpuVusNCZnedYCgghzRJzxWnVb',\n    decimals: TOKENS.ETH.decimals\n  },\n  'YFI-SRM-V4': {\n    symbol: 'YFI-SRM',\n    name: 'YFI-SRM LP',\n    coin: { ...TOKENS.YFI },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'EGJht91R7dKpCj8wzALkjmNdUUUcQgodqWCYweyKcRcV',\n    decimals: TOKENS.YFI.decimals\n  },\n  'FTT-SRM-V4': {\n    symbol: 'FTT-SRM',\n    name: 'FTT-SRM LP',\n    coin: { ...TOKENS.FTT },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'AsDuPg9MgPtt3jfoyctUCUgsvwqAN6RZPftqoeiPDefM',\n    decimals: TOKENS.FTT.decimals\n  },\n  'BTC-SRM-V4': {\n    symbol: 'BTC-SRM',\n    name: 'BTC-SRM LP',\n    coin: { ...TOKENS.BTC },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'AGHQxXb3GSzeiLTcLtXMS2D5GGDZxsB2fZYZxSB5weqB',\n    decimals: TOKENS.BTC.decimals\n  },\n  'SUSHI-SRM-V4': {\n    symbol: 'SUSHI-SRM',\n    name: 'SUSHI-SRM LP',\n    coin: { ...TOKENS.SUSHI },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: '3HYhUnUdV67j1vn8fu7ExuVGy5dJozHEyWvqEstDbWwE',\n    decimals: TOKENS.SUSHI.decimals\n  },\n  'TOMO-SRM-V4': {\n    symbol: 'TOMO-SRM',\n    name: 'TOMO-SRM LP',\n    coin: { ...TOKENS.TOMO },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'GgH9RnKrQpaMQeqmdbMvs5oo1A24hERQ9wuY2pSkeG7x',\n    decimals: TOKENS.TOMO.decimals\n  },\n  'LINK-SRM-V4': {\n    symbol: 'LINK-SRM',\n    name: 'LINK-SRM LP',\n    coin: { ...TOKENS.LINK },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: 'GXN6yJv12o18skTmJXaeFXZVY1iqR18CHsmCT8VVCmDD',\n    decimals: TOKENS.LINK.decimals\n  },\n  'ETH-SRM-V4': {\n    symbol: 'ETH-SRM',\n    name: 'ETH-SRM LP',\n    coin: { ...TOKENS.ETH },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: '9VoY3VERETuc2FoadMSYYizF26mJinY514ZpEzkHMtwG',\n    decimals: TOKENS.ETH.decimals\n  },\n  'SRM-SOL-V4': {\n    symbol: 'SRM-SOL',\n    name: 'SRM-SOL LP',\n    coin: { ...TOKENS.SRM },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: 'AKJHspCwDhABucCxNLXUSfEzb7Ny62RqFtC9uNjJi4fq',\n    decimals: TOKENS.SRM.decimals\n  },\n  'STEP-USDC-V4': {\n    symbol: 'STEP-USDC',\n    name: 'STEP-USDC LP',\n    coin: { ...TOKENS.STEP },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '3k8BDobgihmk72jVmXYLE168bxxQUhqqyESW4dQVktqC',\n    decimals: TOKENS.STEP.decimals\n  },\n  'MEDIA-USDC-V4': {\n    symbol: 'MEDIA-USDC',\n    name: 'MEDIA-USDC LP',\n    coin: { ...TOKENS.MEDIA },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'A5zanvgtioZGiJMdEyaKN4XQmJsp1p7uVxaq2696REvQ',\n    decimals: TOKENS.MEDIA.decimals\n  },\n  'ROPE-USDC-V4': {\n    symbol: 'ROPE-USDC',\n    name: 'ROPE-USDC LP',\n    coin: { ...TOKENS.ROPE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'Cq4HyW5xia37tKejPF2XfZeXQoPYW6KfbPvxvw5eRoUE',\n    decimals: TOKENS.ROPE.decimals\n  },\n  'MER-USDC-V4': {\n    symbol: 'MER-USDC',\n    name: 'MER-USDC LP',\n    coin: { ...TOKENS.MER },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '3H9NxvaZoxMZZDZcbBDdWMKbrfNj7PCF5sbRwDr7SdDW',\n    decimals: TOKENS.MER.decimals\n  },\n  'COPE-USDC-V4': {\n    symbol: 'COPE-USDC',\n    name: 'COPE-USDC LP',\n    coin: { ...TOKENS.COPE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'Cz1kUvHw98imKkrqqu95GQB9h1frY8RikxPojMwWKGXf',\n    decimals: TOKENS.COPE.decimals\n  },\n  'ALEPH-USDC-V4': {\n    symbol: 'ALEPH-USDC',\n    name: 'ALEPH-USDC LP',\n    coin: { ...TOKENS.ALEPH },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'iUDasAP2nXm5wvTukAHEKSdSXn8vQkRtaiShs9ceGB7',\n    decimals: TOKENS.ALEPH.decimals\n  },\n  'TULIP-USDC-V4': {\n    symbol: 'TULIP-USDC',\n    name: 'TULIP-USDC LP',\n    coin: { ...TOKENS.TULIP },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2doeZGLJyACtaG9DCUyqMLtswesfje1hjNA11hMdj6YU',\n    decimals: TOKENS.TULIP.decimals\n  },\n  'WOO-USDC-V4': {\n    symbol: 'WOO-USDC',\n    name: 'WOO-USDC LP',\n    coin: { ...TOKENS.WOO },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '7cu42ao8Jgrd5A3y3bNQsCxq5poyGZNmTydkGfJYQfzh',\n    decimals: TOKENS.WOO.decimals\n  },\n  'SNY-USDC-V4': {\n    symbol: 'SNY-USDC',\n    name: 'SNY-USDC LP',\n    coin: { ...TOKENS.SNY },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'G8qcfeFqxwbCqpxv5LpLWxUCd1PyMB5nWb5e5YyxLMKg',\n    decimals: TOKENS.SNY.decimals\n  },\n  'BOP-RAY-V4': {\n    symbol: 'BOP-RAY',\n    name: 'BOP-RAY LP',\n    coin: { ...TOKENS.BOP },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '9nQPYJvysyfnXhQ6nkK5V7sZG26hmDgusfdNQijRk5LD',\n    decimals: TOKENS.BOP.decimals\n  },\n  'SLRS-USDC-V4': {\n    symbol: 'SLRS-USDC',\n    name: 'SLRS-USDC LP',\n    coin: { ...TOKENS.SLRS },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2Xxbm1hdv5wPeen5ponDSMT3VqhGMTQ7mH9stNXm9shU',\n    decimals: TOKENS.SLRS.decimals\n  },\n  'SAMO-RAY-V4': {\n    symbol: 'SAMO-RAY',\n    name: 'SAMO-RAY LP',\n    coin: { ...TOKENS.SAMO },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'HwzkXyX8B45LsaHXwY8su92NoRBS5GQC32HzjQRDqPnr',\n    decimals: TOKENS.SAMO.decimals\n  },\n  'renBTC-USDC-V4': {\n    symbol: 'renBTC-USDC',\n    name: 'renBTC-USDC LP',\n    coin: { ...TOKENS.renBTC },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'CTEpsih91ZLo5gunvryLpJ3pzMjmt5jbS6AnSQrzYw7V',\n    decimals: TOKENS.renBTC.decimals\n  },\n  'renDOGE-USDC-V4': {\n    symbol: 'renDOGE-USDC',\n    name: 'renDOGE-USDC LP',\n    coin: { ...TOKENS.renDOGE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'Hb8KnZNKvRxu7pgMRWJgoMSMcepfvNiBFFDDrdf9o3wA',\n    decimals: TOKENS.renDOGE.decimals\n  },\n  'RAY-USDC-V4': {\n    symbol: 'RAY-USDC',\n    name: 'RAY-USDC LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'FbC6K13MzHvN42bXrtGaWsvZY9fxrackRSZcBGfjPc7m',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SRM-V4': {\n    symbol: 'RAY-SRM',\n    name: 'RAY-SRM LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.SRM },\n\n    mintAddress: '7P5Thr9Egi2rvMmEuQkLn8x8e8Qro7u2U7yLD2tU2Hbe',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-ETH-V4': {\n    symbol: 'RAY-ETH',\n    name: 'RAY-ETH LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...TOKENS.ETH },\n\n    mintAddress: 'mjQH33MqZv5aKAbKHi8dG3g3qXeRQqq1GFcXceZkNSr',\n    decimals: TOKENS.RAY.decimals\n  },\n  'RAY-SOL-V4': {\n    symbol: 'RAY-SOL',\n    name: 'RAY-SOL LP',\n    coin: { ...TOKENS.RAY },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: '89ZKE4aoyfLBe2RuV6jM3JGNhaV18Nxh8eNtjRcndBip',\n    decimals: TOKENS.RAY.decimals\n  },\n  'DXL-USDC-V4': {\n    symbol: 'DXL-USDC',\n    name: 'DXL-USDC LP',\n    coin: { ...TOKENS.DXL },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '4HFaSvfgskipvrzT1exoVKsUZ174JyExEsA8bDfsAdY5',\n    decimals: TOKENS.DXL.decimals\n  },\n  'LIKE-USDC-V4': {\n    symbol: 'LIKE-USDC',\n    name: 'LIKE-USDC LP',\n    coin: { ...TOKENS.LIKE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'cjZmbt8sJgaoyWYUttomAu5LJYU44ZrcKTbzTSEPDVw',\n    decimals: TOKENS.LIKE.decimals\n  },\n  'mSOL-USDC-V4': {\n    symbol: 'mSOL-USDC',\n    name: 'mSOL-USDC LP',\n    coin: { ...TOKENS.mSOL },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '4xTpJ4p76bAeggXoYywpCCNKfJspbuRzZ79R7pRhbqSf',\n    decimals: TOKENS.MSOL.decimals\n  },\n  'mSOL-SOL-V4': {\n    symbol: 'mSOL-SOL',\n    name: 'mSOL-SOL LP',\n    coin: { ...TOKENS.mSOL },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: '5ijRoAHVgd5T5CNtK5KDRUBZ7Bffb69nktMj5n6ks6m4',\n    decimals: TOKENS.MSOL.decimals\n  },\n  'MER-PAI-V4': {\n    symbol: 'MER-PAI',\n    name: 'MER-PAI LP',\n    coin: { ...TOKENS.MER },\n    pc: { ...TOKENS.PAI },\n\n    mintAddress: 'DU5RT2D9EviaSmX6Ta8MZwMm85HwSEqGMRdqUiuCGfmD',\n    decimals: TOKENS.MER.decimals\n  },\n  'PORT-USDC-V4': {\n    symbol: 'PORT-USDC',\n    name: 'PORT-USDC LP',\n    coin: { ...TOKENS.PORT },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '9tmNtbUCrLS15qC4tEfr5NNeqcqpZ4uiGgi2vS5CLQBS',\n    decimals: TOKENS.PORT.decimals\n  },\n  'MNGO-USDC-V4': {\n    symbol: 'MNGO-USDC',\n    name: 'MNGO-USDC LP',\n    coin: { ...TOKENS.MNGO },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'DkiqCQ792n743xjWQVCbBUaVtkdiuvQeYndM53ReWnCC',\n    decimals: TOKENS.MNGO.decimals\n  },\n  'ATLAS-USDC-V4': {\n    symbol: 'ATLAS-USDC',\n    name: 'ATLAS-USDC LP',\n    coin: { ...TOKENS.ATLAS },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '9shGU9f1EsxAbiR567MYZ78WUiS6ZNCYbHe53WUULQ7n',\n    decimals: TOKENS.ATLAS.decimals\n  },\n  'POLIS-USDC-V4': {\n    symbol: 'POLIS-USDC',\n    name: 'POLIS-USDC LP',\n    coin: { ...TOKENS.POLIS },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '8MbKSBpyXs8fVneKgt71jfHrn5SWtX8n4wMLpiVfF9So',\n    decimals: TOKENS.POLIS.decimals\n  },\n  'ATLAS-RAY-V4': {\n    symbol: 'ATLAS-RAY',\n    name: 'ATLAS-RAY LP',\n    coin: { ...TOKENS.ATLAS },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '418MFhkaYQtbn529wmjLLqL6uKxDz7j4eZBaV1cobkyd',\n    decimals: TOKENS.ATLAS.decimals\n  },\n  'POLIS-RAY-V4': {\n    symbol: 'POLIS-RAY',\n    name: 'POLIS-RAY LP',\n    coin: { ...TOKENS.POLIS },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '9ysGKUH6WqzjQEUT4dxqYCUaFNVK9QFEa24pGzjFq8xg',\n    decimals: TOKENS.POLIS.decimals\n  },\n  'ALEPH-RAY-V4': {\n    symbol: 'ALEPH-RAY',\n    name: 'ALEPH-RAY LP',\n    coin: { ...TOKENS.ALEPH },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'n76skjqv4LirhdLok2zJELXNLdRpYDgVJQuQFbamscy',\n    decimals: TOKENS.ALEPH.decimals\n  },\n  'TULIP-RAY-V4': {\n    symbol: 'TULIP-RAY',\n    name: 'TULIP-RAY LP',\n    coin: { ...TOKENS.TULIP },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '3AZTviji5qduMG2s4FfWGR3SSQmNUCyx8ao6UKCPg3oJ',\n    decimals: TOKENS.TULIP.decimals\n  },\n  'SLRS-RAY-V4': {\n    symbol: 'SLRS-RAY',\n    name: 'SLRS-RAY LP',\n    coin: { ...TOKENS.SLRS },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '2pk78vsKT3jfJAcN2zbpMUnrR57SZrxHqaZYyFgp92mM',\n    decimals: TOKENS.SLRS.decimals\n  },\n  'MER-RAY-V4': {\n    symbol: 'MER-RAY',\n    name: 'MER-RAY LP',\n    coin: { ...TOKENS.MER },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '214hxy3AbKoaEKgqcg2aC1cP5R67cGGAyDEg5GDwC7Ub',\n    decimals: TOKENS.MER.decimals\n  },\n  'MEDIA-RAY-V4': {\n    symbol: 'MEDIA-RAY',\n    name: 'MEDIA-RAY LP',\n    coin: { ...TOKENS.MEDIA },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '9Aseg5A1JD1yCiFFdDaNNxCiJ7XzrpZFmcEmLjXFdPaH',\n    decimals: TOKENS.MEDIA.decimals\n  },\n  'SNY-RAY-V4': {\n    symbol: 'SNY-RAY',\n    name: 'SNY-RAY LP',\n    coin: { ...TOKENS.SNY },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '2k4quTuuLUxrSEhFH99qcoZzvgvVEc3b5sz3xz3qstfS',\n    decimals: TOKENS.SNY.decimals\n  },\n  'LIKE-RAY-V4': {\n    symbol: 'LIKE-RAY',\n    name: 'LIKE-RAY LP',\n    coin: { ...TOKENS.LIKE },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: '7xqDycbFSCpUpzkYapFeyPJWPwEpV7zdWbYf2MVHTNjv',\n    decimals: TOKENS.LIKE.decimals\n  },\n  'COPE-RAY-V4': {\n    symbol: 'COPE-RAY',\n    name: 'COPE-RAY LP',\n    coin: { ...TOKENS.COPE },\n    pc: { ...TOKENS.RAY },\n\n    mintAddress: 'A7GCVHA8NSsbdFscHdoNU41tL1TRKNmCH4K94CgcLK9F',\n    decimals: TOKENS.COPE.decimals\n  },\n  'ETH-SOL-V4': {\n    symbol: 'ETH-SOL',\n    name: 'ETH-SOL LP',\n    coin: { ...TOKENS.ETH },\n    pc: { ...NATIVE_SOL },\n\n    mintAddress: 'GKfgC86iJoMjwAtcyiLu6nWnjggqUXsDQihXkP14fDez',\n    decimals: TOKENS.ETH.decimals\n  },\n  'stSOL-USDC-V4': {\n    symbol: 'stSOL-USDC',\n    name: 'stSOL-USDC LP',\n    coin: { ...TOKENS.stSOL },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'HDUJMwYZkjUZre63xUeDhdCi8c6LgUDiBqxmP3QC3VPX',\n    decimals: TOKENS.stSOL.decimals\n  },\n  'IVN-USDC-V4': {\n    symbol: 'IVN-USDC',\n    name: 'IVN-USDC LP',\n    coin: { ...TOKENS.IVN },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '62K4P3BdZhPjzkF8rjgvX7adZ7j82ijZbG2dg8JEy7BJ',\n    decimals: 6\n  },\n  'CRP-USDC-V4': {\n    symbol: 'CRP-USDC',\n    name: 'CRP-USDC LP',\n    coin: { ...TOKENS.CRP },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '3QZqbuDV7jxa6GUcpSX74wEidJh4Ve68EQQuVz8bRTm2',\n    decimals: TOKENS.CRP.decimals\n  },\n  'GRAPE-USDC-V4': {\n    symbol: 'GRAPE-USDC',\n    name: 'GRAPE-USDC LP',\n    coin: { ...TOKENS.GRAPE },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: 'A8ZYmnZ1vwxUa4wpJVUaJgegsuTEz5TKy5CiJXffvmpt',\n    decimals: TOKENS.GRAPE.decimals\n  },\n}\n\nexport const TEST_LP_TOKENS = {\n  'SRM-USDC': {\n    symbol: 'SRM-USDC',\n    name: 'SRM-USDC LP',\n    coin: { ...TOKENS.SRM },\n    pc: { ...TOKENS.USDC },\n\n    mintAddress: '2TZ3EP7RTNPwN7sRCraEKhwym9zzPQ64hPcCUMueZ6pA',\n    decimals: TOKENS.USDC.decimals\n  },\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/MangoLayout.js",["359"],"import { bits, BitStructure, Blob, Layout, seq, struct, u32, u8, u16, UInt, union } from 'buffer-layout';\nimport { PublicKey } from '@solana/web3.js';\nimport BN from 'bn.js';\n\nexport const NUM_TOKENS = 5;\nexport const NUM_MARKETS = NUM_TOKENS - 1;\nexport const MANGO_GROUP_PADDING = 8 - (NUM_TOKENS + NUM_MARKETS) % 8;\nexport const MAX_RATE = 3.0\nexport const OPTIMAL_UTIL = 0.7\nexport const OPTIMAL_RATE = 0.2\nexport const INFO_LEN = 32\n\nclass PublicKeyLayout extends Blob {\n  constructor(property) {\n    super(32, property);\n  }\n\n  decode(b, offset) {\n    return new PublicKey(super.decode(b, offset));\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toBuffer(), b, offset);\n  }\n}\n\nexport function publicKeyLayout(property = \"\") {\n  return new PublicKeyLayout(property);\n}\n\nclass BNLayout extends Blob {\n  constructor(number, property) {\n    super(number, property);\n    // restore prototype chain\n    Object.setPrototypeOf(this, new.target.prototype)\n  }\n\n  decode(b, offset) {\n    return new BN(super.decode(b, offset), 10, 'le');\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nexport function u64(property = \"\") {\n  return new BNLayout(8, property);\n}\n\nexport function u128(property = \"\") {\n  return new BNLayout(16, property);\n}\n\nexport function i128(property = \"\") {\n  return new BNLayout(16, property, true);\n}\n\n\nclass U64F64Layout extends Blob {\n  constructor(property) {\n    super(16, property);\n  }\n\n  decode(b, offset) {\n    const raw = new BN(super.decode(b, offset), 10, 'le');\n\n    // @ts-ignore\n    return raw / Math.pow(2, 64);\n  }\n\n  encode(src, b, offset) {\n    return super.encode(src.toArrayLike(Buffer, 'le', this['span']), b, offset);\n  }\n}\n\nexport function U64F64(property = \"\") {\n  return new U64F64Layout(property)\n}\n\nexport class WideBits extends Layout {\n  _lower;\n  _upper;\n\n  constructor(property) {\n    super(8, property);\n    this._lower = bits(u32(), false);\n    this._upper = bits(u32(), false);\n  }\n\n  addBoolean(property) {\n    if (this._lower.fields.length < 32) {\n      this._lower.addBoolean(property);\n    } else {\n      this._upper.addBoolean(property);\n    }\n  }\n\n  decode(b, offset = 0) {\n    const lowerDecoded = this._lower.decode(b, offset);\n    const upperDecoded = this._upper.decode(b, offset + this._lower.span);\n    return { ...lowerDecoded, ...upperDecoded };\n  }\n\n  replicate(property) {\n    return super.replicate(property);\n  }\n  encode(src, b, offset = 0) {\n    return (\n      this._lower.encode(src, b, offset) +\n      this._upper.encode(src, b, offset + this._lower.span)\n    );\n  }\n}\nconst ACCOUNT_FLAGS_LAYOUT = new WideBits(undefined);\nACCOUNT_FLAGS_LAYOUT.addBoolean('Initialized');\nACCOUNT_FLAGS_LAYOUT.addBoolean('MangoGroup');\nACCOUNT_FLAGS_LAYOUT.addBoolean('MarginAccount');\nACCOUNT_FLAGS_LAYOUT.addBoolean('MangoSrmAccount');\n\nexport function accountFlagsLayout(property = 'accountFlags') {\n  return ACCOUNT_FLAGS_LAYOUT.replicate(property);  // TODO: when ts check is on, replicate throws error, doesn't compile\n}\n\nexport const MangoIndexLayout = struct([\n  u64('lastUpdate'),\n  U64F64('borrow'), // U64F64\n  U64F64('deposit')  // U64F64\n]);\n\nexport const MangoGroupLayout = struct([\n  accountFlagsLayout('accountFlags'),\n  seq(publicKeyLayout(), NUM_TOKENS, 'tokens'),\n  seq(publicKeyLayout(), NUM_TOKENS, 'vaults'),\n  seq(MangoIndexLayout.replicate(), NUM_TOKENS, 'indexes'),\n  seq(publicKeyLayout(), NUM_MARKETS, 'spotMarkets'),\n  seq(publicKeyLayout(), NUM_MARKETS, 'oracles'),\n\n  u64('signerNonce'),\n  publicKeyLayout('signerKey'),\n  publicKeyLayout('dexProgramId'),\n  seq(U64F64(), NUM_TOKENS, 'totalDeposits'),\n  seq(U64F64(), NUM_TOKENS, 'totalBorrows'),\n  U64F64('maintCollRatio'),\n  U64F64('initCollRatio'),\n  publicKeyLayout('srmVault'),\n  publicKeyLayout('admin'),\n  seq(u64(), NUM_TOKENS, 'borrowLimits'),\n  seq(u8(), NUM_TOKENS, 'mintDecimals'),\n  seq(u8(), NUM_MARKETS, 'oracleDecimals'),\n  seq(u8(), MANGO_GROUP_PADDING, 'padding')\n]);\n\n\nexport const MarginAccountLayout = struct([\n  accountFlagsLayout('accountFlags'),\n  publicKeyLayout('mangoGroup'),\n  publicKeyLayout('owner'),\n\n  seq(U64F64(), NUM_TOKENS, 'deposits'),\n  seq(U64F64(), NUM_TOKENS, 'borrows'),\n  seq(publicKeyLayout(), NUM_MARKETS, 'openOrders'),\n  u8('beingLiquidated'),\n  u8('hasBorrows'),\n  seq(u8(), 32, 'info'),\n  seq(u8(), 38, 'padding')\n]);\n\nexport const MangoSrmAccountLayout = struct([\n  accountFlagsLayout('accountFlags'),\n  publicKeyLayout('mangoGroup'),\n  publicKeyLayout('owner'),\n  u64('amount')\n]);\n\nexport const AccountLayout = struct([\n  publicKeyLayout('mint'),\n  publicKeyLayout('owner'),\n  u64('amount'),\n  u32('delegateOption'),\n  publicKeyLayout('delegate'),\n  u8('state'),\n  u32('isNativeOption'),\n  u64('isNative'),\n  u64('delegatedAmount'),\n  u32('closeAuthorityOption'),\n  publicKeyLayout('closeAuthority')\n]);\n\nclass EnumLayout extends UInt {\n  values;\n  constructor(values, span, property) {\n    super(span, property);\n    this.values = values\n  }\n  encode(src, b, offset) {\n    if (this.values[src] !== undefined) {\n      return super.encode(this.values[src], b, offset);\n    }\n    throw new Error('Invalid ' + this['property']);\n  }\n\n  decode(b, offset) {\n    const decodedValue = super.decode(b, offset);\n    const entry = Object.entries(this.values).find(\n      ([, value]) => value === decodedValue,\n    );\n    if (entry) {\n      return entry[0];\n    }\n    throw new Error('Invalid ' + this['property']);\n  }\n}\n\nexport function sideLayout(property) {\n  return new EnumLayout({ buy: 0, sell: 1 }, 4, property);\n}\n\nexport function orderTypeLayout(property) {\n  return new EnumLayout({ limit: 0, ioc: 1, postOnly: 2 }, 4, property);\n}\n\nexport function selfTradeBehaviorLayout(property) {\n  return new EnumLayout({ decrementTake: 0, cancelProvide: 1, abortTransaction: 2 }, 4, property);\n}\n\nexport const MangoInstructionLayout = union(u32('instruction'))\n\nMangoInstructionLayout.addVariant(0, struct([]), 'InitMangoGroup')  // TODO this is unimplemented\n\nMangoInstructionLayout.addVariant(1, struct([]), 'InitMarginAccount')\nMangoInstructionLayout.addVariant(2, struct([u64('quantity')]), 'Deposit')\nMangoInstructionLayout.addVariant(3, struct([u64('quantity')]), 'Withdraw')\nMangoInstructionLayout.addVariant(4, struct([u64('tokenIndex'), u64('quantity')]), 'Borrow')\nMangoInstructionLayout.addVariant(5, struct([u64('tokenIndex'), u64('quantity')]), 'SettleBorrow')\nMangoInstructionLayout.addVariant(6, struct([seq(u64(), NUM_TOKENS, 'depositQuantities')]), 'Liquidate')\nMangoInstructionLayout.addVariant(7, struct([u64('quantity')]), 'DepositSrm')\nMangoInstructionLayout.addVariant(8, struct([u64('quantity')]), 'WithdrawSrm')\n\nMangoInstructionLayout.addVariant(9,\n  struct(\n    [\n      sideLayout('side'),\n      u64('limitPrice'),\n      u64('maxBaseQuantity'),\n      u64('maxQuoteQuantity'),\n      selfTradeBehaviorLayout('selfTradeBehavior'),\n      orderTypeLayout('orderType'),\n      u64('clientId'),\n      u16('limit'),\n    ]\n  ),\n  'PlaceOrder'\n)\n\nMangoInstructionLayout.addVariant(10, struct([]), 'SettleFunds')\nMangoInstructionLayout.addVariant(11,\n  struct(\n    [\n      sideLayout('side'),\n      u128('orderId')\n    ]\n  ),\n  'CancelOrder'\n)\n\nMangoInstructionLayout.addVariant(12, struct([u64('clientId')]), 'CancelOrderByClientId')\nMangoInstructionLayout.addVariant(13, struct([u64('tokenIndex'), u64('borrowLimit')]), 'ChangeBorrowLimit')\nMangoInstructionLayout.addVariant(14,\n  struct(\n    [\n      sideLayout('side'),\n      u64('limitPrice'),\n      u64('maxBaseQuantity'),\n      u64('maxQuoteQuantity'),\n      selfTradeBehaviorLayout('selfTradeBehavior'),\n      orderTypeLayout('orderType'),\n      u64('clientId'),\n      u16('limit'),\n    ]\n  ),\n  'PlaceAndSettle'\n)\nMangoInstructionLayout.addVariant(15, struct([u8('limit')]), 'ForceCancelOrders')\nMangoInstructionLayout.addVariant(16, struct([u64('maxDeposit')]), 'PartialLiquidate')\nMangoInstructionLayout.addVariant(17, struct([seq(u8(), INFO_LEN, 'info')]), 'AddMarginAccountInfo')\n// @ts-ignore\nconst instructionMaxSpan = Math.max(...Object.values(MangoInstructionLayout.registry).map((r) => r.span));\nexport function encodeMangoInstruction(data) {\n  const b = Buffer.alloc(instructionMaxSpan);\n  const span = MangoInstructionLayout.encode(data, b);\n  return b.slice(0, span);\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/mango.js",["360","361","362","363","364","365","366","367","368","369","370","371","372","373","374","375","376","377","378","379","380","381","382","383","384","385"],"import {\n    getFeeRates,\n    getFeeTier,\n    Market,\n    OpenOrders,\n  } from '@project-serum/serum'\nimport { programId, TOKEN_PROGRAM_ID , MANGO_PROGRAM_ID, SERUM_PROGRAM_ID_V3, MANGO_GROUP_ACCOUNT, priceStateAccount, CLOCK_PROGRAM_ID, idsIndex} from '../utils/constants';\nimport { nu64, struct, u8, u32, u16 } from 'buffer-layout';\nimport BN from 'bn.js';\n\nimport {\n  IDS,\n  MangoClient,\n  nativeToUi,\n  uiToNative,\n  zeroKey,\n  NUM_MARKETS,\n  NUM_TOKENS,\n  NodeBankLayout,\n} from '@blockworks-foundation/mango-client'\n\n\nimport {\n    PublicKey,\n    SYSVAR_CLOCK_PUBKEY,\n    SYSVAR_RENT_PUBKEY,\n    TransactionInstruction,\n  } from '@solana/web3.js'\n\nimport { createKeyIfNotExists, findAssociatedTokenAddress } from './web3';\nimport { INVESTOR_DATA } from '../utils/programLayouts';\nimport { TOKENS } from './tokens';\n\nconst ids= IDS['groups'][idsIndex];\n\nexport const calculateMarketPrice = (\n  orderBook,\n  size,\n  side\n) => {\n  let acc = 0\n  let selectedOrder\n  for (const order of orderBook) {\n    acc += order.size\n    if (acc >= size) {\n      selectedOrder = order\n      break\n    }\n  }\n\n  if (side === 'buy') {\n    return selectedOrder.price * 1.05\n  } else {\n    return selectedOrder.price * 0.95\n  }\n}\n\nexport async function mangoOpenPosition(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n  investor,\n  seed\n) {\n  \n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n  console.log(\"serum market pk:: \", serumMarket)\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  \n  const client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n  let mangoGroup = await client.getMangoGroup(connection, ids.publicKey)\n  console.log(\"mango group::\", mangoGroup)\n  \n  let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n  let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n  console.log(\"USDC nodebank:: \", nodeBank)\n\n  const MANGO_VAULT_ACCOUNT_USDC = nodeBank.vault.toBase58();\n\n  console.log(\"margin acc::\", marginAccount)\n  // let mango_prices = await mangoGroup.getPrices(connection)\n\n  console.log(\"collateral ratio:: \", await marginAccount.getCollateralRatio(mangoGroup, await mangoGroup.getPrices(connection)))\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup))\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup))\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  else {\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", price)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  const placeAmount = size * 10**mangoGroup.mintDecimals[marketIndex];\n\n  console.log('place amount: ', placeAmount)\n\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n  console.log(\"dex signer:: \", dexSigner.toBase58())\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n  // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        seed + marketIndex.toString(),\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(TOKENS['USDC'].mintAddress));\n  const dlout = struct([u8('instruction'), nu64('quantity')])\n      const data = Buffer.alloc(dlout.span)\n      dlout.encode(\n        {\n          instruction: 9,\n          quantity: maxQuoteQuantity / (side == 'buy' ? 2 : 1)\n        },\n        data\n      )\n      let instruction = new TransactionInstruction({\n        keys: [\n          { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n          { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n          { isSigner: false, isWritable: true, pubkey: fundPDA },\n          { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n          { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n          { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n          {pubkey: fundBaseTokenAccount, isSigner: false, isWritable:true},\n          {pubkey: MANGO_VAULT_ACCOUNT_USDC, isSigner: false, isWritable:true},\n            \n          {pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable:true},\n          {pubkey: CLOCK_PROGRAM_ID, isSigner: false, isWritable:true},\n        ],\n      programId,\n      data\n      });\n    transaction.add(instruction)\n\n  let keys1 = [\n      { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n      { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n      { isSigner: false, isWritable: true, pubkey: fundPDA },\n      { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n      { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n      //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n      { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n      { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n      { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n      { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].requestQueue,\n      },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].eventQueue,\n      },\n      { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n      { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n      },\n      { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].baseVault,\n      },\n      {\n        isSigner: false,\n        isWritable: true,\n        pubkey: spotMarket['_decoded'].quoteVault,\n      },\n      { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n      { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n      { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n      //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n      ...openOrdersKeys.map((pubkey) => ({\n        isSigner: false,\n        isWritable: true,\n        pubkey,\n      })),\n      ...mangoGroup.oracles.map((pubkey) => ({\n        isSigner: false,\n        isWritable: false,\n        pubkey,\n      })),\n    ]\n\n  const dataLay = struct([\n      u8('instruction'),\n      u8('side'),\n      nu64('price'),\n      nu64('trade_size')\n  ])\n  const da = Buffer.alloc(dataLay.span)\n  dataLay.encode(\n      {\n        instruction: 10,\n        side: (side == 'buy') ? 0 : 1,\n        price: limitPrice,\n        trade_size: placeAmount\n      },\n      da\n  )\n\n  const placeAndSettleInstruction = new TransactionInstruction({\n    keys: keys1,\n    data: da,\n    programId: programId,\n  })\n  transaction.add(placeAndSettleInstruction)\n\n  // const baseTokenIndex = marketIndex;\n  // const quoteTokenIndex = NUM_TOKENS - 1;\n  // const tokenIndex = side === 'buy' ? baseTokenIndex : quoteTokenIndex;\n  // const quantity = marginAccount.getUiBorrow(mangoGroup, tokenIndex);\n  // const nativeQuantity = uiToNative(quantity, mangoGroup.mintDecimals[tokenIndex]);\n\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 11,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n transaction.add(SettleInstruction)\n}\n\nexport async function mangoClosePosition(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n  investor_accs,\n  seed\n) {\n\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n\n  const client = new MangoClient()\n\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT)\n  console.log(\"mango group::\", mangoGroup)\n\n  console.log(\"assets:: \", await marginAccount.getAssets(mangoGroup))\n  console.log(\"assetsVAl:: \", await marginAccount.getAssetsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"liabs:: \", await marginAccount.getLiabs(mangoGroup))\n  console.log(\"liabsVAl:: \", await marginAccount.getLiabsVal(mangoGroup, await mangoGroup.getPrices(connection)))\n\n  console.log(\"margin acc::\", marginAccount)\n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  else {\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", limitPrice)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity)\n  const depositAmount = depositQuantity * 10**ids.tokens[0].decimals\n  const placeAmount = size * 10**ids.tokens[2].decimals\n\n  console.log('deposit qty::', depositQuantity.toString())\n\n  console.log('deposit amount::', depositAmount)\n  console.log('place amoutn: ', placeAmount)\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n  // const accInstr = await createKeyIfNotExists(\n  //   wallet,\n  //   \"\",\n  //   mangoGroup.dexProgramId,\n  //   \"seed\",\n  //   openOrdersSpace,\n  //   transaction\n  // )\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n  // openOrdersKeys.push(accInstr)\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n\n      console.log(\"open orders :: \", marginAccount.openOrders[marketIndex])\n      console.log(\"market index:: \", marketIndex)\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        seed + marketIndex.toString(),\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const fundBaseTokenAccount = await findAssociatedTokenAddress(fundPDA, new PublicKey(ids.tokens[0].mintAddress));\n  let keys1 = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].requestQueue,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].eventQueue,\n    },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n    },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n    //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ]\n\nconst dataLay = struct([\n    u8('instruction'),\n    nu64('price'),\n])\nconst da = Buffer.alloc(dataLay.span)\ndataLay.encode(\n    {\n      instruction: 12,\n      price: limitPrice,\n    },\n    da\n)\n\nconst placeAndSettleInstruction = new TransactionInstruction({\n  keys: keys1,\n  data: da,\n  programId: programId,\n})\ntransaction.add(placeAndSettleInstruction)\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 11,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n  transaction.add(SettleInstruction)\n\n   const withdraw_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n//   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n  { isSigner: false, isWritable: true, pubkey: fundBaseTokenAccount },\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.vaults[NUM_MARKETS] },\n  { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n\n  { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n  { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n \n  ...openOrdersKeys.map((pubkey) => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey,\n  })),\n  ...mangoGroup.oracles.map((pubkey) => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey,\n  })),\n  { isSigner: false, isWritable: true, pubkey: investor_accs },\n  { isSigner: false, isWritable: false, pubkey: PublicKey.default },\n\n]\n\n  const dataL = struct([u8('instruction')])\n      const data2 = Buffer.alloc(dataL.span)\n      dataL.encode(\n        {\n          instruction: 13,\n        },\n        data2\n      )\n      const instr = new TransactionInstruction({\n        keys: withdraw_keys,\n        data: data2,\n        programId: programId,\n      })\n      transaction.add(instr)\n}\n\nexport async function mangoWithdrawInvestor(\n  connection,\n\n  marginAcc,\n  fundStateAccount,\n  invStateAccount,\n  fundPDA,\n  wallet,\n\n  mIndex,\n\n  side,\n  size,\n  clientId,\n  transaction,\n) {\n\n  let serumMarket = new PublicKey(IDS.devnet.mango_groups.BTC_ETH_SOL_SRM_USDC.spot_market_pks[mIndex])\n\n  const client = new MangoClient()\n\n  let marginAccount = await client.getMarginAccount(connection, marginAcc, SERUM_PROGRAM_ID_V3)\n  let mangoGroup = await client.getMangoGroup(connection, MANGO_GROUP_ACCOUNT)\n  console.log(\"mango group::\", mangoGroup)\n\n  console.log(\"margin acc::\", marginAccount)\n  \n\n  let spotMarket = await Market.load(connection, serumMarket, {}, SERUM_PROGRAM_ID_V3)\n  console.log(\"spot market:: \", spotMarket)\n  console.log(\"margin acc:: \", marginAccount)\n\n  let orderType = 'limit'\n  let orderbook\n  if (side === 'buy') {\n    size = marginAccount.getLiabs(mangoGroup)[mIndex]\n    orderbook = await spotMarket.loadBids(connection)\n  }\n  else {\n    size = marginAccount.getAssets(mangoGroup)[mIndex]\n    orderbook = await spotMarket.loadAsks(connection)\n  }\n  console.log(\"orderbook\", orderbook)\n  let price = calculateMarketPrice(orderbook, size, side)\n  console.log(\"price:: \", price)\n  console.log(\"size:: \", size)\n\n\n  const limitPrice = spotMarket.priceNumberToLots(price)\n  const maxBaseQuantity = spotMarket.baseSizeNumberToLots(size)\n\n  console.log(\"price:: \", limitPrice)\n\n  const feeTier = getFeeTier(\n    0,\n    nativeToUi(mangoGroup.nativeSrm || 0, 6)\n  )\n  const rates = getFeeRates(feeTier)\n  console.log(\"rates:: \", rates)\n  const maxQuoteQuantity = new BN(\n    maxBaseQuantity\n      .mul(limitPrice)\n      .mul(spotMarket['_decoded'].quoteLotSize)\n      .toNumber() *\n    (1 + rates.taker)\n  )\n  const depositQuantity = spotMarket.quoteSizeLotsToNumber(maxQuoteQuantity)\n  const depositAmount = depositQuantity * 10**ids.tokens[0].decimals\n  const placeAmount = size * 10**ids.tokens[2].decimals\n\n  console.log('deposit qty::', depositQuantity.toString())\n\n  console.log('deposit amount::', depositAmount)\n  console.log('place amoutn: ', placeAmount)\n\n  console.log(maxBaseQuantity, maxQuoteQuantity.toString())\n\n  if (maxBaseQuantity.lte(new BN(0))) {\n    throw new Error('size too small')\n  }\n  if (limitPrice.lte(new BN(0))) {\n    throw new Error('invalid price')\n  }\n  const selfTradeBehavior = 'decrementTake'\n  const marketIndex = mangoGroup.getMarketIndex(spotMarket)\n  // const vaultIndex = side === 'buy' ? mangoGroup.vaults.length - 1 : marketIndex\n\n\n  // Specify signers in addition to the wallet\n  const signers = []\n\n  const dexSigner = await PublicKey.createProgramAddress(\n    [\n      spotMarket.publicKey.toBuffer(),\n      spotMarket['_decoded'].vaultSignerNonce.toArrayLike(Buffer, 'le', 8),\n    ],\n    spotMarket.programId\n  )\n\n  // Create a Solana account for the open orders account if it's missing\n  const openOrdersKeys = []\n\n  const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n  const openOrdersLamports =\n    await connection.getMinimumBalanceForRentExemption(\n      openOrdersSpace,\n      'singleGossip'\n    )\n\n  for (let i = 0; i < marginAccount.openOrders.length; i++) {\n    if (\n      i === marketIndex &&\n      marginAccount.openOrders[marketIndex].equals(zeroKey)\n    ) {\n      // open orders missing for this market; create a new one now\n      const openOrdersSpace = OpenOrders.getLayout(mangoGroup.dexProgramId).span\n      const openOrdersLamports =\n        await connection.getMinimumBalanceForRentExemption(\n          openOrdersSpace,\n          'singleGossip'\n        )\n      const accInstr = await createKeyIfNotExists(\n        wallet,\n        \"\",\n        mangoGroup.dexProgramId,\n        \"seed2\",\n        openOrdersSpace,\n        transaction\n      )\n      openOrdersKeys.push(accInstr)\n    } else {\n      openOrdersKeys.push(marginAccount.openOrders[i])\n    }\n  }\n  const invBaseTokenAccount = await findAssociatedTokenAddress(wallet?.publicKey, new PublicKey(TOKENS['USDC'].mintAddress));\n  let keys1 = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    //   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].requestQueue,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].eventQueue,\n    },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].bids },\n    { isSigner: false, isWritable: true, pubkey: spotMarket['_decoded'].asks },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: side == 'sell' ? mangoGroup.vaults[marketIndex] : mangoGroup.vaults[NUM_TOKENS - 1],\n    },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_RENT_PUBKEY },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.srmVault },\n    //{ isSigner: false, isWritable: false, pubkey: dexSigner },\n    ...openOrdersKeys.map((pubkey) => ({\n      isSigner: false,\n      isWritable: true,\n      pubkey,\n    })),\n    ...mangoGroup.oracles.map((pubkey) => ({\n      isSigner: false,\n      isWritable: false,\n      pubkey,\n    })),\n  ]\n\nconst dataLay = struct([\n    u8('instruction'),\n    nu64('price'),\n])\nconst da = Buffer.alloc(dataLay.span)\ndataLay.encode(\n    {\n      instruction: 15,\n      price: limitPrice,\n    },\n    da\n)\n\nconst placeAndSettleInstruction = new TransactionInstruction({\n  keys: keys1,\n  data: da,\n  programId: programId,\n})\ntransaction.add(placeAndSettleInstruction)\n  const settle_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n    { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n    { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n    { isSigner: false, isWritable: false, pubkey: spotMarket.programId },\n    { isSigner: false, isWritable: true, pubkey: spotMarket.publicKey },\n    { isSigner: false, isWritable: true, pubkey: openOrdersKeys[marketIndex] },\n    { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].baseVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: spotMarket['_decoded'].quoteVault,\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[marketIndex],\n    },\n    {\n      isSigner: false,\n      isWritable: true,\n      pubkey: mangoGroup.vaults[NUM_MARKETS],\n    },\n    { isSigner: false, isWritable: false, pubkey: dexSigner },\n    { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n    { isSigner: false, isWritable: true, pubkey: mangoGroup.oracles[marketIndex] },\n\n  ];\n\n  const datLayout = struct([u8('instruction')])\n\n\n      const dat = Buffer.alloc(datLayout.span)\n      datLayout.encode(\n        {\n          instruction: 16,\n        },\n        dat\n      )\n      const SettleInstruction = new TransactionInstruction({\n        keys: settle_keys,\n        data: dat,\n        programId: programId,\n      })\n      console.log(\"settle intr\")\n  transaction.add(SettleInstruction)\n\n   const withdraw_keys = [\n    { isSigner: false, isWritable: true, pubkey: fundStateAccount },\n    { isSigner: false, isWritable: true, pubkey: invStateAccount },\n\n\n    { isSigner: true, isWritable: true, pubkey: wallet?.publicKey },\n    { isSigner: false, isWritable: true, pubkey: fundPDA },\n    { isSigner: false, isWritable: true, pubkey: MANGO_PROGRAM_ID },\n\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.publicKey },\n//   { isSigner: true, isWritable: false, pubkey: wallet.publicKey },\n  { isSigner: false, isWritable: true, pubkey: marginAccount.publicKey },\n\n  { isSigner: false, isWritable: true, pubkey: invBaseTokenAccount },\n  { isSigner: false, isWritable: true, pubkey: mangoGroup.vaults[NUM_MARKETS] },\n  { isSigner: false, isWritable: false, pubkey: mangoGroup.signerKey },\n\n  { isSigner: false, isWritable: false, pubkey: TOKEN_PROGRAM_ID },\n  { isSigner: false, isWritable: false, pubkey: SYSVAR_CLOCK_PUBKEY },\n \n  ...openOrdersKeys.map((pubkey) => ({\n    isSigner: false,\n    isWritable: true,\n    pubkey,\n  })),\n  ...mangoGroup.oracles.map((pubkey) => ({\n    isSigner: false,\n    isWritable: false,\n    pubkey,\n  })),\n\n]\n\n  const dataL = struct([u8('instruction')])\n      const data2 = Buffer.alloc(dataL.span)\n      dataL.encode(\n        {\n          instruction: 14,\n        },\n        data2\n      )\n      const instr = new TransactionInstruction({\n        keys: withdraw_keys,\n        data: data2,\n        programId: programId,\n      })\n      transaction.add(instr)\n}","/Users/zohebshahzan/code/Solana-2/frontend/src/programData/GreetingAccount.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/programData/GreetingSchema.js",["386"],"import { GreetingAccount } from \"./GreetingAccount\";\n\nexport const GreetingSchema = new Map([\n  [{txt: \"oooooooooooooooooo\"}, {kind: 'struct', fields: [['txt', 'String']]}],\n]);","/Users/zohebshahzan/code/Solana-2/frontend/src/utils/wallets/PhantomWallet.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/utils/solanaWeb3.js",[],"/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessDeposits.js",["387","388","389","390","391","392","393","394","395","396","397","398","399"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ProcessDeposits = () => {\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n    const openOrdersLamports = await connection.getMinimumBalanceForRentExemption(\n          INVESTOR_DATA.span,\n          'singleGossip'\n        )\n    \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 4,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(1, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n  const handleSelectInvestment = async(event) => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Process Deposit</h4>\n      \n      <br />\n      <label htmlFor=\"funds\">Select Investment Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\n        {\n          investments.map((i) => {\n            return (<option key={i} value={i}>{i}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleprocesDeposit}> Process Deposit</button>\n      <button onClick={handleGetInvestors}>Load Investments of my fund</button>\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/ProcessWithdraws.js",["400","401","402","403","404","405","406","407","408","409","410","411"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ProcessWithdraws = () => {\n\n  const [selectedInvestmentStateAcc, setSelectedInvestmentStateAcc] = useState('');\n  const [investments, setInvestments] = useState([]);\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handleprocesWithdraw = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    console.log('selected investment::', selectedInvestmentStateAcc)\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 5,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: key, isSigner: true, isWritable: true },\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      { pubkey: new PublicKey(selectedInvestmentStateAcc), isSigner: false, isWritable: true }\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n  const handleSelectInvestment = async(event) => {\n    setSelectedInvestmentStateAcc(event.target.value);\n    console.log(`setting selectedInvestmentStateAcc :::: `,event.target.value, selectedInvestmentStateAcc)\n  }\n\n  return (\n    <div className=\"form-div\">\n      <h4>Process Withdraw</h4>\n      \n      <button onClick={handleGetInvestors}>Load Investments of my fund</button>\n      <br />\n      <label htmlFor=\"funds\">Select Investment Address:</label>\n\n      <select name=\"funds\" width = \"100px\" onClick={handleSelectInvestment}>\n        {\n          investments.map((i) => {\n            return (<option key={i} value={i}>{i}</option>)\n          })\n        }\n      </select>\n      <button onClick={handleprocesWithdraw}> Process Withdraw</button>\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/Solana-2/frontend/src/components/InitialisedFund.js",["412","413","414","415","416","417","418","419","420","421","422","423","424","425","426","427","428","429","430","431"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const InitialisedFund = () => {\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handleInitializeFund = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA[0].toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA[0].toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n\n      const dataLayout = struct([u32('instruction'), nu64('min_amount'), nu64('performance_fee_percentage')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      console.log(\"min_amount * (10 ** ids.tokens[0].decimals::\",min_amount * (10 ** ids.tokens[0].decimals));\n      console.log(\"platform_fee_percentage * 100::\",platform_fee_percentage * 100)\n      dataLayout.encode(\n        {\n          instruction: 0,\n          min_amount: min_amount * (10 ** ids.tokens[0].decimals),\n          performance_fee_percentage: platform_fee_percentage * 100,\n        },\n        data\n      )\n\n      const fundBaseVault = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), fundPDA[0], transaction);\n      \n      // const fundBaseVault = await findAssociatedTokenAddress(fundPDA[0], new PublicKey(ids.tokens[0].mintKey));\n\n      console.log(\"fundBaseVault:\",fundBaseVault.toBase58())\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: walletProvider?.publicKey, isSigner: true, isWritable: true },\n          { pubkey: fundPDA[0], isSigner: false, isWritable: true },\n\n          { pubkey: fundBaseVault, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: delegate, isSigner: false, isWritable: false},\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false}\n\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      // const sign = await signAndSendTransaction(walletProvider, transaction);\n      // console.log(\"signature tx:: \", sign)\n      try {\n        await sendSignedTransactionAndNotify({\n            connection,\n            transaction: transaction,\n            successMessage: \"Investment successful\",\n            failMessage: \"Investment unsuccessful\",\n            wallet: walletProvider\n        })\n      } catch (error) {\n          console.error('init e: ', error);\n      }\n  \n\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA[0];\n    })\n  }\n\n  \n\n\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Initialise Fund</h4>\n      min_amount ::: {' '}\n      <input type=\"number\" value={min_amount} onChange={(event) => setMin_amount(event.target.value)} />\n      <br />\n      platform_fee_percentage ::: {' '}\n      <input type=\"number\" value={platform_fee_percentage} onChange={(event) => setPlatform_fee_percentage(event.target.value)} />\n      <br />\n      <button onClick={handleInitializeFund}>initialise fund</button>\n    </div>\n  )\n}\n\n","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/index.js",[],["432","433"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/App.js",["434","435","436","437"],"import { Container } from 'reactstrap';\nimport { CustomNavbar } from './components/CustomNavbar';\nimport './App.css';\nimport { useEffect, useState } from 'react';\n\nimport { GlobalState } from './store/globalState'\nimport { InitialisedFund } from './components/InitialisedFund';\nimport { Deposit } from './components/Deposit';\nimport { ProcessDeposits } from './components/ProcessDeposits';\n\nimport { Withdraw } from './components/Withdraw';\n// import { Claim } from './components/ClaimFee';\nimport { DisplayInfo } from './components/DisplayInfo';\nimport { AllFundsInvestors } from './components/AllFundsInvestors';\nimport { ToastContainer } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { ProcessWithdraws } from './components/ProcessWithdraws';\nimport { Settlement } from './components/Settlement';\nimport { InitForceSettle } from './components/InitForceSettle';\nimport { ForceUpdatePerp } from './components/ForceUpdatePerp';\nimport { ForceProcessWithdraws } from './components/ForceProcessWithdraws';\nimport { FakeInvestorDeposit } from './components/FakeInvestorDeposit';\n\nfunction App() {\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const address = GlobalState.useState(s => s.address);\n  const [transactions, setTransactions] = useState([]);\n\n  // useEffect(() => {\n  //   if (walletProvider?.publicKey) {\n  //     console.log(`walletProvider?.publicKey ::: `, walletProvider?.publicKey)\n  //     getTransactions(connection, walletProvider.publicKey).then((trans) => {\n  //       console.log(`trans ::: `, trans)\n  //       setTransactions(trans);\n  //     });\n  //   }\n  // }, [walletProvider])\n\n  return (\n    <div>\n      <Container>\n\n      <ToastContainer\n                position=\"top-right\"\n                autoClose={5000}\n                hideProgressBar={false}\n                newestOnTop={false}\n                closeOnClick\n                rtl={false}\n                pauseOnFocusLoss\n                draggable\n                pauseOnHover\n            />\n\n        <CustomNavbar />\n        {\n          address &&\n          <p>Connected to {address}</p>\n        }\n        {/* {\n          transactions && <TransactionsView transactions={transactions} />\n        } */}\n        <InitialisedFund />\n        <Deposit />\n        <Withdraw />\n        <ProcessDeposits />\n        <ProcessWithdraws />\n        <Settlement />\n        <InitForceSettle />\n        <ForceProcessWithdraws/>\n        <FakeInvestorDeposit/>\n        {/* <Claim /> */}\n        <ForceUpdatePerp/>\n        <AllFundsInvestors/>\n        <DisplayInfo/>\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/reportWebVitals.js",[],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/CustomNavbar.js",["438"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ProcessWithdraws.js",["439","440","441","442","443","444","445","446","447","448","449","450"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Deposit.js",["451","452","453","454","455","456","457","458","459"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ProcessDeposits.js",["460","461","462","463","464","465","466","467","468","469","470","471","472"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/AllFundsInvestors.js",["473","474","475","476","477","478","479","480","481","482","483","484","485","486","487","488","489","490","491","492","493","494","495","496","497","498","499","500","501"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Settlement.js",["502","503","504","505","506","507","508","509","510","511","512","513","514","515","516","517","518","519","520","521","522","523","524","525","526","527","528"],"import React, { useEffect, useState } from 'react'\nimport { createAssociatedTokenAccount, createAssociatedTokenAccountIfNotExist, createKeyIfNotExists, createTokenAccountIfNotExist, findAssociatedTokenAddress, setWalletTransaction, signAndSendTransaction } from '../utils/web3'\nimport { connection, delegate, FUND_ACCOUNT_KEY, MARGIN_ACCOUNT_KEY_1, platformStateAccount, PLATFORM_ACCOUNT_KEY, programId, SYSTEM_PROGRAM_ID } from '../utils/constants'\nimport { GlobalState } from '../store/globalState';\nimport { nu64, struct, u8, u32} from 'buffer-layout';\nimport { PublicKey, SystemProgram, Transaction, TransactionInstruction } from '@solana/web3.js';\nimport { TOKEN_PROGRAM_ID } from '@project-serum/serum/lib/token-instructions';\nimport { FUND_DATA, PLATFORM_DATA, u64, U64F64 } from '../utils/programLayouts';\nimport { Badge } from 'reactstrap';\nimport { IDS, MangoAccountLayout, MangoClient } from '@blockworks-foundation/mango-client'\nimport BN from 'bn.js';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const Settlement = () => {\n\n   const [fundAddress, setFundAddress] = useState('')\n\n\n  \n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n\n  const handlePauseForSettlement = async () => {\n\n    const transaction = new Transaction()\n    let ids = IDS['groups'][0]\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n\n    const mango_group_ai = new PublicKey(ids.publicKey);\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n\n   \n    console.log(`FUND_DATA.span :::: `, FUND_DATA.span) \n    console.log(`fundPDA::: `, fundPDA.toBase58())\n\n    const accountNumBN = new BN(0);\n\n    const mango_account_ai = await PublicKey.findProgramAddress([\n      mango_group_ai.toBytes(),\n      fundPDA.toBytes(),\n      accountNumBN.toArrayLike(Buffer, 'le', 8),\n    ],\n    new PublicKey(ids.mangoProgramId))\n\n\n      const dataLayout = struct([u32('instruction')])\n\n      const data = Buffer.alloc(dataLayout.span)\n      dataLayout.encode(\n        {\n          instruction: 8,\n        },\n        data\n      )\n\n\n      console.log('data', data)\n        const keys = [\n          { pubkey: fundPDA, isSigner: false, isWritable: true },\n          { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n          { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n          { pubkey: mango_account_ai[0], isSigner: false, isWritable: true },\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false},\n          { pubkey: SYSTEM_PROGRAM_ID, isSigner: false, isWritable: false}\n        ]\n\n        for(let i = 0; i<keys.length; i++){\n          console.log('>>', keys[i].pubkey.toBase58())\n        }\n\n      console.log(\"IDS:: \", ids)\n      const instruction = new TransactionInstruction({\n        keys,\n        programId,\n        data\n      });\n      console.log(\"programId::\",programId.toBase58())\n      transaction.add(instruction)\n      transaction.feePayer = walletProvider?.publicKey;\n      let hash = await connection.getRecentBlockhash();\n      console.log(\"blockhash\", hash);\n      transaction.recentBlockhash = hash.blockhash;\n\n      // const sign = await signAndSendTransaction(walletProvider, transaction);\n      // console.log(\"signature tx:: \", sign)\n      try {\n        await sendSignedTransactionAndNotify({\n            connection,\n            transaction: transaction,\n            successMessage: \"Pause successful\",\n            failMessage: \"Pause unsuccessful\",\n            wallet: walletProvider\n        })\n      } catch (error) {\n          console.error('init e: ', error);\n      }\n  \n\n\n    GlobalState.update(s => {\n      s.createFundPublicKey = fundPDA;\n    })\n  }\n\n  \n\n\n\n  const [min_amount, setMin_amount] = useState(0);\n  const [platform_fee_percentage, setPlatform_fee_percentage] = useState(0);\n\n  return (\n    <div className=\"form-div\">\n      <h4>Pause Fund</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      <br />\n      <button onClick={handlePauseForSettlement}>Pause</button>\n    </div>\n  )\n}\n\n","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/InitialisedFund.js",["529","530","531","532","533","534","535","536","537","538","539","540","541","542","543","544","545","546","547","548"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/InitForceSettle.js",["549","550","551","552","553","554","555","556","557","558","559","560","561","562","563","564"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const InitForceSettle = () => {\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('')\n\n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handInitForceSettle= async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\",mangoAcc.spotOpenOrders);\n\n    let investments = [\n      { pubkey: new PublicKey('FCEA2RPJJe34kcP54dL4anY69FbK6RdsTjn87w286xBu'), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey('qRhmmJrsuNrFJ4fHzeR4UCpApef6AHUxvM1ta5Rs1VG'), isSigner: false, isWritable: true }, //fund State Account\n    ]\n\n    // console.log(\">> FUnd PDA\", fundPDA.toBase58())\n    // let investments = await connection.getProgramAccounts(programId, { \n    //   filters: [\n    //     {\n    //       memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n    //       // memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n    //     },\n    //     { dataSize: INVESTOR_DATA.span }\n    //   ]\n    //  });\n    //  console.log(\">>>>>> \", investments);\n\n    //  for(let i=0;i<investments.length;i++){\n    //   console.log(\"investments - i\",i,investments[i].pubkey.toBase58())\n    //  }\n\n\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n    \n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 9,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      // { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      // { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      // { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      // { pubkey: mangoGroup.signerKey, isSigner: false, isWritable: true },\n      // { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      // { pubkey: fundState.usdc_vault_key, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>Init Force Settle</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n      \n      <button onClick={handInitForceSettle}>Init</button>\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/DisplayInfo.js",["565","566","567","568","569","570","571","572","573","574","575","576","577","578","579","580"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/Withdraw.js",["581","582","583","584","585","586","587","588","589","590"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ForceProcessWithdraws.js",["591","592","593","594","595","596","597","598","599","600","601","602","603","604"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/store/globalState.js",[],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ConnectWalletModal.js",["605","606"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/constants.js",[],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/programLayouts.js",["607"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/web3.js",["608","609","610"],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/solanaWeb3.js",[],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/utils/wallets/PhantomWallet.js",[],"/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/ForceUpdatePerp.js",["611","612","613","614","615","616","617","618","619","620","621","622","623","624","625"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID, SYSTEM_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\nimport bs58 from 'bs58';\nimport BN from 'bn.js';\n\nexport const ForceUpdatePerp = () => {\n\n  const [investments, setInvestments] = useState([]);\n  const [fundAddress, setFundAddress] = useState('')\n  const [perpIndex, setPerpIndex] = useState(0); \n\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n  \n  const handInitForceSettle= async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n\n\n    const fundPDA = await new PublicKey(fundAddress);\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n\n    const transaction = new Transaction()\n  \n\n    console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo(new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n    console.log(\"mangoAcc.spot::\", mangoAcc.spotOpenOrders);\n\n     const investmentKeys = investments.map( (i,index) => { \n      return {\n        pubkey : i.pubkey,\n        isSigner : false,\n        isWritable : true\n      }\n    })\n\n    const spotOrdersKeys = mangoAcc.spotOpenOrders.map( (i,index) => { \n      console.log(\"spot order\",index,i.toBase58())\n      return {\n        pubkey : i,\n        isSigner : false,\n        isWritable : false\n      }\n    })\n    \n\n    const dataLayout = struct([u32('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 10,\n      },\n      data\n    )\n    const keys =  [\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(fundPDA), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].publicKey), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].bidsKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].asksKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: new PublicKey(ids.perpMarkets[perpIndex].eventsKey), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      ...spotOrdersKeys,\n      ...investmentKeys,\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n    \n  const handleGetInvestors = async () => {\n\n    const fundPDA = (await PublicKey.findProgramAddress([walletProvider?.publicKey.toBuffer()], programId))[0];\n    console.log(\"fundPDA::\",fundPDA.toBase58())\n\n    let investments = await connection.getProgramAccounts(programId, { \n      filters: [\n        {\n          memcmp : { offset : INVESTOR_DATA.offsetOf('fund') , bytes : fundPDA.toString()},\n          memcmp : { offset : INVESTOR_DATA.offsetOf('investment_status') , bytes : bs58.encode((new BN(3, 'le')).toArray())}\n        },\n        { dataSize: INVESTOR_DATA.span }\n      ]\n     });\n    console.log(`found investments :::: `, investments)\n\n    const investmentStateAccs = investments.map(f => f.pubkey.toBase58())\n\n    const investmentsData = investments.map(f => INVESTOR_DATA.decode(f.account.data))\n    console.log(`decodedFunds ::: `, investmentsData)\n    \n    // for(let i=0; i<investments.length; i++) {\n    //   let fund = investmentsData[i].fund;\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    setInvestments(investmentStateAccs);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>Force Update Perp</h4>\n\n      Fund  ::: {' '}\n        <input type=\"text\" value={fundAddress} onChange={(event) => setFundAddress(event.target.value)} />\n        <br />\n        <input type=\"number\" value={perpIndex} onChange={(event) => setPerpIndex(event.target.value)} />\n        <br />\n      \n      <button onClick={handInitForceSettle}>Init</button>\n    </div>\n  )\n}\n","/Users/zohebshahzan/code/MANGO-MM-FUNDS/frontend/src/components/FakeInvestorDeposit.js",["626","627","628","629","630","631","632","633","634","635","636","637"],"import { PublicKey, Transaction, TransactionInstruction, create} from '@solana/web3.js';\nimport React, { useState } from 'react'\nimport { GlobalState } from '../store/globalState';\nimport { connection, programId, platformStateAccount, FUND_ACCOUNT_KEY, TOKEN_PROGRAM_ID } from '../utils/constants';\nimport { nu64, struct, u32, u8 } from 'buffer-layout';\nimport { createKeyIfNotExists, findAssociatedTokenAddress, signAndSendTransaction, createAssociatedTokenAccountIfNotExist, createAccountInstruction } from '../utils/web3';\nimport { FUND_DATA, INVESTOR_DATA, OLD_FUND_DATA, OLD_INVESTOR_DATA } from '../utils/programLayouts';\nimport { awaitTransactionSignatureConfirmation, IDS, MangoClient, NodeBankLayout } from '@blockworks-foundation/mango-client';\nimport { sendSignedTransactionAndNotify } from '../utils/solanaWeb3';\n\nexport const FakeInvestorDeposit = () => {\n\n    const [total_amount, setTotalAmount] = useState(0);\n    const [current_index, setCurrentIndex] = useState(0);\n    const [performance_fee, setPerformanceFee] = useState(0);\n  const walletProvider = GlobalState.useState(s => s.walletProvider);\n  const ids = IDS['groups'][0]\n\n\n\n  const handleFakeDeposit = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n\n  \n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(\"2uzZtsbcuvb9vBgcrrJVPmdbAe3ZFv41GxrH1BMSAku9\"))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    // const investorStateLamports = await connection.getMinimumBalanceForRentExemption(\n    //       INVESTOR_DATA.span,\n    //       'singleGossip'\n    //     )\n    // let signers = [];\n    \n    // const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, investorStateLamports, transaction, signers);\n    // const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    // let investorStateAccounts = \n\n    // console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u32('instruction'), nu64('total_amount'), nu64('current_index'), nu64('performance_fee')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 14,\n        total_amount: total_amount,\n        current_index: current_index,\n        performance_fee: performance_fee\n      },\n      data\n    )\n    const keys =  [\n        { pubkey: new PublicKey(\"2uzZtsbcuvb9vBgcrrJVPmdbAe3ZFv41GxrH1BMSAku9\"), isSigner: false, isWritable: true }, //fund State Account\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId,\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    // transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n  const handleFakeDeposit2 = async () => {\n\n    const key = walletProvider?.publicKey;\n\n    if (!key) {\n      alert(\"connect wallet\")\n      return;\n    };\n    let fundPDA = new PublicKey(\"2uzZtsbcuvb9vBgcrrJVPmdbAe3ZFv41GxrH1BMSAku9\");\n    let fundStateInfo = await connection.getAccountInfo(new PublicKey(fundPDA))\n    let fundState = FUND_DATA.decode(fundStateInfo.data)\n    console.log(\"fundState:: \", fundState)\n\n    let client = new MangoClient(connection, new PublicKey(ids.mangoProgramId))\n    let mangoGroup = await client.getMangoGroup(new PublicKey(ids.publicKey))\n    let nodeBankInfo = await connection.getAccountInfo  (new PublicKey(ids.tokens[0].nodeKeys[0]))\n    let nodeBank = NodeBankLayout.decode(nodeBankInfo.data)\n\n    let mangoAcc = await client.getMangoAccount(fundState.mango_account, new PublicKey(ids.serumProgramId))\n\n  \n    // let fundStateInfo = await connection.getAccountInfo(new PublicKey(\"2uzZtsbcuvb9vBgcrrJVPmdbAe3ZFv41GxrH1BMSAku9\"))\n    // let fundState = OLDFUND_DATA.decode(fundStateInfo.data)\n    // console.log(\"fundState:: \", fundState)\n\n    const transaction = new Transaction()\n  \n    // const investorStateLamports = await connection.getMinimumBalanceForRentExemption(\n    //       INVESTOR_DATA.span,\n    //       'singleGossip'\n    //     )\n    // let signers = [];\n    \n    // const investerStateAccount = await createAccountInstruction(connection, key, INVESTOR_DATA.span, programId, investorStateLamports, transaction, signers);\n    // const investorBaseTokenAccount = await createAssociatedTokenAccountIfNotExist(walletProvider, new PublicKey(ids.tokens[0].mintKey), key, transaction);\n\n    // let investorStateAccounts = \n\n    // console.log(\"account size::: \", INVESTOR_DATA.span)\n\n    const dataLayout = struct([u8('instruction')])\n    const data = Buffer.alloc(dataLayout.span)\n    dataLayout.encode(\n      {\n        instruction: 46,\n      },\n      data\n    )\n    const keys =  [\n        { pubkey: new PublicKey(\"BAc7M4TLFsMc9y2e46GLE1qo9JapZLqnzekwfnvw8DSn\"), isSigner: false, isWritable: true }, //fund State Account\n      { pubkey: new PublicKey(ids.mangoProgramId), isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(ids.publicKey), isSigner: false, isWritable: true },\n      { pubkey: fundState.mango_account, isSigner: false, isWritable: true },\n      { pubkey: mangoGroup.mangoCache, isSigner: false, isWritable: true },\n      { pubkey: new PublicKey('AMzanZxMirPCgGcBoH9kw4Jzi9LFMomyUCXbpzDeL2T8'), isSigner: false, isWritable: true }, //root_bank_ai\n      { pubkey: new PublicKey('BGcwkj1WudQwUUjFk78hAjwd1uAm8trh1N4CJSa51euh'), isSigner: false, isWritable: true }, //node_bank_ai\n      { pubkey: nodeBank.vault, isSigner: false, isWritable: true }, //vault_ai\n      { pubkey: TOKEN_PROGRAM_ID, isSigner: false, isWritable: false },\n      { pubkey: new PublicKey(\"5tgvaaYXeHLXmZXveKAQ1wi8DtM7uid6C35kfe9JZeFL\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"FkBbi6Q1rtj82yTak5ysdFGBu4frx3V8AAPxRmjhvMob\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"9Tcik3CFsrFRSUWrwKwNs72ZHQKK7bYC8f15hWQCydEH\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"CCtPeya8N64mhPW6mGosDvfPvkDizFqTrg2p5C2BgrJE\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"CRB7dVePLeugFELojCoEkHvfqzLrqKhPbyB1Acs6XgVi\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"9woYpYDW8HcpY1KUvKToXPbK9nKyvz56bjU3MUFpZR5C\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"DfAmZaXKAYz7DQFFwTVT9tBkkTaUkfEzMmeoQjNtFufo\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"85aM7jBpudp9GtQxWbrCvnvKauQvD2HYwckq25MUXpXp\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"6XdNR2YHm1ZR5NeTdjSckJU8NHATKdUH47xJtPadEHsg\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"82khdxSXadZmu3Y3xXnTMVuezAieiU1VEK7ZhsyjMcrA\"), isSigner: false, isWritable: true },\n      { pubkey: new PublicKey(\"EQAhS3kKD7uJnfDF24bFywdAQA8S85EfdKyUo7XXejYo\"), isSigner: false, isWritable: true },\n\n    ];\n\n    for(let i = 0; i<keys.length; i++){\n      console.log('>>',i, keys[i].pubkey.toBase58())\n    }\n\n\n    const instruction = new TransactionInstruction({\n      keys,\n      programId: new PublicKey(\"8dbbmZXbLsUirEsgaBVcPBEdciESza6L2zkEuer4crR\"),\n      data\n    });\n\n   \n    transaction.add(instruction)\n    transaction.feePayer = walletProvider?.publicKey;\n    let hash = await connection.getRecentBlockhash();\n    console.log(\"tx\", transaction);\n    transaction.recentBlockhash = hash.blockhash;\n    transaction.setSigners(key);\n    // transaction.partialSign(...signers)\n\n    // const sign = await signAndSendTransaction(walletProvider, transaction);\n    // console.log(\"signature tx:: \", sign)\n    // await awaitTransactionSignatureConfirmation(sign, 120000, connection, 'finalized')\n   \n\n      try {\n          await sendSignedTransactionAndNotify({\n              connection,\n              transaction: transaction,\n              successMessage: \"Investment successful\",\n              failMessage: \"Investment unsuccessful\",\n              wallet: walletProvider\n          })\n      } catch (error) {\n          console.error('handleMakeInvestment: ', error);\n      }\n\n  }\n  const handleDeps= async () => {\n\n    let managerkey = new PublicKey(\"FkBbi6Q1rtj82yTak5ysdFGBu4frx3V8AAPxRmjhvMob\");\n    let investments = await connection.getProgramAccounts(new PublicKey(\"8dbbmZXbLsUirEsgaBVcPBEdciESza6L2zkEuer4crR\"), { filters: [{ dataSize: 3160 }, \n        {\n          memcmp: { offset: OLD_FUND_DATA.offsetOf('manager_account'), bytes: managerkey.toBase58() }\n        }]\n});\n    console.log(`investments :::: `, investments)\n    const investorData = investments.map(f => OLD_FUND_DATA.decode(f.account.data))\n\n    console.log(`selected Fund ::: `, investorData)\n\n    for(let i = 0; i<investorData.length; i++) {\n        console.log(\"Investor state amt stidex :::\", investments[i].pubkey.toBase58(), investorData[i].total_amount.toString(), investorData[i].prev_performance.toString(), investorData[i].performance_fee.toString())\n    }\n\n    \n    // for(let i=0; i<fundData.length; i++) {\n    //   let manager = fundData[i].manager_account;\n    //   let PDA = await PublicKey.findProgramAddress([manager.toBuffer()], programId);\n    //   let fundState = await PublicKey.createWithSeed(manager, FUND_ACCOUNT_KEY, programId);\n    //   console.log(`PDA[0]`, PDA)\n    //   managers.push({\n    //     fundPDA: PDA[0].toBase58(),\n    //     fundManager: manager.toBase58(),\n    //   });\n    // }\n    // console.log(managers)\n    // setFunds(managers);\n  }\n\n\n  return (\n    <div className=\"form-div\">\n      <h4>FAKE Investor Deposit</h4>\n      total amount ::: {' '}\n      <input type=\"number\" value={total_amount} onChange={(event) => setTotalAmount(event.target.value)} />\n      <br />\n      current_index ::: {' '}\n      <input type=\"number\" value={current_index} onChange={(event) => setCurrentIndex(event.target.value)} />\n      <br />\n      Perforance_fee::: {' '}\n      <input type=\"number\" value={performance_fee} onChange={(event) => setPerformanceFee(event.target.value)} />\n      <br />\n      <button onClick={handleFakeDeposit}>Migrate</button>\n      <button onClick={handleFakeDeposit2}>Migrate2</button>\n      \n      <button onClick={handleDeps}>Load Deposits</button>\n    </div>\n  )\n}",{"ruleId":"638","replacedBy":"639"},{"ruleId":"640","replacedBy":"641"},{"ruleId":"642","severity":1,"message":"643","line":4,"column":10,"nodeType":"644","messageId":"645","endLine":4,"endColumn":19},{"ruleId":"642","severity":1,"message":"646","line":23,"column":9,"nodeType":"644","messageId":"645","endLine":23,"endColumn":23},{"ruleId":"642","severity":1,"message":"647","line":25,"column":10,"nodeType":"644","messageId":"645","endLine":25,"endColumn":22},{"ruleId":"642","severity":1,"message":"648","line":25,"column":24,"nodeType":"644","messageId":"645","endLine":25,"endColumn":39},{"ruleId":"642","severity":1,"message":"649","line":3,"column":3,"nodeType":"644","messageId":"645","endLine":3,"endColumn":9},{"ruleId":"642","severity":1,"message":"650","line":22,"column":11,"nodeType":"644","messageId":"645","endLine":22,"endColumn":16},{"ruleId":"642","severity":1,"message":"651","line":25,"column":7,"nodeType":"644","messageId":"645","endLine":25,"endColumn":13},{"ruleId":"638","replacedBy":"652"},{"ruleId":"640","replacedBy":"653"},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"655","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":21},{"ruleId":"642","severity":1,"message":"656","line":18,"column":12,"nodeType":"644","messageId":"645","endLine":18,"endColumn":19},{"ruleId":"642","severity":1,"message":"657","line":18,"column":21,"nodeType":"644","messageId":"645","endLine":18,"endColumn":31},{"ruleId":"658","severity":1,"message":"659","line":46,"column":30,"nodeType":"660","messageId":"661","endLine":46,"endColumn":32},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"668","line":8,"column":54,"nodeType":"644","messageId":"645","endLine":8,"endColumn":65},{"ruleId":"642","severity":1,"message":"669","line":49,"column":9,"nodeType":"644","messageId":"645","endLine":49,"endColumn":30},{"ruleId":"642","severity":1,"message":"670","line":122,"column":11,"nodeType":"644","messageId":"645","endLine":122,"endColumn":20},{"ruleId":"642","severity":1,"message":"671","line":4,"column":23,"nodeType":"644","messageId":"645","endLine":4,"endColumn":39},{"ruleId":"642","severity":1,"message":"664","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":30},{"ruleId":"642","severity":1,"message":"666","line":7,"column":32,"nodeType":"644","messageId":"645","endLine":7,"endColumn":54},{"ruleId":"642","severity":1,"message":"672","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":34},{"ruleId":"642","severity":1,"message":"668","line":9,"column":41,"nodeType":"644","messageId":"645","endLine":9,"endColumn":52},{"ruleId":"642","severity":1,"message":"673","line":9,"column":54,"nodeType":"644","messageId":"645","endLine":9,"endColumn":68},{"ruleId":"642","severity":1,"message":"674","line":9,"column":70,"nodeType":"644","messageId":"645","endLine":9,"endColumn":86},{"ruleId":"642","severity":1,"message":"675","line":21,"column":9,"nodeType":"644","messageId":"645","endLine":21,"endColumn":20},{"ruleId":"676","severity":1,"message":"677","line":314,"column":11,"nodeType":"678","messageId":"661","endLine":314,"endColumn":17},{"ruleId":"676","severity":1,"message":"677","line":348,"column":11,"nodeType":"678","messageId":"661","endLine":348,"endColumn":17},{"ruleId":"642","severity":1,"message":"643","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":26},{"ruleId":"642","severity":1,"message":"679","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":38},{"ruleId":"642","severity":1,"message":"680","line":2,"column":40,"nodeType":"644","messageId":"645","endLine":2,"endColumn":78},{"ruleId":"642","severity":1,"message":"664","line":2,"column":80,"nodeType":"644","messageId":"645","endLine":2,"endColumn":100},{"ruleId":"642","severity":1,"message":"681","line":2,"column":102,"nodeType":"644","messageId":"645","endLine":2,"endColumn":130},{"ruleId":"642","severity":1,"message":"665","line":2,"column":132,"nodeType":"644","messageId":"645","endLine":2,"endColumn":158},{"ruleId":"642","severity":1,"message":"682","line":2,"column":160,"nodeType":"644","messageId":"645","endLine":2,"endColumn":180},{"ruleId":"642","severity":1,"message":"666","line":2,"column":182,"nodeType":"644","messageId":"645","endLine":2,"endColumn":204},{"ruleId":"642","severity":1,"message":"671","line":3,"column":22,"nodeType":"644","messageId":"645","endLine":3,"endColumn":38},{"ruleId":"642","severity":1,"message":"663","line":3,"column":40,"nodeType":"644","messageId":"645","endLine":3,"endColumn":60},{"ruleId":"642","severity":1,"message":"683","line":3,"column":62,"nodeType":"644","messageId":"645","endLine":3,"endColumn":82},{"ruleId":"642","severity":1,"message":"684","line":4,"column":10,"nodeType":"644","messageId":"645","endLine":4,"endColumn":21},{"ruleId":"642","severity":1,"message":"685","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":19},{"ruleId":"642","severity":1,"message":"686","line":5,"column":21,"nodeType":"644","messageId":"645","endLine":5,"endColumn":32},{"ruleId":"642","severity":1,"message":"687","line":5,"column":34,"nodeType":"644","messageId":"645","endLine":5,"endColumn":56},{"ruleId":"642","severity":1,"message":"688","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":26},{"ruleId":"642","severity":1,"message":"689","line":7,"column":36,"nodeType":"644","messageId":"645","endLine":7,"endColumn":49},{"ruleId":"642","severity":1,"message":"690","line":7,"column":51,"nodeType":"644","messageId":"645","endLine":7,"endColumn":70},{"ruleId":"642","severity":1,"message":"691","line":7,"column":72,"nodeType":"644","messageId":"645","endLine":7,"endColumn":78},{"ruleId":"642","severity":1,"message":"692","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":15},{"ruleId":"642","severity":1,"message":"693","line":9,"column":8,"nodeType":"644","messageId":"645","endLine":9,"endColumn":10},{"ruleId":"642","severity":1,"message":"694","line":11,"column":10,"nodeType":"644","messageId":"645","endLine":11,"endColumn":14},{"ruleId":"642","severity":1,"message":"695","line":11,"column":16,"nodeType":"644","messageId":"645","endLine":11,"endColumn":19},{"ruleId":"642","severity":1,"message":"696","line":11,"column":21,"nodeType":"644","messageId":"645","endLine":11,"endColumn":27},{"ruleId":"642","severity":1,"message":"697","line":11,"column":29,"nodeType":"644","messageId":"645","endLine":11,"endColumn":32},{"ruleId":"642","severity":1,"message":"698","line":11,"column":34,"nodeType":"644","messageId":"645","endLine":11,"endColumn":36},{"ruleId":"642","severity":1,"message":"699","line":11,"column":38,"nodeType":"644","messageId":"645","endLine":11,"endColumn":41},{"ruleId":"642","severity":1,"message":"700","line":11,"column":43,"nodeType":"644","messageId":"645","endLine":11,"endColumn":47},{"ruleId":"642","severity":1,"message":"654","line":11,"column":49,"nodeType":"644","messageId":"645","endLine":11,"endColumn":53},{"ruleId":"638","replacedBy":"701"},{"ruleId":"640","replacedBy":"702"},{"ruleId":"703","severity":1,"message":"704","line":2,"column":3,"nodeType":"705","messageId":"706","endLine":5,"endColumn":8},{"ruleId":"642","severity":1,"message":"687","line":1,"column":21,"nodeType":"644","messageId":"645","endLine":1,"endColumn":43},{"ruleId":"642","severity":1,"message":"643","line":2,"column":17,"nodeType":"644","messageId":"645","endLine":2,"endColumn":26},{"ruleId":"642","severity":1,"message":"671","line":5,"column":36,"nodeType":"644","messageId":"645","endLine":5,"endColumn":52},{"ruleId":"642","severity":1,"message":"707","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":14},{"ruleId":"642","severity":1,"message":"654","line":6,"column":16,"nodeType":"644","messageId":"645","endLine":6,"endColumn":20},{"ruleId":"642","severity":1,"message":"696","line":6,"column":22,"nodeType":"644","messageId":"645","endLine":6,"endColumn":28},{"ruleId":"642","severity":1,"message":"697","line":6,"column":30,"nodeType":"644","messageId":"645","endLine":6,"endColumn":33},{"ruleId":"642","severity":1,"message":"698","line":6,"column":35,"nodeType":"644","messageId":"645","endLine":6,"endColumn":37},{"ruleId":"642","severity":1,"message":"690","line":7,"column":21,"nodeType":"644","messageId":"645","endLine":7,"endColumn":40},{"ruleId":"642","severity":1,"message":"708","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":14},{"ruleId":"642","severity":1,"message":"709","line":9,"column":16,"nodeType":"644","messageId":"645","endLine":9,"endColumn":19},{"ruleId":"642","severity":1,"message":"710","line":9,"column":21,"nodeType":"644","messageId":"645","endLine":9,"endColumn":24},{"ruleId":"642","severity":1,"message":"711","line":10,"column":28,"nodeType":"644","messageId":"645","endLine":10,"endColumn":34},{"ruleId":"642","severity":1,"message":"712","line":10,"column":52,"nodeType":"644","messageId":"645","endLine":10,"endColumn":69},{"ruleId":"642","severity":1,"message":"674","line":10,"column":71,"nodeType":"644","messageId":"645","endLine":10,"endColumn":87},{"ruleId":"642","severity":1,"message":"713","line":10,"column":89,"nodeType":"644","messageId":"645","endLine":10,"endColumn":108},{"ruleId":"642","severity":1,"message":"714","line":1,"column":21,"nodeType":"644","messageId":"645","endLine":1,"endColumn":40},{"ruleId":"642","severity":1,"message":"715","line":2,"column":17,"nodeType":"644","messageId":"645","endLine":2,"endColumn":25},{"ruleId":"642","severity":1,"message":"671","line":4,"column":36,"nodeType":"644","messageId":"645","endLine":4,"endColumn":52},{"ruleId":"642","severity":1,"message":"716","line":4,"column":125,"nodeType":"644","messageId":"645","endLine":4,"endColumn":142},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"682","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":80},{"ruleId":"642","severity":1,"message":"717","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":19},{"ruleId":"642","severity":1,"message":"718","line":7,"column":36,"nodeType":"644","messageId":"645","endLine":7,"endColumn":49},{"ruleId":"642","severity":1,"message":"719","line":7,"column":66,"nodeType":"644","messageId":"645","endLine":7,"endColumn":76},{"ruleId":"642","severity":1,"message":"720","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":22},{"ruleId":"642","severity":1,"message":"721","line":8,"column":35,"nodeType":"644","messageId":"645","endLine":8,"endColumn":40},{"ruleId":"642","severity":1,"message":"722","line":10,"column":10,"nodeType":"644","messageId":"645","endLine":10,"endColumn":26},{"ruleId":"642","severity":1,"message":"723","line":13,"column":16,"nodeType":"644","messageId":"645","endLine":13,"endColumn":32},{"ruleId":"642","severity":1,"message":"724","line":13,"column":34,"nodeType":"644","messageId":"645","endLine":13,"endColumn":53},{"ruleId":"658","severity":1,"message":"659","line":94,"column":61,"nodeType":"660","messageId":"661","endLine":94,"endColumn":63},{"ruleId":"658","severity":1,"message":"659","line":97,"column":58,"nodeType":"660","messageId":"661","endLine":97,"endColumn":60},{"ruleId":"658","severity":1,"message":"659","line":104,"column":60,"nodeType":"660","messageId":"661","endLine":104,"endColumn":62},{"ruleId":"658","severity":1,"message":"659","line":109,"column":57,"nodeType":"660","messageId":"661","endLine":109,"endColumn":59},{"ruleId":"642","severity":1,"message":"725","line":125,"column":11,"nodeType":"644","messageId":"645","endLine":125,"endColumn":35},{"ruleId":"642","severity":1,"message":"726","line":3,"column":49,"nodeType":"644","messageId":"645","endLine":3,"endColumn":60},{"ruleId":"658","severity":1,"message":"659","line":57,"column":22,"nodeType":"660","messageId":"661","endLine":57,"endColumn":24},{"ruleId":"642","severity":1,"message":"727","line":1,"column":33,"nodeType":"644","messageId":"645","endLine":1,"endColumn":43},{"ruleId":"642","severity":1,"message":"728","line":2,"column":23,"nodeType":"644","messageId":"645","endLine":2,"endColumn":37},{"ruleId":"642","severity":1,"message":"699","line":1,"column":38,"nodeType":"644","messageId":"645","endLine":1,"endColumn":41},{"ruleId":"642","severity":1,"message":"700","line":1,"column":43,"nodeType":"644","messageId":"645","endLine":1,"endColumn":47},{"ruleId":"642","severity":1,"message":"729","line":41,"column":7,"nodeType":"644","messageId":"645","endLine":41,"endColumn":19},{"ruleId":"642","severity":1,"message":"730","line":2,"column":21,"nodeType":"644","messageId":"645","endLine":2,"endColumn":46},{"ruleId":"642","severity":1,"message":"731","line":2,"column":76,"nodeType":"644","messageId":"645","endLine":2,"endColumn":91},{"ruleId":"642","severity":1,"message":"732","line":5,"column":7,"nodeType":"644","messageId":"645","endLine":5,"endColumn":20},{"ruleId":"676","severity":1,"message":"733","line":761,"column":3,"nodeType":"678","messageId":"661","endLine":761,"endColumn":7},{"ruleId":"676","severity":1,"message":"734","line":768,"column":3,"nodeType":"678","messageId":"661","endLine":768,"endColumn":7},{"ruleId":"642","severity":1,"message":"735","line":1,"column":16,"nodeType":"644","messageId":"645","endLine":1,"endColumn":28},{"ruleId":"642","severity":1,"message":"716","line":7,"column":100,"nodeType":"644","messageId":"645","endLine":7,"endColumn":117},{"ruleId":"642","severity":1,"message":"697","line":8,"column":28,"nodeType":"644","messageId":"645","endLine":8,"endColumn":31},{"ruleId":"642","severity":1,"message":"699","line":8,"column":33,"nodeType":"644","messageId":"645","endLine":8,"endColumn":36},{"ruleId":"642","severity":1,"message":"736","line":15,"column":3,"nodeType":"644","messageId":"645","endLine":15,"endColumn":13},{"ruleId":"642","severity":1,"message":"718","line":31,"column":10,"nodeType":"644","messageId":"645","endLine":31,"endColumn":23},{"ruleId":"737","severity":1,"message":"738","line":78,"column":29,"nodeType":"644","messageId":"739","endLine":78,"endColumn":35},{"ruleId":"642","severity":1,"message":"740","line":104,"column":7,"nodeType":"644","messageId":"645","endLine":104,"endColumn":16},{"ruleId":"642","severity":1,"message":"741","line":143,"column":9,"nodeType":"644","messageId":"645","endLine":143,"endColumn":26},{"ruleId":"642","severity":1,"message":"742","line":153,"column":9,"nodeType":"644","messageId":"645","endLine":153,"endColumn":16},{"ruleId":"642","severity":1,"message":"743","line":168,"column":9,"nodeType":"644","messageId":"645","endLine":168,"endColumn":27},{"ruleId":"642","severity":1,"message":"743","line":193,"column":13,"nodeType":"644","messageId":"645","endLine":193,"endColumn":31},{"ruleId":"658","severity":1,"message":"659","line":217,"column":46,"nodeType":"660","messageId":"661","endLine":217,"endColumn":48},{"ruleId":"658","severity":1,"message":"659","line":268,"column":22,"nodeType":"660","messageId":"661","endLine":268,"endColumn":24},{"ruleId":"658","severity":1,"message":"659","line":307,"column":21,"nodeType":"660","messageId":"661","endLine":307,"endColumn":23},{"ruleId":"642","severity":1,"message":"740","line":431,"column":7,"nodeType":"644","messageId":"645","endLine":431,"endColumn":16},{"ruleId":"642","severity":1,"message":"741","line":478,"column":9,"nodeType":"644","messageId":"645","endLine":478,"endColumn":26},{"ruleId":"642","severity":1,"message":"742","line":484,"column":9,"nodeType":"644","messageId":"645","endLine":484,"endColumn":16},{"ruleId":"642","severity":1,"message":"743","line":498,"column":9,"nodeType":"644","messageId":"645","endLine":498,"endColumn":27},{"ruleId":"642","severity":1,"message":"743","line":526,"column":13,"nodeType":"644","messageId":"645","endLine":526,"endColumn":31},{"ruleId":"658","severity":1,"message":"659","line":572,"column":20,"nodeType":"660","messageId":"661","endLine":572,"endColumn":22},{"ruleId":"642","severity":1,"message":"740","line":766,"column":7,"nodeType":"644","messageId":"645","endLine":766,"endColumn":16},{"ruleId":"642","severity":1,"message":"741","line":817,"column":9,"nodeType":"644","messageId":"645","endLine":817,"endColumn":26},{"ruleId":"642","severity":1,"message":"742","line":823,"column":9,"nodeType":"644","messageId":"645","endLine":823,"endColumn":16},{"ruleId":"642","severity":1,"message":"743","line":837,"column":9,"nodeType":"644","messageId":"645","endLine":837,"endColumn":27},{"ruleId":"642","severity":1,"message":"743","line":850,"column":13,"nodeType":"644","messageId":"645","endLine":850,"endColumn":31},{"ruleId":"658","severity":1,"message":"659","line":897,"column":20,"nodeType":"660","messageId":"661","endLine":897,"endColumn":22},{"ruleId":"642","severity":1,"message":"744","line":1,"column":10,"nodeType":"644","messageId":"645","endLine":1,"endColumn":25},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"743","line":45,"column":11,"nodeType":"644","messageId":"645","endLine":45,"endColumn":29},{"ruleId":"676","severity":1,"message":"677","line":140,"column":11,"nodeType":"678","messageId":"661","endLine":140,"endColumn":17},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"676","severity":1,"message":"677","line":136,"column":11,"nodeType":"678","messageId":"661","endLine":136,"endColumn":17},{"ruleId":"642","severity":1,"message":"643","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":26},{"ruleId":"642","severity":1,"message":"679","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":38},{"ruleId":"642","severity":1,"message":"664","line":2,"column":80,"nodeType":"644","messageId":"645","endLine":2,"endColumn":100},{"ruleId":"642","severity":1,"message":"681","line":2,"column":102,"nodeType":"644","messageId":"645","endLine":2,"endColumn":130},{"ruleId":"642","severity":1,"message":"665","line":2,"column":132,"nodeType":"644","messageId":"645","endLine":2,"endColumn":158},{"ruleId":"642","severity":1,"message":"682","line":2,"column":160,"nodeType":"644","messageId":"645","endLine":2,"endColumn":180},{"ruleId":"642","severity":1,"message":"666","line":2,"column":182,"nodeType":"644","messageId":"645","endLine":2,"endColumn":204},{"ruleId":"642","severity":1,"message":"671","line":3,"column":32,"nodeType":"644","messageId":"645","endLine":3,"endColumn":48},{"ruleId":"642","severity":1,"message":"746","line":3,"column":50,"nodeType":"644","messageId":"645","endLine":3,"endColumn":70},{"ruleId":"642","severity":1,"message":"663","line":3,"column":72,"nodeType":"644","messageId":"645","endLine":3,"endColumn":92},{"ruleId":"642","severity":1,"message":"683","line":3,"column":94,"nodeType":"644","messageId":"645","endLine":3,"endColumn":114},{"ruleId":"642","severity":1,"message":"698","line":5,"column":24,"nodeType":"644","messageId":"645","endLine":5,"endColumn":26},{"ruleId":"642","severity":1,"message":"747","line":6,"column":21,"nodeType":"644","messageId":"645","endLine":6,"endColumn":34},{"ruleId":"642","severity":1,"message":"688","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":26},{"ruleId":"642","severity":1,"message":"689","line":8,"column":21,"nodeType":"644","messageId":"645","endLine":8,"endColumn":34},{"ruleId":"642","severity":1,"message":"748","line":8,"column":36,"nodeType":"644","messageId":"645","endLine":8,"endColumn":39},{"ruleId":"642","severity":1,"message":"691","line":8,"column":41,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"692","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":15},{"ruleId":"642","severity":1,"message":"749","line":10,"column":15,"nodeType":"644","messageId":"645","endLine":10,"endColumn":33},{"ruleId":"642","severity":1,"message":"750","line":29,"column":9,"nodeType":"644","messageId":"645","endLine":29,"endColumn":19},{"ruleId":"638","replacedBy":"751"},{"ruleId":"640","replacedBy":"752"},{"ruleId":"642","severity":1,"message":"643","line":4,"column":10,"nodeType":"644","messageId":"645","endLine":4,"endColumn":19},{"ruleId":"642","severity":1,"message":"646","line":25,"column":9,"nodeType":"644","messageId":"645","endLine":25,"endColumn":23},{"ruleId":"642","severity":1,"message":"647","line":27,"column":10,"nodeType":"644","messageId":"645","endLine":27,"endColumn":22},{"ruleId":"642","severity":1,"message":"648","line":27,"column":24,"nodeType":"644","messageId":"645","endLine":27,"endColumn":39},{"ruleId":"642","severity":1,"message":"649","line":3,"column":3,"nodeType":"644","messageId":"645","endLine":3,"endColumn":9},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"676","severity":1,"message":"677","line":136,"column":11,"nodeType":"678","messageId":"661","endLine":136,"endColumn":17},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"668","line":8,"column":54,"nodeType":"644","messageId":"645","endLine":8,"endColumn":65},{"ruleId":"642","severity":1,"message":"669","line":49,"column":9,"nodeType":"644","messageId":"645","endLine":49,"endColumn":30},{"ruleId":"642","severity":1,"message":"670","line":122,"column":11,"nodeType":"644","messageId":"645","endLine":122,"endColumn":20},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"743","line":45,"column":11,"nodeType":"644","messageId":"645","endLine":45,"endColumn":29},{"ruleId":"676","severity":1,"message":"677","line":140,"column":11,"nodeType":"678","messageId":"661","endLine":140,"endColumn":17},{"ruleId":"642","severity":1,"message":"643","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":26},{"ruleId":"642","severity":1,"message":"679","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":38},{"ruleId":"642","severity":1,"message":"680","line":2,"column":40,"nodeType":"644","messageId":"645","endLine":2,"endColumn":78},{"ruleId":"642","severity":1,"message":"664","line":2,"column":80,"nodeType":"644","messageId":"645","endLine":2,"endColumn":100},{"ruleId":"642","severity":1,"message":"681","line":2,"column":102,"nodeType":"644","messageId":"645","endLine":2,"endColumn":130},{"ruleId":"642","severity":1,"message":"665","line":2,"column":132,"nodeType":"644","messageId":"645","endLine":2,"endColumn":158},{"ruleId":"642","severity":1,"message":"682","line":2,"column":160,"nodeType":"644","messageId":"645","endLine":2,"endColumn":180},{"ruleId":"642","severity":1,"message":"666","line":2,"column":182,"nodeType":"644","messageId":"645","endLine":2,"endColumn":204},{"ruleId":"642","severity":1,"message":"671","line":3,"column":22,"nodeType":"644","messageId":"645","endLine":3,"endColumn":38},{"ruleId":"642","severity":1,"message":"663","line":3,"column":40,"nodeType":"644","messageId":"645","endLine":3,"endColumn":60},{"ruleId":"642","severity":1,"message":"683","line":3,"column":62,"nodeType":"644","messageId":"645","endLine":3,"endColumn":82},{"ruleId":"642","severity":1,"message":"684","line":4,"column":10,"nodeType":"644","messageId":"645","endLine":4,"endColumn":21},{"ruleId":"642","severity":1,"message":"685","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":19},{"ruleId":"642","severity":1,"message":"686","line":5,"column":21,"nodeType":"644","messageId":"645","endLine":5,"endColumn":32},{"ruleId":"642","severity":1,"message":"687","line":5,"column":34,"nodeType":"644","messageId":"645","endLine":5,"endColumn":56},{"ruleId":"642","severity":1,"message":"688","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":26},{"ruleId":"642","severity":1,"message":"689","line":7,"column":36,"nodeType":"644","messageId":"645","endLine":7,"endColumn":49},{"ruleId":"642","severity":1,"message":"690","line":7,"column":51,"nodeType":"644","messageId":"645","endLine":7,"endColumn":70},{"ruleId":"642","severity":1,"message":"691","line":7,"column":72,"nodeType":"644","messageId":"645","endLine":7,"endColumn":78},{"ruleId":"642","severity":1,"message":"692","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":15},{"ruleId":"642","severity":1,"message":"693","line":9,"column":8,"nodeType":"644","messageId":"645","endLine":9,"endColumn":10},{"ruleId":"642","severity":1,"message":"694","line":11,"column":10,"nodeType":"644","messageId":"645","endLine":11,"endColumn":14},{"ruleId":"642","severity":1,"message":"695","line":11,"column":16,"nodeType":"644","messageId":"645","endLine":11,"endColumn":19},{"ruleId":"642","severity":1,"message":"696","line":11,"column":21,"nodeType":"644","messageId":"645","endLine":11,"endColumn":27},{"ruleId":"642","severity":1,"message":"697","line":11,"column":29,"nodeType":"644","messageId":"645","endLine":11,"endColumn":32},{"ruleId":"642","severity":1,"message":"698","line":11,"column":34,"nodeType":"644","messageId":"645","endLine":11,"endColumn":36},{"ruleId":"642","severity":1,"message":"699","line":11,"column":38,"nodeType":"644","messageId":"645","endLine":11,"endColumn":41},{"ruleId":"642","severity":1,"message":"700","line":11,"column":43,"nodeType":"644","messageId":"645","endLine":11,"endColumn":47},{"ruleId":"642","severity":1,"message":"654","line":11,"column":49,"nodeType":"644","messageId":"645","endLine":11,"endColumn":53},{"ruleId":"642","severity":1,"message":"643","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":26},{"ruleId":"642","severity":1,"message":"679","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":38},{"ruleId":"642","severity":1,"message":"680","line":2,"column":40,"nodeType":"644","messageId":"645","endLine":2,"endColumn":78},{"ruleId":"642","severity":1,"message":"664","line":2,"column":80,"nodeType":"644","messageId":"645","endLine":2,"endColumn":100},{"ruleId":"642","severity":1,"message":"681","line":2,"column":102,"nodeType":"644","messageId":"645","endLine":2,"endColumn":130},{"ruleId":"642","severity":1,"message":"665","line":2,"column":132,"nodeType":"644","messageId":"645","endLine":2,"endColumn":158},{"ruleId":"642","severity":1,"message":"682","line":2,"column":160,"nodeType":"644","messageId":"645","endLine":2,"endColumn":180},{"ruleId":"642","severity":1,"message":"666","line":2,"column":182,"nodeType":"644","messageId":"645","endLine":2,"endColumn":204},{"ruleId":"642","severity":1,"message":"753","line":3,"column":22,"nodeType":"644","messageId":"645","endLine":3,"endColumn":30},{"ruleId":"642","severity":1,"message":"671","line":3,"column":32,"nodeType":"644","messageId":"645","endLine":3,"endColumn":48},{"ruleId":"642","severity":1,"message":"746","line":3,"column":50,"nodeType":"644","messageId":"645","endLine":3,"endColumn":70},{"ruleId":"642","severity":1,"message":"663","line":3,"column":72,"nodeType":"644","messageId":"645","endLine":3,"endColumn":92},{"ruleId":"642","severity":1,"message":"683","line":3,"column":94,"nodeType":"644","messageId":"645","endLine":3,"endColumn":114},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"698","line":5,"column":24,"nodeType":"644","messageId":"645","endLine":5,"endColumn":26},{"ruleId":"642","severity":1,"message":"747","line":6,"column":21,"nodeType":"644","messageId":"645","endLine":6,"endColumn":34},{"ruleId":"642","severity":1,"message":"688","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":26},{"ruleId":"642","severity":1,"message":"689","line":8,"column":21,"nodeType":"644","messageId":"645","endLine":8,"endColumn":34},{"ruleId":"642","severity":1,"message":"748","line":8,"column":36,"nodeType":"644","messageId":"645","endLine":8,"endColumn":39},{"ruleId":"642","severity":1,"message":"691","line":8,"column":41,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"692","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":15},{"ruleId":"642","severity":1,"message":"749","line":10,"column":15,"nodeType":"644","messageId":"645","endLine":10,"endColumn":33},{"ruleId":"642","severity":1,"message":"750","line":33,"column":9,"nodeType":"644","messageId":"645","endLine":33,"endColumn":19},{"ruleId":"642","severity":1,"message":"754","line":112,"column":10,"nodeType":"644","messageId":"645","endLine":112,"endColumn":20},{"ruleId":"642","severity":1,"message":"755","line":112,"column":22,"nodeType":"644","messageId":"645","endLine":112,"endColumn":35},{"ruleId":"642","severity":1,"message":"756","line":113,"column":10,"nodeType":"644","messageId":"645","endLine":113,"endColumn":33},{"ruleId":"642","severity":1,"message":"757","line":113,"column":35,"nodeType":"644","messageId":"645","endLine":113,"endColumn":61},{"ruleId":"642","severity":1,"message":"643","line":1,"column":17,"nodeType":"644","messageId":"645","endLine":1,"endColumn":26},{"ruleId":"642","severity":1,"message":"679","line":2,"column":10,"nodeType":"644","messageId":"645","endLine":2,"endColumn":38},{"ruleId":"642","severity":1,"message":"664","line":2,"column":80,"nodeType":"644","messageId":"645","endLine":2,"endColumn":100},{"ruleId":"642","severity":1,"message":"681","line":2,"column":102,"nodeType":"644","messageId":"645","endLine":2,"endColumn":130},{"ruleId":"642","severity":1,"message":"665","line":2,"column":132,"nodeType":"644","messageId":"645","endLine":2,"endColumn":158},{"ruleId":"642","severity":1,"message":"682","line":2,"column":160,"nodeType":"644","messageId":"645","endLine":2,"endColumn":180},{"ruleId":"642","severity":1,"message":"666","line":2,"column":182,"nodeType":"644","messageId":"645","endLine":2,"endColumn":204},{"ruleId":"642","severity":1,"message":"671","line":3,"column":32,"nodeType":"644","messageId":"645","endLine":3,"endColumn":48},{"ruleId":"642","severity":1,"message":"746","line":3,"column":50,"nodeType":"644","messageId":"645","endLine":3,"endColumn":70},{"ruleId":"642","severity":1,"message":"663","line":3,"column":72,"nodeType":"644","messageId":"645","endLine":3,"endColumn":92},{"ruleId":"642","severity":1,"message":"683","line":3,"column":94,"nodeType":"644","messageId":"645","endLine":3,"endColumn":114},{"ruleId":"642","severity":1,"message":"698","line":5,"column":24,"nodeType":"644","messageId":"645","endLine":5,"endColumn":26},{"ruleId":"642","severity":1,"message":"747","line":6,"column":21,"nodeType":"644","messageId":"645","endLine":6,"endColumn":34},{"ruleId":"642","severity":1,"message":"688","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":26},{"ruleId":"642","severity":1,"message":"689","line":8,"column":21,"nodeType":"644","messageId":"645","endLine":8,"endColumn":34},{"ruleId":"642","severity":1,"message":"748","line":8,"column":36,"nodeType":"644","messageId":"645","endLine":8,"endColumn":39},{"ruleId":"642","severity":1,"message":"691","line":8,"column":41,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"692","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":15},{"ruleId":"642","severity":1,"message":"749","line":10,"column":15,"nodeType":"644","messageId":"645","endLine":10,"endColumn":33},{"ruleId":"642","severity":1,"message":"750","line":29,"column":9,"nodeType":"644","messageId":"645","endLine":29,"endColumn":19},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"688","line":4,"column":73,"nodeType":"644","messageId":"645","endLine":4,"endColumn":89},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"758","line":15,"column":10,"nodeType":"644","messageId":"645","endLine":15,"endColumn":21},{"ruleId":"642","severity":1,"message":"759","line":51,"column":9,"nodeType":"644","messageId":"645","endLine":51,"endColumn":17},{"ruleId":"642","severity":1,"message":"760","line":158,"column":9,"nodeType":"644","messageId":"645","endLine":158,"endColumn":27},{"ruleId":"676","severity":1,"message":"677","line":167,"column":11,"nodeType":"678","messageId":"661","endLine":167,"endColumn":17},{"ruleId":"642","severity":1,"message":"687","line":1,"column":21,"nodeType":"644","messageId":"645","endLine":1,"endColumn":43},{"ruleId":"642","severity":1,"message":"643","line":2,"column":17,"nodeType":"644","messageId":"645","endLine":2,"endColumn":26},{"ruleId":"642","severity":1,"message":"671","line":5,"column":36,"nodeType":"644","messageId":"645","endLine":5,"endColumn":52},{"ruleId":"642","severity":1,"message":"707","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":14},{"ruleId":"642","severity":1,"message":"654","line":6,"column":16,"nodeType":"644","messageId":"645","endLine":6,"endColumn":20},{"ruleId":"642","severity":1,"message":"696","line":6,"column":22,"nodeType":"644","messageId":"645","endLine":6,"endColumn":28},{"ruleId":"642","severity":1,"message":"697","line":6,"column":30,"nodeType":"644","messageId":"645","endLine":6,"endColumn":33},{"ruleId":"642","severity":1,"message":"698","line":6,"column":35,"nodeType":"644","messageId":"645","endLine":6,"endColumn":37},{"ruleId":"642","severity":1,"message":"690","line":7,"column":21,"nodeType":"644","messageId":"645","endLine":7,"endColumn":40},{"ruleId":"642","severity":1,"message":"708","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":14},{"ruleId":"642","severity":1,"message":"709","line":9,"column":16,"nodeType":"644","messageId":"645","endLine":9,"endColumn":19},{"ruleId":"642","severity":1,"message":"710","line":9,"column":21,"nodeType":"644","messageId":"645","endLine":9,"endColumn":24},{"ruleId":"642","severity":1,"message":"711","line":10,"column":28,"nodeType":"644","messageId":"645","endLine":10,"endColumn":34},{"ruleId":"642","severity":1,"message":"712","line":10,"column":52,"nodeType":"644","messageId":"645","endLine":10,"endColumn":69},{"ruleId":"642","severity":1,"message":"674","line":10,"column":71,"nodeType":"644","messageId":"645","endLine":10,"endColumn":87},{"ruleId":"642","severity":1,"message":"713","line":10,"column":89,"nodeType":"644","messageId":"645","endLine":10,"endColumn":108},{"ruleId":"642","severity":1,"message":"671","line":4,"column":23,"nodeType":"644","messageId":"645","endLine":4,"endColumn":39},{"ruleId":"642","severity":1,"message":"664","line":7,"column":10,"nodeType":"644","messageId":"645","endLine":7,"endColumn":30},{"ruleId":"642","severity":1,"message":"666","line":7,"column":32,"nodeType":"644","messageId":"645","endLine":7,"endColumn":54},{"ruleId":"642","severity":1,"message":"672","line":9,"column":10,"nodeType":"644","messageId":"645","endLine":9,"endColumn":34},{"ruleId":"642","severity":1,"message":"668","line":9,"column":41,"nodeType":"644","messageId":"645","endLine":9,"endColumn":52},{"ruleId":"642","severity":1,"message":"673","line":9,"column":54,"nodeType":"644","messageId":"645","endLine":9,"endColumn":68},{"ruleId":"642","severity":1,"message":"674","line":9,"column":70,"nodeType":"644","messageId":"645","endLine":9,"endColumn":86},{"ruleId":"642","severity":1,"message":"675","line":21,"column":9,"nodeType":"644","messageId":"645","endLine":21,"endColumn":20},{"ruleId":"676","severity":1,"message":"677","line":314,"column":11,"nodeType":"678","messageId":"661","endLine":314,"endColumn":17},{"ruleId":"676","severity":1,"message":"677","line":348,"column":11,"nodeType":"678","messageId":"661","endLine":348,"endColumn":17},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"758","line":19,"column":10,"nodeType":"644","messageId":"645","endLine":19,"endColumn":21},{"ruleId":"642","severity":1,"message":"761","line":19,"column":23,"nodeType":"644","messageId":"645","endLine":19,"endColumn":37},{"ruleId":"676","severity":1,"message":"677","line":71,"column":11,"nodeType":"678","messageId":"661","endLine":71,"endColumn":17},{"ruleId":"642","severity":1,"message":"726","line":3,"column":49,"nodeType":"644","messageId":"645","endLine":3,"endColumn":60},{"ruleId":"658","severity":1,"message":"659","line":57,"column":22,"nodeType":"660","messageId":"661","endLine":57,"endColumn":24},{"ruleId":"642","severity":1,"message":"700","line":1,"column":43,"nodeType":"644","messageId":"645","endLine":1,"endColumn":47},{"ruleId":"642","severity":1,"message":"730","line":2,"column":21,"nodeType":"644","messageId":"645","endLine":2,"endColumn":46},{"ruleId":"642","severity":1,"message":"731","line":2,"column":76,"nodeType":"644","messageId":"645","endLine":2,"endColumn":91},{"ruleId":"642","severity":1,"message":"732","line":5,"column":7,"nodeType":"644","messageId":"645","endLine":5,"endColumn":20},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"688","line":4,"column":73,"nodeType":"644","messageId":"645","endLine":4,"endColumn":89},{"ruleId":"642","severity":1,"message":"745","line":4,"column":91,"nodeType":"644","messageId":"645","endLine":4,"endColumn":108},{"ruleId":"642","severity":1,"message":"654","line":5,"column":10,"nodeType":"644","messageId":"645","endLine":5,"endColumn":14},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"759","line":51,"column":9,"nodeType":"644","messageId":"645","endLine":51,"endColumn":17},{"ruleId":"642","severity":1,"message":"760","line":134,"column":9,"nodeType":"644","messageId":"645","endLine":134,"endColumn":27},{"ruleId":"676","severity":1,"message":"677","line":143,"column":11,"nodeType":"678","messageId":"661","endLine":143,"endColumn":17},{"ruleId":"642","severity":1,"message":"662","line":1,"column":58,"nodeType":"644","messageId":"645","endLine":1,"endColumn":64},{"ruleId":"642","severity":1,"message":"663","line":4,"column":33,"nodeType":"644","messageId":"645","endLine":4,"endColumn":53},{"ruleId":"642","severity":1,"message":"671","line":4,"column":55,"nodeType":"644","messageId":"645","endLine":4,"endColumn":71},{"ruleId":"642","severity":1,"message":"664","line":6,"column":10,"nodeType":"644","messageId":"645","endLine":6,"endColumn":30},{"ruleId":"642","severity":1,"message":"665","line":6,"column":32,"nodeType":"644","messageId":"645","endLine":6,"endColumn":58},{"ruleId":"642","severity":1,"message":"666","line":6,"column":60,"nodeType":"644","messageId":"645","endLine":6,"endColumn":82},{"ruleId":"642","severity":1,"message":"680","line":6,"column":84,"nodeType":"644","messageId":"645","endLine":6,"endColumn":122},{"ruleId":"642","severity":1,"message":"672","line":6,"column":124,"nodeType":"644","messageId":"645","endLine":6,"endColumn":148},{"ruleId":"642","severity":1,"message":"718","line":7,"column":21,"nodeType":"644","messageId":"645","endLine":7,"endColumn":34},{"ruleId":"642","severity":1,"message":"762","line":7,"column":51,"nodeType":"644","messageId":"645","endLine":7,"endColumn":68},{"ruleId":"642","severity":1,"message":"667","line":8,"column":10,"nodeType":"644","messageId":"645","endLine":8,"endColumn":47},{"ruleId":"642","severity":1,"message":"763","line":121,"column":9,"nodeType":"644","messageId":"645","endLine":121,"endColumn":17},"no-native-reassign",["764"],"no-negated-in-lhs",["765"],"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'walletProvider' is assigned a value but never used.","'transactions' is assigned a value but never used.","'setTransactions' is assigned a value but never used.","'Button' is defined but never used.","'trans' is assigned a value but never used.","'amount' is assigned a value but never used.",["764"],["765"],"'nu64' is defined but never used.","'TEST_TOKENS' is defined but never used.","'fundPDA' is assigned a value but never used.","'setFundPDA' is assigned a value but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'create' is defined but never used.","'platformStateAccount' is defined but never used.","'createKeyIfNotExists' is defined but never used.","'findAssociatedTokenAddress' is defined but never used.","'signAndSendTransaction' is defined but never used.","'awaitTransactionSignatureConfirmation' is defined but never used.","'MangoClient' is defined but never used.","'investorStateAccounts' is assigned a value but never used.","'fundState' is assigned a value but never used.","'FUND_ACCOUNT_KEY' is defined but never used.","'createAccountInstruction' is defined but never used.","'NodeBankLayout' is defined but never used.","'PerpMarketLayout' is defined but never used.","'fundAccount' is assigned a value but never used.","no-dupe-keys","Duplicate key 'memcmp'.","ObjectExpression","'createAssociatedTokenAccount' is defined but never used.","'createAssociatedTokenAccountIfNotExist' is defined but never used.","'createTokenAccountIfNotExist' is defined but never used.","'setWalletTransaction' is defined but never used.","'PLATFORM_ACCOUNT_KEY' is defined but never used.","'GlobalState' is defined but never used.","'PublicKey' is defined but never used.","'Transaction' is defined but never used.","'TransactionInstruction' is defined but never used.","'TOKEN_PROGRAM_ID' is defined but never used.","'PLATFORM_DATA' is defined but never used.","'SPL_TOKEN_MINT_DATA' is defined but never used.","'U64F64' is defined but never used.","'Badge' is defined but never used.","'BN' is defined but never used.","'Blob' is defined but never used.","'seq' is defined but never used.","'struct' is defined but never used.","'u32' is defined but never used.","'u8' is defined but never used.","'u16' is defined but never used.","'ns64' is defined but never used.",["764"],["765"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","'blob' is defined but never used.","'Card' is defined but never used.","'Col' is defined but never used.","'Row' is defined but never used.","'I80F48' is defined but never used.","'PerpAccountLayout' is defined but never used.","'RootBankCacheLayout' is defined but never used.","'SYSVAR_CLOCK_PUBKEY' is defined but never used.","'useState' is defined but never used.","'priceStateAccount' is defined but never used.","'FUND_DATA' is defined but never used.","'INVESTOR_DATA' is defined but never used.","'PRICE_DATA' is defined but never used.","'devnet_pools' is defined but never used.","'pools' is defined but never used.","'updatePoolPrices' is defined but never used.","'MangoGroupLayout' is defined but never used.","'MarginAccountLayout' is defined but never used.","'investinBaseTokenAccount' is assigned a value but never used.","'ModalFooter' is defined but never used.","'RAY_TOKENS' is defined but never used.","'TEST_LP_TOKENS' is defined but never used.","'U64F64Layout' is defined but never used.","'sendAndConfirmTransaction' is defined but never used.","'sendTransaction' is defined but never used.","'GREETING_SIZE' is assigned a value but never used.","Duplicate key 'SAMO'.","Duplicate key 'PORT'.","'BitStructure' is defined but never used.","'uiToNative' is defined but never used.","no-use-before-define","'client' was used before it was defined.","usedBeforeDefined","'orderType' is assigned a value but never used.","'selfTradeBehavior' is assigned a value but never used.","'signers' is assigned a value but never used.","'openOrdersLamports' is assigned a value but never used.","'GreetingAccount' is defined but never used.","'SYSTEM_PROGRAM_ID' is defined but never used.","'MARGIN_ACCOUNT_KEY_1' is defined but never used.","'SystemProgram' is defined but never used.","'u64' is defined but never used.","'MangoAccountLayout' is defined but never used.","'mangoGroup' is assigned a value but never used.",["764"],["765"],"'delegate' is defined but never used.","'min_amount' is assigned a value but never used.","'setMin_amount' is assigned a value but never used.","'platform_fee_percentage' is assigned a value but never used.","'setPlatform_fee_percentage' is assigned a value but never used.","'investments' is assigned a value but never used.","'nodeBank' is assigned a value but never used.","'handleGetInvestors' is assigned a value but never used.","'setInvestments' is assigned a value but never used.","'OLD_INVESTOR_DATA' is defined but never used.","'mangoAcc' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]