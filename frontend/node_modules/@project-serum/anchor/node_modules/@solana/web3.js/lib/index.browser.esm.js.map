{"version":3,"file":"index.browser.esm.js","sources":["../src/utils/ed25519.ts","../src/utils/to-buffer.ts","../src/utils/borsh-schema.ts","../src/publickey.ts","../src/account.ts","../src/bpf-loader-deprecated.ts","../src/transaction/constants.ts","../src/transaction/expiry-custom-errors.ts","../src/message/account-keys.ts","../src/layout.ts","../src/utils/shortvec-encoding.ts","../src/utils/assert.ts","../src/message/compiled-keys.ts","../src/message/legacy.ts","../src/message/v0.ts","../src/message/versioned.ts","../src/transaction/legacy.ts","../src/transaction/message.ts","../src/transaction/versioned.ts","../src/sysvar.ts","../src/utils/send-and-confirm-transaction.ts","../src/utils/sleep.ts","../src/instruction.ts","../src/fee-calculator.ts","../src/nonce-account.ts","../src/utils/bigint.ts","../src/programs/system.ts","../src/loader.ts","../src/bpf-loader.ts","../node_modules/fast-stable-stringify/index.js","../src/epoch-schedule.ts","../src/errors.ts","../src/__forks__/browser/fetch-impl.ts","../src/timing.ts","../src/account-data.ts","../src/programs/address-lookup-table/state.ts","../src/utils/makeWebsocketUrl.ts","../src/connection.ts","../src/keypair.ts","../src/programs/address-lookup-table/index.ts","../src/programs/compute-budget.ts","../src/programs/ed25519.ts","../src/utils/secp256k1.ts","../src/programs/secp256k1.ts","../src/programs/stake.ts","../src/programs/vote.ts","../src/validator-info.ts","../src/vote-account.ts","../src/utils/cluster.ts","../src/utils/send-and-confirm-raw-transaction.ts","../src/index.ts"],"sourcesContent":["import {sha512} from '@noble/hashes/sha512';\nimport * as ed25519 from '@noble/ed25519';\n\n/**\n * A 64 byte secret key, the first 32 bytes of which is the\n * private scalar and the last 32 bytes is the public key.\n * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n */\ntype Ed25519SecretKey = Uint8Array;\n\n/**\n * Ed25519 Keypair\n */\nexport interface Ed25519Keypair {\n  publicKey: Uint8Array;\n  secretKey: Ed25519SecretKey;\n}\n\ned25519.utils.sha512Sync = (...m) => sha512(ed25519.utils.concatBytes(...m));\n\nexport const generatePrivateKey = ed25519.utils.randomPrivateKey;\nexport const generateKeypair = (): Ed25519Keypair => {\n  const privateScalar = ed25519.utils.randomPrivateKey();\n  const publicKey = getPublicKey(privateScalar);\n  const secretKey = new Uint8Array(64);\n  secretKey.set(privateScalar);\n  secretKey.set(publicKey, 32);\n  return {\n    publicKey,\n    secretKey,\n  };\n};\nexport const getPublicKey = ed25519.sync.getPublicKey;\nexport function isOnCurve(publicKey: Uint8Array): boolean {\n  try {\n    ed25519.Point.fromHex(publicKey, true /* strict */);\n    return true;\n  } catch {\n    return false;\n  }\n}\nexport const sign = (\n  message: Parameters<typeof ed25519.sync.sign>[0],\n  secretKey: Ed25519SecretKey,\n) => ed25519.sync.sign(message, secretKey.slice(0, 32));\nexport const verify = ed25519.sync.verify;\n","import {Buffer} from 'buffer';\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (Buffer.isBuffer(arr)) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","import {Buffer} from 'buffer';\nimport {serialize, deserialize, deserializeUnchecked} from 'borsh';\n\n// Class wrapping a plain object\nexport class Struct {\n  constructor(properties: any) {\n    Object.assign(this, properties);\n  }\n\n  encode(): Buffer {\n    return Buffer.from(serialize(SOLANA_SCHEMA, this));\n  }\n\n  static decode(data: Buffer): any {\n    return deserialize(SOLANA_SCHEMA, this, data);\n  }\n\n  static decodeUnchecked(data: Buffer): any {\n    return deserializeUnchecked(SOLANA_SCHEMA, this, data);\n  }\n}\n\n// Class representing a Rust-compatible enum, since enums are only strings or\n// numbers in pure JS\nexport class Enum extends Struct {\n  enum: string = '';\n  constructor(properties: any) {\n    super(properties);\n    if (Object.keys(properties).length !== 1) {\n      throw new Error('Enum can only take single value');\n    }\n    Object.keys(properties).map(key => {\n      this.enum = key;\n    });\n  }\n}\n\nexport const SOLANA_SCHEMA: Map<Function, any> = new Map();\n","import BN from 'bn.js';\nimport bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport {sha256} from '@noble/hashes/sha256';\n\nimport {isOnCurve} from './utils/ed25519';\nimport {Struct, SOLANA_SCHEMA} from './utils/borsh-schema';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * Maximum length of derived pubkey seed\n */\nexport const MAX_SEED_LENGTH = 32;\n\n/**\n * Size of public key in bytes\n */\nexport const PUBLIC_KEY_LENGTH = 32;\n\n/**\n * Value to be converted into public key\n */\nexport type PublicKeyInitData =\n  | number\n  | string\n  | Uint8Array\n  | Array<number>\n  | PublicKeyData;\n\n/**\n * JSON object representation of PublicKey class\n */\nexport type PublicKeyData = {\n  /** @internal */\n  _bn: BN;\n};\n\nfunction isPublicKeyData(value: PublicKeyInitData): value is PublicKeyData {\n  return (value as PublicKeyData)._bn !== undefined;\n}\n\n// local counter used by PublicKey.unique()\nlet uniquePublicKeyCounter = 1;\n\n/**\n * A public key\n */\nexport class PublicKey extends Struct {\n  /** @internal */\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   * @param value ed25519 public key as buffer or base-58 encoded string\n   */\n  constructor(value: PublicKeyInitData) {\n    super({});\n    if (isPublicKeyData(value)) {\n      this._bn = value._bn;\n    } else {\n      if (typeof value === 'string') {\n        // assume base 58 encoding by default\n        const decoded = bs58.decode(value);\n        if (decoded.length != PUBLIC_KEY_LENGTH) {\n          throw new Error(`Invalid public key input`);\n        }\n        this._bn = new BN(decoded);\n      } else {\n        this._bn = new BN(value);\n      }\n\n      if (this._bn.byteLength() > 32) {\n        throw new Error(`Invalid public key input`);\n      }\n    }\n  }\n\n  /**\n   * Returns a unique PublicKey for tests and benchmarks using acounter\n   */\n  static unique(): PublicKey {\n    const key = new PublicKey(uniquePublicKeyCounter);\n    uniquePublicKeyCounter += 1;\n    return new PublicKey(key.toBuffer());\n  }\n\n  /**\n   * Default public key value. The base58-encoded string representation is all ones (as seen below)\n   * The underlying BN number is 32 bytes that are all zeros\n   */\n  static default: PublicKey = new PublicKey('11111111111111111111111111111111');\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBytes());\n  }\n\n  toJSON(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Return the byte array representation of the public key\n   */\n  toBytes(): Uint8Array {\n    return this.toBuffer();\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === PUBLIC_KEY_LENGTH) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   * The program ID will also serve as the owner of the public key, giving\n   * it permission to write data to the account.\n   */\n  /* eslint-disable require-await */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  /* eslint-disable require-await */\n  static createProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): PublicKey {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      if (seed.length > MAX_SEED_LENGTH) {\n        throw new TypeError(`Max seed length exceeded`);\n      }\n      buffer = Buffer.concat([buffer, toBuffer(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    const publicKeyBytes = sha256(buffer);\n    if (isOnCurve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Async version of createProgramAddressSync\n   * For backwards compatibility\n   */\n  /* eslint-disable require-await */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    return this.createProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static findProgramAddressSync(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): [PublicKey, number] {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = this.createProgramAddressSync(seedsWithNonce, programId);\n      } catch (err) {\n        if (err instanceof TypeError) {\n          throw err;\n        }\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n\n  /**\n   * Async version of findProgramAddressSync\n   * For backwards compatibility\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<[PublicKey, number]> {\n    return this.findProgramAddressSync(seeds, programId);\n  }\n\n  /**\n   * Check that a pubkey is on the ed25519 curve.\n   */\n  static isOnCurve(pubkeyData: PublicKeyInitData): boolean {\n    const pubkey = new PublicKey(pubkeyData);\n    return isOnCurve(pubkey.toBytes());\n  }\n}\n\nSOLANA_SCHEMA.set(PublicKey, {\n  kind: 'struct',\n  fields: [['_bn', 'u256']],\n});\n","import {Buffer} from 'buffer';\n\nimport {generatePrivateKey, getPublicKey} from './utils/ed25519';\nimport {toBuffer} from './utils/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n *\n * @deprecated since v1.10.0, please use {@link Keypair} instead.\n */\nexport class Account {\n  /** @internal */\n  private _publicKey: Buffer;\n  /** @internal */\n  private _secretKey: Buffer;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      const secretKeyBuffer = toBuffer(secretKey);\n      if (secretKey.length !== 64) {\n        throw new Error('bad secret key size');\n      }\n      this._publicKey = secretKeyBuffer.slice(32, 64);\n      this._secretKey = secretKeyBuffer.slice(0, 32);\n    } else {\n      this._secretKey = toBuffer(generatePrivateKey());\n      this._publicKey = toBuffer(getPublicKey(this._secretKey));\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account. The first 32 bytes\n   * is the private scalar and the last 32 bytes is the public key.\n   * Read more: https://blog.mozilla.org/warner/2011/11/29/ed25519-keys/\n   */\n  get secretKey(): Buffer {\n    return Buffer.concat([this._secretKey, this._publicKey], 64);\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const BPF_LOADER_DEPRECATED_PROGRAM_ID = new PublicKey(\n  'BPFLoader1111111111111111111111111111111111',\n);\n","/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nexport const VERSION_PREFIX_MASK = 0x7f;\n\nexport const SIGNATURE_LENGTH_IN_BYTES = 64;\n","export class TransactionExpiredBlockheightExceededError extends Error {\n  signature: string;\n\n  constructor(signature: string) {\n    super(`Signature ${signature} has expired: block height exceeded.`);\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(\n  TransactionExpiredBlockheightExceededError.prototype,\n  'name',\n  {\n    value: 'TransactionExpiredBlockheightExceededError',\n  },\n);\n\nexport class TransactionExpiredTimeoutError extends Error {\n  signature: string;\n\n  constructor(signature: string, timeoutSeconds: number) {\n    super(\n      `Transaction was not confirmed in ${timeoutSeconds.toFixed(\n        2,\n      )} seconds. It is ` +\n        'unknown if it succeeded or failed. Check signature ' +\n        `${signature} using the Solana Explorer or CLI tools.`,\n    );\n    this.signature = signature;\n  }\n}\n\nObject.defineProperty(TransactionExpiredTimeoutError.prototype, 'name', {\n  value: 'TransactionExpiredTimeoutError',\n});\n","import {LoadedAddresses} from '../connection';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {MessageCompiledInstruction} from './index';\n\nexport type AccountKeysFromLookups = LoadedAddresses;\n\nexport class MessageAccountKeys {\n  staticAccountKeys: Array<PublicKey>;\n  accountKeysFromLookups?: AccountKeysFromLookups;\n\n  constructor(\n    staticAccountKeys: Array<PublicKey>,\n    accountKeysFromLookups?: AccountKeysFromLookups,\n  ) {\n    this.staticAccountKeys = staticAccountKeys;\n    this.accountKeysFromLookups = accountKeysFromLookups;\n  }\n\n  keySegments(): Array<Array<PublicKey>> {\n    const keySegments = [this.staticAccountKeys];\n    if (this.accountKeysFromLookups) {\n      keySegments.push(this.accountKeysFromLookups.writable);\n      keySegments.push(this.accountKeysFromLookups.readonly);\n    }\n    return keySegments;\n  }\n\n  get(index: number): PublicKey | undefined {\n    for (const keySegment of this.keySegments()) {\n      if (index < keySegment.length) {\n        return keySegment[index];\n      } else {\n        index -= keySegment.length;\n      }\n    }\n    return;\n  }\n\n  get length(): number {\n    return this.keySegments().flat().length;\n  }\n\n  compileInstructions(\n    instructions: Array<TransactionInstruction>,\n  ): Array<MessageCompiledInstruction> {\n    // Bail early if any account indexes would overflow a u8\n    const U8_MAX = 255;\n    if (this.length > U8_MAX + 1) {\n      throw new Error('Account index overflow encountered during compilation');\n    }\n\n    const keyIndexMap = new Map();\n    this.keySegments()\n      .flat()\n      .forEach((key, index) => {\n        keyIndexMap.set(key.toBase58(), index);\n      });\n\n    const findKeyIndex = (key: PublicKey) => {\n      const keyIndex = keyIndexMap.get(key.toBase58());\n      if (keyIndex === undefined)\n        throw new Error(\n          'Encountered an unknown instruction account key during compilation',\n        );\n      return keyIndex;\n    };\n\n    return instructions.map((instruction): MessageCompiledInstruction => {\n      return {\n        programIdIndex: findKeyIndex(instruction.programId),\n        accountKeyIndexes: instruction.keys.map(meta =>\n          findKeyIndex(meta.pubkey),\n        ),\n        data: instruction.data,\n      };\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {VoteAuthorizeWithSeedArgs} from './programs/vote';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey') => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a signature\n */\nexport const signature = (property: string = 'signature') => {\n  return BufferLayout.blob(64, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64') => {\n  return BufferLayout.blob(8, property);\n};\n\ninterface IRustStringShim\n  extends Omit<\n    BufferLayout.Structure<\n      Readonly<{\n        length: number;\n        lengthPadding: number;\n        chars: Uint8Array;\n      }>\n    >,\n    'decode' | 'encode' | 'replicate'\n  > {\n  alloc: (str: string) => number;\n  decode: (b: Uint8Array, offset?: number) => string;\n  encode: (str: string, b: Uint8Array, offset?: number) => number;\n  replicate: (property: string) => this;\n}\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (\n  property: string = 'string',\n): BufferLayout.Layout<string> => {\n  const rsl = BufferLayout.struct<\n    Readonly<{\n      length?: number;\n      lengthPadding?: number;\n      chars: Uint8Array;\n    }>\n  >(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  const rslShim = rsl as unknown as IRustStringShim;\n\n  rslShim.decode = (b: Uint8Array, offset?: number) => {\n    const data = _decode(b, offset);\n    return data['chars'].toString();\n  };\n\n  rslShim.encode = (str: string, b: Uint8Array, offset?: number) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, b, offset);\n  };\n\n  rslShim.alloc = (str: string) => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rslShim;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct<\n    Readonly<{\n      staker: Uint8Array;\n      withdrawer: Uint8Array;\n    }>\n  >([publicKey('staker'), publicKey('withdrawer')], property);\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct<\n    Readonly<{\n      custodian: Uint8Array;\n      epoch: number;\n      unixTimestamp: number;\n    }>\n  >(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteInit object\n */\nexport const voteInit = (property: string = 'voteInit') => {\n  return BufferLayout.struct<\n    Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>\n  >(\n    [\n      publicKey('nodePubkey'),\n      publicKey('authorizedVoter'),\n      publicKey('authorizedWithdrawer'),\n      BufferLayout.u8('commission'),\n    ],\n    property,\n  );\n};\n\n/**\n *  Layout for a VoteAuthorizeWithSeedArgs object\n */\nexport const voteAuthorizeWithSeedArgs = (\n  property: string = 'voteAuthorizeWithSeedArgs',\n) => {\n  return BufferLayout.struct<VoteAuthorizeWithSeedArgs>(\n    [\n      BufferLayout.u32('voteAuthorizationType'),\n      publicKey('currentAuthorityDerivedKeyOwnerPubkey'),\n      rustString('currentAuthorityDerivedKeySeed'),\n      publicKey('newAuthorized'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: any, fields: any): number {\n  const getItemAlloc = (item: any): number => {\n    if (item.span >= 0) {\n      return item.span;\n    } else if (typeof item.alloc === 'function') {\n      return item.alloc(fields[item.property]);\n    } else if ('count' in item && 'elementLayout' in item) {\n      const field = fields[item.property];\n      if (Array.isArray(field)) {\n        return field.length * getItemAlloc(item.elementLayout);\n      }\n    } else if ('fields' in item) {\n      // This is a `Structure` whose size needs to be recursively measured.\n      return getAlloc({layout: item}, fields[item.property]);\n    }\n    // Couldn't determine allocated size of layout\n    return 0;\n  };\n\n  let alloc = 0;\n  type.layout.fields.forEach((item: any) => {\n    alloc += getItemAlloc(item);\n  });\n\n  return alloc;\n}\n","export function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift() as number;\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","export default function (\n  condition: unknown,\n  message?: string,\n): asserts condition {\n  if (!condition) {\n    throw new Error(message || 'Assertion failed');\n  }\n}\n","import {MessageHeader, MessageAddressTableLookup} from './index';\nimport {AccountKeysFromLookups} from './account-keys';\nimport {AddressLookupTableAccount} from '../programs';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {PublicKey} from '../publickey';\n\nexport type CompiledKeyMeta = {\n  isSigner: boolean;\n  isWritable: boolean;\n  isInvoked: boolean;\n};\n\ntype KeyMetaMap = Map<string, CompiledKeyMeta>;\n\nexport class CompiledKeys {\n  payer: PublicKey;\n  keyMetaMap: KeyMetaMap;\n\n  constructor(payer: PublicKey, keyMetaMap: KeyMetaMap) {\n    this.payer = payer;\n    this.keyMetaMap = keyMetaMap;\n  }\n\n  static compile(\n    instructions: Array<TransactionInstruction>,\n    payer: PublicKey,\n  ): CompiledKeys {\n    const keyMetaMap: KeyMetaMap = new Map();\n    const getOrInsertDefault = (pubkey: PublicKey): CompiledKeyMeta => {\n      const address = pubkey.toBase58();\n      let keyMeta = keyMetaMap.get(address);\n      if (keyMeta === undefined) {\n        keyMeta = {\n          isSigner: false,\n          isWritable: false,\n          isInvoked: false,\n        };\n        keyMetaMap.set(address, keyMeta);\n      }\n      return keyMeta;\n    };\n\n    const payerKeyMeta = getOrInsertDefault(payer);\n    payerKeyMeta.isSigner = true;\n    payerKeyMeta.isWritable = true;\n\n    for (const ix of instructions) {\n      getOrInsertDefault(ix.programId).isInvoked = true;\n      for (const accountMeta of ix.keys) {\n        const keyMeta = getOrInsertDefault(accountMeta.pubkey);\n        keyMeta.isSigner ||= accountMeta.isSigner;\n        keyMeta.isWritable ||= accountMeta.isWritable;\n      }\n    }\n\n    return new CompiledKeys(payer, keyMetaMap);\n  }\n\n  getMessageComponents(): [MessageHeader, Array<PublicKey>] {\n    const mapEntries = [...this.keyMetaMap.entries()];\n    assert(mapEntries.length <= 256, 'Max static account keys length exceeded');\n\n    const writableSigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && meta.isWritable,\n    );\n    const readonlySigners = mapEntries.filter(\n      ([, meta]) => meta.isSigner && !meta.isWritable,\n    );\n    const writableNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && meta.isWritable,\n    );\n    const readonlyNonSigners = mapEntries.filter(\n      ([, meta]) => !meta.isSigner && !meta.isWritable,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: writableSigners.length + readonlySigners.length,\n      numReadonlySignedAccounts: readonlySigners.length,\n      numReadonlyUnsignedAccounts: readonlyNonSigners.length,\n    };\n\n    // sanity checks\n    {\n      assert(\n        writableSigners.length > 0,\n        'Expected at least one writable signer key',\n      );\n      const [payerAddress] = writableSigners[0];\n      assert(\n        payerAddress === this.payer.toBase58(),\n        'Expected first writable signer key to be the fee payer',\n      );\n    }\n\n    const staticAccountKeys = [\n      ...writableSigners.map(([address]) => new PublicKey(address)),\n      ...readonlySigners.map(([address]) => new PublicKey(address)),\n      ...writableNonSigners.map(([address]) => new PublicKey(address)),\n      ...readonlyNonSigners.map(([address]) => new PublicKey(address)),\n    ];\n\n    return [header, staticAccountKeys];\n  }\n\n  extractTableLookup(\n    lookupTable: AddressLookupTableAccount,\n  ): [MessageAddressTableLookup, AccountKeysFromLookups] | undefined {\n    const [writableIndexes, drainedWritableKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && keyMeta.isWritable,\n      );\n    const [readonlyIndexes, drainedReadonlyKeys] =\n      this.drainKeysFoundInLookupTable(\n        lookupTable.state.addresses,\n        keyMeta =>\n          !keyMeta.isSigner && !keyMeta.isInvoked && !keyMeta.isWritable,\n      );\n\n    // Don't extract lookup if no keys were found\n    if (writableIndexes.length === 0 && readonlyIndexes.length === 0) {\n      return;\n    }\n\n    return [\n      {\n        accountKey: lookupTable.key,\n        writableIndexes,\n        readonlyIndexes,\n      },\n      {\n        writable: drainedWritableKeys,\n        readonly: drainedReadonlyKeys,\n      },\n    ];\n  }\n\n  /** @internal */\n  private drainKeysFoundInLookupTable(\n    lookupTableEntries: Array<PublicKey>,\n    keyMetaFilter: (keyMeta: CompiledKeyMeta) => boolean,\n  ): [Array<number>, Array<PublicKey>] {\n    const lookupTableIndexes = new Array();\n    const drainedKeys = new Array();\n\n    for (const [address, keyMeta] of this.keyMetaMap.entries()) {\n      if (keyMetaFilter(keyMeta)) {\n        const key = new PublicKey(address);\n        const lookupTableIndex = lookupTableEntries.findIndex(entry =>\n          entry.equals(key),\n        );\n        if (lookupTableIndex >= 0) {\n          assert(lookupTableIndex < 256, 'Max lookup table index exceeded');\n          lookupTableIndexes.push(lookupTableIndex);\n          drainedKeys.push(key);\n          this.keyMetaMap.delete(address);\n        }\n      }\n    }\n\n    return [lookupTableIndexes, drainedKeys];\n  }\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport type {Blockhash} from '../blockhash';\nimport * as Layout from '../layout';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {TransactionInstruction} from '../transaction';\nimport {CompiledKeys} from './compiled-keys';\nimport {MessageAccountKeys} from './account-keys';\n\n/**\n * An instruction to execute by a program\n *\n * @property {number} programIdIndex\n * @property {number[]} accounts\n * @property {string} data\n */\nexport type CompiledInstruction = {\n  /** Index into the transaction keys array indicating the program account that executes this instruction */\n  programIdIndex: number;\n  /** Ordered indices into the transaction keys array indicating which accounts to pass to the program */\n  accounts: number[];\n  /** The program input data encoded as base 58 */\n  data: string;\n};\n\n/**\n * Message constructor arguments\n */\nexport type MessageArgs = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** All the account keys used by this transaction */\n  accountKeys: string[] | PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  instructions: CompiledInstruction[];\n};\n\nexport type CompileLegacyArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  private indexToProgramIds: Map<number, PublicKey> = new Map<\n    number,\n    PublicKey\n  >();\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n    this.instructions.forEach(ix =>\n      this.indexToProgramIds.set(\n        ix.programIdIndex,\n        this.accountKeys[ix.programIdIndex],\n      ),\n    );\n  }\n\n  get version(): 'legacy' {\n    return 'legacy';\n  }\n\n  get staticAccountKeys(): Array<PublicKey> {\n    return this.accountKeys;\n  }\n\n  get compiledInstructions(): Array<MessageCompiledInstruction> {\n    return this.instructions.map(\n      (ix): MessageCompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      }),\n    );\n  }\n\n  get addressTableLookups(): Array<MessageAddressTableLookup> {\n    return [];\n  }\n\n  getAccountKeys(): MessageAccountKeys {\n    return new MessageAccountKeys(this.staticAccountKeys);\n  }\n\n  static compile(args: CompileLegacyArgs): Message {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(staticAccountKeys);\n    const instructions = accountKeys.compileInstructions(args.instructions).map(\n      (ix: MessageCompiledInstruction): CompiledInstruction => ({\n        programIdIndex: ix.programIdIndex,\n        accounts: ix.accountKeyIndexes,\n        data: bs58.encode(ix.data),\n      }),\n    );\n    return new Message({\n      header,\n      accountKeys: staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      instructions,\n    });\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = this.accountKeys.length - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  isProgramId(index: number): boolean {\n    return this.indexToProgramIds.has(index);\n  }\n\n  programIds(): PublicKey[] {\n    return [...this.indexToProgramIds.values()];\n  }\n\n  nonProgramIds(): PublicKey[] {\n    return this.accountKeys.filter((_, index) => !this.isProgramId(index));\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount: number[] = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = Array.from(bs58.decode(instruction.data));\n\n      let keyIndicesCount: number[] = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount: number[] = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: accounts,\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount: number[] = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct<\n        Readonly<{\n          data: number[];\n          dataLength: Uint8Array;\n          keyIndices: number[];\n          keyIndicesCount: Uint8Array;\n          programIdIndex: number;\n        }>\n      >([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct<\n      Readonly<{\n        keyCount: Uint8Array;\n        keys: Uint8Array[];\n        numReadonlySignedAccounts: Uint8Array;\n        numReadonlyUnsignedAccounts: Uint8Array;\n        numRequiredSignatures: Uint8Array;\n        recentBlockhash: Uint8Array;\n      }>\n    >([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => toBuffer(key.toBytes())),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift() as number;\n    if (\n      numRequiredSignatures !==\n      (numRequiredSignatures & VERSION_PREFIX_MASK)\n    ) {\n      throw new Error(\n        'Versioned messages must be deserialized with VersionedMessage.deserialize()',\n      );\n    }\n\n    const numReadonlySignedAccounts = byteArray.shift() as number;\n    const numReadonlyUnsignedAccounts = byteArray.shift() as number;\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      accountKeys.push(new PublicKey(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBLIC_KEY_LENGTH);\n    byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions: CompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountCount = shortvec.decodeLength(byteArray);\n      const accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const dataSlice = byteArray.slice(0, dataLength);\n      const data = bs58.encode(Buffer.from(dataSlice));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push({\n        programIdIndex,\n        accounts,\n        data,\n      });\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","import bs58 from 'bs58';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../layout';\nimport {Blockhash} from '../blockhash';\nimport {\n  MessageHeader,\n  MessageAddressTableLookup,\n  MessageCompiledInstruction,\n} from './index';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport assert from '../utils/assert';\nimport {PACKET_DATA_SIZE, VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {TransactionInstruction} from '../transaction';\nimport {AddressLookupTableAccount} from '../programs';\nimport {CompiledKeys} from './compiled-keys';\nimport {AccountKeysFromLookups, MessageAccountKeys} from './account-keys';\n\n/**\n * Message constructor arguments\n */\nexport type MessageV0Args = {\n  /** The message header, identifying signed and read-only `accountKeys` */\n  header: MessageHeader;\n  /** The static account keys used by this transaction */\n  staticAccountKeys: PublicKey[];\n  /** The hash of a recent ledger block */\n  recentBlockhash: Blockhash;\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  compiledInstructions: MessageCompiledInstruction[];\n  /** Instructions that will be executed in sequence and committed in one atomic transaction if all succeed. */\n  addressTableLookups: MessageAddressTableLookup[];\n};\n\nexport type CompileV0Args = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n  addressLookupTableAccounts?: Array<AddressLookupTableAccount>;\n};\n\nexport type GetAccountKeysArgs =\n  | {\n      accountKeysFromLookups?: AccountKeysFromLookups | null;\n    }\n  | {\n      addressLookupTableAccounts?: AddressLookupTableAccount[] | null;\n    };\n\nexport class MessageV0 {\n  header: MessageHeader;\n  staticAccountKeys: Array<PublicKey>;\n  recentBlockhash: Blockhash;\n  compiledInstructions: Array<MessageCompiledInstruction>;\n  addressTableLookups: Array<MessageAddressTableLookup>;\n\n  constructor(args: MessageV0Args) {\n    this.header = args.header;\n    this.staticAccountKeys = args.staticAccountKeys;\n    this.recentBlockhash = args.recentBlockhash;\n    this.compiledInstructions = args.compiledInstructions;\n    this.addressTableLookups = args.addressTableLookups;\n  }\n\n  get version(): 0 {\n    return 0;\n  }\n\n  get numAccountKeysFromLookups(): number {\n    let count = 0;\n    for (const lookup of this.addressTableLookups) {\n      count += lookup.readonlyIndexes.length + lookup.writableIndexes.length;\n    }\n    return count;\n  }\n\n  getAccountKeys(args?: GetAccountKeysArgs): MessageAccountKeys {\n    let accountKeysFromLookups: AccountKeysFromLookups | undefined;\n    if (\n      args &&\n      'accountKeysFromLookups' in args &&\n      args.accountKeysFromLookups\n    ) {\n      if (\n        this.numAccountKeysFromLookups !=\n        args.accountKeysFromLookups.writable.length +\n          args.accountKeysFromLookups.readonly.length\n      ) {\n        throw new Error(\n          'Failed to get account keys because of a mismatch in the number of account keys from lookups',\n        );\n      }\n      accountKeysFromLookups = args.accountKeysFromLookups;\n    } else if (\n      args &&\n      'addressLookupTableAccounts' in args &&\n      args.addressLookupTableAccounts\n    ) {\n      accountKeysFromLookups = this.resolveAddressTableLookups(\n        args.addressLookupTableAccounts,\n      );\n    } else if (this.addressTableLookups.length > 0) {\n      throw new Error(\n        'Failed to get account keys because address table lookups were not resolved',\n      );\n    }\n    return new MessageAccountKeys(\n      this.staticAccountKeys,\n      accountKeysFromLookups,\n    );\n  }\n\n  isAccountSigner(index: number): boolean {\n    return index < this.header.numRequiredSignatures;\n  }\n\n  isAccountWritable(index: number): boolean {\n    const numSignedAccounts = this.header.numRequiredSignatures;\n    const numStaticAccountKeys = this.staticAccountKeys.length;\n    if (index >= numStaticAccountKeys) {\n      const lookupAccountKeysIndex = index - numStaticAccountKeys;\n      const numWritableLookupAccountKeys = this.addressTableLookups.reduce(\n        (count, lookup) => count + lookup.writableIndexes.length,\n        0,\n      );\n      return lookupAccountKeysIndex < numWritableLookupAccountKeys;\n    } else if (index >= this.header.numRequiredSignatures) {\n      const unsignedAccountIndex = index - numSignedAccounts;\n      const numUnsignedAccounts = numStaticAccountKeys - numSignedAccounts;\n      const numWritableUnsignedAccounts =\n        numUnsignedAccounts - this.header.numReadonlyUnsignedAccounts;\n      return unsignedAccountIndex < numWritableUnsignedAccounts;\n    } else {\n      const numWritableSignedAccounts =\n        numSignedAccounts - this.header.numReadonlySignedAccounts;\n      return index < numWritableSignedAccounts;\n    }\n  }\n\n  resolveAddressTableLookups(\n    addressLookupTableAccounts: AddressLookupTableAccount[],\n  ): AccountKeysFromLookups {\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: [],\n      readonly: [],\n    };\n\n    for (const tableLookup of this.addressTableLookups) {\n      const tableAccount = addressLookupTableAccounts.find(account =>\n        account.key.equals(tableLookup.accountKey),\n      );\n      if (!tableAccount) {\n        throw new Error(\n          `Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`,\n        );\n      }\n\n      for (const index of tableLookup.writableIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.writable.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n\n      for (const index of tableLookup.readonlyIndexes) {\n        if (index < tableAccount.state.addresses.length) {\n          accountKeysFromLookups.readonly.push(\n            tableAccount.state.addresses[index],\n          );\n        } else {\n          throw new Error(\n            `Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`,\n          );\n        }\n      }\n    }\n\n    return accountKeysFromLookups;\n  }\n\n  static compile(args: CompileV0Args): MessageV0 {\n    const compiledKeys = CompiledKeys.compile(args.instructions, args.payerKey);\n\n    const addressTableLookups = new Array<MessageAddressTableLookup>();\n    const accountKeysFromLookups: AccountKeysFromLookups = {\n      writable: new Array(),\n      readonly: new Array(),\n    };\n    const lookupTableAccounts = args.addressLookupTableAccounts || [];\n    for (const lookupTable of lookupTableAccounts) {\n      const extractResult = compiledKeys.extractTableLookup(lookupTable);\n      if (extractResult !== undefined) {\n        const [addressTableLookup, {writable, readonly}] = extractResult;\n        addressTableLookups.push(addressTableLookup);\n        accountKeysFromLookups.writable.push(...writable);\n        accountKeysFromLookups.readonly.push(...readonly);\n      }\n    }\n\n    const [header, staticAccountKeys] = compiledKeys.getMessageComponents();\n    const accountKeys = new MessageAccountKeys(\n      staticAccountKeys,\n      accountKeysFromLookups,\n    );\n    const compiledInstructions = accountKeys.compileInstructions(\n      args.instructions,\n    );\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash: args.recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n\n  serialize(): Uint8Array {\n    const encodedStaticAccountKeysLength = Array<number>();\n    shortvec.encodeLength(\n      encodedStaticAccountKeysLength,\n      this.staticAccountKeys.length,\n    );\n\n    const serializedInstructions = this.serializeInstructions();\n    const encodedInstructionsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedInstructionsLength,\n      this.compiledInstructions.length,\n    );\n\n    const serializedAddressTableLookups = this.serializeAddressTableLookups();\n    const encodedAddressTableLookupsLength = Array<number>();\n    shortvec.encodeLength(\n      encodedAddressTableLookupsLength,\n      this.addressTableLookups.length,\n    );\n\n    const messageLayout = BufferLayout.struct<{\n      prefix: number;\n      header: MessageHeader;\n      staticAccountKeysLength: Uint8Array;\n      staticAccountKeys: Array<Uint8Array>;\n      recentBlockhash: Uint8Array;\n      instructionsLength: Uint8Array;\n      serializedInstructions: Uint8Array;\n      addressTableLookupsLength: Uint8Array;\n      serializedAddressTableLookups: Uint8Array;\n    }>([\n      BufferLayout.u8('prefix'),\n      BufferLayout.struct<MessageHeader>(\n        [\n          BufferLayout.u8('numRequiredSignatures'),\n          BufferLayout.u8('numReadonlySignedAccounts'),\n          BufferLayout.u8('numReadonlyUnsignedAccounts'),\n        ],\n        'header',\n      ),\n      BufferLayout.blob(\n        encodedStaticAccountKeysLength.length,\n        'staticAccountKeysLength',\n      ),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        this.staticAccountKeys.length,\n        'staticAccountKeys',\n      ),\n      Layout.publicKey('recentBlockhash'),\n      BufferLayout.blob(encodedInstructionsLength.length, 'instructionsLength'),\n      BufferLayout.blob(\n        serializedInstructions.length,\n        'serializedInstructions',\n      ),\n      BufferLayout.blob(\n        encodedAddressTableLookupsLength.length,\n        'addressTableLookupsLength',\n      ),\n      BufferLayout.blob(\n        serializedAddressTableLookups.length,\n        'serializedAddressTableLookups',\n      ),\n    ]);\n\n    const serializedMessage = new Uint8Array(PACKET_DATA_SIZE);\n    const MESSAGE_VERSION_0_PREFIX = 1 << 7;\n    const serializedMessageLength = messageLayout.encode(\n      {\n        prefix: MESSAGE_VERSION_0_PREFIX,\n        header: this.header,\n        staticAccountKeysLength: new Uint8Array(encodedStaticAccountKeysLength),\n        staticAccountKeys: this.staticAccountKeys.map(key => key.toBytes()),\n        recentBlockhash: bs58.decode(this.recentBlockhash),\n        instructionsLength: new Uint8Array(encodedInstructionsLength),\n        serializedInstructions,\n        addressTableLookupsLength: new Uint8Array(\n          encodedAddressTableLookupsLength,\n        ),\n        serializedAddressTableLookups,\n      },\n      serializedMessage,\n    );\n    return serializedMessage.slice(0, serializedMessageLength);\n  }\n\n  private serializeInstructions(): Uint8Array {\n    let serializedLength = 0;\n    const serializedInstructions = new Uint8Array(PACKET_DATA_SIZE);\n    for (const instruction of this.compiledInstructions) {\n      const encodedAccountKeyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedAccountKeyIndexesLength,\n        instruction.accountKeyIndexes.length,\n      );\n\n      const encodedDataLength = Array<number>();\n      shortvec.encodeLength(encodedDataLength, instruction.data.length);\n\n      const instructionLayout = BufferLayout.struct<{\n        programIdIndex: number;\n        encodedAccountKeyIndexesLength: Uint8Array;\n        accountKeyIndexes: number[];\n        encodedDataLength: Uint8Array;\n        data: Uint8Array;\n      }>([\n        BufferLayout.u8('programIdIndex'),\n        BufferLayout.blob(\n          encodedAccountKeyIndexesLength.length,\n          'encodedAccountKeyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          instruction.accountKeyIndexes.length,\n          'accountKeyIndexes',\n        ),\n        BufferLayout.blob(encodedDataLength.length, 'encodedDataLength'),\n        BufferLayout.blob(instruction.data.length, 'data'),\n      ]);\n\n      serializedLength += instructionLayout.encode(\n        {\n          programIdIndex: instruction.programIdIndex,\n          encodedAccountKeyIndexesLength: new Uint8Array(\n            encodedAccountKeyIndexesLength,\n          ),\n          accountKeyIndexes: instruction.accountKeyIndexes,\n          encodedDataLength: new Uint8Array(encodedDataLength),\n          data: instruction.data,\n        },\n        serializedInstructions,\n        serializedLength,\n      );\n    }\n\n    return serializedInstructions.slice(0, serializedLength);\n  }\n\n  private serializeAddressTableLookups(): Uint8Array {\n    let serializedLength = 0;\n    const serializedAddressTableLookups = new Uint8Array(PACKET_DATA_SIZE);\n    for (const lookup of this.addressTableLookups) {\n      const encodedWritableIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedWritableIndexesLength,\n        lookup.writableIndexes.length,\n      );\n\n      const encodedReadonlyIndexesLength = Array<number>();\n      shortvec.encodeLength(\n        encodedReadonlyIndexesLength,\n        lookup.readonlyIndexes.length,\n      );\n\n      const addressTableLookupLayout = BufferLayout.struct<{\n        accountKey: Uint8Array;\n        encodedWritableIndexesLength: Uint8Array;\n        writableIndexes: number[];\n        encodedReadonlyIndexesLength: Uint8Array;\n        readonlyIndexes: number[];\n      }>([\n        Layout.publicKey('accountKey'),\n        BufferLayout.blob(\n          encodedWritableIndexesLength.length,\n          'encodedWritableIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.writableIndexes.length,\n          'writableIndexes',\n        ),\n        BufferLayout.blob(\n          encodedReadonlyIndexesLength.length,\n          'encodedReadonlyIndexesLength',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8(),\n          lookup.readonlyIndexes.length,\n          'readonlyIndexes',\n        ),\n      ]);\n\n      serializedLength += addressTableLookupLayout.encode(\n        {\n          accountKey: lookup.accountKey.toBytes(),\n          encodedWritableIndexesLength: new Uint8Array(\n            encodedWritableIndexesLength,\n          ),\n          writableIndexes: lookup.writableIndexes,\n          encodedReadonlyIndexesLength: new Uint8Array(\n            encodedReadonlyIndexesLength,\n          ),\n          readonlyIndexes: lookup.readonlyIndexes,\n        },\n        serializedAddressTableLookups,\n        serializedLength,\n      );\n    }\n\n    return serializedAddressTableLookups.slice(0, serializedLength);\n  }\n\n  static deserialize(serializedMessage: Uint8Array): MessageV0 {\n    let byteArray = [...serializedMessage];\n\n    const prefix = byteArray.shift() as number;\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n    assert(\n      prefix !== maskedPrefix,\n      `Expected versioned message but received legacy message`,\n    );\n\n    const version = maskedPrefix;\n    assert(\n      version === 0,\n      `Expected versioned message with version 0 but found version ${version}`,\n    );\n\n    const header: MessageHeader = {\n      numRequiredSignatures: byteArray.shift() as number,\n      numReadonlySignedAccounts: byteArray.shift() as number,\n      numReadonlyUnsignedAccounts: byteArray.shift() as number,\n    };\n\n    const staticAccountKeys = [];\n    const staticAccountKeysLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < staticAccountKeysLength; i++) {\n      staticAccountKeys.push(\n        new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH)),\n      );\n    }\n\n    const recentBlockhash = bs58.encode(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    const compiledInstructions: MessageCompiledInstruction[] = [];\n    for (let i = 0; i < instructionCount; i++) {\n      const programIdIndex = byteArray.shift() as number;\n      const accountKeyIndexesLength = shortvec.decodeLength(byteArray);\n      const accountKeyIndexes = byteArray.splice(0, accountKeyIndexesLength);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = new Uint8Array(byteArray.splice(0, dataLength));\n      compiledInstructions.push({\n        programIdIndex,\n        accountKeyIndexes,\n        data,\n      });\n    }\n\n    const addressTableLookupsCount = shortvec.decodeLength(byteArray);\n    const addressTableLookups: MessageAddressTableLookup[] = [];\n    for (let i = 0; i < addressTableLookupsCount; i++) {\n      const accountKey = new PublicKey(byteArray.splice(0, PUBLIC_KEY_LENGTH));\n      const writableIndexesLength = shortvec.decodeLength(byteArray);\n      const writableIndexes = byteArray.splice(0, writableIndexesLength);\n      const readonlyIndexesLength = shortvec.decodeLength(byteArray);\n      const readonlyIndexes = byteArray.splice(0, readonlyIndexesLength);\n      addressTableLookups.push({\n        accountKey,\n        writableIndexes,\n        readonlyIndexes,\n      });\n    }\n\n    return new MessageV0({\n      header,\n      staticAccountKeys,\n      recentBlockhash,\n      compiledInstructions,\n      addressTableLookups,\n    });\n  }\n}\n","import {VERSION_PREFIX_MASK} from '../transaction/constants';\nimport {Message} from './legacy';\nimport {MessageV0} from './v0';\n\nexport type VersionedMessage = Message | MessageV0;\n// eslint-disable-next-line no-redeclare\nexport const VersionedMessage = {\n  deserializeMessageVersion(serializedMessage: Uint8Array): 'legacy' | number {\n    const prefix = serializedMessage[0];\n    const maskedPrefix = prefix & VERSION_PREFIX_MASK;\n\n    // if the highest bit of the prefix is not set, the message is not versioned\n    if (maskedPrefix === prefix) {\n      return 'legacy';\n    }\n\n    // the lower 7 bits of the prefix indicate the message version\n    return maskedPrefix;\n  },\n\n  deserialize: (serializedMessage: Uint8Array): VersionedMessage => {\n    const version =\n      VersionedMessage.deserializeMessageVersion(serializedMessage);\n    if (version === 'legacy') {\n      return Message.from(serializedMessage);\n    }\n\n    if (version === 0) {\n      return MessageV0.deserialize(serializedMessage);\n    } else {\n      throw new Error(\n        `Transaction message version ${version} deserialization is not supported`,\n      );\n    }\n  },\n};\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n\nimport {PACKET_DATA_SIZE, SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport {Connection} from '../connection';\nimport {Message} from '../message';\nimport {PublicKey} from '../publickey';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport {toBuffer} from '../utils/to-buffer';\nimport invariant from '../utils/assert';\nimport type {Signer} from '../keypair';\nimport type {Blockhash} from '../blockhash';\nimport type {CompiledInstruction} from '../message';\nimport {sign, verify} from '../utils/ed25519';\n\n/**\n * Transaction signature as base-58 encoded string\n */\nexport type TransactionSignature = string;\n\nexport const enum TransactionStatus {\n  BLOCKHEIGHT_EXCEEDED,\n  PROCESSED,\n  TIMED_OUT,\n}\n\n/**\n * Default (empty) signature\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(SIGNATURE_LENGTH_IN_BYTES).fill(0);\n\n/**\n * Account metadata used to define instructions\n */\nexport type AccountMeta = {\n  /** An account's public key */\n  pubkey: PublicKey;\n  /** True if an instruction requires a transaction signature matching `pubkey` */\n  isSigner: boolean;\n  /** True if the `pubkey` can be loaded as a read-write account. */\n  isWritable: boolean;\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n */\nexport type TransactionInstructionCtorFields = {\n  keys: Array<AccountMeta>;\n  programId: PublicKey;\n  data?: Buffer;\n};\n\n/**\n * Configuration object for Transaction.serialize()\n */\nexport type SerializeConfig = {\n  /** Require all transaction signatures be present (default: true) */\n  requireAllSignatures?: boolean;\n  /** Verify provided signatures (default: true) */\n  verifySignatures?: boolean;\n};\n\n/**\n * @internal\n */\nexport interface TransactionInstructionJSON {\n  keys: {\n    pubkey: string;\n    isSigner: boolean;\n    isWritable: boolean;\n  }[];\n  programId: string;\n  data: number[];\n}\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta>;\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts: TransactionInstructionCtorFields) {\n    this.programId = opts.programId;\n    this.keys = opts.keys;\n    if (opts.data) {\n      this.data = opts.data;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionInstructionJSON {\n    return {\n      keys: this.keys.map(({pubkey, isSigner, isWritable}) => ({\n        pubkey: pubkey.toJSON(),\n        isSigner,\n        isWritable,\n      })),\n      programId: this.programId.toJSON(),\n      data: [...this.data],\n    };\n  }\n}\n\n/**\n * Pair of signature and corresponding public key\n */\nexport type SignaturePubkeyPair = {\n  signature: Buffer | null;\n  publicKey: PublicKey;\n};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionCtorFields_DEPRECATED = {\n  /** Optional nonce information used for offline nonce'd transactions */\n  nonceInfo?: NonceInformation | null;\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  recentBlockhash?: Blockhash;\n};\n\n// For backward compatibility; an unfortunate consequence of being\n// forced to over-export types by the documentation generator.\n// See https://github.com/solana-labs/solana/pull/25820\nexport type TransactionCtorFields = TransactionCtorFields_DEPRECATED;\n\n/**\n * List of Transaction object fields that may be initialized at construction\n */\nexport type TransactionBlockhashCtor = {\n  /** The transaction fee payer */\n  feePayer?: PublicKey | null;\n  /** One or more signatures */\n  signatures?: Array<SignaturePubkeyPair>;\n  /** A recent blockhash */\n  blockhash: Blockhash;\n  /** the last block chain can advance to before tx is declared expired */\n  lastValidBlockHeight: number;\n};\n\n/**\n * Nonce information to be used to build an offline Transaction.\n */\nexport type NonceInformation = {\n  /** The current blockhash stored in the nonce */\n  nonce: Blockhash;\n  /** AdvanceNonceAccount Instruction */\n  nonceInstruction: TransactionInstruction;\n};\n\n/**\n * @internal\n */\nexport interface TransactionJSON {\n  recentBlockhash: string | null;\n  feePayer: string | null;\n  nonceInfo: {\n    nonce: string;\n    nonceInstruction: TransactionInstructionJSON;\n  } | null;\n  instructions: TransactionInstructionJSON[];\n  signers: string[];\n}\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The transaction fee payer\n   */\n  feePayer?: PublicKey;\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id. Must be populated by the caller\n   */\n  recentBlockhash?: Blockhash;\n\n  /**\n   * the last block chain can advance to before tx is declared expired\n   * */\n  lastValidBlockHeight?: number;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo?: NonceInformation;\n\n  /**\n   * @internal\n   */\n  _message?: Message;\n\n  /**\n   * @internal\n   */\n  _json?: TransactionJSON;\n\n  // Construct a transaction with a blockhash and lastValidBlockHeight\n  constructor(opts?: TransactionBlockhashCtor);\n\n  /**\n   * @deprecated `TransactionCtorFields` has been deprecated and will be removed in a future version.\n   * Please supply a `TransactionBlockhashCtor` instead.\n   */\n  constructor(opts?: TransactionCtorFields_DEPRECATED);\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(\n    opts?: TransactionBlockhashCtor | TransactionCtorFields_DEPRECATED,\n  ) {\n    if (!opts) {\n      return;\n    }\n    if (opts.feePayer) {\n      this.feePayer = opts.feePayer;\n    }\n    if (opts.signatures) {\n      this.signatures = opts.signatures;\n    }\n    if (Object.prototype.hasOwnProperty.call(opts, 'lastValidBlockHeight')) {\n      const {blockhash, lastValidBlockHeight} =\n        opts as TransactionBlockhashCtor;\n      this.recentBlockhash = blockhash;\n      this.lastValidBlockHeight = lastValidBlockHeight;\n    } else {\n      const {recentBlockhash, nonceInfo} =\n        opts as TransactionCtorFields_DEPRECATED;\n      if (nonceInfo) {\n        this.nonceInfo = nonceInfo;\n      }\n      this.recentBlockhash = recentBlockhash;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  toJSON(): TransactionJSON {\n    return {\n      recentBlockhash: this.recentBlockhash || null,\n      feePayer: this.feePayer ? this.feePayer.toJSON() : null,\n      nonceInfo: this.nonceInfo\n        ? {\n            nonce: this.nonceInfo.nonce,\n            nonceInstruction: this.nonceInfo.nonceInstruction.toJSON(),\n          }\n        : null,\n      instructions: this.instructions.map(instruction => instruction.toJSON()),\n      signers: this.signatures.map(({publicKey}) => {\n        return publicKey.toJSON();\n      }),\n    };\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    if (\n      this._message &&\n      JSON.stringify(this.toJSON()) === JSON.stringify(this._json)\n    ) {\n      return this._message;\n    }\n\n    let recentBlockhash;\n    let instructions: TransactionInstruction[];\n    if (this.nonceInfo) {\n      recentBlockhash = this.nonceInfo.nonce;\n      if (this.instructions[0] != this.nonceInfo.nonceInstruction) {\n        instructions = [this.nonceInfo.nonceInstruction, ...this.instructions];\n      } else {\n        instructions = this.instructions;\n      }\n    } else {\n      recentBlockhash = this.recentBlockhash;\n      instructions = this.instructions;\n    }\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (instructions.length < 1) {\n      console.warn('No instructions provided');\n    }\n\n    let feePayer: PublicKey;\n    if (this.feePayer) {\n      feePayer = this.feePayer;\n    } else if (this.signatures.length > 0 && this.signatures[0].publicKey) {\n      // Use implicit fee payer\n      feePayer = this.signatures[0].publicKey;\n    } else {\n      throw new Error('Transaction fee payer required');\n    }\n\n    for (let i = 0; i < instructions.length; i++) {\n      if (instructions[i].programId === undefined) {\n        throw new Error(\n          `Transaction instruction index ${i} has undefined program id`,\n        );\n      }\n    }\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push({...accountMeta});\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n        uniqueMetas[uniqueIndex].isSigner =\n          uniqueMetas[uniqueIndex].isSigner || accountMeta.isSigner;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    // Sort. Prioritizing first by signer, then by writable\n    uniqueMetas.sort(function (x, y) {\n      if (x.isSigner !== y.isSigner) {\n        // Signers always come before non-signers\n        return x.isSigner ? -1 : 1;\n      }\n      if (x.isWritable !== y.isWritable) {\n        // Writable accounts always come before read-only accounts\n        return x.isWritable ? -1 : 1;\n      }\n      // Otherwise, sort by pubkey, stringwise.\n      return x.pubkey.toBase58().localeCompare(y.pubkey.toBase58());\n    });\n\n    // Move fee payer to the front\n    const feePayerIndex = uniqueMetas.findIndex(x => {\n      return x.pubkey.equals(feePayer);\n    });\n    if (feePayerIndex > -1) {\n      const [payerMeta] = uniqueMetas.splice(feePayerIndex, 1);\n      payerMeta.isSigner = true;\n      payerMeta.isWritable = true;\n      uniqueMetas.unshift(payerMeta);\n    } else {\n      uniqueMetas.unshift({\n        pubkey: feePayer,\n        isSigner: true,\n        isWritable: true,\n      });\n    }\n\n    // Disallow unknown signers\n    for (const signature of this.signatures) {\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.equals(signature.publicKey);\n      });\n      if (uniqueIndex > -1) {\n        if (!uniqueMetas[uniqueIndex].isSigner) {\n          uniqueMetas[uniqueIndex].isSigner = true;\n          console.warn(\n            'Transaction references a signature that is unnecessary, ' +\n              'only the fee payer and instruction signer accounts should sign a transaction. ' +\n              'This behavior is deprecated and will throw an error in the next major version release.',\n          );\n        }\n      } else {\n        throw new Error(`unknown signer: ${signature.publicKey.toString()}`);\n      }\n    }\n\n    let numRequiredSignatures = 0;\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    // Split out signing from non-signing keys and count header values\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        signedKeys.push(pubkey.toString());\n        numRequiredSignatures += 1;\n        if (!isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const compiledInstructions: CompiledInstruction[] = instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(meta =>\n            accountKeys.indexOf(meta.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    compiledInstructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions: compiledInstructions,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _compile(): Message {\n    const message = this.compileMessage();\n    const signedKeys = message.accountKeys.slice(\n      0,\n      message.header.numRequiredSignatures,\n    );\n\n    if (this.signatures.length === signedKeys.length) {\n      const valid = this.signatures.every((pair, index) => {\n        return signedKeys[index].equals(pair.publicKey);\n      });\n\n      if (valid) return message;\n    }\n\n    this.signatures = signedKeys.map(publicKey => ({\n      signature: null,\n      publicKey,\n    }));\n\n    return message;\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this._compile().serialize();\n  }\n\n  /**\n   * Get the estimated fee associated with a transaction\n   */\n  async getEstimatedFee(connection: Connection): Promise<number> {\n    return (await connection.getFeeForMessage(this.compileMessage())).value;\n  }\n\n  /**\n   * Specify the public keys which will be used to sign the Transaction.\n   * The first signer will be used as the transaction fee payer account.\n   *\n   * Signatures can be added with either `partialSign` or `addSignature`\n   *\n   * @deprecated Deprecated since v0.84.0. Only the fee payer needs to be\n   * specified and it can be set in the Transaction constructor or with the\n   * `feePayer` property.\n   */\n  setSigners(...signers: Array<PublicKey>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    const seen = new Set();\n    this.signatures = signers\n      .filter(publicKey => {\n        const key = publicKey.toString();\n        if (seen.has(key)) {\n          return false;\n        } else {\n          seen.add(key);\n          return true;\n        }\n      })\n      .map(publicKey => ({signature: null, publicKey}));\n  }\n\n  /**\n   * Sign the Transaction with the specified signers. Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used identify and confirm transactions.\n   *\n   * If the Transaction `feePayer` is not set, the first signer will be used\n   * as the transaction fee payer account.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    this.signatures = uniqueSigners.map(signer => ({\n      signature: null,\n      publicKey: signer.publicKey,\n    }));\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * Partially sign a transaction with the specified accounts. All accounts must\n   * correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   *\n   * All the caveats from the `sign` method apply to `partialSign`\n   */\n  partialSign(...signers: Array<Signer>) {\n    if (signers.length === 0) {\n      throw new Error('No signers');\n    }\n\n    // Dedupe signers\n    const seen = new Set();\n    const uniqueSigners = [];\n    for (const signer of signers) {\n      const key = signer.publicKey.toString();\n      if (seen.has(key)) {\n        continue;\n      } else {\n        seen.add(key);\n        uniqueSigners.push(signer);\n      }\n    }\n\n    const message = this._compile();\n    this._partialSign(message, ...uniqueSigners);\n  }\n\n  /**\n   * @internal\n   */\n  _partialSign(message: Message, ...signers: Array<Signer>) {\n    const signData = message.serialize();\n    signers.forEach(signer => {\n      const signature = sign(signData, signer.secretKey);\n      this._addSignature(signer.publicKey, toBuffer(signature));\n    });\n  }\n\n  /**\n   * Add an externally created signature to a transaction. The public key\n   * must correspond to either the fee payer or a signer account in the transaction\n   * instructions.\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    this._compile(); // Ensure signatures array is populated\n    this._addSignature(pubkey, signature);\n  }\n\n  /**\n   * @internal\n   */\n  _addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage(), true);\n  }\n\n  /**\n   * @internal\n   */\n  _verifySignatures(signData: Buffer, requireAllSignatures: boolean): boolean {\n    for (const {signature, publicKey} of this.signatures) {\n      if (signature === null) {\n        if (requireAllSignatures) {\n          return false;\n        }\n      } else {\n        if (!verify(signature, signData, publicKey.toBuffer())) {\n          return false;\n        }\n      }\n    }\n    return true;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   */\n  serialize(config?: SerializeConfig): Buffer {\n    const {requireAllSignatures, verifySignatures} = Object.assign(\n      {requireAllSignatures: true, verifySignatures: true},\n      config,\n    );\n\n    const signData = this.serializeMessage();\n    if (\n      verifySignatures &&\n      !this._verifySignatures(signData, requireAllSignatures)\n    ) {\n      throw new Error('Signature verification failed');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @internal\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount: number[] = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @internal\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH_IN_BYTES);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH_IN_BYTES);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(\n    message: Message,\n    signatures: Array<string> = [],\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    if (message.header.numRequiredSignatures > 0) {\n      transaction.feePayer = message.accountKeys[0];\n    }\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner:\n            transaction.signatures.some(\n              keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n            ) || message.isAccountSigner(account),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    transaction._message = message;\n    transaction._json = transaction.toJSON();\n\n    return transaction;\n  }\n}\n","import {AccountKeysFromLookups} from '../message/account-keys';\nimport assert from '../utils/assert';\nimport {toBuffer} from '../utils/to-buffer';\nimport {Blockhash} from '../blockhash';\nimport {Message, MessageV0, VersionedMessage} from '../message';\nimport {PublicKey} from '../publickey';\nimport {AddressLookupTableAccount} from '../programs';\nimport {AccountMeta, TransactionInstruction} from './legacy';\n\nexport type TransactionMessageArgs = {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n};\n\nexport type DecompileArgs =\n  | {\n      accountKeysFromLookups: AccountKeysFromLookups;\n    }\n  | {\n      addressLookupTableAccounts: AddressLookupTableAccount[];\n    };\n\nexport class TransactionMessage {\n  payerKey: PublicKey;\n  instructions: Array<TransactionInstruction>;\n  recentBlockhash: Blockhash;\n\n  constructor(args: TransactionMessageArgs) {\n    this.payerKey = args.payerKey;\n    this.instructions = args.instructions;\n    this.recentBlockhash = args.recentBlockhash;\n  }\n\n  static decompile(\n    message: VersionedMessage,\n    args?: DecompileArgs,\n  ): TransactionMessage {\n    const {header, compiledInstructions, recentBlockhash} = message;\n\n    const {\n      numRequiredSignatures,\n      numReadonlySignedAccounts,\n      numReadonlyUnsignedAccounts,\n    } = header;\n\n    const numWritableSignedAccounts =\n      numRequiredSignatures - numReadonlySignedAccounts;\n    assert(numWritableSignedAccounts > 0, 'Message header is invalid');\n\n    const numWritableUnsignedAccounts =\n      message.staticAccountKeys.length - numReadonlyUnsignedAccounts;\n    assert(numWritableUnsignedAccounts >= 0, 'Message header is invalid');\n\n    const accountKeys = message.getAccountKeys(args);\n    const payerKey = accountKeys.get(0);\n    if (payerKey === undefined) {\n      throw new Error(\n        'Failed to decompile message because no account keys were found',\n      );\n    }\n\n    const instructions: TransactionInstruction[] = [];\n    for (const compiledIx of compiledInstructions) {\n      const keys: AccountMeta[] = [];\n\n      for (const keyIndex of compiledIx.accountKeyIndexes) {\n        const pubkey = accountKeys.get(keyIndex);\n        if (pubkey === undefined) {\n          throw new Error(\n            `Failed to find key for account key index ${keyIndex}`,\n          );\n        }\n\n        const isSigner = keyIndex < numRequiredSignatures;\n\n        let isWritable;\n        if (isSigner) {\n          isWritable = keyIndex < numWritableSignedAccounts;\n        } else if (keyIndex < accountKeys.staticAccountKeys.length) {\n          isWritable =\n            keyIndex - numRequiredSignatures < numWritableUnsignedAccounts;\n        } else {\n          isWritable =\n            keyIndex - accountKeys.staticAccountKeys.length <\n            // accountKeysFromLookups cannot be undefined because we already found a pubkey for this index above\n            accountKeys.accountKeysFromLookups!.writable.length;\n        }\n\n        keys.push({\n          pubkey,\n          isSigner: keyIndex < header.numRequiredSignatures,\n          isWritable,\n        });\n      }\n\n      const programId = accountKeys.get(compiledIx.programIdIndex);\n      if (programId === undefined) {\n        throw new Error(\n          `Failed to find program id for program id index ${compiledIx.programIdIndex}`,\n        );\n      }\n\n      instructions.push(\n        new TransactionInstruction({\n          programId,\n          data: toBuffer(compiledIx.data),\n          keys,\n        }),\n      );\n    }\n\n    return new TransactionMessage({\n      payerKey,\n      instructions,\n      recentBlockhash,\n    });\n  }\n\n  compileToLegacyMessage(): Message {\n    return Message.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n    });\n  }\n\n  compileToV0Message(\n    addressLookupTableAccounts?: AddressLookupTableAccount[],\n  ): MessageV0 {\n    return MessageV0.compile({\n      payerKey: this.payerKey,\n      recentBlockhash: this.recentBlockhash,\n      instructions: this.instructions,\n      addressLookupTableAccounts,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {Signer} from '../keypair';\nimport assert from '../utils/assert';\nimport {VersionedMessage} from '../message/versioned';\nimport {SIGNATURE_LENGTH_IN_BYTES} from './constants';\nimport * as shortvec from '../utils/shortvec-encoding';\nimport * as Layout from '../layout';\nimport {sign} from '../utils/ed25519';\nimport {PublicKey} from '../publickey';\n\nexport type TransactionVersion = 'legacy' | 0;\n\n/**\n * Versioned transaction class\n */\nexport class VersionedTransaction {\n  signatures: Array<Uint8Array>;\n  message: VersionedMessage;\n\n  get version(): TransactionVersion {\n    return this.message.version;\n  }\n\n  constructor(message: VersionedMessage, signatures?: Array<Uint8Array>) {\n    if (signatures !== undefined) {\n      assert(\n        signatures.length === message.header.numRequiredSignatures,\n        'Expected signatures length to be equal to the number of required signatures',\n      );\n      this.signatures = signatures;\n    } else {\n      const defaultSignatures = [];\n      for (let i = 0; i < message.header.numRequiredSignatures; i++) {\n        defaultSignatures.push(new Uint8Array(SIGNATURE_LENGTH_IN_BYTES));\n      }\n      this.signatures = defaultSignatures;\n    }\n    this.message = message;\n  }\n\n  serialize(): Uint8Array {\n    const serializedMessage = this.message.serialize();\n\n    const encodedSignaturesLength = Array<number>();\n    shortvec.encodeLength(encodedSignaturesLength, this.signatures.length);\n\n    const transactionLayout = BufferLayout.struct<{\n      encodedSignaturesLength: Uint8Array;\n      signatures: Array<Uint8Array>;\n      serializedMessage: Uint8Array;\n    }>([\n      BufferLayout.blob(\n        encodedSignaturesLength.length,\n        'encodedSignaturesLength',\n      ),\n      BufferLayout.seq(\n        Layout.signature(),\n        this.signatures.length,\n        'signatures',\n      ),\n      BufferLayout.blob(serializedMessage.length, 'serializedMessage'),\n    ]);\n\n    const serializedTransaction = new Uint8Array(2048);\n    const serializedTransactionLength = transactionLayout.encode(\n      {\n        encodedSignaturesLength: new Uint8Array(encodedSignaturesLength),\n        signatures: this.signatures,\n        serializedMessage,\n      },\n      serializedTransaction,\n    );\n\n    return serializedTransaction.slice(0, serializedTransactionLength);\n  }\n\n  static deserialize(serializedTransaction: Uint8Array): VersionedTransaction {\n    let byteArray = [...serializedTransaction];\n\n    const signatures = [];\n    const signaturesLength = shortvec.decodeLength(byteArray);\n    for (let i = 0; i < signaturesLength; i++) {\n      signatures.push(\n        new Uint8Array(byteArray.splice(0, SIGNATURE_LENGTH_IN_BYTES)),\n      );\n    }\n\n    const message = VersionedMessage.deserialize(new Uint8Array(byteArray));\n    return new VersionedTransaction(message, signatures);\n  }\n\n  sign(signers: Array<Signer>) {\n    const messageData = this.message.serialize();\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    for (const signer of signers) {\n      const signerIndex = signerPubkeys.findIndex(pubkey =>\n        pubkey.equals(signer.publicKey),\n      );\n      assert(\n        signerIndex >= 0,\n        `Cannot sign with non signer key ${signer.publicKey.toBase58()}`,\n      );\n      this.signatures[signerIndex] = sign(messageData, signer.secretKey);\n    }\n  }\n\n  addSignature(publicKey: PublicKey, signature: Uint8Array) {\n    assert(signature.byteLength === 64, 'Signature must be 64 bytes long');\n    const signerPubkeys = this.message.staticAccountKeys.slice(\n      0,\n      this.message.header.numRequiredSignatures,\n    );\n    const signerIndex = signerPubkeys.findIndex(pubkey =>\n      pubkey.equals(publicKey),\n    );\n    assert(\n      signerIndex >= 0,\n      `Can not add signature; \\`${publicKey.toBase58()}\\` is not required to sign this transaction`,\n    );\n    this.signatures[signerIndex] = signature;\n  }\n}\n","import {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_EPOCH_SCHEDULE_PUBKEY = new PublicKey(\n  'SysvarEpochSchedu1e111111111111111111111111',\n);\n\nexport const SYSVAR_INSTRUCTIONS_PUBKEY = new PublicKey(\n  'Sysvar1nstructions1111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HASHES_PUBKEY = new PublicKey(\n  'SysvarS1otHashes111111111111111111111111111',\n);\n\nexport const SYSVAR_SLOT_HISTORY_PUBKEY = new PublicKey(\n  'SysvarS1otHistory11111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","import {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\nimport type {Signer} from '../keypair';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Signer>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Signer>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    maxRetries: options.maxRetries,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    sendOptions,\n  );\n\n  const status =\n    transaction.recentBlockhash != null &&\n    transaction.lastValidBlockHeight != null\n      ? (\n          await connection.confirmTransaction(\n            {\n              signature: signature,\n              blockhash: transaction.recentBlockhash,\n              lastValidBlockHeight: transaction.lastValidBlockHeight,\n            },\n            options && options.commitment,\n          )\n        ).value\n      : (\n          await connection.confirmTransaction(\n            signature,\n            options && options.commitment,\n          )\n        ).value;\n\n  if (status.err) {\n    throw new Error(\n      `Transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from './layout';\n\nexport interface IInstructionInputData {\n  readonly instruction: number;\n}\n\n/**\n * @internal\n */\nexport type InstructionType<TInputData extends IInstructionInputData> = {\n  /** The Instruction index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n * @internal\n */\nexport function encodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  fields?: any,\n): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n * @internal\n */\nexport function decodeData<TInputData extends IInstructionInputData>(\n  type: InstructionType<TInputData>,\n  buffer: Buffer,\n): TInputData {\n  let data: TInputData;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @internal\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * Calculator for transaction fees.\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport interface FeeCalculator {\n  /** Cost in lamports to validate a signature. */\n  lamportsPerSignature: number;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport {Buffer} from 'buffer';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './utils/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @internal\n */\nconst NonceAccountLayout = BufferLayout.struct<\n  Readonly<{\n    authorizedPubkey: Uint8Array;\n    feeCalculator: Readonly<{\n      lamportsPerSignature: number;\n    }>;\n    nonce: Uint8Array;\n    state: number;\n    version: number;\n  }>\n>([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct<Readonly<{lamportsPerSignature: number}>>(\n    [FeeCalculatorLayout],\n    'feeCalculator',\n  ),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\ntype NonceAccountArgs = {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n};\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * @internal\n   */\n  constructor(args: NonceAccountArgs) {\n    this.authorizedPubkey = args.authorizedPubkey;\n    this.nonce = args.nonce;\n    this.feeCalculator = args.feeCalculator;\n  }\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    return new NonceAccount({\n      authorizedPubkey: new PublicKey(nonceAccount.authorizedPubkey),\n      nonce: new PublicKey(nonceAccount.nonce).toString(),\n      feeCalculator: nonceAccount.feeCalculator,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport {blob, Layout} from '@solana/buffer-layout';\nimport {toBigIntLE, toBufferLE} from 'bigint-buffer';\n\ninterface EncodeDecode<T> {\n  decode(buffer: Buffer, offset?: number): T;\n  encode(src: T, buffer: Buffer, offset?: number): number;\n}\n\nconst encodeDecode = <T>(layout: Layout<T>): EncodeDecode<T> => {\n  const decode = layout.decode.bind(layout);\n  const encode = layout.encode.bind(layout);\n  return {decode, encode};\n};\n\nconst bigInt =\n  (length: number) =>\n  (property?: string): Layout<bigint> => {\n    const layout = blob(length, property);\n    const {encode, decode} = encodeDecode(layout);\n\n    const bigIntLayout = layout as Layout<unknown> as Layout<bigint>;\n\n    bigIntLayout.decode = (buffer: Buffer, offset: number) => {\n      const src = decode(buffer, offset);\n      return toBigIntLE(Buffer.from(src));\n    };\n\n    bigIntLayout.encode = (bigInt: bigint, buffer: Buffer, offset: number) => {\n      const src = toBufferLE(bigInt, length);\n      return encode(src, buffer, offset);\n    };\n\n    return bigIntLayout;\n  };\n\nexport const u64 = bigInt(8);\n\nexport const u128 = bigInt(16);\n\nexport const u192 = bigInt(24);\n\nexport const u256 = bigInt(32);\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {NONCE_ACCOUNT_LENGTH} from '../nonce-account';\nimport {PublicKey} from '../publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\nimport {u64} from '../utils/bigint';\n\n/**\n * Create account system transaction params\n */\nexport type CreateAccountParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account */\n  newAccountPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Transfer system transaction params\n */\nexport type TransferParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n};\n\n/**\n * Assign system transaction params\n */\nexport type AssignParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Create account with seed system transaction params\n */\nexport type CreateAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created account */\n  fromPubkey: PublicKey;\n  /** Public key of the created account. Must be pre-calculated with PublicKey.createWithSeed() */\n  newAccountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the created account. Must be the same as the base key used to create `newAccountPubkey` */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the created account. Must be the same as the seed used to create `newAccountPubkey` */\n  seed: string;\n  /** Amount of lamports to transfer to the created account */\n  lamports: number;\n  /** Amount of space in bytes to allocate to the created account */\n  space: number;\n  /** Public key of the program to assign as the owner of the created account */\n  programId: PublicKey;\n};\n\n/**\n * Create nonce account system transaction params\n */\nexport type CreateNonceAccountParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n};\n\n/**\n * Create nonce account with seed system transaction params\n */\nexport type CreateNonceAccountWithSeedParams = {\n  /** The account that will transfer lamports to the created nonce account */\n  fromPubkey: PublicKey;\n  /** Public key of the created nonce account */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the created nonce account */\n  authorizedPubkey: PublicKey;\n  /** Amount of lamports to transfer to the created nonce account */\n  lamports: number;\n  /** Base public key to use to derive the address of the nonce account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the nonce account */\n  seed: string;\n};\n\n/**\n * Initialize nonce account system instruction params\n */\nexport type InitializeNonceParams = {\n  /** Nonce account which will be initialized */\n  noncePubkey: PublicKey;\n  /** Public key to set as authority of the initialized nonce account */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Advance nonce account system instruction params\n */\nexport type AdvanceNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Withdraw nonce account system transaction params\n */\nexport type WithdrawNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key of the account which will receive the withdrawn nonce account balance */\n  toPubkey: PublicKey;\n  /** Amount of lamports to withdraw from the nonce account */\n  lamports: number;\n};\n\n/**\n * Authorize nonce account system transaction params\n */\nexport type AuthorizeNonceParams = {\n  /** Nonce account */\n  noncePubkey: PublicKey;\n  /** Public key of the current nonce authority */\n  authorizedPubkey: PublicKey;\n  /** Public key to set as the new nonce authority */\n  newAuthorizedPubkey: PublicKey;\n};\n\n/**\n * Allocate account system transaction params\n */\nexport type AllocateParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Amount of space in bytes to allocate */\n  space: number;\n};\n\n/**\n * Allocate account with seed system transaction params\n */\nexport type AllocateWithSeedParams = {\n  /** Account to allocate */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the allocated account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the allocated account */\n  seed: string;\n  /** Amount of space in bytes to allocate */\n  space: number;\n  /** Public key of the program to assign as the owner of the allocated account */\n  programId: PublicKey;\n};\n\n/**\n * Assign account with seed system transaction params\n */\nexport type AssignWithSeedParams = {\n  /** Public key of the account which will be assigned a new owner */\n  accountPubkey: PublicKey;\n  /** Base public key to use to derive the address of the assigned account */\n  basePubkey: PublicKey;\n  /** Seed to use to derive the address of the assigned account */\n  seed: string;\n  /** Public key of the program to assign as the owner */\n  programId: PublicKey;\n};\n\n/**\n * Transfer with seed system transaction params\n */\nexport type TransferWithSeedParams = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: number | bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/** Decoded transfer system transaction instruction */\nexport type DecodedTransferInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n};\n\n/** Decoded transferWithSeed system transaction instruction */\nexport type DecodedTransferWithSeedInstruction = {\n  /** Account that will transfer lamports */\n  fromPubkey: PublicKey;\n  /** Base public key to use to derive the funding account address */\n  basePubkey: PublicKey;\n  /** Account that will receive transferred lamports */\n  toPubkey: PublicKey;\n  /** Amount of lamports to transfer */\n  lamports: bigint;\n  /** Seed to use to derive the funding account address */\n  seed: string;\n  /** Program id to use to derive the funding account address */\n  programId: PublicKey;\n};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: SystemInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as SystemInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(\n    instruction: TransactionInstruction,\n  ): DecodedTransferInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a transfer with seed system instruction and retrieve the instruction params.\n   */\n  static decodeTransferWithSeed(\n    instruction: TransactionInstruction,\n  ): DecodedTransferWithSeedInstruction {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      basePubkey: instruction.keys[1].pubkey,\n      toPubkey: instruction.keys[2].pubkey,\n      lamports,\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n */\nexport type SystemInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof SystemInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'AdvanceNonceAccount'\n  | 'Allocate'\n  | 'AllocateWithSeed'\n  | 'Assign'\n  | 'AssignWithSeed'\n  | 'AuthorizeNonceAccount'\n  | 'Create'\n  | 'CreateWithSeed'\n  | 'InitializeNonceAccount'\n  | 'Transfer'\n  | 'TransferWithSeed'\n  | 'WithdrawNonceAccount'\n  | 'UpgradeNonceAccount';\n\ntype SystemInstructionInputData = {\n  AdvanceNonceAccount: IInstructionInputData;\n  Allocate: IInstructionInputData & {\n    space: number;\n  };\n  AllocateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  Assign: IInstructionInputData & {\n    programId: Uint8Array;\n  };\n  AssignWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    seed: string;\n    programId: Uint8Array;\n  };\n  AuthorizeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Create: IInstructionInputData & {\n    lamports: number;\n    programId: Uint8Array;\n    space: number;\n  };\n  CreateWithSeed: IInstructionInputData & {\n    base: Uint8Array;\n    lamports: number;\n    programId: Uint8Array;\n    seed: string;\n    space: number;\n  };\n  InitializeNonceAccount: IInstructionInputData & {\n    authorized: Uint8Array;\n  };\n  Transfer: IInstructionInputData & {\n    lamports: bigint;\n  };\n  TransferWithSeed: IInstructionInputData & {\n    lamports: bigint;\n    programId: Uint8Array;\n    seed: string;\n  };\n  WithdrawNonceAccount: IInstructionInputData & {\n    lamports: number;\n  };\n  UpgradeNonceAccount: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid system InstructionType's\n * @internal\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in SystemInstructionType]: InstructionType<\n    SystemInstructionInputData[Instruction]\n  >;\n}>({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct<SystemInstructionInputData['Create']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct<SystemInstructionInputData['Assign']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct<SystemInstructionInputData['Transfer']>([\n      BufferLayout.u32('instruction'),\n      u64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct<SystemInstructionInputData['CreateWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AdvanceNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['WithdrawNonceAccount']\n    >([BufferLayout.u32('instruction'), BufferLayout.ns64('lamports')]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['InitializeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['AuthorizeNonceAccount']\n    >([BufferLayout.u32('instruction'), Layout.publicKey('authorized')]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct<SystemInstructionInputData['Allocate']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct<SystemInstructionInputData['AllocateWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('base'),\n        Layout.rustString('seed'),\n        BufferLayout.ns64('space'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<SystemInstructionInputData['AssignWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  TransferWithSeed: {\n    index: 11,\n    layout: BufferLayout.struct<SystemInstructionInputData['TransferWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        u64('lamports'),\n        Layout.rustString('seed'),\n        Layout.publicKey('programId'),\n      ],\n    ),\n  },\n  UpgradeNonceAccount: {\n    index: 12,\n    layout: BufferLayout.struct<\n      SystemInstructionInputData['UpgradeNonceAccount']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the System program\n   */\n  static programId: PublicKey = new PublicKey(\n    '11111111111111111111111111111111',\n  );\n\n  /**\n   * Generate a transaction instruction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that transfers lamports from one account to another\n   */\n  static transfer(\n    params: TransferParams | TransferWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;\n      data = encodeData(type, {\n        lamports: BigInt(params.lamports),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n      data = encodeData(type, {lamports: BigInt(params.lamports)});\n      keys = [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that assigns an account to a program\n   */\n  static assign(\n    params: AssignParams | AssignWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: toBuffer(params.basePubkey.toBuffer()),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: toBuffer(params.programId.toBuffer()),\n    });\n    let keys = [\n      {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n      {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n    ];\n    if (params.basePubkey != params.fromPubkey) {\n      keys.push({pubkey: params.basePubkey, isSigner: true, isWritable: false});\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    if ('basePubkey' in params && 'seed' in params) {\n      transaction.add(\n        SystemProgram.createAccountWithSeed({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          basePubkey: params.basePubkey,\n          seed: params.seed,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    } else {\n      transaction.add(\n        SystemProgram.createAccount({\n          fromPubkey: params.fromPubkey,\n          newAccountPubkey: params.noncePubkey,\n          lamports: params.lamports,\n          space: NONCE_ACCOUNT_LENGTH,\n          programId: this.programId,\n        }),\n      );\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.authorizedPubkey.toBuffer()),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction instruction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: toBuffer(params.newAuthorizedPubkey.toBuffer()),\n    });\n\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction instruction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): TransactionInstruction {\n    let data;\n    let keys;\n    if ('basePubkey' in params) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: toBuffer(params.basePubkey.toBuffer()),\n        seed: params.seed,\n        space: params.space,\n        programId: toBuffer(params.programId.toBuffer()),\n      });\n      keys = [\n        {pubkey: params.accountPubkey, isSigner: false, isWritable: true},\n        {pubkey: params.basePubkey, isSigner: true, isWritable: false},\n      ];\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n      keys = [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}];\n    }\n\n    return new TransactionInstruction({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './utils/send-and-confirm-transaction';\nimport {sleep} from './utils/sleep';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\nimport {SystemProgram} from './programs/system';\nimport {IInstructionInputData} from './instruction';\n\n// Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n// rest of the Transaction fields\n//\n// TODO: replace 300 with a proper constant for the size of the other\n// Transaction fields\nconst CHUNK_SIZE = PACKET_DATA_SIZE - 300;\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static chunkSize: number = CHUNK_SIZE;\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return (\n      2 * // Every transaction requires two signatures (payer + program)\n      (Math.ceil(dataLength / Loader.chunkSize) +\n        1 + // Add one for Create transaction\n        1) // Add one for Finalize transaction\n    );\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static async load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<boolean> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n\n      // Fetch program account info to check if it has already been created\n      const programInfo = await connection.getAccountInfo(\n        program.publicKey,\n        'confirmed',\n      );\n\n      let transaction: Transaction | null = null;\n      if (programInfo !== null) {\n        if (programInfo.executable) {\n          console.error('Program load failed, account is already executable');\n          return false;\n        }\n\n        if (programInfo.data.length !== data.length) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.allocate({\n              accountPubkey: program.publicKey,\n              space: data.length,\n            }),\n          );\n        }\n\n        if (!programInfo.owner.equals(programId)) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.assign({\n              accountPubkey: program.publicKey,\n              programId,\n            }),\n          );\n        }\n\n        if (programInfo.lamports < balanceNeeded) {\n          transaction = transaction || new Transaction();\n          transaction.add(\n            SystemProgram.transfer({\n              fromPubkey: payer.publicKey,\n              toPubkey: program.publicKey,\n              lamports: balanceNeeded - programInfo.lamports,\n            }),\n          );\n        }\n      } else {\n        transaction = new Transaction().add(\n          SystemProgram.createAccount({\n            fromPubkey: payer.publicKey,\n            newAccountPubkey: program.publicKey,\n            lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n            space: data.length,\n            programId,\n          }),\n        );\n      }\n\n      // If the account is already created correctly, skip this step\n      // and proceed directly to loading instructions\n      if (transaction !== null) {\n        await sendAndConfirmTransaction(\n          connection,\n          transaction,\n          [payer, program],\n          {\n            commitment: 'confirmed',\n          },\n        );\n      }\n    }\n\n    const dataLayout = BufferLayout.struct<\n      Readonly<{\n        bytes: number[];\n        bytesLength: number;\n        bytesLengthPadding: number;\n        instruction: number;\n        offset: number;\n      }>\n    >([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes: bytes as number[],\n          bytesLength: 0,\n          bytesLengthPadding: 0,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          commitment: 'confirmed',\n        }),\n      );\n\n      // Delay between sends in an attempt to reduce rate limit errors\n      if (connection._rpcEndpoint.includes('solana.com')) {\n        const REQUESTS_PER_SECOND = 4;\n        await sleep(1000 / REQUESTS_PER_SECOND);\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct<IInstructionInputData>([\n        BufferLayout.u32('instruction'),\n      ]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          commitment: 'confirmed',\n        },\n      );\n    }\n\n    // success\n    return true;\n  }\n}\n","import type {Buffer} from 'buffer';\n\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\nimport type {Signer} from './keypair';\n\nexport const BPF_LOADER_PROGRAM_ID = new PublicKey(\n  'BPFLoader2111111111111111111111111111111111',\n);\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param loaderProgramId The program id of the BPF loader to use\n   * @return true if program was loaded successfully, false if program was already loaded\n   */\n  static load(\n    connection: Connection,\n    payer: Signer,\n    program: Signer,\n    elf: Buffer | Uint8Array | Array<number>,\n    loaderProgramId: PublicKey,\n  ): Promise<boolean> {\n    return Loader.load(connection, payer, program, loaderProgramId, elf);\n  }\n}\n","var objToString = Object.prototype.toString;\nvar objKeys = Object.keys || function(obj) {\n\t\tvar keys = [];\n\t\tfor (var name in obj) {\n\t\t\tkeys.push(name);\n\t\t}\n\t\treturn keys;\n\t};\n\nfunction stringify(val, isArrayProp) {\n\tvar i, max, str, keys, key, propVal, toStr;\n\tif (val === true) {\n\t\treturn \"true\";\n\t}\n\tif (val === false) {\n\t\treturn \"false\";\n\t}\n\tswitch (typeof val) {\n\t\tcase \"object\":\n\t\t\tif (val === null) {\n\t\t\t\treturn null;\n\t\t\t} else if (val.toJSON && typeof val.toJSON === \"function\") {\n\t\t\t\treturn stringify(val.toJSON(), isArrayProp);\n\t\t\t} else {\n\t\t\t\ttoStr = objToString.call(val);\n\t\t\t\tif (toStr === \"[object Array]\") {\n\t\t\t\t\tstr = '[';\n\t\t\t\t\tmax = val.length - 1;\n\t\t\t\t\tfor(i = 0; i < max; i++) {\n\t\t\t\t\t\tstr += stringify(val[i], true) + ',';\n\t\t\t\t\t}\n\t\t\t\t\tif (max > -1) {\n\t\t\t\t\t\tstr += stringify(val[i], true);\n\t\t\t\t\t}\n\t\t\t\t\treturn str + ']';\n\t\t\t\t} else if (toStr === \"[object Object]\") {\n\t\t\t\t\t// only object is left\n\t\t\t\t\tkeys = objKeys(val).sort();\n\t\t\t\t\tmax = keys.length;\n\t\t\t\t\tstr = \"\";\n\t\t\t\t\ti = 0;\n\t\t\t\t\twhile (i < max) {\n\t\t\t\t\t\tkey = keys[i];\n\t\t\t\t\t\tpropVal = stringify(val[key], false);\n\t\t\t\t\t\tif (propVal !== undefined) {\n\t\t\t\t\t\t\tif (str) {\n\t\t\t\t\t\t\t\tstr += ',';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tstr += JSON.stringify(key) + ':' + propVal;\n\t\t\t\t\t\t}\n\t\t\t\t\t\ti++;\n\t\t\t\t\t}\n\t\t\t\t\treturn '{' + str + '}';\n\t\t\t\t} else {\n\t\t\t\t\treturn JSON.stringify(val);\n\t\t\t\t}\n\t\t\t}\n\t\tcase \"function\":\n\t\tcase \"undefined\":\n\t\t\treturn isArrayProp ? null : undefined;\n\t\tcase \"string\":\n\t\t\treturn JSON.stringify(val);\n\t\tdefault:\n\t\t\treturn isFinite(val) ? val : null;\n\t}\n}\n\nmodule.exports = function(val) {\n\tvar returnVal = stringify(val, false);\n\tif (returnVal !== undefined) {\n\t\treturn ''+ returnVal;\n\t}\n};\n","const MINIMUM_SLOT_PER_EPOCH = 32;\n\n// Returns the number of trailing zeros in the binary representation of self.\nfunction trailingZeros(n: number) {\n  let trailingZeros = 0;\n  while (n > 1) {\n    n /= 2;\n    trailingZeros++;\n  }\n  return trailingZeros;\n}\n\n// Returns the smallest power of two greater than or equal to n\nfunction nextPowerOfTwo(n: number) {\n  if (n === 0) return 1;\n  n--;\n  n |= n >> 1;\n  n |= n >> 2;\n  n |= n >> 4;\n  n |= n >> 8;\n  n |= n >> 16;\n  n |= n >> 32;\n  return n + 1;\n}\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n * Can be retrieved with the {@link connection.getEpochSchedule} method\n */\nexport class EpochSchedule {\n  /** The maximum number of slots in each epoch */\n  public slotsPerEpoch: number;\n  /** The number of slots before beginning of an epoch to calculate a leader schedule for that epoch */\n  public leaderScheduleSlotOffset: number;\n  /** Indicates whether epochs start short and grow */\n  public warmup: boolean;\n  /** The first epoch with `slotsPerEpoch` slots */\n  public firstNormalEpoch: number;\n  /** The first slot of `firstNormalEpoch` */\n  public firstNormalSlot: number;\n\n  constructor(\n    slotsPerEpoch: number,\n    leaderScheduleSlotOffset: number,\n    warmup: boolean,\n    firstNormalEpoch: number,\n    firstNormalSlot: number,\n  ) {\n    this.slotsPerEpoch = slotsPerEpoch;\n    this.leaderScheduleSlotOffset = leaderScheduleSlotOffset;\n    this.warmup = warmup;\n    this.firstNormalEpoch = firstNormalEpoch;\n    this.firstNormalSlot = firstNormalSlot;\n  }\n\n  getEpoch(slot: number): number {\n    return this.getEpochAndSlotIndex(slot)[0];\n  }\n\n  getEpochAndSlotIndex(slot: number): [number, number] {\n    if (slot < this.firstNormalSlot) {\n      const epoch =\n        trailingZeros(nextPowerOfTwo(slot + MINIMUM_SLOT_PER_EPOCH + 1)) -\n        trailingZeros(MINIMUM_SLOT_PER_EPOCH) -\n        1;\n\n      const epochLen = this.getSlotsInEpoch(epoch);\n      const slotIndex = slot - (epochLen - MINIMUM_SLOT_PER_EPOCH);\n      return [epoch, slotIndex];\n    } else {\n      const normalSlotIndex = slot - this.firstNormalSlot;\n      const normalEpochIndex = Math.floor(normalSlotIndex / this.slotsPerEpoch);\n      const epoch = this.firstNormalEpoch + normalEpochIndex;\n      const slotIndex = normalSlotIndex % this.slotsPerEpoch;\n      return [epoch, slotIndex];\n    }\n  }\n\n  getFirstSlotInEpoch(epoch: number): number {\n    if (epoch <= this.firstNormalEpoch) {\n      return (Math.pow(2, epoch) - 1) * MINIMUM_SLOT_PER_EPOCH;\n    } else {\n      return (\n        (epoch - this.firstNormalEpoch) * this.slotsPerEpoch +\n        this.firstNormalSlot\n      );\n    }\n  }\n\n  getLastSlotInEpoch(epoch: number): number {\n    return this.getFirstSlotInEpoch(epoch) + this.getSlotsInEpoch(epoch) - 1;\n  }\n\n  getSlotsInEpoch(epoch: number) {\n    if (epoch < this.firstNormalEpoch) {\n      return Math.pow(2, epoch + trailingZeros(MINIMUM_SLOT_PER_EPOCH));\n    } else {\n      return this.slotsPerEpoch;\n    }\n  }\n}\n","export class SendTransactionError extends Error {\n  logs: string[] | undefined;\n\n  constructor(message: string, logs?: string[]) {\n    super(message);\n\n    this.logs = logs;\n  }\n}\n\n// Keep in sync with client/src/rpc_custom_errors.rs\n// Typescript `enums` thwart tree-shaking. See https://bargsten.org/jsts/enums/\nexport const SolanaJSONRPCErrorCode = {\n  JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP: -32001,\n  JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE: -32002,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE: -32003,\n  JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE: -32004,\n  JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY: -32005,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE: -32006,\n  JSON_RPC_SERVER_ERROR_SLOT_SKIPPED: -32007,\n  JSON_RPC_SERVER_ERROR_NO_SNAPSHOT: -32008,\n  JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED: -32009,\n  JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX: -32010,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE: -32011,\n  JSON_RPC_SCAN_ERROR: -32012,\n  JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH: -32013,\n  JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET: -32014,\n  JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION: -32015,\n  JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED: -32016,\n} as const;\nexport type SolanaJSONRPCErrorCodeEnum =\n  typeof SolanaJSONRPCErrorCode[keyof typeof SolanaJSONRPCErrorCode];\n\nexport class SolanaJSONRPCError extends Error {\n  code: SolanaJSONRPCErrorCodeEnum | unknown;\n  data?: any;\n  constructor(\n    {\n      code,\n      message,\n      data,\n    }: Readonly<{code: unknown; message: string; data?: any}>,\n    customMessage?: string,\n  ) {\n    super(customMessage != null ? `${customMessage}: ${message}` : message);\n    this.code = code;\n    this.data = data;\n    this.name = 'SolanaJSONRPCError';\n  }\n}\n","export const Headers = globalThis.Headers;\nexport const Request = globalThis.Request;\nexport const Response = globalThis.Response;\nexport default globalThis.fetch;\n","// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @internal\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @internal\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @internal\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @internal\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","import * as BufferLayout from '@solana/buffer-layout';\n\nexport interface IAccountStateData {\n  readonly typeIndex: number;\n}\n\n/**\n * @internal\n */\nexport type AccountType<TInputData extends IAccountStateData> = {\n  /** The account type index (from solana upstream program) */\n  index: number;\n  /** The BufferLayout to use to build data */\n  layout: BufferLayout.Layout<TInputData>;\n};\n\n/**\n * Decode account data buffer using an AccountType\n * @internal\n */\nexport function decodeData<TAccountStateData extends IAccountStateData>(\n  type: AccountType<TAccountStateData>,\n  data: Uint8Array,\n): TAccountStateData {\n  let decoded: TAccountStateData;\n  try {\n    decoded = type.layout.decode(data);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (decoded.typeIndex !== type.index) {\n    throw new Error(\n      `invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`,\n    );\n  }\n\n  return decoded;\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport assert from '../../utils/assert';\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport {u64} from '../../utils/bigint';\nimport {decodeData} from '../../account-data';\n\nexport type AddressLookupTableState = {\n  deactivationSlot: bigint;\n  lastExtendedSlot: number;\n  lastExtendedSlotStartIndex: number;\n  authority?: PublicKey;\n  addresses: Array<PublicKey>;\n};\n\nexport type AddressLookupTableAccountArgs = {\n  key: PublicKey;\n  state: AddressLookupTableState;\n};\n\n/// The serialized size of lookup table metadata\nconst LOOKUP_TABLE_META_SIZE = 56;\n\nexport class AddressLookupTableAccount {\n  key: PublicKey;\n  state: AddressLookupTableState;\n\n  constructor(args: AddressLookupTableAccountArgs) {\n    this.key = args.key;\n    this.state = args.state;\n  }\n\n  isActive(): boolean {\n    const U64_MAX = BigInt('0xffffffffffffffff');\n    return this.state.deactivationSlot === U64_MAX;\n  }\n\n  static deserialize(accountData: Uint8Array): AddressLookupTableState {\n    const meta = decodeData(LookupTableMetaLayout, accountData);\n\n    const serializedAddressesLen = accountData.length - LOOKUP_TABLE_META_SIZE;\n    assert(serializedAddressesLen >= 0, 'lookup table is invalid');\n    assert(serializedAddressesLen % 32 === 0, 'lookup table is invalid');\n\n    const numSerializedAddresses = serializedAddressesLen / 32;\n    const {addresses} = BufferLayout.struct<{addresses: Array<Uint8Array>}>([\n      BufferLayout.seq(Layout.publicKey(), numSerializedAddresses, 'addresses'),\n    ]).decode(accountData.slice(LOOKUP_TABLE_META_SIZE));\n\n    return {\n      deactivationSlot: meta.deactivationSlot,\n      lastExtendedSlot: meta.lastExtendedSlot,\n      lastExtendedSlotStartIndex: meta.lastExtendedStartIndex,\n      authority:\n        meta.authority.length !== 0\n          ? new PublicKey(meta.authority[0])\n          : undefined,\n      addresses: addresses.map(address => new PublicKey(address)),\n    };\n  }\n}\n\nconst LookupTableMetaLayout = {\n  index: 1,\n  layout: BufferLayout.struct<{\n    typeIndex: number;\n    deactivationSlot: bigint;\n    lastExtendedSlot: number;\n    lastExtendedStartIndex: number;\n    authority: Array<Uint8Array>;\n  }>([\n    BufferLayout.u32('typeIndex'),\n    u64('deactivationSlot'),\n    BufferLayout.nu64('lastExtendedSlot'),\n    BufferLayout.u8('lastExtendedStartIndex'),\n    BufferLayout.u8(), // option\n    BufferLayout.seq(\n      Layout.publicKey(),\n      BufferLayout.offset(BufferLayout.u8(), -1),\n      'authority',\n    ),\n  ]),\n};\n","const URL_RE = /^[^:]+:\\/\\/([^:[]+|\\[[^\\]]+\\])(:\\d+)?(.*)/i;\n\nexport function makeWebsocketUrl(endpoint: string) {\n  const matches = endpoint.match(URL_RE);\n  if (matches == null) {\n    throw TypeError(`Failed to validate endpoint URL \\`${endpoint}\\``);\n  }\n  const [\n    _, // eslint-disable-line @typescript-eslint/no-unused-vars\n    hostish,\n    portWithColon,\n    rest,\n  ] = matches;\n  const protocol = endpoint.startsWith('https:') ? 'wss:' : 'ws:';\n  const startPort =\n    portWithColon == null ? null : parseInt(portWithColon.slice(1), 10);\n  const websocketPort =\n    // Only shift the port by +1 as a convention for ws(s) only if given endpoint\n    // is explictly specifying the endpoint port (HTTP-based RPC), assuming\n    // we're directly trying to connect to solana-validator's ws listening port.\n    // When the endpoint omits the port, we're connecting to the protocol\n    // default ports: http(80) or https(443) and it's assumed we're behind a reverse\n    // proxy which manages WebSocket upgrade and backend port redirection.\n    startPort == null ? '' : `:${startPort + 1}`;\n  return `${protocol}//${hostish}${websocketPort}${rest}`;\n}\n","import bs58 from 'bs58';\nimport {Buffer} from 'buffer';\n// @ts-ignore\nimport fastStableStringify from 'fast-stable-stringify';\nimport {\n  type as pick,\n  number,\n  string,\n  array,\n  boolean,\n  literal,\n  record,\n  union,\n  optional,\n  nullable,\n  coerce,\n  instance,\n  create,\n  tuple,\n  unknown,\n  any,\n} from 'superstruct';\nimport type {Struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\nimport RpcClient from 'jayson/lib/client/browser';\n\nimport {AgentManager} from './agent-manager';\nimport {EpochSchedule} from './epoch-schedule';\nimport {SendTransactionError, SolanaJSONRPCError} from './errors';\nimport fetchImpl, {Response} from './fetch-impl';\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {Signer} from './keypair';\nimport {MS_PER_SLOT} from './timing';\nimport {\n  Transaction,\n  TransactionStatus,\n  TransactionVersion,\n  VersionedTransaction,\n} from './transaction';\nimport {Message, MessageHeader, MessageV0, VersionedMessage} from './message';\nimport {AddressLookupTableAccount} from './programs/address-lookup-table/state';\nimport assert from './utils/assert';\nimport {sleep} from './utils/sleep';\nimport {toBuffer} from './utils/to-buffer';\nimport {\n  TransactionExpiredBlockheightExceededError,\n  TransactionExpiredTimeoutError,\n} from './transaction/expiry-custom-errors';\nimport {makeWebsocketUrl} from './utils/makeWebsocketUrl';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {TransactionSignature} from './transaction';\nimport type {CompiledInstruction} from './message';\n\nconst PublicKeyFromString = coerce(\n  instance(PublicKey),\n  string(),\n  value => new PublicKey(value),\n);\n\nconst RawAccountDataResult = tuple([string(), literal('base64')]);\n\nconst BufferFromRawAccountData = coerce(\n  instance(Buffer),\n  RawAccountDataResult,\n  value => Buffer.from(value[0], 'base64'),\n);\n\n/**\n * Attempt to use a recent blockhash for up to 30 seconds\n * @internal\n */\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\n/**\n * HACK.\n * Copied from rpc-websockets/dist/lib/client.\n * Otherwise, `yarn build` fails with:\n * https://gist.github.com/steveluscher/c057eca81d479ef705cdb53162f9971d\n */\ninterface IWSRequestParams {\n  [x: string]: any;\n  [x: number]: any;\n}\n\ntype ClientSubscriptionId = number;\n/** @internal */ type ServerSubscriptionId = number;\n/** @internal */ type SubscriptionConfigHash = string;\n/** @internal */ type SubscriptionDisposeFn = () => Promise<void>;\n/**\n * @internal\n * Every subscription contains the args used to open the subscription with\n * the server, and a list of callers interested in notifications.\n */\ntype BaseSubscription<TMethod = SubscriptionConfig['method']> = Readonly<{\n  args: IWSRequestParams;\n  callbacks: Set<Extract<SubscriptionConfig, {method: TMethod}>['callback']>;\n}>;\n/**\n * @internal\n * A subscription may be in various states of connectedness. Only when it is\n * fully connected will it have a server subscription id associated with it.\n * This id can be returned to the server to unsubscribe the client entirely.\n */\ntype StatefulSubscription = Readonly<\n  // New subscriptions that have not yet been\n  // sent to the server start in this state.\n  | {\n      state: 'pending';\n    }\n  // These subscriptions have been sent to the server\n  // and are waiting for the server to acknowledge them.\n  | {\n      state: 'subscribing';\n    }\n  // These subscriptions have been acknowledged by the\n  // server and have been assigned server subscription ids.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'subscribed';\n    }\n  // These subscriptions are intended to be torn down and\n  // are waiting on an acknowledgement from the server.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribing';\n    }\n  // The request to tear down these subscriptions has been\n  // acknowledged by the server. The `serverSubscriptionId`\n  // is the id of the now-dead subscription.\n  | {\n      serverSubscriptionId: ServerSubscriptionId;\n      state: 'unsubscribed';\n    }\n>;\n/**\n * A type that encapsulates a subscription's RPC method\n * names and notification (callback) signature.\n */\ntype SubscriptionConfig = Readonly<\n  | {\n      callback: AccountChangeCallback;\n      method: 'accountSubscribe';\n      unsubscribeMethod: 'accountUnsubscribe';\n    }\n  | {\n      callback: LogsCallback;\n      method: 'logsSubscribe';\n      unsubscribeMethod: 'logsUnsubscribe';\n    }\n  | {\n      callback: ProgramAccountChangeCallback;\n      method: 'programSubscribe';\n      unsubscribeMethod: 'programUnsubscribe';\n    }\n  | {\n      callback: RootChangeCallback;\n      method: 'rootSubscribe';\n      unsubscribeMethod: 'rootUnsubscribe';\n    }\n  | {\n      callback: SignatureSubscriptionCallback;\n      method: 'signatureSubscribe';\n      unsubscribeMethod: 'signatureUnsubscribe';\n    }\n  | {\n      callback: SlotChangeCallback;\n      method: 'slotSubscribe';\n      unsubscribeMethod: 'slotUnsubscribe';\n    }\n  | {\n      callback: SlotUpdateCallback;\n      method: 'slotsUpdatesSubscribe';\n      unsubscribeMethod: 'slotsUpdatesUnsubscribe';\n    }\n>;\n/**\n * @internal\n * Utility type that keeps tagged unions intact while omitting properties.\n */\ntype DistributiveOmit<T, K extends PropertyKey> = T extends unknown\n  ? Omit<T, K>\n  : never;\n/**\n * @internal\n * This type represents a single subscribable 'topic.' It's made up of:\n *\n * - The args used to open the subscription with the server,\n * - The state of the subscription, in terms of its connectedness, and\n * - The set of callbacks to call when the server publishes notifications\n *\n * This record gets indexed by `SubscriptionConfigHash` and is used to\n * set up subscriptions, fan out notifications, and track subscription state.\n */\ntype Subscription = BaseSubscription &\n  StatefulSubscription &\n  DistributiveOmit<SubscriptionConfig, 'callback'>;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => Promise<any>;\n\ntype RpcBatchRequest = (requests: RpcParams[]) => Promise<any[]>;\n\n/**\n * @internal\n */\nexport type RpcParams = {\n  methodName: string;\n  args: Array<any>;\n};\n\nexport type TokenAccountsFilter =\n  | {\n      mint: PublicKey;\n    }\n  | {\n      programId: PublicKey;\n    };\n\n/**\n * Extra contextual information for RPC responses\n */\nexport type Context = {\n  slot: number;\n};\n\n/**\n * Options for sending transactions\n */\nexport type SendOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for confirming transactions\n */\nexport type ConfirmOptions = {\n  /** disable transaction verification step */\n  skipPreflight?: boolean;\n  /** desired commitment level */\n  commitment?: Commitment;\n  /** preflight commitment level */\n  preflightCommitment?: Commitment;\n  /** Maximum number of times for the RPC node to retry sending the transaction to the leader. */\n  maxRetries?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n};\n\n/**\n * Options for getSignaturesForAddress\n */\nexport type SignaturesForAddressOptions = {\n  /**\n   * Start searching backwards from this transaction signature.\n   * @remark If not provided the search starts from the highest max confirmed block.\n   */\n  before?: TransactionSignature;\n  /** Search until this transaction signature is reached, if found before `limit`. */\n  until?: TransactionSignature;\n  /** Maximum transaction signatures to return (between 1 and 1,000, default: 1,000). */\n  limit?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * RPC Response with extra contextual information\n */\nexport type RpcResponseAndContext<T> = {\n  /** response context */\n  context: Context;\n  /** response value */\n  value: T;\n};\n\nexport type BlockhashWithExpiryBlockHeight = Readonly<{\n  blockhash: Blockhash;\n  lastValidBlockHeight: number;\n}>;\n\n/**\n * A strategy for confirming transactions that uses the last valid\n * block height for a given blockhash to check for transaction expiration.\n */\nexport type BlockheightBasedTransactionConfirmationStrategy = {\n  signature: TransactionSignature;\n} & BlockhashWithExpiryBlockHeight;\n\n/* @internal */\nfunction assertEndpointUrl(putativeUrl: string) {\n  if (/^https?:/.test(putativeUrl) === false) {\n    throw new TypeError('Endpoint URL must start with `http:` or `https:`.');\n  }\n  return putativeUrl;\n}\n\n/** @internal */\nfunction extractCommitmentFromConfig<TConfig>(\n  commitmentOrConfig?: Commitment | ({commitment?: Commitment} & TConfig),\n) {\n  let commitment: Commitment | undefined;\n  let config: Omit<TConfig, 'commitment'> | undefined;\n  if (typeof commitmentOrConfig === 'string') {\n    commitment = commitmentOrConfig;\n  } else if (commitmentOrConfig) {\n    const {commitment: specifiedCommitment, ...specifiedConfig} =\n      commitmentOrConfig;\n    commitment = specifiedCommitment;\n    config = specifiedConfig;\n  }\n  return {commitment, config};\n}\n\n/**\n * @internal\n */\nfunction createRpcResult<T, U>(result: Struct<T, U>) {\n  return union([\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      result,\n    }),\n    pick({\n      jsonrpc: literal('2.0'),\n      id: string(),\n      error: pick({\n        code: unknown(),\n        message: string(),\n        data: optional(any()),\n      }),\n    }),\n  ]);\n}\n\nconst UnknownRpcResult = createRpcResult(unknown());\n\n/**\n * @internal\n */\nfunction jsonRpcResult<T, U>(schema: Struct<T, U>) {\n  return coerce(createRpcResult(schema), UnknownRpcResult, value => {\n    if ('error' in value) {\n      return value;\n    } else {\n      return {\n        ...value,\n        result: create(value.result, schema),\n      };\n    }\n  });\n}\n\n/**\n * @internal\n */\nfunction jsonRpcResultAndContext<T, U>(value: Struct<T, U>) {\n  return jsonRpcResult(\n    pick({\n      context: pick({\n        slot: number(),\n      }),\n      value,\n    }),\n  );\n}\n\n/**\n * @internal\n */\nfunction notificationResultAndContext<T, U>(value: Struct<T, U>) {\n  return pick({\n    context: pick({\n      slot: number(),\n    }),\n    value,\n  });\n}\n\n/**\n * @internal\n */\nfunction versionedMessageFromResponse(\n  version: TransactionVersion | undefined,\n  response: MessageResponse,\n): VersionedMessage {\n  if (version === 0) {\n    return new MessageV0({\n      header: response.header,\n      staticAccountKeys: response.accountKeys.map(\n        accountKey => new PublicKey(accountKey),\n      ),\n      recentBlockhash: response.recentBlockhash,\n      compiledInstructions: response.instructions.map(ix => ({\n        programIdIndex: ix.programIdIndex,\n        accountKeyIndexes: ix.accounts,\n        data: bs58.decode(ix.data),\n      })),\n      addressTableLookups: response.addressTableLookups!,\n    });\n  } else {\n    return new Message(response);\n  }\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'processed': Query the most recent block which has reached 1 confirmation by the connected node\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Commitment =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized'\n  | 'recent' // Deprecated as of v1.5.5\n  | 'single' // Deprecated as of v1.5.5\n  | 'singleGossip' // Deprecated as of v1.5.5\n  | 'root' // Deprecated as of v1.5.5\n  | 'max'; // Deprecated as of v1.5.5\n\n/**\n * A subset of Commitment levels, which are at least optimistically confirmed\n * <pre>\n *   'confirmed': Query the most recent block which has reached 1 confirmation by the cluster\n *   'finalized': Query the most recent block which has been finalized by the cluster\n * </pre>\n */\nexport type Finality = 'confirmed' | 'finalized';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getAccountInfo` query behavior\n */\nexport type GetAccountInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for changing `getBalance` query behavior\n */\nexport type GetBalanceConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getBlock` query behavior\n */\nexport type GetVersionedBlockConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getStakeMinimumDelegation` query behavior\n */\nexport type GetStakeMinimumDelegationConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n};\n\n/**\n * Configuration object for changing `getBlockHeight` query behavior\n */\nexport type GetBlockHeightConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getEpochInfo` query behavior\n */\nexport type GetEpochInfoConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getInflationReward` query behavior\n */\nexport type GetInflationRewardConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** An epoch for which the reward occurs. If omitted, the previous epoch will be used */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getLatestBlockhash` query behavior\n */\nexport type GetLatestBlockhashConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlot` query behavior\n */\nexport type GetSlotConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getSlotLeader` query behavior\n */\nexport type GetSlotLeaderConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n};\n\n/**\n * Configuration object for changing `getTransaction` query behavior\n */\nexport type GetVersionedTransactionConfig = {\n  /** The level of finality desired */\n  commitment?: Finality;\n  /** The max transaction version to return in responses. If the requested transaction is a higher version, an error will be returned */\n  maxSupportedTransactionVersion?: number;\n};\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n */\nexport type GetLargestAccountsConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Filter largest accounts by whether they are part of the circulating supply */\n  filter?: LargestAccountsFilter;\n};\n\n/**\n * Configuration object for changing `getSupply` request behavior\n */\nexport type GetSupplyConfig = {\n  /** The level of commitment desired */\n  commitment?: Commitment;\n  /** Exclude non circulating accounts list from response */\n  excludeNonCirculatingAccountsList?: boolean;\n};\n\n/**\n * Configuration object for changing query behavior\n */\nexport type SignatureStatusConfig = {\n  /** enable searching status history, not needed for recent transactions */\n  searchTransactionHistory: boolean;\n};\n\n/**\n * Information describing a cluster node\n */\nexport type ContactInfo = {\n  /** Identity public key of the node */\n  pubkey: string;\n  /** Gossip network address for the node */\n  gossip: string | null;\n  /** TPU network address for the node (null if not available) */\n  tpu: string | null;\n  /** JSON RPC network address for the node (null if not available) */\n  rpc: string | null;\n  /** Software version of the node (null if not available) */\n  version: string | null;\n};\n\n/**\n * Information describing a vote account\n */\nexport type VoteAccountInfo = {\n  /** Public key of the vote account */\n  votePubkey: string;\n  /** Identity public key of the node voting with this account */\n  nodePubkey: string;\n  /** The stake, in lamports, delegated to this vote account and activated */\n  activatedStake: number;\n  /** Whether the vote account is staked for this epoch */\n  epochVoteAccount: boolean;\n  /** Recent epoch voting credit history for this voter */\n  epochCredits: Array<[number, number, number]>;\n  /** A percentage (0-100) of rewards payout owed to the voter */\n  commission: number;\n  /** Most recent slot voted on by this vote account */\n  lastVote: number;\n};\n\n/**\n * A collection of cluster vote accounts\n */\nexport type VoteAccountStatus = {\n  /** Active vote accounts */\n  current: Array<VoteAccountInfo>;\n  /** Inactive vote accounts */\n  delinquent: Array<VoteAccountInfo>;\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n */\nexport type InflationGovernor = {\n  foundation: number;\n  foundationTerm: number;\n  initial: number;\n  taper: number;\n  terminal: number;\n};\n\nconst GetInflationGovernorResult = pick({\n  foundation: number(),\n  foundationTerm: number(),\n  initial: number(),\n  taper: number(),\n  terminal: number(),\n});\n\n/**\n * The inflation reward for an epoch\n */\nexport type InflationReward = {\n  /** epoch for which the reward occurs */\n  epoch: number;\n  /** the slot in which the rewards are effective */\n  effectiveSlot: number;\n  /** reward amount in lamports */\n  amount: number;\n  /** post balance of the account in lamports */\n  postBalance: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getInflationReward\" message\n */\nconst GetInflationRewardResult = jsonRpcResult(\n  array(\n    nullable(\n      pick({\n        epoch: number(),\n        effectiveSlot: number(),\n        amount: number(),\n        postBalance: number(),\n      }),\n    ),\n  ),\n);\n\n/**\n * Information about the current epoch\n */\nexport type EpochInfo = {\n  epoch: number;\n  slotIndex: number;\n  slotsInEpoch: number;\n  absoluteSlot: number;\n  blockHeight?: number;\n  transactionCount?: number;\n};\n\nconst GetEpochInfoResult = pick({\n  epoch: number(),\n  slotIndex: number(),\n  slotsInEpoch: number(),\n  absoluteSlot: number(),\n  blockHeight: optional(number()),\n  transactionCount: optional(number()),\n});\n\nconst GetEpochScheduleResult = pick({\n  slotsPerEpoch: number(),\n  leaderScheduleSlotOffset: number(),\n  warmup: boolean(),\n  firstNormalEpoch: number(),\n  firstNormalSlot: number(),\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n */\nexport type LeaderSchedule = {\n  [address: string]: number[];\n};\n\nconst GetLeaderScheduleResult = record(string(), array(number()));\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = nullable(union([pick({}), string()]));\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = pick({\n  err: TransactionErrorResult,\n});\n\n/**\n * Transaction signature received notification\n */\nconst SignatureReceivedResult = literal('receivedSignature');\n\n/**\n * Version info for a node\n */\nexport type Version = {\n  /** Version of solana-core */\n  'solana-core': string;\n  'feature-set'?: number;\n};\n\nconst VersionResult = pick({\n  'solana-core': string(),\n  'feature-set': optional(number()),\n});\n\nexport type SimulatedTransactionAccountInfo = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: string;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: string[];\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\nexport type TransactionReturnDataEncoding = 'base64';\n\nexport type TransactionReturnData = {\n  programId: string;\n  data: [string, TransactionReturnDataEncoding];\n};\n\nexport type SimulateTransactionConfig = {\n  /** Optional parameter used to enable signature verification before simulation */\n  sigVerify?: boolean;\n  /** Optional parameter used to replace the simulated transaction's recent blockhash with the latest blockhash */\n  replaceRecentBlockhash?: boolean;\n  /** Optional parameter used to set the commitment level when selecting the latest block */\n  commitment?: Commitment;\n  /** Optional parameter used to specify a list of account addresses to return post simulation state for */\n  accounts?: {\n    encoding: 'base64';\n    addresses: string[];\n  };\n  /** Optional parameter used to specify the minimum block slot that can be used for simulation */\n  minContextSlot?: number;\n};\n\nexport type SimulatedTransactionResponse = {\n  err: TransactionError | string | null;\n  logs: Array<string> | null;\n  accounts?: (SimulatedTransactionAccountInfo | null)[] | null;\n  unitsConsumed?: number;\n  returnData?: TransactionReturnData | null;\n};\nconst SimulatedTransactionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    err: nullable(union([pick({}), string()])),\n    logs: nullable(array(string())),\n    accounts: optional(\n      nullable(\n        array(\n          nullable(\n            pick({\n              executable: boolean(),\n              owner: string(),\n              lamports: number(),\n              data: array(string()),\n              rentEpoch: optional(number()),\n            }),\n          ),\n        ),\n      ),\n    ),\n    unitsConsumed: optional(number()),\n    returnData: optional(\n      nullable(\n        pick({\n          programId: string(),\n          data: tuple([string(), literal('base64')]),\n        }),\n      ),\n    ),\n  }),\n);\n\nexport type ParsedInnerInstruction = {\n  index: number;\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n};\n\nexport type TokenBalance = {\n  accountIndex: number;\n  mint: string;\n  owner?: string;\n  uiTokenAmount: TokenAmount;\n};\n\n/**\n * Metadata for a parsed confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionMeta} instead.\n */\nexport type ParsedConfirmedTransactionMeta = ParsedTransactionMeta;\n\n/**\n * Collection of addresses loaded by a transaction using address table lookups\n */\nexport type LoadedAddresses = {\n  writable: Array<PublicKey>;\n  readonly: Array<PublicKey>;\n};\n\n/**\n * Metadata for a parsed transaction on the ledger\n */\nexport type ParsedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked parsed instructions */\n  innerInstructions?: ParsedInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\nexport type CompiledInnerInstruction = {\n  index: number;\n  instructions: CompiledInstruction[];\n};\n\n/**\n * Metadata for a confirmed transaction on the ledger\n */\nexport type ConfirmedTransactionMeta = {\n  /** The fee charged for processing the transaction */\n  fee: number;\n  /** An array of cross program invoked instructions */\n  innerInstructions?: CompiledInnerInstruction[] | null;\n  /** The balances of the transaction accounts before processing */\n  preBalances: Array<number>;\n  /** The balances of the transaction accounts after processing */\n  postBalances: Array<number>;\n  /** An array of program log messages emitted during a transaction */\n  logMessages?: Array<string> | null;\n  /** The token balances of the transaction accounts before processing */\n  preTokenBalances?: Array<TokenBalance> | null;\n  /** The token balances of the transaction accounts after processing */\n  postTokenBalances?: Array<TokenBalance> | null;\n  /** The error result of transaction processing */\n  err: TransactionError | null;\n  /** The collection of addresses loaded using address lookup tables */\n  loadedAddresses?: LoadedAddresses;\n  /** The compute units consumed after processing the transaction */\n  computeUnitsConsumed?: number;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type TransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: Message;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A processed transaction from the RPC API\n */\nexport type VersionedTransactionResponse = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The transaction */\n  transaction: {\n    /** The transaction message */\n    message: VersionedMessage;\n    /** The transaction signatures */\n    signatures: string[];\n  };\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The transaction version */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed transaction message from the RPC API\n */\ntype MessageResponse = {\n  accountKeys: string[];\n  header: MessageHeader;\n  instructions: CompiledInstruction[];\n  recentBlockhash: string;\n  addressTableLookups?: ParsedAddressTableLookup[];\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedTransaction = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: Transaction;\n  /** Metadata produced from the transaction */\n  meta: ConfirmedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * A partially decoded transaction instruction\n */\nexport type PartiallyDecodedInstruction = {\n  /** Program id called by this instruction */\n  programId: PublicKey;\n  /** Public keys of accounts passed to this instruction */\n  accounts: Array<PublicKey>;\n  /** Raw base-58 instruction data */\n  data: string;\n};\n\n/**\n * A parsed transaction message account\n */\nexport type ParsedMessageAccount = {\n  /** Public key of the account */\n  pubkey: PublicKey;\n  /** Indicates if the account signed the transaction */\n  signer: boolean;\n  /** Indicates if the account is writable for this transaction */\n  writable: boolean;\n  /** Indicates if the account key came from the transaction or a lookup table */\n  source?: 'transaction' | 'lookupTable';\n};\n\n/**\n * A parsed transaction instruction\n */\nexport type ParsedInstruction = {\n  /** Name of the program for this instruction */\n  program: string;\n  /** ID of the program for this instruction */\n  programId: PublicKey;\n  /** Parsed instruction info */\n  parsed: any;\n};\n\n/**\n * A parsed address table lookup\n */\nexport type ParsedAddressTableLookup = {\n  /** Address lookup table account key */\n  accountKey: PublicKey;\n  /** Parsed instruction info */\n  writableIndexes: number[];\n  /** Parsed instruction info */\n  readonlyIndexes: number[];\n};\n\n/**\n * A parsed transaction message\n */\nexport type ParsedMessage = {\n  /** Accounts used in the instructions */\n  accountKeys: ParsedMessageAccount[];\n  /** The atomically executed instructions for the transaction */\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[];\n  /** Recent blockhash */\n  recentBlockhash: string;\n  /** Address table lookups used to load additional accounts */\n  addressTableLookups?: ParsedAddressTableLookup[] | null;\n};\n\n/**\n * A parsed transaction\n */\nexport type ParsedTransaction = {\n  /** Signatures for the transaction */\n  signatures: Array<string>;\n  /** Message of the transaction */\n  message: ParsedMessage;\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link ParsedTransactionWithMeta} instead.\n */\nexport type ParsedConfirmedTransaction = ParsedTransactionWithMeta;\n\n/**\n * A parsed transaction on the ledger with meta\n */\nexport type ParsedTransactionWithMeta = {\n  /** The slot during which the transaction was processed */\n  slot: number;\n  /** The details of the transaction */\n  transaction: ParsedTransaction;\n  /** Metadata produced from the transaction */\n  meta: ParsedTransactionMeta | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n  /** The version of the transaction message */\n  version?: TransactionVersion;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type BlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: Message;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A block with parsed transactions\n */\nexport type ParsedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The details of the transaction */\n    transaction: ParsedTransaction;\n    /** Metadata produced from the transaction */\n    meta: ParsedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n  /** The number of blocks beneath this block */\n  blockHeight: number | null;\n};\n\n/**\n * A processed block fetched from the RPC API\n */\nexport type VersionedBlockResponse = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions with status meta and original message */\n  transactions: Array<{\n    /** The transaction */\n    transaction: {\n      /** The transaction message */\n      message: VersionedMessage;\n      /** The transaction signatures */\n      signatures: string[];\n    };\n    /** Metadata produced from the transaction */\n    meta: ConfirmedTransactionMeta | null;\n    /** The transaction version */\n    version?: TransactionVersion;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    /** Public key of reward recipient */\n    pubkey: string;\n    /** Reward value in lamports */\n    lamports: number;\n    /** Account balance after reward is applied */\n    postBalance: number | null;\n    /** Type of reward received */\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A confirmed block on the ledger\n *\n * @deprecated Deprecated since Solana v1.8.0.\n */\nexport type ConfirmedBlock = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of transactions and status metas */\n  transactions: Array<{\n    transaction: Transaction;\n    meta: ConfirmedTransactionMeta | null;\n  }>;\n  /** Vector of block rewards */\n  rewards?: Array<{\n    pubkey: string;\n    lamports: number;\n    postBalance: number | null;\n    rewardType: string | null;\n  }>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * A Block on the ledger with signatures only\n */\nexport type BlockSignatures = {\n  /** Blockhash of this block */\n  blockhash: Blockhash;\n  /** Blockhash of this block's parent */\n  previousBlockhash: Blockhash;\n  /** Slot index of this block's parent */\n  parentSlot: number;\n  /** Vector of signatures */\n  signatures: Array<string>;\n  /** The unix timestamp of when the block was processed */\n  blockTime: number | null;\n};\n\n/**\n * recent block production information\n */\nexport type BlockProduction = Readonly<{\n  /** a dictionary of validator identities, as base-58 encoded strings. Value is a two element array containing the number of leader slots and the number of blocks produced */\n  byIdentity: Readonly<Record<string, ReadonlyArray<number>>>;\n  /** Block production slot range */\n  range: Readonly<{\n    /** first slot of the block production information (inclusive) */\n    firstSlot: number;\n    /** last slot of block production information (inclusive) */\n    lastSlot: number;\n  }>;\n}>;\n\nexport type GetBlockProductionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Slot range to return block production for. If parameter not provided, defaults to current epoch. */\n  range?: {\n    /** first slot to return block production information for (inclusive) */\n    firstSlot: number;\n    /** last slot to return block production information for (inclusive). If parameter not provided, defaults to the highest slot */\n    lastSlot?: number;\n  };\n  /** Only return results for this validator identity (base-58 encoded) */\n  identity?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getBlockProduction\" message\n */\nconst BlockProductionResponseStruct = jsonRpcResultAndContext(\n  pick({\n    byIdentity: record(string(), array(number())),\n    range: pick({\n      firstSlot: number(),\n      lastSlot: number(),\n    }),\n  }),\n);\n\n/**\n * A performance sample\n */\nexport type PerfSample = {\n  /** Slot number of sample */\n  slot: number;\n  /** Number of transactions in a sample window */\n  numTransactions: number;\n  /** Number of slots in a sample window */\n  numSlots: number;\n  /** Sample window in seconds */\n  samplePeriodSecs: number;\n};\n\nfunction createRpcClient(\n  url: string,\n  httpHeaders?: HttpHeaders,\n  customFetch?: FetchFn,\n  fetchMiddleware?: FetchMiddleware,\n  disableRetryOnRateLimit?: boolean,\n): RpcClient {\n  const fetch = customFetch ? customFetch : fetchImpl;\n  let agentManager: AgentManager | undefined;\n  if (!process.env.BROWSER) {\n    agentManager = new AgentManager(url.startsWith('https:') /* useHttps */);\n  }\n\n  let fetchWithMiddleware: FetchFn | undefined;\n\n  if (fetchMiddleware) {\n    fetchWithMiddleware = async (info, init) => {\n      const modifiedFetchArgs = await new Promise<Parameters<FetchFn>>(\n        (resolve, reject) => {\n          try {\n            fetchMiddleware(info, init, (modifiedInfo, modifiedInit) =>\n              resolve([modifiedInfo, modifiedInit]),\n            );\n          } catch (error) {\n            reject(error);\n          }\n        },\n      );\n      return await fetch(...modifiedFetchArgs);\n    };\n  }\n\n  const clientBrowser = new RpcClient(async (request, callback) => {\n    const agent = agentManager ? agentManager.requestStart() : undefined;\n    const options = {\n      method: 'POST',\n      body: request,\n      agent,\n      headers: Object.assign(\n        {\n          'Content-Type': 'application/json',\n        },\n        httpHeaders || {},\n        COMMON_HTTP_HEADERS,\n      ),\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res: Response;\n      let waitTime = 500;\n      for (;;) {\n        if (fetchWithMiddleware) {\n          res = await fetchWithMiddleware(url, options);\n        } else {\n          res = await fetch(url, options);\n        }\n\n        if (res.status !== 429 /* Too many requests */) {\n          break;\n        }\n        if (disableRetryOnRateLimit === true) {\n          break;\n        }\n        too_many_requests_retries -= 1;\n        if (too_many_requests_retries === 0) {\n          break;\n        }\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`,\n        );\n        await sleep(waitTime);\n        waitTime *= 2;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      if (err instanceof Error) callback(err);\n    } finally {\n      agentManager && agentManager.requestEnd();\n    }\n  }, {});\n\n  return clientBrowser;\n}\n\nfunction createRpcRequest(client: RpcClient): RpcRequest {\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      client.request(method, args, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\nfunction createRpcBatchRequest(client: RpcClient): RpcBatchRequest {\n  return (requests: RpcParams[]) => {\n    return new Promise((resolve, reject) => {\n      // Do nothing if requests is empty\n      if (requests.length === 0) resolve([]);\n\n      const batch = requests.map((params: RpcParams) => {\n        return client.request(params.methodName, params.args);\n      });\n\n      client.request(batch, (err: any, response: any) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = jsonRpcResult(GetInflationGovernorResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = jsonRpcResult(GetEpochInfoResult);\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = jsonRpcResult(GetEpochScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = jsonRpcResult(number());\n\n/**\n * Supply\n */\nexport type Supply = {\n  /** Total supply in lamports */\n  total: number;\n  /** Circulating supply in lamports */\n  circulating: number;\n  /** Non-circulating supply in lamports */\n  nonCirculating: number;\n  /** List of non-circulating account addresses */\n  nonCirculatingAccounts: Array<PublicKey>;\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  pick({\n    total: number(),\n    circulating: number(),\n    nonCirculating: number(),\n    nonCirculatingAccounts: array(PublicKeyFromString),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n */\nexport type TokenAmount = {\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = pick({\n  amount: string(),\n  uiAmount: nullable(number()),\n  decimals: number(),\n  uiAmountString: optional(string()),\n});\n\n/**\n * Token address and balance.\n */\nexport type TokenAccountBalancePair = {\n  /** Address of the token account */\n  address: PublicKey;\n  /** Raw amount of tokens as string ignoring decimals */\n  amount: string;\n  /** Number of decimals configured for token's mint */\n  decimals: number;\n  /** Token amount as float, accounts for decimals */\n  uiAmount: number | null;\n  /** Token amount as string, accounts for decimals */\n  uiAmountString?: string;\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      address: PublicKeyFromString,\n      amount: string(),\n      uiAmount: nullable(number()),\n      decimals: number(),\n      uiAmountString: optional(string()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: BufferFromRawAccountData,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\nconst ParsedAccountDataResult = pick({\n  program: string(),\n  parsed: unknown(),\n  space: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  array(\n    pick({\n      pubkey: PublicKeyFromString,\n      account: pick({\n        executable: boolean(),\n        owner: PublicKeyFromString,\n        lamports: number(),\n        data: ParsedAccountDataResult,\n        rentEpoch: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Pair of an account address and its balance\n */\nexport type AccountBalancePair = {\n  address: PublicKey;\n  lamports: number;\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  array(\n    pick({\n      lamports: number(),\n      address: PublicKeyFromString,\n    }),\n  ),\n);\n\n/**\n * @internal\n */\nconst AccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: BufferFromRawAccountData,\n  rentEpoch: number(),\n});\n\n/**\n * @internal\n */\nconst KeyedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\nconst ParsedOrRawAccountData = coerce(\n  union([instance(Buffer), ParsedAccountDataResult]),\n  union([RawAccountDataResult, ParsedAccountDataResult]),\n  value => {\n    if (Array.isArray(value)) {\n      return create(value, BufferFromRawAccountData);\n    } else {\n      return value;\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedAccountInfoResult = pick({\n  executable: boolean(),\n  owner: PublicKeyFromString,\n  lamports: number(),\n  data: ParsedOrRawAccountData,\n  rentEpoch: number(),\n});\n\nconst KeyedParsedAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: ParsedAccountInfoResult,\n});\n\n/**\n * @internal\n */\nconst StakeActivationResult = pick({\n  state: union([\n    literal('active'),\n    literal('inactive'),\n    literal('activating'),\n    literal('deactivating'),\n  ]),\n  active: number(),\n  inactive: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignaturesForAddress\" message\n */\nconst GetSignaturesForAddressRpcResult = jsonRpcResult(\n  array(\n    pick({\n      signature: string(),\n      slot: number(),\n      err: TransactionErrorResult,\n      memo: nullable(string()),\n      blockTime: optional(nullable(number())),\n    }),\n  ),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst ProgramAccountInfoResult = pick({\n  pubkey: PublicKeyFromString,\n  account: AccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @internal\n */\nconst SlotInfoResult = pick({\n  parent: number(),\n  slot: number(),\n  root: number(),\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = pick({\n  subscription: number(),\n  result: SlotInfoResult,\n});\n\n/**\n * Slot updates which can be used for tracking the live progress of a cluster.\n * - `\"firstShredReceived\"`: connected node received the first shred of a block.\n * Indicates that a new block that is being produced.\n * - `\"completed\"`: connected node has received all shreds of a block. Indicates\n * a block was recently produced.\n * - `\"optimisticConfirmation\"`: block was optimistically confirmed by the\n * cluster. It is not guaranteed that an optimistic confirmation notification\n * will be sent for every finalized blocks.\n * - `\"root\"`: the connected node rooted this block.\n * - `\"createdBank\"`: the connected node has started validating this block.\n * - `\"frozen\"`: the connected node has validated this block.\n * - `\"dead\"`: the connected node failed to validate this block.\n */\nexport type SlotUpdate =\n  | {\n      type: 'firstShredReceived';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'completed';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'createdBank';\n      slot: number;\n      timestamp: number;\n      parent: number;\n    }\n  | {\n      type: 'frozen';\n      slot: number;\n      timestamp: number;\n      stats: {\n        numTransactionEntries: number;\n        numSuccessfulTransactions: number;\n        numFailedTransactions: number;\n        maxTransactionsPerEntry: number;\n      };\n    }\n  | {\n      type: 'dead';\n      slot: number;\n      timestamp: number;\n      err: string;\n    }\n  | {\n      type: 'optimisticConfirmation';\n      slot: number;\n      timestamp: number;\n    }\n  | {\n      type: 'root';\n      slot: number;\n      timestamp: number;\n    };\n\n/**\n * @internal\n */\nconst SlotUpdateResult = union([\n  pick({\n    type: union([\n      literal('firstShredReceived'),\n      literal('completed'),\n      literal('optimisticConfirmation'),\n      literal('root'),\n    ]),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('createdBank'),\n    parent: number(),\n    slot: number(),\n    timestamp: number(),\n  }),\n  pick({\n    type: literal('frozen'),\n    slot: number(),\n    timestamp: number(),\n    stats: pick({\n      numTransactionEntries: number(),\n      numSuccessfulTransactions: number(),\n      numFailedTransactions: number(),\n      maxTransactionsPerEntry: number(),\n    }),\n  }),\n  pick({\n    type: literal('dead'),\n    slot: number(),\n    timestamp: number(),\n    err: string(),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"slotsUpdatesNotification\" message\n */\nconst SlotUpdateNotificationResult = pick({\n  subscription: number(),\n  result: SlotUpdateResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = pick({\n  subscription: number(),\n  result: notificationResultAndContext(\n    union([SignatureStatusResult, SignatureReceivedResult]),\n  ),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = pick({\n  subscription: number(),\n  result: number(),\n});\n\nconst ContactInfoResult = pick({\n  pubkey: string(),\n  gossip: nullable(string()),\n  tpu: nullable(string()),\n  rpc: nullable(string()),\n  version: nullable(string()),\n});\n\nconst VoteAccountInfoResult = pick({\n  votePubkey: string(),\n  nodePubkey: string(),\n  activatedStake: number(),\n  epochVoteAccount: boolean(),\n  epochCredits: array(tuple([number(), number(), number()])),\n  commission: number(),\n  lastVote: number(),\n  rootSlot: nullable(number()),\n});\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  pick({\n    current: array(VoteAccountInfoResult),\n    delinquent: array(VoteAccountInfoResult),\n  }),\n);\n\nconst ConfirmationStatus = union([\n  literal('processed'),\n  literal('confirmed'),\n  literal('finalized'),\n]);\n\nconst SignatureStatusResponse = pick({\n  slot: number(),\n  confirmations: nullable(number()),\n  err: TransactionErrorResult,\n  confirmationStatus: optional(ConfirmationStatus),\n});\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  array(nullable(SignatureStatusResponse)),\n);\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult(number());\n\nconst AddressTableLookupStruct = pick({\n  accountKey: PublicKeyFromString,\n  writableIndexes: array(number()),\n  readonlyIndexes: array(number()),\n});\n\nconst ConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(string()),\n    header: pick({\n      numRequiredSignatures: number(),\n      numReadonlySignedAccounts: number(),\n      numReadonlyUnsignedAccounts: number(),\n    }),\n    instructions: array(\n      pick({\n        accounts: array(number()),\n        data: string(),\n        programIdIndex: number(),\n      }),\n    ),\n    recentBlockhash: string(),\n    addressTableLookups: optional(array(AddressTableLookupStruct)),\n  }),\n});\n\nconst ParsedInstructionResult = pick({\n  parsed: unknown(),\n  program: string(),\n  programId: PublicKeyFromString,\n});\n\nconst RawInstructionResult = pick({\n  accounts: array(PublicKeyFromString),\n  data: string(),\n  programId: PublicKeyFromString,\n});\n\nconst InstructionResult = union([\n  RawInstructionResult,\n  ParsedInstructionResult,\n]);\n\nconst UnknownInstructionResult = union([\n  pick({\n    parsed: unknown(),\n    program: string(),\n    programId: string(),\n  }),\n  pick({\n    accounts: array(string()),\n    data: string(),\n    programId: string(),\n  }),\n]);\n\nconst ParsedOrRawInstruction = coerce(\n  InstructionResult,\n  UnknownInstructionResult,\n  value => {\n    if ('accounts' in value) {\n      return create(value, RawInstructionResult);\n    } else {\n      return create(value, ParsedInstructionResult);\n    }\n  },\n);\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionResult = pick({\n  signatures: array(string()),\n  message: pick({\n    accountKeys: array(\n      pick({\n        pubkey: PublicKeyFromString,\n        signer: boolean(),\n        writable: boolean(),\n        source: optional(\n          union([literal('transaction'), literal('lookupTable')]),\n        ),\n      }),\n    ),\n    instructions: array(ParsedOrRawInstruction),\n    recentBlockhash: string(),\n    addressTableLookups: optional(nullable(array(AddressTableLookupStruct))),\n  }),\n});\n\nconst TokenBalanceResult = pick({\n  accountIndex: number(),\n  mint: string(),\n  owner: optional(string()),\n  uiTokenAmount: TokenAmountResult,\n});\n\nconst LoadedAddressesResult = pick({\n  writable: array(PublicKeyFromString),\n  readonly: array(PublicKeyFromString),\n});\n\n/**\n * @internal\n */\nconst ConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(\n            pick({\n              accounts: array(number()),\n              data: string(),\n              programIdIndex: number(),\n            }),\n          ),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\n/**\n * @internal\n */\nconst ParsedConfirmedTransactionMetaResult = pick({\n  err: TransactionErrorResult,\n  fee: number(),\n  innerInstructions: optional(\n    nullable(\n      array(\n        pick({\n          index: number(),\n          instructions: array(ParsedOrRawInstruction),\n        }),\n      ),\n    ),\n  ),\n  preBalances: array(number()),\n  postBalances: array(number()),\n  logMessages: optional(nullable(array(string()))),\n  preTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  postTokenBalances: optional(nullable(array(TokenBalanceResult))),\n  loadedAddresses: optional(LoadedAddressesResult),\n  computeUnitsConsumed: optional(number()),\n});\n\nconst TransactionVersionStruct = union([literal(0), literal('legacy')]);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getBlock\" message\n */\nconst GetParsedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ParsedConfirmedTransactionResult,\n          meta: nullable(ParsedConfirmedTransactionMetaResult),\n          version: optional(TransactionVersionStruct),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n      blockHeight: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetBlockRpcResult} instead.\n */\nconst GetConfirmedBlockRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      transactions: array(\n        pick({\n          transaction: ConfirmedTransactionResult,\n          meta: nullable(ConfirmedTransactionMetaResult),\n        }),\n      ),\n      rewards: optional(\n        array(\n          pick({\n            pubkey: string(),\n            lamports: number(),\n            postBalance: nullable(number()),\n            rewardType: nullable(string()),\n          }),\n        ),\n      ),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getBlock\" message\n */\nconst GetBlockSignaturesRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      blockhash: string(),\n      previousBlockhash: string(),\n      parentSlot: number(),\n      signatures: array(string()),\n      blockTime: nullable(number()),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransaction\" message\n */\nconst GetTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      meta: ConfirmedTransactionMetaResult,\n      blockTime: optional(nullable(number())),\n      transaction: ConfirmedTransactionResult,\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected parsed JSON RPC response for the \"getTransaction\" message\n */\nconst GetParsedTransactionRpcResult = jsonRpcResult(\n  nullable(\n    pick({\n      slot: number(),\n      transaction: ParsedConfirmedTransactionResult,\n      meta: nullable(ParsedConfirmedTransactionMetaResult),\n      blockTime: optional(nullable(number())),\n      version: optional(TransactionVersionStruct),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n *\n * @deprecated Deprecated since Solana v1.8.0. Please use {@link GetLatestBlockhashRpcResult} instead.\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    feeCalculator: pick({\n      lamportsPerSignature: number(),\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getLatestBlockhash\" message\n */\nconst GetLatestBlockhashRpcResult = jsonRpcResultAndContext(\n  pick({\n    blockhash: string(),\n    lastValidBlockHeight: number(),\n  }),\n);\n\nconst PerfSampleResult = pick({\n  slot: number(),\n  numTransactions: number(),\n  numSlots: number(),\n  samplePeriodSecs: number(),\n});\n\n/*\n * Expected JSON RPC response for \"getRecentPerformanceSamples\" message\n */\nconst GetRecentPerformanceSamplesRpcResult = jsonRpcResult(\n  array(PerfSampleResult),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  nullable(\n    pick({\n      feeCalculator: pick({\n        lamportsPerSignature: number(),\n      }),\n    }),\n  ),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult(string());\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult(string());\n\n/**\n * Information about the latest slot being processed by a node\n */\nexport type SlotInfo = {\n  /** Currently processing slot */\n  slot: number;\n  /** Parent of the current slot */\n  parent: number;\n  /** The root block of the current slot's fork */\n  root: number;\n};\n\n/**\n * Parsed account data\n */\nexport type ParsedAccountData = {\n  /** Name of the program that owns this account */\n  program: string;\n  /** Parsed account data */\n  parsed: any;\n  /** Space used by account data */\n  space: number;\n};\n\n/**\n * Stake Activation data\n */\nexport type StakeActivationData = {\n  /** the stake account's activation state */\n  state: 'active' | 'inactive' | 'activating' | 'deactivating';\n  /** stake active during the epoch */\n  active: number;\n  /** stake inactive during the epoch */\n  inactive: number;\n};\n\n/**\n * Data slice argument for getProgramAccounts\n */\nexport type DataSlice = {\n  /** offset of data slice */\n  offset: number;\n  /** length of data slice */\n  length: number;\n};\n\n/**\n * Memory comparison filter for getProgramAccounts\n */\nexport type MemcmpFilter = {\n  memcmp: {\n    /** offset into program account data to start comparison */\n    offset: number;\n    /** data to match, as base-58 encoded string and limited to less than 129 bytes */\n    bytes: string;\n  };\n};\n\n/**\n * Data size comparison filter for getProgramAccounts\n */\nexport type DataSizeFilter = {\n  /** Size of data for program account data length comparison */\n  dataSize: number;\n};\n\n/**\n * A filter object for getProgramAccounts\n */\nexport type GetProgramAccountsFilter = MemcmpFilter | DataSizeFilter;\n\n/**\n * Configuration object for getProgramAccounts requests\n */\nexport type GetProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional encoding for account data (default base64)\n   * To use \"jsonParsed\" encoding, please refer to `getParsedProgramAccounts` in connection.ts\n   * */\n  encoding?: 'base64';\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getParsedProgramAccounts\n */\nexport type GetParsedProgramAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional array of filters to apply to accounts */\n  filters?: GetProgramAccountsFilter[];\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for getMultipleAccounts\n */\nexport type GetMultipleAccountsConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n  /** Optional data slice to limit the returned account data */\n  dataSlice?: DataSlice;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetStakeActivationConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Epoch for which to calculate activation details. If parameter not provided, defaults to current epoch */\n  epoch?: number;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTokenAccountsByOwnerConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Configuration object for `getStakeActivation`\n */\nexport type GetTransactionCountConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** The minimum slot that the request can be evaluated at */\n  minContextSlot?: number;\n};\n\n/**\n * Information describing an account\n */\nexport type AccountInfo<T> = {\n  /** `true` if this account's data contains a loaded program */\n  executable: boolean;\n  /** Identifier of the program that owns the account */\n  owner: PublicKey;\n  /** Number of lamports assigned to the account */\n  lamports: number;\n  /** Optional data assigned to the account */\n  data: T;\n  /** Optional rent epoch info for account */\n  rentEpoch?: number;\n};\n\n/**\n * Account information identified by pubkey\n */\nexport type KeyedAccountInfo = {\n  accountId: PublicKey;\n  accountInfo: AccountInfo<Buffer>;\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * Callback function for slot update notifications\n */\nexport type SlotUpdateCallback = (slotUpdate: SlotUpdate) => void;\n\n/**\n * Callback function for signature status notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * Signature status notification with transaction result\n */\nexport type SignatureStatusNotification = {\n  type: 'status';\n  result: SignatureResult;\n};\n\n/**\n * Signature received notification\n */\nexport type SignatureReceivedNotification = {\n  type: 'received';\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureSubscriptionCallback = (\n  notification: SignatureStatusNotification | SignatureReceivedNotification,\n  context: Context,\n) => void;\n\n/**\n * Signature subscription options\n */\nexport type SignatureSubscriptionOptions = {\n  commitment?: Commitment;\n  enableReceivedNotification?: boolean;\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @internal\n */\nconst LogsResult = pick({\n  err: TransactionErrorResult,\n  logs: array(string()),\n  signature: string(),\n});\n\n/**\n * Logs result.\n */\nexport type Logs = {\n  err: TransactionError | null;\n  logs: string[];\n  signature: string;\n};\n\n/**\n * Expected JSON RPC response for the \"logsNotification\" message.\n */\nconst LogsNotificationResult = pick({\n  result: notificationResultAndContext(LogsResult),\n  subscription: number(),\n});\n\n/**\n * Filter for log subscriptions.\n */\nexport type LogsFilter = PublicKey | 'all' | 'allWithVotes';\n\n/**\n * Callback function for log notifications.\n */\nexport type LogsCallback = (logs: Logs, ctx: Context) => void;\n\n/**\n * Signature result\n */\nexport type SignatureResult = {\n  err: TransactionError | null;\n};\n\n/**\n * Transaction error\n */\nexport type TransactionError = {} | string;\n\n/**\n * Transaction confirmation status\n * <pre>\n *   'processed': Transaction landed in a block which has reached 1 confirmation by the connected node\n *   'confirmed': Transaction landed in a block which has reached 1 confirmation by the cluster\n *   'finalized': Transaction landed in a block which has been finalized by the cluster\n * </pre>\n */\nexport type TransactionConfirmationStatus =\n  | 'processed'\n  | 'confirmed'\n  | 'finalized';\n\n/**\n * Signature status\n */\nexport type SignatureStatus = {\n  /** when the transaction was processed */\n  slot: number;\n  /** the number of blocks that have been confirmed and voted on in the fork containing `slot` */\n  confirmations: number | null;\n  /** transaction error, if any */\n  err: TransactionError | null;\n  /** cluster confirmation status, if data available. Possible responses: `processed`, `confirmed`, `finalized` */\n  confirmationStatus?: TransactionConfirmationStatus;\n};\n\n/**\n * A confirmed signature with its status\n */\nexport type ConfirmedSignatureInfo = {\n  /** the transaction signature */\n  signature: string;\n  /** when the transaction was processed */\n  slot: number;\n  /** error, if any */\n  err: TransactionError | null;\n  /** memo associated with the transaction, if any */\n  memo: string | null;\n  /** The unix timestamp of when the transaction was processed */\n  blockTime?: number | null;\n};\n\n/**\n * An object defining headers to be passed to the RPC server\n */\nexport type HttpHeaders = {\n  [header: string]: string;\n} & {\n  // Prohibited headers; for internal use only.\n  'solana-client'?: never;\n};\n\n/**\n * The type of the JavaScript `fetch()` API\n */\nexport type FetchFn = typeof fetchImpl;\n\n/**\n * A callback used to augment the outgoing HTTP request\n */\nexport type FetchMiddleware = (\n  info: Parameters<FetchFn>[0],\n  init: Parameters<FetchFn>[1],\n  fetch: (...a: Parameters<FetchFn>) => void,\n) => void;\n\n/**\n * Configuration for instantiating a Connection\n */\nexport type ConnectionConfig = {\n  /** Optional commitment level */\n  commitment?: Commitment;\n  /** Optional endpoint URL to the fullnode JSON RPC PubSub WebSocket Endpoint */\n  wsEndpoint?: string;\n  /** Optional HTTP headers object */\n  httpHeaders?: HttpHeaders;\n  /** Optional custom fetch function */\n  fetch?: FetchFn;\n  /** Optional fetch middleware callback */\n  fetchMiddleware?: FetchMiddleware;\n  /** Optional Disable retrying calls when server responds with HTTP 429 (Too Many Requests) */\n  disableRetryOnRateLimit?: boolean;\n  /** time to allow for the server to initially process a transaction (in milliseconds) */\n  confirmTransactionInitialTimeout?: number;\n};\n\n/** @internal */\nconst COMMON_HTTP_HEADERS = {\n  'solana-client': `js/${process.env.npm_package_version ?? 'UNKNOWN'}`,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  /** @internal */ _commitment?: Commitment;\n  /** @internal */ _confirmTransactionInitialTimeout?: number;\n  /** @internal */ _rpcEndpoint: string;\n  /** @internal */ _rpcWsEndpoint: string;\n  /** @internal */ _rpcClient: RpcClient;\n  /** @internal */ _rpcRequest: RpcRequest;\n  /** @internal */ _rpcBatchRequest: RpcBatchRequest;\n  /** @internal */ _rpcWebSocket: RpcWebSocketClient;\n  /** @internal */ _rpcWebSocketConnected: boolean = false;\n  /** @internal */ _rpcWebSocketHeartbeat: ReturnType<\n    typeof setInterval\n  > | null = null;\n  /** @internal */ _rpcWebSocketIdleTimeout: ReturnType<\n    typeof setTimeout\n  > | null = null;\n  /** @internal\n   * A number that we increment every time an active connection closes.\n   * Used to determine whether the same socket connection that was open\n   * when an async operation started is the same one that's active when\n   * its continuation fires.\n   *\n   */ private _rpcWebSocketGeneration: number = 0;\n\n  /** @internal */ _disableBlockhashCaching: boolean = false;\n  /** @internal */ _pollingBlockhash: boolean = false;\n  /** @internal */ _blockhashInfo: {\n    latestBlockhash: BlockhashWithExpiryBlockHeight | null;\n    lastFetch: number;\n    simulatedSignatures: Array<string>;\n    transactionSignatures: Array<string>;\n  } = {\n    latestBlockhash: null,\n    lastFetch: 0,\n    transactionSignatures: [],\n    simulatedSignatures: [],\n  };\n\n  /** @internal */ private _nextClientSubscriptionId: ClientSubscriptionId = 0;\n  /** @internal */ private _subscriptionDisposeFunctionsByClientSubscriptionId: {\n    [clientSubscriptionId: ClientSubscriptionId]:\n      | SubscriptionDisposeFn\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionCallbacksByServerSubscriptionId: {\n    [serverSubscriptionId: ServerSubscriptionId]:\n      | Set<SubscriptionConfig['callback']>\n      | undefined;\n  } = {};\n  /** @internal */ private _subscriptionsByHash: {\n    [hash: SubscriptionConfigHash]: Subscription | undefined;\n  } = {};\n  /**\n   * Special case.\n   * After a signature is processed, RPCs automatically dispose of the\n   * subscription on the server side. We need to track which of these\n   * subscriptions have been disposed in such a way, so that we know\n   * whether the client is dealing with a not-yet-processed signature\n   * (in which case we must tear down the server subscription) or an\n   * already-processed signature (in which case the client can simply\n   * clear out the subscription locally without telling the server).\n   *\n   * NOTE: There is a proposal to eliminate this special case, here:\n   * https://github.com/solana-labs/solana/issues/18892\n   */\n  /** @internal */ private _subscriptionsAutoDisposedByRpc: Set<ServerSubscriptionId> =\n    new Set();\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitmentOrConfig optional default commitment level or optional ConnectionConfig configuration object\n   */\n  constructor(\n    endpoint: string,\n    commitmentOrConfig?: Commitment | ConnectionConfig,\n  ) {\n    let wsEndpoint;\n    let httpHeaders;\n    let fetch;\n    let fetchMiddleware;\n    let disableRetryOnRateLimit;\n    if (commitmentOrConfig && typeof commitmentOrConfig === 'string') {\n      this._commitment = commitmentOrConfig;\n    } else if (commitmentOrConfig) {\n      this._commitment = commitmentOrConfig.commitment;\n      this._confirmTransactionInitialTimeout =\n        commitmentOrConfig.confirmTransactionInitialTimeout;\n      wsEndpoint = commitmentOrConfig.wsEndpoint;\n      httpHeaders = commitmentOrConfig.httpHeaders;\n      fetch = commitmentOrConfig.fetch;\n      fetchMiddleware = commitmentOrConfig.fetchMiddleware;\n      disableRetryOnRateLimit = commitmentOrConfig.disableRetryOnRateLimit;\n    }\n\n    this._rpcEndpoint = assertEndpointUrl(endpoint);\n    this._rpcWsEndpoint = wsEndpoint || makeWebsocketUrl(endpoint);\n\n    this._rpcClient = createRpcClient(\n      endpoint,\n      httpHeaders,\n      fetch,\n      fetchMiddleware,\n      disableRetryOnRateLimit,\n    );\n    this._rpcRequest = createRpcRequest(this._rpcClient);\n    this._rpcBatchRequest = createRpcBatchRequest(this._rpcClient);\n\n    this._rpcWebSocket = new RpcWebSocketClient(this._rpcWsEndpoint, {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotsUpdatesNotification',\n      this._wsOnSlotUpdatesNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'logsNotification',\n      this._wsOnLogsNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): Commitment | undefined {\n    return this._commitment;\n  }\n\n  /**\n   * The RPC endpoint\n   */\n  get rpcEndpoint(): string {\n    return this._rpcEndpoint;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    /** @internal */\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get balance for ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetBalanceConfig,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitmentOrConfig)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = create(unsafeRes, jsonRpcResult(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get block time for slot ${slot}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get minimum ledger slot',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = create(unsafeRes, SlotRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get first available block',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    config?: GetSupplyConfig | Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    let configArg: GetSupplyConfig = {};\n    if (typeof config === 'string') {\n      configArg = {commitment: config};\n    } else if (config) {\n      configArg = {\n        ...config,\n        commitment: (config && config.commitment) || this.commitment,\n      };\n    } else {\n      configArg = {\n        commitment: this.commitment,\n      };\n    }\n\n    const unsafeRes = await this._rpcRequest('getSupply', [configArg]);\n    const res = create(unsafeRes, GetSupplyRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get token supply');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(TokenAmountResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token account balance',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitmentOrConfig?: Commitment | GetTokenAccountsByOwnerConfig,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>\n    >\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey; account: AccountInfo<ParsedAccountData>}>\n    >\n  > {\n    let _args: any[] = [ownerAddress.toBase58()];\n    if ('mint' in filter) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = create(unsafeRes, GetParsedTokenAccountsByOwner);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get token accounts owned by account ${ownerAddress.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config?: GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = create(unsafeRes, GetLargestAccountsRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get largest accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = create(unsafeRes, GetTokenLargestAccountsResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get token largest accounts',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(AccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(nullable(ParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info about account ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetAccountInfoConfig,\n  ): Promise<AccountInfo<Buffer> | null> {\n    try {\n      const res = await this.getAccountInfoAndContext(\n        publicKey,\n        commitmentOrConfig,\n      );\n      return res.value;\n    } catch (e) {\n      throw new Error(\n        'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n      );\n    }\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleParsedAccounts(\n    publicKeys: PublicKey[],\n    rawConfig?: GetMultipleAccountsConfig,\n  ): Promise<\n    RpcResponseAndContext<(AccountInfo<Buffer | ParsedAccountData> | null)[]>\n  > {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'jsonParsed', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(ParsedAccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys, return with context\n   */\n  async getMultipleAccountsInfoAndContext(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<RpcResponseAndContext<(AccountInfo<Buffer> | null)[]>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const keys = publicKeys.map(key => key.toBase58());\n    const args = this._buildArgs([keys], commitment, 'base64', config);\n    const unsafeRes = await this._rpcRequest('getMultipleAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResultAndContext(array(nullable(AccountInfoResult))),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get info for accounts ${keys}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for multiple accounts specified by an array of public keys\n   */\n  async getMultipleAccountsInfo(\n    publicKeys: PublicKey[],\n    commitmentOrConfig?: Commitment | GetMultipleAccountsConfig,\n  ): Promise<(AccountInfo<Buffer> | null)[]> {\n    const res = await this.getMultipleAccountsInfoAndContext(\n      publicKeys,\n      commitmentOrConfig,\n    );\n    return res.value;\n  }\n\n  /**\n   * Returns epoch activation information for a stake account that has been delegated\n   */\n  async getStakeActivation(\n    publicKey: PublicKey,\n    commitmentOrConfig?: Commitment | GetStakeActivationConfig,\n    epoch?: number,\n  ): Promise<StakeActivationData> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n\n    const unsafeRes = await this._rpcRequest('getStakeActivation', args);\n    const res = create(unsafeRes, jsonRpcResult(StakeActivationResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get Stake Activation ${publicKey.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetProgramAccountsConfig | Commitment,\n  ): Promise<Array<{pubkey: PublicKey; account: AccountInfo<Buffer>}>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const {encoding, ...configWithoutEncoding} = config || {};\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      encoding || 'base64',\n      configWithoutEncoding,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(unsafeRes, jsonRpcResult(array(KeyedAccountInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    configOrCommitment?: GetParsedProgramAccountsConfig | Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey;\n      account: AccountInfo<Buffer | ParsedAccountData>;\n    }>\n  > {\n    const {commitment, config} =\n      extractCommitmentFromConfig(configOrCommitment);\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = create(\n      unsafeRes,\n      jsonRpcResult(array(KeyedParsedAccountInfoResult)),\n    );\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get accounts owned by program ${programId.toBase58()}`,\n      );\n    }\n    return res.result;\n  }\n\n  confirmTransaction(\n    strategy: BlockheightBasedTransactionConfirmationStrategy,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  /** @deprecated Instead, call `confirmTransaction` using a `TransactionConfirmationConfig` */\n  // eslint-disable-next-line no-dupe-class-members\n  confirmTransaction(\n    strategy: TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>>;\n\n  // eslint-disable-next-line no-dupe-class-members\n  async confirmTransaction(\n    strategy:\n      | BlockheightBasedTransactionConfirmationStrategy\n      | TransactionSignature,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<SignatureResult>> {\n    let rawSignature: string;\n\n    if (typeof strategy == 'string') {\n      rawSignature = strategy;\n    } else {\n      const config =\n        strategy as BlockheightBasedTransactionConfirmationStrategy;\n      rawSignature = config.signature;\n    }\n\n    let decodedSignature;\n\n    try {\n      decodedSignature = bs58.decode(rawSignature);\n    } catch (err) {\n      throw new Error('signature must be base58 encoded: ' + rawSignature);\n    }\n\n    assert(decodedSignature.length === 64, 'signature has invalid length');\n\n    const subscriptionCommitment = commitment || this.commitment;\n    let timeoutId;\n    let subscriptionId;\n    let done = false;\n\n    const confirmationPromise = new Promise<{\n      __type: TransactionStatus.PROCESSED;\n      response: RpcResponseAndContext<SignatureResult>;\n    }>((resolve, reject) => {\n      try {\n        subscriptionId = this.onSignature(\n          rawSignature,\n          (result: SignatureResult, context: Context) => {\n            subscriptionId = undefined;\n            const response = {\n              context,\n              value: result,\n            };\n            done = true;\n            resolve({__type: TransactionStatus.PROCESSED, response});\n          },\n          subscriptionCommitment,\n        );\n      } catch (err) {\n        reject(err);\n      }\n    });\n\n    const expiryPromise = new Promise<\n      | {__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED}\n      | {__type: TransactionStatus.TIMED_OUT; timeoutMs: number}\n    >(resolve => {\n      if (typeof strategy === 'string') {\n        let timeoutMs = this._confirmTransactionInitialTimeout || 60 * 1000;\n        switch (subscriptionCommitment) {\n          case 'processed':\n          case 'recent':\n          case 'single':\n          case 'confirmed':\n          case 'singleGossip': {\n            timeoutMs = this._confirmTransactionInitialTimeout || 30 * 1000;\n            break;\n          }\n          // exhaust enums to ensure full coverage\n          case 'finalized':\n          case 'max':\n          case 'root':\n        }\n\n        timeoutId = setTimeout(\n          () => resolve({__type: TransactionStatus.TIMED_OUT, timeoutMs}),\n          timeoutMs,\n        );\n      } else {\n        let config =\n          strategy as BlockheightBasedTransactionConfirmationStrategy;\n        const checkBlockHeight = async () => {\n          try {\n            const blockHeight = await this.getBlockHeight(commitment);\n            return blockHeight;\n          } catch (_e) {\n            return -1;\n          }\n        };\n        (async () => {\n          let currentBlockHeight = await checkBlockHeight();\n          if (done) return;\n          while (currentBlockHeight <= config.lastValidBlockHeight) {\n            await sleep(1000);\n            if (done) return;\n            currentBlockHeight = await checkBlockHeight();\n            if (done) return;\n          }\n          resolve({__type: TransactionStatus.BLOCKHEIGHT_EXCEEDED});\n        })();\n      }\n    });\n\n    let result: RpcResponseAndContext<SignatureResult>;\n    try {\n      const outcome = await Promise.race([confirmationPromise, expiryPromise]);\n      switch (outcome.__type) {\n        case TransactionStatus.BLOCKHEIGHT_EXCEEDED:\n          throw new TransactionExpiredBlockheightExceededError(rawSignature);\n        case TransactionStatus.PROCESSED:\n          result = outcome.response;\n          break;\n        case TransactionStatus.TIMED_OUT:\n          throw new TransactionExpiredTimeoutError(\n            rawSignature,\n            outcome.timeoutMs / 1000,\n          );\n      }\n    } finally {\n      clearTimeout(timeoutId);\n      if (subscriptionId) {\n        this.removeSignatureListener(subscriptionId);\n      }\n    }\n    return result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n    const res = create(unsafeRes, jsonRpcResult(array(ContactInfoResult)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get cluster nodes');\n    }\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment?: Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = create(unsafeRes, GetVoteAccounts);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get vote accounts');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(\n    commitmentOrConfig?: Commitment | GetSlotConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(\n    commitmentOrConfig?: Commitment | GetSlotLeaderConfig,\n  ): Promise<string> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leader');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch `limit` number of slot leaders starting from `startSlot`\n   *\n   * @param startSlot fetch slot leaders starting from this slot\n   * @param limit number of slot leaders to return\n   */\n  async getSlotLeaders(\n    startSlot: number,\n    limit: number,\n  ): Promise<Array<PublicKey>> {\n    const args = [startSlot, limit];\n    const unsafeRes = await this._rpcRequest('getSlotLeaders', args);\n    const res = create(unsafeRes, jsonRpcResult(array(PublicKeyFromString)));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get slot leaders');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value: values} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(values.length === 1);\n    const value = values[0];\n    return {context, value};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config?: SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params: any[] = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = create(unsafeRes, GetSignatureStatusesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get signature status');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(\n    commitmentOrConfig?: Commitment | GetTransactionCountConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get transaction count',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   *\n   * @deprecated Deprecated since v1.2.8. Please use {@link getSupply} instead.\n   */\n  async getTotalSupply(commitment?: Commitment): Promise<number> {\n    const result = await this.getSupply({\n      commitment,\n      excludeNonCirculatingAccountsList: true,\n    });\n    return result.value.total;\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment?: Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = create(unsafeRes, GetInflationGovernorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the inflation reward for a list of addresses for an epoch\n   */\n  async getInflationReward(\n    addresses: PublicKey[],\n    epoch?: number,\n    commitmentOrConfig?: Commitment | GetInflationRewardConfig,\n  ): Promise<(InflationReward | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [addresses.map(pubkey => pubkey.toBase58())],\n      commitment,\n      undefined /* encoding */,\n      {\n        ...config,\n        epoch: epoch != null ? epoch : config?.epoch,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getInflationReward', args);\n    const res = create(unsafeRes, GetInflationRewardResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get inflation reward');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(\n    commitmentOrConfig?: Commitment | GetEpochInfoConfig,\n  ): Promise<EpochInfo> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = create(unsafeRes, GetEpochInfoRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch info');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = create(unsafeRes, GetEpochScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get epoch schedule');\n    }\n    const epochSchedule = res.result;\n    return new EpochSchedule(\n      epochSchedule.slotsPerEpoch,\n      epochSchedule.leaderScheduleSlotOffset,\n      epochSchedule.warmup,\n      epochSchedule.firstNormalEpoch,\n      epochSchedule.firstNormalSlot,\n    );\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = create(unsafeRes, GetLeaderScheduleRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get leader schedule');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment?: Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = create(unsafeRes, GetMinimumBalanceForRentExemptionRpcResult);\n    if ('error' in res) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhashAndContext(\n    commitment?: Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash; feeCalculator: FeeCalculator}>\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n    const res = create(unsafeRes, GetRecentBlockhashAndContextRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get recent blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch recent performance samples\n   * @return {Promise<Array<PerfSample>>}\n   */\n  async getRecentPerformanceSamples(\n    limit?: number,\n  ): Promise<Array<PerfSample>> {\n    const unsafeRes = await this._rpcRequest(\n      'getRecentPerformanceSamples',\n      limit ? [limit] : [],\n    );\n    const res = create(unsafeRes, GetRecentPerformanceSamplesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get recent performance samples',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getFeeForMessage} instead.\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = create(unsafeRes, GetFeeCalculatorRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee calculator');\n    }\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value !== null ? value.feeCalculator : null,\n    };\n  }\n\n  /**\n   * Fetch the fee for a message from the cluster, return with context\n   */\n  async getFeeForMessage(\n    message: Message,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const wireMessage = message.serialize().toString('base64');\n    const args = this._buildArgs([wireMessage], commitment);\n    const unsafeRes = await this._rpcRequest('getFeeForMessage', args);\n\n    const res = create(unsafeRes, jsonRpcResultAndContext(nullable(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get fee for message');\n    }\n    if (res.result === null) {\n      throw new Error('invalid blockhash');\n    }\n    return res.result as unknown as RpcResponseAndContext<number>;\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getLatestBlockhash} instead.\n   */\n  async getRecentBlockhash(\n    commitment?: Commitment,\n  ): Promise<{blockhash: Blockhash; feeCalculator: FeeCalculator}> {\n    try {\n      const res = await this.getRecentBlockhashAndContext(commitment);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhash(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    try {\n      const res = await this.getLatestBlockhashAndContext(commitmentOrConfig);\n      return res.value;\n    } catch (e) {\n      throw new Error('failed to get recent blockhash: ' + e);\n    }\n  }\n\n  /**\n   * Fetch the latest blockhash from the cluster\n   * @return {Promise<BlockhashWithExpiryBlockHeight>}\n   */\n  async getLatestBlockhashAndContext(\n    commitmentOrConfig?: Commitment | GetLatestBlockhashConfig,\n  ): Promise<RpcResponseAndContext<BlockhashWithExpiryBlockHeight>> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getLatestBlockhash', args);\n    const res = create(unsafeRes, GetLatestBlockhashRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get latest blockhash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = create(unsafeRes, jsonRpcResult(VersionResult));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get version');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch the genesis hash\n   */\n  async getGenesisHash(): Promise<string> {\n    const unsafeRes = await this._rpcRequest('getGenesisHash', []);\n    const res = create(unsafeRes, jsonRpcResult(string()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get genesis hash');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a processed block from the cluster.\n   *\n   * @deprecated Instead, call `getBlock` using a `GetVersionedBlockConfig` by\n   * setting the `maxSupportedTransactionVersion` property.\n   */\n  async getBlock(\n    slot: number,\n    rawConfig?: GetBlockConfig,\n  ): Promise<BlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null>;\n\n  /**\n   * Fetch a processed block from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<VersionedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta, version}) => ({\n        meta,\n        transaction: {\n          ...transaction,\n          message: versionedMessageFromResponse(version, transaction.message),\n        },\n        version,\n      })),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized block\n   */\n  async getParsedBlock(\n    slot: number,\n    rawConfig?: GetVersionedBlockConfig,\n  ): Promise<ParsedBlockResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetParsedBlockRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    return res.result;\n  }\n\n  /*\n   * Returns the current block height of the node\n   */\n  async getBlockHeight(\n    commitmentOrConfig?: Commitment | GetBlockHeightConfig,\n  ): Promise<number> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgs(\n      [],\n      commitment,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getBlockHeight', args);\n    const res = create(unsafeRes, jsonRpcResult(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block height information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /*\n   * Returns recent block production information from the current or previous epoch\n   */\n  async getBlockProduction(\n    configOrCommitment?: GetBlockProductionConfig | Commitment,\n  ): Promise<RpcResponseAndContext<BlockProduction>> {\n    let extra: Omit<GetBlockProductionConfig, 'commitment'> | undefined;\n    let commitment: Commitment | undefined;\n\n    if (typeof configOrCommitment === 'string') {\n      commitment = configOrCommitment;\n    } else if (configOrCommitment) {\n      const {commitment: c, ...rest} = configOrCommitment;\n      commitment = c;\n      extra = rest;\n    }\n\n    const args = this._buildArgs([], commitment, 'base64', extra);\n    const unsafeRes = await this._rpcRequest('getBlockProduction', args);\n    const res = create(unsafeRes, BlockProductionResponseStruct);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get block production information',\n      );\n    }\n\n    return res.result;\n  }\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   *\n   * @deprecated Instead, call `getTransaction` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetTransactionConfig,\n  ): Promise<TransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null>;\n\n  /**\n   * Fetch a confirmed or finalized transaction from the cluster.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransaction(\n    signature: string,\n    rawConfig?: GetVersionedTransactionConfig,\n  ): Promise<VersionedTransactionResponse | null> {\n    const {commitment, config} = extractCommitmentFromConfig(rawConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      undefined /* encoding */,\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    return {\n      ...result,\n      transaction: {\n        ...result.transaction,\n        message: versionedMessageFromResponse(\n          result.version,\n          result.transaction.message,\n        ),\n      },\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed or finalized transaction\n   */\n  async getParsedTransaction(\n    signature: TransactionSignature,\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<ParsedTransactionWithMeta | null> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment as Finality,\n      'jsonParsed',\n      config,\n    );\n    const unsafeRes = await this._rpcRequest('getTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   */\n  async getParsedTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetVersionedTransactionConfig | Finality,\n  ): Promise<(ParsedTransactionWithMeta | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        'jsonParsed',\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link TransactionResponse}.\n   *\n   * @deprecated Instead, call `getTransactions` using a\n   * `GetVersionedTransactionConfig` by setting the\n   * `maxSupportedTransactionVersion` property.\n   */\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig?: GetTransactionConfig | Finality,\n  ): Promise<(TransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]>;\n\n  /**\n   * Fetch transaction details for a batch of confirmed transactions.\n   * Similar to {@link getParsedTransactions} but returns a {@link\n   * VersionedTransactionResponse}.\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async getTransactions(\n    signatures: TransactionSignature[],\n    commitmentOrConfig: GetVersionedTransactionConfig | Finality,\n  ): Promise<(VersionedTransactionResponse | null)[]> {\n    const {commitment, config} =\n      extractCommitmentFromConfig(commitmentOrConfig);\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment as Finality,\n        undefined /* encoding */,\n        config,\n      );\n      return {\n        methodName: 'getTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(res.error, 'failed to get transactions');\n      }\n      const result = res.result;\n      if (!result) return result;\n\n      return {\n        ...result,\n        transaction: {\n          ...result.transaction,\n          message: versionedMessageFromResponse(\n            result.version,\n            result.transaction.message,\n          ),\n        },\n      };\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block.\n   *\n   * @deprecated Deprecated since v1.13.0. Please use {@link getBlock} instead.\n   */\n  async getConfirmedBlock(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<ConfirmedBlock> {\n    const args = this._buildArgsAtLeastConfirmed([slot], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetConfirmedBlockRpcResult);\n\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n\n    const block = {\n      ...result,\n      transactions: result.transactions.map(({transaction, meta}) => {\n        const message = new Message(transaction.message);\n        return {\n          meta,\n          transaction: {\n            ...transaction,\n            message,\n          },\n        };\n      }),\n    };\n\n    return {\n      ...block,\n      transactions: block.transactions.map(({transaction, meta}) => {\n        return {\n          meta,\n          transaction: Transaction.populate(\n            transaction.message,\n            transaction.signatures,\n          ),\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch confirmed blocks between two slots\n   */\n  async getBlocks(\n    startSlot: number,\n    endSlot?: number,\n    commitment?: Finality,\n  ): Promise<Array<number>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      endSlot !== undefined ? [startSlot, endSlot] : [startSlot],\n      commitment,\n    );\n    const unsafeRes = await this._rpcRequest('getBlocks', args);\n    const res = create(unsafeRes, jsonRpcResult(array(number())));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get blocks');\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a block, excluding rewards\n   */\n  async getBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a list of Signatures from the cluster for a confirmed block, excluding rewards\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getBlockSignatures} instead.\n   */\n  async getConfirmedBlockSignatures(\n    slot: number,\n    commitment?: Finality,\n  ): Promise<BlockSignatures> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [slot],\n      commitment,\n      undefined,\n      {\n        transactionDetails: 'signatures',\n        rewards: false,\n      },\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', args);\n    const res = create(unsafeRes, GetBlockSignaturesRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get confirmed block');\n    }\n    const result = res.result;\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return result;\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getTransaction} instead.\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed([signature], commitment);\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(res.error, 'failed to get transaction');\n    }\n\n    const result = res.result;\n    if (!result) return result;\n\n    const message = new Message(result.transaction.message);\n    const signatures = result.transaction.signatures;\n    return {\n      ...result,\n      transaction: Transaction.populate(message, signatures),\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransaction} instead.\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n    commitment?: Finality,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [signature],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', args);\n    const res = create(unsafeRes, GetParsedTransactionRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed transaction',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Fetch parsed transaction details for a batch of confirmed transactions\n   *\n   * @deprecated Deprecated since Solana v1.8.0. Please use {@link getParsedTransactions} instead.\n   */\n  async getParsedConfirmedTransactions(\n    signatures: TransactionSignature[],\n    commitment?: Finality,\n  ): Promise<(ParsedConfirmedTransaction | null)[]> {\n    const batch = signatures.map(signature => {\n      const args = this._buildArgsAtLeastConfirmed(\n        [signature],\n        commitment,\n        'jsonParsed',\n      );\n      return {\n        methodName: 'getConfirmedTransaction',\n        args,\n      };\n    });\n\n    const unsafeRes = await this._rpcBatchRequest(batch);\n    const res = unsafeRes.map((unsafeRes: any) => {\n      const res = create(unsafeRes, GetParsedTransactionRpcResult);\n      if ('error' in res) {\n        throw new SolanaJSONRPCError(\n          res.error,\n          'failed to get confirmed transactions',\n        );\n      }\n      return res.result;\n    });\n\n    return res;\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @deprecated Deprecated since v1.3. Please use {@link getConfirmedSignaturesForAddress2} instead.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    let options: any = {};\n\n    let firstAvailableBlock = await this.getFirstAvailableBlock();\n    while (!('until' in options)) {\n      startSlot--;\n      if (startSlot <= 0 || startSlot < firstAvailableBlock) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(\n          startSlot,\n          'finalized',\n        );\n        if (block.signatures.length > 0) {\n          options.until =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    let highestConfirmedRoot = await this.getSlot('finalized');\n    while (!('before' in options)) {\n      endSlot++;\n      if (endSlot > highestConfirmedRoot) {\n        break;\n      }\n\n      try {\n        const block = await this.getConfirmedBlockSignatures(endSlot);\n        if (block.signatures.length > 0) {\n          options.before =\n            block.signatures[block.signatures.length - 1].toString();\n        }\n      } catch (err) {\n        if (err instanceof Error && err.message.includes('skipped')) {\n          continue;\n        } else {\n          throw err;\n        }\n      }\n    }\n\n    const confirmedSignatureInfo = await this.getConfirmedSignaturesForAddress2(\n      address,\n      options,\n    );\n    return confirmedSignatureInfo.map(info => info.signature);\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options?: ConfirmedSignaturesForAddress2Options,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      args,\n    );\n    const res = create(unsafeRes, GetConfirmedSignaturesForAddress2RpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get confirmed signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getSignaturesForAddress(\n    address: PublicKey,\n    options?: SignaturesForAddressOptions,\n    commitment?: Finality,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const args = this._buildArgsAtLeastConfirmed(\n      [address.toBase58()],\n      commitment,\n      undefined,\n      options,\n    );\n    const unsafeRes = await this._rpcRequest('getSignaturesForAddress', args);\n    const res = create(unsafeRes, GetSignaturesForAddressRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        'failed to get signatures for address',\n      );\n    }\n    return res.result;\n  }\n\n  async getAddressLookupTable(\n    accountKey: PublicKey,\n    config?: GetAccountInfoConfig,\n  ): Promise<RpcResponseAndContext<AddressLookupTableAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      accountKey,\n      config,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = new AddressLookupTableAccount({\n        key: accountKey,\n        state: AddressLookupTableAccount.deserialize(accountInfo.data),\n      });\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment?: Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified address\n   *\n   * ```typescript\n   * import { Connection, PublicKey, LAMPORTS_PER_SOL } from \"@solana/web3.js\";\n   *\n   * (async () => {\n   *   const connection = new Connection(\"https://api.testnet.solana.com\", \"confirmed\");\n   *   const myAddress = new PublicKey(\"2nr1bHFT86W9tGnyvmYW4vcHKsQB3sVQfnddasz4kExM\");\n   *   const signature = await connection.requestAirdrop(myAddress, LAMPORTS_PER_SOL);\n   *   await connection.confirmTransaction(signature);\n   * })();\n   * ```\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    lamports: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      lamports,\n    ]);\n    const res = create(unsafeRes, RequestAirdropRpcResult);\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `airdrop to ${to.toBase58()} failed`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  async _blockhashWithExpiryBlockHeight(\n    disableCache: boolean,\n  ): Promise<BlockhashWithExpiryBlockHeight> {\n    if (!disableCache) {\n      // Wait for polling to finish\n      while (this._pollingBlockhash) {\n        await sleep(100);\n      }\n      const timeSinceFetch = Date.now() - this._blockhashInfo.lastFetch;\n      const expired = timeSinceFetch >= BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.latestBlockhash !== null && !expired) {\n        return this._blockhashInfo.latestBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  /**\n   * @internal\n   */\n  async _pollNewBlockhash(): Promise<BlockhashWithExpiryBlockHeight> {\n    this._pollingBlockhash = true;\n    try {\n      const startTime = Date.now();\n      const cachedLatestBlockhash = this._blockhashInfo.latestBlockhash;\n      const cachedBlockhash = cachedLatestBlockhash\n        ? cachedLatestBlockhash.blockhash\n        : null;\n      for (let i = 0; i < 50; i++) {\n        const latestBlockhash = await this.getLatestBlockhash('finalized');\n\n        if (cachedBlockhash !== latestBlockhash.blockhash) {\n          this._blockhashInfo = {\n            latestBlockhash,\n            lastFetch: Date.now(),\n            transactionSignatures: [],\n            simulatedSignatures: [],\n          };\n          return latestBlockhash;\n        }\n\n        // Sleep for approximately half a slot\n        await sleep(MS_PER_SLOT / 2);\n      }\n\n      throw new Error(\n        `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n      );\n    } finally {\n      this._pollingBlockhash = false;\n    }\n  }\n\n  /**\n   * get the stake minimum delegation\n   */\n  async getStakeMinimumDelegation(\n    config?: GetStakeMinimumDelegationConfig,\n  ): Promise<RpcResponseAndContext<number>> {\n    const {commitment, config: configArg} = extractCommitmentFromConfig(config);\n    const args = this._buildArgs([], commitment, 'base64', configArg);\n    const unsafeRes = await this._rpcRequest('getStakeMinimumDelegation', args);\n    const res = create(unsafeRes, jsonRpcResultAndContext(number()));\n    if ('error' in res) {\n      throw new SolanaJSONRPCError(\n        res.error,\n        `failed to get stake minimum delegation`,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Simulate a transaction\n   *\n   * @deprecated Instead, call {@link simulateTransaction} with {@link\n   * VersionedTransaction} and {@link SimulateTransactionConfig} parameters\n   */\n  simulateTransaction(\n    transactionOrMessage: Transaction | Message,\n    signers?: Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  simulateTransaction(\n    transaction: VersionedTransaction,\n    config?: SimulateTransactionConfig,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>>;\n\n  /**\n   * Simulate a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async simulateTransaction(\n    transactionOrMessage: VersionedTransaction | Transaction | Message,\n    configOrSigners?: SimulateTransactionConfig | Array<Signer>,\n    includeAccounts?: boolean | Array<PublicKey>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if ('message' in transactionOrMessage) {\n      const versionedTx = transactionOrMessage;\n      const wireTransaction = versionedTx.serialize();\n      const encodedTransaction =\n        Buffer.from(wireTransaction).toString('base64');\n      if (Array.isArray(configOrSigners) || includeAccounts !== undefined) {\n        throw new Error('Invalid arguments');\n      }\n\n      const config: any = configOrSigners || {};\n      config.encoding = 'base64';\n      if (!('commitment' in config)) {\n        config.commitment = this.commitment;\n      }\n\n      const args = [encodedTransaction, config];\n      const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n      const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n      if ('error' in res) {\n        throw new Error('failed to simulate transaction: ' + res.error.message);\n      }\n      return res.result;\n    }\n\n    let transaction;\n    if (transactionOrMessage instanceof Transaction) {\n      let originalTx: Transaction = transactionOrMessage;\n      transaction = new Transaction();\n      transaction.feePayer = originalTx.feePayer;\n      transaction.instructions = transactionOrMessage.instructions;\n      transaction.nonceInfo = originalTx.nonceInfo;\n      transaction.signatures = originalTx.signatures;\n    } else {\n      transaction = Transaction.populate(transactionOrMessage);\n      // HACK: this function relies on mutating the populated transaction\n      transaction._message = transaction._json = undefined;\n    }\n\n    if (configOrSigners !== undefined && !Array.isArray(configOrSigners)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = configOrSigners;\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const message = transaction._compile();\n    const signData = message.serialize();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = wireTransaction.toString('base64');\n    const config: any = {\n      encoding: 'base64',\n      commitment: this.commitment,\n    };\n\n    if (includeAccounts) {\n      const addresses = (\n        Array.isArray(includeAccounts)\n          ? includeAccounts\n          : message.nonProgramIds()\n      ).map(key => key.toBase58());\n\n      config['accounts'] = {\n        encoding: 'base64',\n        addresses,\n      };\n    }\n\n    if (signers) {\n      config.sigVerify = true;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = create(unsafeRes, SimulatedTransactionResponseStruct);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n        if (logs && Array.isArray(logs)) {\n          const traceIndent = '\\n    ';\n          const logTrace = traceIndent + logs.join(traceIndent);\n          console.error(res.error.message, logTrace);\n        }\n      }\n      throw new SendTransactionError(\n        'failed to simulate transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   *\n   * @deprecated Instead, call {@link sendTransaction} with a {@link\n   * VersionedTransaction}\n   */\n  sendTransaction(\n    transaction: Transaction,\n    signers: Array<Signer>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Send a signed transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  sendTransaction(\n    transaction: VersionedTransaction,\n    options?: SendOptions,\n  ): Promise<TransactionSignature>;\n\n  /**\n   * Sign and send a transaction\n   */\n  // eslint-disable-next-line no-dupe-class-members\n  async sendTransaction(\n    transaction: VersionedTransaction | Transaction,\n    signersOrOptions?: Array<Signer> | SendOptions,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if ('version' in transaction) {\n      if (signersOrOptions && Array.isArray(signersOrOptions)) {\n        throw new Error('Invalid arguments');\n      }\n\n      const wireTransaction = transaction.serialize();\n      return await this.sendRawTransaction(wireTransaction, options);\n    }\n\n    if (signersOrOptions === undefined || !Array.isArray(signersOrOptions)) {\n      throw new Error('Invalid arguments');\n    }\n\n    const signers = signersOrOptions;\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        const latestBlockhash = await this._blockhashWithExpiryBlockHeight(\n          disableCache,\n        );\n        transaction.lastValidBlockHeight = latestBlockhash.lastValidBlockHeight;\n        transaction.recentBlockhash = latestBlockhash.blockhash;\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          // The signature of this transaction has not been seen before with the\n          // current recentBlockhash, all done. Let's break\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          // This transaction would be treated as duplicate (its derived signature\n          // matched to one of already recorded signatures).\n          // So, we must fetch a new blockhash for a different signature by disabling\n          // our cache not to wait for the cache expiration (BLOCKHASH_CACHE_TIMEOUT_MS).\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = toBuffer(rawTransaction).toString('base64');\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base64 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    const config: any = {encoding: 'base64'};\n    const skipPreflight = options && options.skipPreflight;\n    const preflightCommitment =\n      (options && options.preflightCommitment) || this.commitment;\n\n    if (options && options.maxRetries != null) {\n      config.maxRetries = options.maxRetries;\n    }\n    if (options && options.minContextSlot != null) {\n      config.minContextSlot = options.minContextSlot;\n    }\n    if (skipPreflight) {\n      config.skipPreflight = skipPreflight;\n    }\n    if (preflightCommitment) {\n      config.preflightCommitment = preflightCommitment;\n    }\n\n    const args = [encodedTransaction, config];\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = create(unsafeRes, SendTransactionRpcResult);\n    if ('error' in res) {\n      let logs;\n      if ('data' in res.error) {\n        logs = res.error.data.logs;\n      }\n      throw new SendTransactionError(\n        'failed to send transaction: ' + res.error.message,\n        logs,\n      );\n    }\n    return res.result;\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._rpcWebSocketHeartbeat = setInterval(() => {\n      // Ping server every 5s to prevent idle timeouts\n      this._rpcWebSocket.notify('ping').catch(() => {});\n    }, 5000);\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnError(err: Error) {\n    this._rpcWebSocketConnected = false;\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnClose(code: number) {\n    this._rpcWebSocketConnected = false;\n    this._rpcWebSocketGeneration =\n      (this._rpcWebSocketGeneration + 1) % Number.MAX_SAFE_INTEGER;\n    if (this._rpcWebSocketIdleTimeout) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n    }\n    if (this._rpcWebSocketHeartbeat) {\n      clearInterval(this._rpcWebSocketHeartbeat);\n      this._rpcWebSocketHeartbeat = null;\n    }\n\n    if (code === 1000) {\n      // explicit close, check if any subscriptions have been made since close\n      this._updateSubscriptions();\n      return;\n    }\n\n    // implicit close, prepare subscriptions for auto-reconnect\n    this._subscriptionCallbacksByServerSubscriptionId = {};\n    Object.entries(\n      this._subscriptionsByHash as Record<SubscriptionConfigHash, Subscription>,\n    ).forEach(([hash, subscription]) => {\n      this._subscriptionsByHash[hash] = {\n        ...subscription,\n        state: 'pending',\n      };\n    });\n  }\n\n  /**\n   * @internal\n   */\n  async _updateSubscriptions() {\n    if (Object.keys(this._subscriptionsByHash).length === 0) {\n      if (this._rpcWebSocketConnected) {\n        this._rpcWebSocketConnected = false;\n        this._rpcWebSocketIdleTimeout = setTimeout(() => {\n          this._rpcWebSocketIdleTimeout = null;\n          try {\n            this._rpcWebSocket.close();\n          } catch (err) {\n            // swallow error if socket has already been closed.\n            if (err instanceof Error) {\n              console.log(\n                `Error when closing socket connection: ${err.message}`,\n              );\n            }\n          }\n        }, 500);\n      }\n      return;\n    }\n\n    if (this._rpcWebSocketIdleTimeout !== null) {\n      clearTimeout(this._rpcWebSocketIdleTimeout);\n      this._rpcWebSocketIdleTimeout = null;\n      this._rpcWebSocketConnected = true;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    const activeWebSocketGeneration = this._rpcWebSocketGeneration;\n    const isCurrentConnectionStillActive = () => {\n      return activeWebSocketGeneration === this._rpcWebSocketGeneration;\n    };\n\n    await Promise.all(\n      // Don't be tempted to change this to `Object.entries`. We call\n      // `_updateSubscriptions` recursively when processing the state,\n      // so it's important that we look up the *current* version of\n      // each subscription, every time we process a hash.\n      Object.keys(this._subscriptionsByHash).map(async hash => {\n        const subscription = this._subscriptionsByHash[hash];\n        if (subscription === undefined) {\n          // This entry has since been deleted. Skip.\n          return;\n        }\n        switch (subscription.state) {\n          case 'pending':\n          case 'unsubscribed':\n            if (subscription.callbacks.size === 0) {\n              /**\n               * You can end up here when:\n               *\n               * - a subscription has recently unsubscribed\n               *   without having new callbacks added to it\n               *   while the unsubscribe was in flight, or\n               * - when a pending subscription has its\n               *   listeners removed before a request was\n               *   sent to the server.\n               *\n               * Being that nobody is interested in this\n               * subscription any longer, delete it.\n               */\n              delete this._subscriptionsByHash[hash];\n              if (subscription.state === 'unsubscribed') {\n                delete this._subscriptionCallbacksByServerSubscriptionId[\n                  subscription.serverSubscriptionId\n                ];\n              }\n              await this._updateSubscriptions();\n              return;\n            }\n            await (async () => {\n              const {args, method} = subscription;\n              try {\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'subscribing',\n                };\n                const serverSubscriptionId: ServerSubscriptionId =\n                  (await this._rpcWebSocket.call(method, args)) as number;\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  serverSubscriptionId,\n                  state: 'subscribed',\n                };\n                this._subscriptionCallbacksByServerSubscriptionId[\n                  serverSubscriptionId\n                ] = subscription.callbacks;\n                await this._updateSubscriptions();\n              } catch (e) {\n                if (e instanceof Error) {\n                  console.error(\n                    `${method} error for argument`,\n                    args,\n                    e.message,\n                  );\n                }\n                if (!isCurrentConnectionStillActive()) {\n                  return;\n                }\n                // TODO: Maybe add an 'errored' state or a retry limit?\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'pending',\n                };\n                await this._updateSubscriptions();\n              }\n            })();\n            break;\n          case 'subscribed':\n            if (subscription.callbacks.size === 0) {\n              // By the time we successfully set up a subscription\n              // with the server, the client stopped caring about it.\n              // Tear it down now.\n              await (async () => {\n                const {serverSubscriptionId, unsubscribeMethod} = subscription;\n                if (\n                  this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId)\n                ) {\n                  /**\n                   * Special case.\n                   * If we're dealing with a subscription that has been auto-\n                   * disposed by the RPC, then we can skip the RPC call to\n                   * tear down the subscription here.\n                   *\n                   * NOTE: There is a proposal to eliminate this special case, here:\n                   * https://github.com/solana-labs/solana/issues/18892\n                   */\n                  this._subscriptionsAutoDisposedByRpc.delete(\n                    serverSubscriptionId,\n                  );\n                } else {\n                  this._subscriptionsByHash[hash] = {\n                    ...subscription,\n                    state: 'unsubscribing',\n                  };\n                  try {\n                    await this._rpcWebSocket.call(unsubscribeMethod, [\n                      serverSubscriptionId,\n                    ]);\n                  } catch (e) {\n                    if (e instanceof Error) {\n                      console.error(`${unsubscribeMethod} error:`, e.message);\n                    }\n                    if (!isCurrentConnectionStillActive()) {\n                      return;\n                    }\n                    // TODO: Maybe add an 'errored' state or a retry limit?\n                    this._subscriptionsByHash[hash] = {\n                      ...subscription,\n                      state: 'subscribed',\n                    };\n                    await this._updateSubscriptions();\n                    return;\n                  }\n                }\n                this._subscriptionsByHash[hash] = {\n                  ...subscription,\n                  state: 'unsubscribed',\n                };\n                await this._updateSubscriptions();\n              })();\n            }\n            break;\n          case 'subscribing':\n          case 'unsubscribing':\n            break;\n        }\n      }),\n    );\n  }\n\n  /**\n   * @internal\n   */\n  private _handleServerNotification<\n    TCallback extends SubscriptionConfig['callback'],\n  >(\n    serverSubscriptionId: ServerSubscriptionId,\n    callbackArgs: Parameters<TCallback>,\n  ): void {\n    const callbacks =\n      this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];\n    if (callbacks === undefined) {\n      return;\n    }\n    callbacks.forEach(cb => {\n      try {\n        cb(\n          // I failed to find a way to convince TypeScript that `cb` is of type\n          // `TCallback` which is certainly compatible with `Parameters<TCallback>`.\n          // See https://github.com/microsoft/TypeScript/issues/47615\n          // @ts-ignore\n          ...callbackArgs,\n        );\n      } catch (e) {\n        console.error(e);\n      }\n    });\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnAccountNotification(notification: object) {\n    const {result, subscription} = create(\n      notification,\n      AccountNotificationResult,\n    );\n    this._handleServerNotification<AccountChangeCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  private _makeSubscription(\n    subscriptionConfig: SubscriptionConfig,\n    /**\n     * When preparing `args` for a call to `_makeSubscription`, be sure\n     * to carefully apply a default `commitment` property, if necessary.\n     *\n     * - If the user supplied a `commitment` use that.\n     * - Otherwise, if the `Connection::commitment` is set, use that.\n     * - Otherwise, set it to the RPC server default: `finalized`.\n     *\n     * This is extremely important to ensure that these two fundamentally\n     * identical subscriptions produce the same identifying hash:\n     *\n     * - A subscription made without specifying a commitment.\n     * - A subscription made where the commitment specified is the same\n     *   as the default applied to the subscription above.\n     *\n     * Example; these two subscriptions must produce the same hash:\n     *\n     * - An `accountSubscribe` subscription for `'PUBKEY'`\n     * - An `accountSubscribe` subscription for `'PUBKEY'` with commitment\n     *   `'finalized'`.\n     *\n     * See the 'making a subscription with defaulted params omitted' test\n     * in `connection-subscriptions.ts` for more.\n     */\n    args: IWSRequestParams,\n  ): ClientSubscriptionId {\n    const clientSubscriptionId = this._nextClientSubscriptionId++;\n    const hash = fastStableStringify(\n      [subscriptionConfig.method, args],\n      true /* isArrayProp */,\n    );\n    const existingSubscription = this._subscriptionsByHash[hash];\n    if (existingSubscription === undefined) {\n      this._subscriptionsByHash[hash] = {\n        ...subscriptionConfig,\n        args,\n        callbacks: new Set([subscriptionConfig.callback]),\n        state: 'pending',\n      };\n    } else {\n      existingSubscription.callbacks.add(subscriptionConfig.callback);\n    }\n    this._subscriptionDisposeFunctionsByClientSubscriptionId[\n      clientSubscriptionId\n    ] = async () => {\n      delete this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n      const subscription = this._subscriptionsByHash[hash];\n      assert(\n        subscription !== undefined,\n        `Could not find a \\`Subscription\\` when tearing down client subscription #${clientSubscriptionId}`,\n      );\n      subscription.callbacks.delete(subscriptionConfig.callback);\n      await this._updateSubscriptions();\n    };\n    this._updateSubscriptions();\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64',\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'accountSubscribe',\n        unsubscribeMethod: 'accountUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'account change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      ProgramAccountNotificationResult,\n    );\n    this._handleServerNotification<ProgramAccountChangeCallback>(subscription, [\n      {\n        accountId: result.value.pubkey,\n        accountInfo: result.value.account,\n      },\n      result.context,\n    ]);\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @param filters The program account filters to pass into the RPC method\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment?: Commitment,\n    filters?: GetProgramAccountsFilter[],\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n      'base64' /* encoding */,\n      filters ? {filters: filters} : undefined /* extra */,\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'programSubscribe',\n        unsubscribeMethod: 'programUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'program account change',\n    );\n  }\n\n  /**\n   * Registers a callback to be invoked whenever logs are emitted.\n   */\n  onLogs(\n    filter: LogsFilter,\n    callback: LogsCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [typeof filter === 'object' ? {mentions: [filter.toString()]} : filter],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'logsSubscribe',\n        unsubscribeMethod: 'logsUnsubscribe',\n      },\n      args,\n    );\n  }\n\n  /**\n   * Deregister a logs callback.\n   *\n   * @param id client subscription id to deregister.\n   */\n  async removeOnLogsListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(clientSubscriptionId, 'logs');\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnLogsNotification(notification: Object) {\n    const {result, subscription} = create(notification, LogsNotificationResult);\n    this._handleServerNotification<LogsCallback>(subscription, [\n      result.value,\n      result.context,\n    ]);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const {result, subscription} = create(notification, SlotNotificationResult);\n    this._handleServerNotification<SlotChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotSubscribe',\n        unsubscribeMethod: 'slotUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot change',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSlotUpdatesNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SlotUpdateNotificationResult,\n    );\n    this._handleServerNotification<SlotUpdateCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon slot updates. {@link SlotUpdate}'s\n   * may be useful to track live progress of a cluster.\n   *\n   * @param callback Function to invoke whenever the slot updates\n   * @return subscription id\n   */\n  onSlotUpdate(callback: SlotUpdateCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'slotsUpdatesSubscribe',\n        unsubscribeMethod: 'slotsUpdatesUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a slot update notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSlotUpdateListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'slot update',\n    );\n  }\n\n  /**\n   * @internal\n   */\n\n  private async _unsubscribeClientSubscription(\n    clientSubscriptionId: ClientSubscriptionId,\n    subscriptionName: string,\n  ) {\n    const dispose =\n      this._subscriptionDisposeFunctionsByClientSubscriptionId[\n        clientSubscriptionId\n      ];\n    if (dispose) {\n      await dispose();\n    } else {\n      console.warn(\n        'Ignored unsubscribe request because an active subscription with id ' +\n          `\\`${clientSubscriptionId}\\` for '${subscriptionName}' events ` +\n          'could not be found.',\n      );\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override?: Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding || extra) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      if (extra) {\n        options = Object.assign(options, extra);\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @internal\n   */\n  _buildArgsAtLeastConfirmed(\n    args: Array<any>,\n    override?: Finality,\n    encoding?: 'jsonParsed' | 'base64',\n    extra?: any,\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment && !['confirmed', 'finalized'].includes(commitment)) {\n      throw new Error(\n        'Using Connection with default commitment: `' +\n          this._commitment +\n          '`, but method requires at least `confirmed`',\n      );\n    }\n    return this._buildArgs(args, override, encoding, extra);\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const {result, subscription} = create(\n      notification,\n      SignatureNotificationResult,\n    );\n    if (result.value !== 'receivedSignature') {\n      /**\n       * Special case.\n       * After a signature is processed, RPCs automatically dispose of the\n       * subscription on the server side. We need to track which of these\n       * subscriptions have been disposed in such a way, so that we know\n       * whether the client is dealing with a not-yet-processed signature\n       * (in which case we must tear down the server subscription) or an\n       * already-processed signature (in which case the client can simply\n       * clear out the subscription locally without telling the server).\n       *\n       * NOTE: There is a proposal to eliminate this special case, here:\n       * https://github.com/solana-labs/solana/issues/18892\n       */\n      this._subscriptionsAutoDisposedByRpc.add(subscription);\n    }\n    this._handleServerNotification<SignatureSubscriptionCallback>(\n      subscription,\n      result.value === 'receivedSignature'\n        ? [{type: 'received'}, result.context]\n        : [{type: 'status', result: result.value}, result.context],\n    );\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment?: Commitment,\n  ): ClientSubscriptionId {\n    const args = this._buildArgs(\n      [signature],\n      commitment || this._commitment || 'finalized', // Apply connection/server default.\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          if (notification.type === 'status') {\n            callback(notification.result, context);\n            // Signatures subscriptions are auto-removed by the RPC service\n            // so no need to explicitly send an unsubscribe message.\n            try {\n              this.removeSignatureListener(clientSubscriptionId);\n              // eslint-disable-next-line no-empty\n            } catch (_err) {\n              // Already removed.\n            }\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Register a callback to be invoked when a transaction is\n   * received and/or processed.\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param options Enable received notifications and set the commitment\n   *   level that signature must reach before notification\n   * @return subscription id\n   */\n  onSignatureWithOptions(\n    signature: TransactionSignature,\n    callback: SignatureSubscriptionCallback,\n    options?: SignatureSubscriptionOptions,\n  ): ClientSubscriptionId {\n    const {commitment, ...extra} = {\n      ...options,\n      commitment:\n        (options && options.commitment) || this._commitment || 'finalized', // Apply connection/server default.\n    };\n    const args = this._buildArgs(\n      [signature],\n      commitment,\n      undefined /* encoding */,\n      extra,\n    );\n    const clientSubscriptionId = this._makeSubscription(\n      {\n        callback: (notification, context) => {\n          callback(notification, context);\n          // Signatures subscriptions are auto-removed by the RPC service\n          // so no need to explicitly send an unsubscribe message.\n          try {\n            this.removeSignatureListener(clientSubscriptionId);\n            // eslint-disable-next-line no-empty\n          } catch (_err) {\n            // Already removed.\n          }\n        },\n        method: 'signatureSubscribe',\n        unsubscribeMethod: 'signatureUnsubscribe',\n      },\n      args,\n    );\n    return clientSubscriptionId;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeSignatureListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'signature result',\n    );\n  }\n\n  /**\n   * @internal\n   */\n  _wsOnRootNotification(notification: Object) {\n    const {result, subscription} = create(notification, RootNotificationResult);\n    this._handleServerNotification<RootChangeCallback>(subscription, [result]);\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): ClientSubscriptionId {\n    return this._makeSubscription(\n      {\n        callback,\n        method: 'rootSubscribe',\n        unsubscribeMethod: 'rootUnsubscribe',\n      },\n      [] /* args */,\n    );\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id client subscription id to deregister\n   */\n  async removeRootChangeListener(\n    clientSubscriptionId: ClientSubscriptionId,\n  ): Promise<void> {\n    await this._unsubscribeClientSubscription(\n      clientSubscriptionId,\n      'root change',\n    );\n  }\n}\n","import {generateKeypair, getPublicKey, Ed25519Keypair} from './utils/ed25519';\nimport {PublicKey} from './publickey';\n\n/**\n * Keypair signer interface\n */\nexport interface Signer {\n  publicKey: PublicKey;\n  secretKey: Uint8Array;\n}\n\n/**\n * An account keypair used for signing transactions.\n */\nexport class Keypair {\n  private _keypair: Ed25519Keypair;\n\n  /**\n   * Create a new keypair instance.\n   * Generate random keypair if no {@link Ed25519Keypair} is provided.\n   *\n   * @param keypair ed25519 keypair\n   */\n  constructor(keypair?: Ed25519Keypair) {\n    this._keypair = keypair ?? generateKeypair();\n  }\n\n  /**\n   * Generate a new random keypair\n   */\n  static generate(): Keypair {\n    return new Keypair(generateKeypair());\n  }\n\n  /**\n   * Create a keypair from a raw secret key byte array.\n   *\n   * This method should only be used to recreate a keypair from a previously\n   * generated secret key. Generating keypairs from a random seed should be done\n   * with the {@link Keypair.fromSeed} method.\n   *\n   * @throws error if the provided secret key is invalid and validation is not skipped.\n   *\n   * @param secretKey secret key byte array\n   * @param options: skip secret key validation\n   */\n  static fromSecretKey(\n    secretKey: Uint8Array,\n    options?: {skipValidation?: boolean},\n  ): Keypair {\n    if (secretKey.byteLength !== 64) {\n      throw new Error('bad secret key size');\n    }\n    const publicKey = secretKey.slice(32, 64);\n    if (!options || !options.skipValidation) {\n      const privateScalar = secretKey.slice(0, 32);\n      const computedPublicKey = getPublicKey(privateScalar);\n      for (let ii = 0; ii < 32; ii++) {\n        if (publicKey[ii] !== computedPublicKey[ii]) {\n          throw new Error('provided secretKey is invalid');\n        }\n      }\n    }\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * Generate a keypair from a 32 byte seed.\n   *\n   * @param seed seed byte array\n   */\n  static fromSeed(seed: Uint8Array): Keypair {\n    const publicKey = getPublicKey(seed);\n    const secretKey = new Uint8Array(64);\n    secretKey.set(seed);\n    secretKey.set(publicKey, 32);\n    return new Keypair({publicKey, secretKey});\n  }\n\n  /**\n   * The public key for this keypair\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The raw secret key for this keypair\n   */\n  get secretKey(): Uint8Array {\n    return new Uint8Array(this._keypair.secretKey);\n  }\n}\n","import {toBufferLE} from 'bigint-buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport * as Layout from '../../layout';\nimport {PublicKey} from '../../publickey';\nimport * as bigintLayout from '../../utils/bigint';\nimport {SystemProgram} from '../system';\nimport {TransactionInstruction} from '../../transaction';\nimport {decodeData, encodeData, IInstructionInputData} from '../../instruction';\n\nexport * from './state';\n\nexport type CreateLookupTableParams = {\n  /** Account used to derive and control the new address lookup table. */\n  authority: PublicKey;\n  /** Account that will fund the new address lookup table. */\n  payer: PublicKey;\n  /** A recent slot must be used in the derivation path for each initialized table. */\n  recentSlot: bigint | number;\n};\n\nexport type FreezeLookupTableParams = {\n  /** Address lookup table account to freeze. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type ExtendLookupTableParams = {\n  /** Address lookup table account to extend. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Account that will fund the table reallocation.\n   * Not required if the reallocation has already been funded. */\n  payer?: PublicKey;\n  /** List of Public Keys to be added to the lookup table. */\n  addresses: Array<PublicKey>;\n};\n\nexport type DeactivateLookupTableParams = {\n  /** Address lookup table account to deactivate. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n};\n\nexport type CloseLookupTableParams = {\n  /** Address lookup table account to close. */\n  lookupTable: PublicKey;\n  /** Account which is the current authority. */\n  authority: PublicKey;\n  /** Recipient of closed account lamports. */\n  recipient: PublicKey;\n};\n\n/**\n * An enumeration of valid LookupTableInstructionType's\n */\nexport type LookupTableInstructionType =\n  | 'CreateLookupTable'\n  | 'ExtendLookupTable'\n  | 'CloseLookupTable'\n  | 'FreezeLookupTable'\n  | 'DeactivateLookupTable';\n\ntype LookupTableInstructionInputData = {\n  CreateLookupTable: IInstructionInputData &\n    Readonly<{\n      recentSlot: bigint;\n      bumpSeed: number;\n    }>;\n  FreezeLookupTable: IInstructionInputData;\n  ExtendLookupTable: IInstructionInputData &\n    Readonly<{\n      numberOfAddresses: bigint;\n      addresses: Array<Uint8Array>;\n    }>;\n  DeactivateLookupTable: IInstructionInputData;\n  CloseLookupTable: IInstructionInputData;\n};\n\n/**\n * An enumeration of valid address lookup table InstructionType's\n * @internal\n */\nexport const LOOKUP_TABLE_INSTRUCTION_LAYOUTS = Object.freeze({\n  CreateLookupTable: {\n    index: 0,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CreateLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64('recentSlot'),\n      BufferLayout.u8('bumpSeed'),\n    ]),\n  },\n  FreezeLookupTable: {\n    index: 1,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['FreezeLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  ExtendLookupTable: {\n    index: 2,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['ExtendLookupTable']\n    >([\n      BufferLayout.u32('instruction'),\n      bigintLayout.u64(),\n      BufferLayout.seq(\n        Layout.publicKey(),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'addresses',\n      ),\n    ]),\n  },\n  DeactivateLookupTable: {\n    index: 3,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['DeactivateLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n  CloseLookupTable: {\n    index: 4,\n    layout: BufferLayout.struct<\n      LookupTableInstructionInputData['CloseLookupTable']\n    >([BufferLayout.u32('instruction')]),\n  },\n});\n\nexport class AddressLookupTableInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): LookupTableInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const index = instructionTypeLayout.decode(instruction.data);\n\n    let type: LookupTableInstructionType | undefined;\n    for (const [layoutType, layout] of Object.entries(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS,\n    )) {\n      if ((layout as any).index == index) {\n        type = layoutType as LookupTableInstructionType;\n        break;\n      }\n    }\n    if (!type) {\n      throw new Error(\n        'Invalid Instruction. Should be a LookupTable Instruction',\n      );\n    }\n    return type;\n  }\n\n  static decodeCreateLookupTable(\n    instruction: TransactionInstruction,\n  ): CreateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 4);\n\n    const {recentSlot} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable,\n      instruction.data,\n    );\n\n    return {\n      authority: instruction.keys[1].pubkey,\n      payer: instruction.keys[2].pubkey,\n      recentSlot: Number(recentSlot),\n    };\n  }\n\n  static decodeExtendLookupTable(\n    instruction: TransactionInstruction,\n  ): ExtendLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    if (instruction.keys.length < 2) {\n      throw new Error(\n        `invalid instruction; found ${instruction.keys.length} keys, expected at least 2`,\n      );\n    }\n\n    const {addresses} = decodeData(\n      LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable,\n      instruction.data,\n    );\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      payer:\n        instruction.keys.length > 2 ? instruction.keys[2].pubkey : undefined,\n      addresses: addresses.map(buffer => new PublicKey(buffer)),\n    };\n  }\n\n  static decodeCloseLookupTable(\n    instruction: TransactionInstruction,\n  ): CloseLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 3);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n      recipient: instruction.keys[2].pubkey,\n    };\n  }\n\n  static decodeFreezeLookupTable(\n    instruction: TransactionInstruction,\n  ): FreezeLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  static decodeDeactivateLookupTable(\n    instruction: TransactionInstruction,\n  ): DeactivateLookupTableParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeysLength(instruction.keys, 2);\n\n    return {\n      lookupTable: instruction.keys[0].pubkey,\n      authority: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(AddressLookupTableProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not AddressLookupTable Program',\n      );\n    }\n  }\n  /**\n   * @internal\n   */\n  static checkKeysLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\nexport class AddressLookupTableProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  static programId: PublicKey = new PublicKey(\n    'AddressLookupTab1e1111111111111111111111111',\n  );\n\n  static createLookupTable(params: CreateLookupTableParams) {\n    const [lookupTableAddress, bumpSeed] = PublicKey.findProgramAddressSync(\n      [params.authority.toBuffer(), toBufferLE(BigInt(params.recentSlot), 8)],\n      this.programId,\n    );\n\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CreateLookupTable;\n    const data = encodeData(type, {\n      recentSlot: BigInt(params.recentSlot),\n      bumpSeed: bumpSeed,\n    });\n\n    const keys = [\n      {\n        pubkey: lookupTableAddress,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.payer,\n        isSigner: true,\n        isWritable: true,\n      },\n      {\n        pubkey: SystemProgram.programId,\n        isSigner: false,\n        isWritable: false,\n      },\n    ];\n\n    return [\n      new TransactionInstruction({\n        programId: this.programId,\n        keys: keys,\n        data: data,\n      }),\n      lookupTableAddress,\n    ] as [TransactionInstruction, PublicKey];\n  }\n\n  static freezeLookupTable(params: FreezeLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.FreezeLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static extendLookupTable(params: ExtendLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.ExtendLookupTable;\n    const data = encodeData(type, {\n      addresses: params.addresses.map(addr => addr.toBytes()),\n    });\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    if (params.payer) {\n      keys.push(\n        {\n          pubkey: params.payer,\n          isSigner: true,\n          isWritable: true,\n        },\n        {\n          pubkey: SystemProgram.programId,\n          isSigner: false,\n          isWritable: false,\n        },\n      );\n    }\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static deactivateLookupTable(params: DeactivateLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.DeactivateLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n\n  static closeLookupTable(params: CloseLookupTableParams) {\n    const type = LOOKUP_TABLE_INSTRUCTION_LAYOUTS.CloseLookupTable;\n    const data = encodeData(type);\n\n    const keys = [\n      {\n        pubkey: params.lookupTable,\n        isSigner: false,\n        isWritable: true,\n      },\n      {\n        pubkey: params.authority,\n        isSigner: true,\n        isWritable: false,\n      },\n      {\n        pubkey: params.recipient,\n        isSigner: false,\n        isWritable: true,\n      },\n    ];\n\n    return new TransactionInstruction({\n      programId: this.programId,\n      keys: keys,\n      data: data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport {u64} from '../utils/bigint';\n\n/**\n * Compute Budget Instruction class\n */\nexport class ComputeBudgetInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a compute budget instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): ComputeBudgetInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u8('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: ComputeBudgetInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS,\n    )) {\n      if (layout.index == typeIndex) {\n        type = ixType as ComputeBudgetInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error(\n        'Instruction type incorrect; not a ComputeBudgetInstruction',\n      );\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode request units compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestUnits(\n    instruction: TransactionInstruction,\n  ): RequestUnitsParams {\n    this.checkProgramId(instruction.programId);\n    const {units, additionalFee} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits,\n      instruction.data,\n    );\n    return {units, additionalFee};\n  }\n\n  /**\n   * Decode request heap frame compute budget instruction and retrieve the instruction params.\n   */\n  static decodeRequestHeapFrame(\n    instruction: TransactionInstruction,\n  ): RequestHeapFrameParams {\n    this.checkProgramId(instruction.programId);\n    const {bytes} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame,\n      instruction.data,\n    );\n    return {bytes};\n  }\n\n  /**\n   * Decode set compute unit limit compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitLimit(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitLimitParams {\n    this.checkProgramId(instruction.programId);\n    const {units} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit,\n      instruction.data,\n    );\n    return {units};\n  }\n\n  /**\n   * Decode set compute unit price compute budget instruction and retrieve the instruction params.\n   */\n  static decodeSetComputeUnitPrice(\n    instruction: TransactionInstruction,\n  ): SetComputeUnitPriceParams {\n    this.checkProgramId(instruction.programId);\n    const {microLamports} = decodeData(\n      COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice,\n      instruction.data,\n    );\n    return {microLamports};\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(ComputeBudgetProgram.programId)) {\n      throw new Error(\n        'invalid instruction; programId is not ComputeBudgetProgram',\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid ComputeBudgetInstructionType's\n */\nexport type ComputeBudgetInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof ComputeBudgetInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'RequestUnits'\n  | 'RequestHeapFrame'\n  | 'SetComputeUnitLimit'\n  | 'SetComputeUnitPrice';\n\ntype ComputeBudgetInstructionInputData = {\n  RequestUnits: IInstructionInputData & Readonly<RequestUnitsParams>;\n  RequestHeapFrame: IInstructionInputData & Readonly<RequestHeapFrameParams>;\n  SetComputeUnitLimit: IInstructionInputData &\n    Readonly<SetComputeUnitLimitParams>;\n  SetComputeUnitPrice: IInstructionInputData &\n    Readonly<SetComputeUnitPriceParams>;\n};\n\n/**\n * Request units instruction params\n */\nexport interface RequestUnitsParams {\n  /** Units to request for transaction-wide compute */\n  units: number;\n  /** Prioritization fee lamports */\n  additionalFee: number;\n}\n\n/**\n * Request heap frame instruction params\n */\nexport type RequestHeapFrameParams = {\n  /** Requested transaction-wide program heap size in bytes. Must be multiple of 1024. Applies to each program, including CPIs. */\n  bytes: number;\n};\n\n/**\n * Set compute unit limit instruction params\n */\nexport interface SetComputeUnitLimitParams {\n  /** Transaction-wide compute unit limit */\n  units: number;\n}\n\n/**\n * Set compute unit price instruction params\n */\nexport interface SetComputeUnitPriceParams {\n  /** Transaction compute unit price used for prioritization fees */\n  microLamports: number | bigint;\n}\n\n/**\n * An enumeration of valid ComputeBudget InstructionType's\n * @internal\n */\nexport const COMPUTE_BUDGET_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in ComputeBudgetInstructionType]: InstructionType<\n    ComputeBudgetInstructionInputData[Instruction]\n  >;\n}>({\n  RequestUnits: {\n    index: 0,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestUnits']\n    >([\n      BufferLayout.u8('instruction'),\n      BufferLayout.u32('units'),\n      BufferLayout.u32('additionalFee'),\n    ]),\n  },\n  RequestHeapFrame: {\n    index: 1,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['RequestHeapFrame']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('bytes')]),\n  },\n  SetComputeUnitLimit: {\n    index: 2,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitLimit']\n    >([BufferLayout.u8('instruction'), BufferLayout.u32('units')]),\n  },\n  SetComputeUnitPrice: {\n    index: 3,\n    layout: BufferLayout.struct<\n      ComputeBudgetInstructionInputData['SetComputeUnitPrice']\n    >([BufferLayout.u8('instruction'), u64('microLamports')]),\n  },\n});\n\n/**\n * Factory class for transaction instructions to interact with the Compute Budget program\n */\nexport class ComputeBudgetProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Compute Budget program\n   */\n  static programId: PublicKey = new PublicKey(\n    'ComputeBudget111111111111111111111111111111',\n  );\n\n  /**\n   * @deprecated Instead, call {@link setComputeUnitLimit} and/or {@link setComputeUnitPrice}\n   */\n  static requestUnits(params: RequestUnitsParams): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestUnits;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static requestHeapFrame(\n    params: RequestHeapFrameParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.RequestHeapFrame;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitLimit(\n    params: SetComputeUnitLimitParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitLimit;\n    const data = encodeData(type, params);\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  static setComputeUnitPrice(\n    params: SetComputeUnitPriceParams,\n  ): TransactionInstruction {\n    const type = COMPUTE_BUDGET_INSTRUCTION_LAYOUTS.SetComputeUnitPrice;\n    const data = encodeData(type, {\n      microLamports: BigInt(params.microLamports),\n    });\n    return new TransactionInstruction({\n      keys: [],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\n\nimport {Keypair} from '../keypair';\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {sign} from '../utils/ed25519';\n\nconst PRIVATE_KEY_BYTES = 64;\nconst PUBLIC_KEY_BYTES = 32;\nconst SIGNATURE_BYTES = 64;\n\n/**\n * Params for creating an ed25519 instruction using a public key\n */\nexport type CreateEd25519InstructionWithPublicKeyParams = {\n  publicKey: Uint8Array;\n  message: Uint8Array;\n  signature: Uint8Array;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an ed25519 instruction using a private key\n */\nexport type CreateEd25519InstructionWithPrivateKeyParams = {\n  privateKey: Uint8Array;\n  message: Uint8Array;\n  instructionIndex?: number;\n};\n\nconst ED25519_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    padding: number;\n    publicKeyInstructionIndex: number;\n    publicKeyOffset: number;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u8('padding'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u16('signatureInstructionIndex'),\n  BufferLayout.u16('publicKeyOffset'),\n  BufferLayout.u16('publicKeyInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u16('messageInstructionIndex'),\n]);\n\nexport class Ed25519Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the ed25519 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Ed25519SigVerify111111111111111111111111111',\n  );\n\n  /**\n   * Create an ed25519 instruction with a public key and signature. The\n   * public key must be a buffer that is 32 bytes long, and the signature\n   * must be a buffer of 64 bytes.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateEd25519InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, instructionIndex} = params;\n\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public Key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    assert(\n      signature.length === SIGNATURE_BYTES,\n      `Signature must be ${SIGNATURE_BYTES} bytes but received ${signature.length} bytes`,\n    );\n\n    const publicKeyOffset = ED25519_INSTRUCTION_LAYOUT.span;\n    const signatureOffset = publicKeyOffset + publicKey.length;\n    const messageDataOffset = signatureOffset + signature.length;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(messageDataOffset + message.length);\n\n    const index =\n      instructionIndex == null\n        ? 0xffff // An index of `u16::MAX` makes it default to the current instruction.\n        : instructionIndex;\n\n    ED25519_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        padding: 0,\n        signatureOffset,\n        signatureInstructionIndex: index,\n        publicKeyOffset,\n        publicKeyInstructionIndex: index,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: index,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(publicKey, publicKeyOffset);\n    instructionData.fill(signature, signatureOffset);\n    instructionData.fill(message, messageDataOffset);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Ed25519Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an ed25519 instruction with a private key. The private key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateEd25519InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey, message, instructionIndex} = params;\n\n    assert(\n      privateKey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${privateKey.length} bytes`,\n    );\n\n    try {\n      const keypair = Keypair.fromSecretKey(privateKey);\n      const publicKey = keypair.publicKey.toBytes();\n      const signature = sign(message, keypair.secretKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import {hmac} from '@noble/hashes/hmac';\nimport {sha256} from '@noble/hashes/sha256';\nimport * as secp256k1 from '@noble/secp256k1';\n\n// Supply a synchronous hashing algorithm to make this\n// library interoperable with the synchronous APIs in web3.js.\nsecp256k1.utils.hmacSha256Sync = (key: Uint8Array, ...msgs: Uint8Array[]) => {\n  const h = hmac.create(sha256, key);\n  msgs.forEach(msg => h.update(msg));\n  return h.digest();\n};\n\nexport const ecdsaSign = (\n  msgHash: Parameters<typeof secp256k1.signSync>[0],\n  privKey: Parameters<typeof secp256k1.signSync>[1],\n) => secp256k1.signSync(msgHash, privKey, {der: false, recovered: true});\nexport const isValidPrivateKey = secp256k1.utils.isValidPrivateKey;\nexport const publicKeyCreate = secp256k1.getPublicKey;\n","import {Buffer} from 'buffer';\nimport * as BufferLayout from '@solana/buffer-layout';\nimport {keccak_256} from '@noble/hashes/sha3';\n\nimport {PublicKey} from '../publickey';\nimport {TransactionInstruction} from '../transaction';\nimport assert from '../utils/assert';\nimport {publicKeyCreate, ecdsaSign} from '../utils/secp256k1';\nimport {toBuffer} from '../utils/to-buffer';\n\nconst PRIVATE_KEY_BYTES = 32;\nconst ETHEREUM_ADDRESS_BYTES = 20;\nconst PUBLIC_KEY_BYTES = 64;\nconst SIGNATURE_OFFSETS_SERIALIZED_SIZE = 11;\n\n/**\n * Params for creating an secp256k1 instruction using a public key\n */\nexport type CreateSecp256k1InstructionWithPublicKeyParams = {\n  publicKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using an Ethereum address\n */\nexport type CreateSecp256k1InstructionWithEthAddressParams = {\n  ethAddress: Buffer | Uint8Array | Array<number> | string;\n  message: Buffer | Uint8Array | Array<number>;\n  signature: Buffer | Uint8Array | Array<number>;\n  recoveryId: number;\n  instructionIndex?: number;\n};\n\n/**\n * Params for creating an secp256k1 instruction using a private key\n */\nexport type CreateSecp256k1InstructionWithPrivateKeyParams = {\n  privateKey: Buffer | Uint8Array | Array<number>;\n  message: Buffer | Uint8Array | Array<number>;\n  instructionIndex?: number;\n};\n\nconst SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct<\n  Readonly<{\n    ethAddress: Uint8Array;\n    ethAddressInstructionIndex: number;\n    ethAddressOffset: number;\n    messageDataOffset: number;\n    messageDataSize: number;\n    messageInstructionIndex: number;\n    numSignatures: number;\n    recoveryId: number;\n    signature: Uint8Array;\n    signatureInstructionIndex: number;\n    signatureOffset: number;\n  }>\n>([\n  BufferLayout.u8('numSignatures'),\n  BufferLayout.u16('signatureOffset'),\n  BufferLayout.u8('signatureInstructionIndex'),\n  BufferLayout.u16('ethAddressOffset'),\n  BufferLayout.u8('ethAddressInstructionIndex'),\n  BufferLayout.u16('messageDataOffset'),\n  BufferLayout.u16('messageDataSize'),\n  BufferLayout.u8('messageInstructionIndex'),\n  BufferLayout.blob(20, 'ethAddress'),\n  BufferLayout.blob(64, 'signature'),\n  BufferLayout.u8('recoveryId'),\n]);\n\nexport class Secp256k1Program {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the secp256k1 program\n   */\n  static programId: PublicKey = new PublicKey(\n    'KeccakSecp256k11111111111111111111111111111',\n  );\n\n  /**\n   * Construct an Ethereum address from a secp256k1 public key buffer.\n   * @param {Buffer} publicKey a 64 byte secp256k1 public key buffer\n   */\n  static publicKeyToEthAddress(\n    publicKey: Buffer | Uint8Array | Array<number>,\n  ): Buffer {\n    assert(\n      publicKey.length === PUBLIC_KEY_BYTES,\n      `Public key must be ${PUBLIC_KEY_BYTES} bytes but received ${publicKey.length} bytes`,\n    );\n\n    try {\n      return Buffer.from(keccak_256(toBuffer(publicKey))).slice(\n        -ETHEREUM_ADDRESS_BYTES,\n      );\n    } catch (error) {\n      throw new Error(`Error constructing Ethereum address: ${error}`);\n    }\n  }\n\n  /**\n   * Create an secp256k1 instruction with a public key. The public key\n   * must be a buffer that is 64 bytes long.\n   */\n  static createInstructionWithPublicKey(\n    params: CreateSecp256k1InstructionWithPublicKeyParams,\n  ): TransactionInstruction {\n    const {publicKey, message, signature, recoveryId, instructionIndex} =\n      params;\n    return Secp256k1Program.createInstructionWithEthAddress({\n      ethAddress: Secp256k1Program.publicKeyToEthAddress(publicKey),\n      message,\n      signature,\n      recoveryId,\n      instructionIndex,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with an Ethereum address. The address\n   * must be a hex string or a buffer that is 20 bytes long.\n   */\n  static createInstructionWithEthAddress(\n    params: CreateSecp256k1InstructionWithEthAddressParams,\n  ): TransactionInstruction {\n    const {\n      ethAddress: rawAddress,\n      message,\n      signature,\n      recoveryId,\n      instructionIndex = 0,\n    } = params;\n\n    let ethAddress;\n    if (typeof rawAddress === 'string') {\n      if (rawAddress.startsWith('0x')) {\n        ethAddress = Buffer.from(rawAddress.substr(2), 'hex');\n      } else {\n        ethAddress = Buffer.from(rawAddress, 'hex');\n      }\n    } else {\n      ethAddress = rawAddress;\n    }\n\n    assert(\n      ethAddress.length === ETHEREUM_ADDRESS_BYTES,\n      `Address must be ${ETHEREUM_ADDRESS_BYTES} bytes but received ${ethAddress.length} bytes`,\n    );\n\n    const dataStart = 1 + SIGNATURE_OFFSETS_SERIALIZED_SIZE;\n    const ethAddressOffset = dataStart;\n    const signatureOffset = dataStart + ethAddress.length;\n    const messageDataOffset = signatureOffset + signature.length + 1;\n    const numSignatures = 1;\n\n    const instructionData = Buffer.alloc(\n      SECP256K1_INSTRUCTION_LAYOUT.span + message.length,\n    );\n\n    SECP256K1_INSTRUCTION_LAYOUT.encode(\n      {\n        numSignatures,\n        signatureOffset,\n        signatureInstructionIndex: instructionIndex,\n        ethAddressOffset,\n        ethAddressInstructionIndex: instructionIndex,\n        messageDataOffset,\n        messageDataSize: message.length,\n        messageInstructionIndex: instructionIndex,\n        signature: toBuffer(signature),\n        ethAddress: toBuffer(ethAddress),\n        recoveryId,\n      },\n      instructionData,\n    );\n\n    instructionData.fill(toBuffer(message), SECP256K1_INSTRUCTION_LAYOUT.span);\n\n    return new TransactionInstruction({\n      keys: [],\n      programId: Secp256k1Program.programId,\n      data: instructionData,\n    });\n  }\n\n  /**\n   * Create an secp256k1 instruction with a private key. The private key\n   * must be a buffer that is 32 bytes long.\n   */\n  static createInstructionWithPrivateKey(\n    params: CreateSecp256k1InstructionWithPrivateKeyParams,\n  ): TransactionInstruction {\n    const {privateKey: pkey, message, instructionIndex} = params;\n\n    assert(\n      pkey.length === PRIVATE_KEY_BYTES,\n      `Private key must be ${PRIVATE_KEY_BYTES} bytes but received ${pkey.length} bytes`,\n    );\n\n    try {\n      const privateKey = toBuffer(pkey);\n      const publicKey = publicKeyCreate(\n        privateKey,\n        false /* isCompressed */,\n      ).slice(1); // throw away leading byte\n      const messageHash = Buffer.from(keccak_256(toBuffer(message)));\n      const [signature, recoveryId] = ecdsaSign(messageHash, privateKey);\n\n      return this.createInstructionWithPublicKey({\n        publicKey,\n        message,\n        signature,\n        recoveryId,\n        instructionIndex,\n      });\n    } catch (error) {\n      throw new Error(`Error creating instruction; ${error}`);\n    }\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Address of the stake config account which configures the rate\n * of stake warmup and cooldown as well as the slashing penalty.\n */\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\n/**\n * Stake account authority info\n */\nexport class Authorized {\n  /** stake authority */\n  staker: PublicKey;\n  /** withdraw authority */\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   * @param staker the stake authority\n   * @param withdrawer the withdraw authority\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\ntype AuthorizedRaw = Readonly<{\n  staker: Uint8Array;\n  withdrawer: Uint8Array;\n}>;\n\n/**\n * Stake account lockup info\n */\nexport class Lockup {\n  /** Unix timestamp of lockup expiration */\n  unixTimestamp: number;\n  /** Epoch of lockup expiration */\n  epoch: number;\n  /** Lockup custodian authority */\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n\n  /**\n   * Default, inactive Lockup value\n   */\n  static default: Lockup = new Lockup(0, 0, PublicKey.default);\n}\n\ntype LockupRaw = Readonly<{\n  custodian: Uint8Array;\n  epoch: number;\n  unixTimestamp: number;\n}>;\n\n/**\n * Create stake account transaction params\n */\nexport type CreateStakeAccountParams = {\n  /** Address of the account which will fund creation */\n  fromPubkey: PublicKey;\n  /** Address of the new stake account */\n  stakePubkey: PublicKey;\n  /** Authorities of the new stake account */\n  authorized: Authorized;\n  /** Lockup of the new stake account */\n  lockup?: Lockup;\n  /** Funding amount */\n  lamports: number;\n};\n\n/**\n * Create stake account with seed transaction params\n */\nexport type CreateStakeAccountWithSeedParams = {\n  fromPubkey: PublicKey;\n  stakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  authorized: Authorized;\n  lockup?: Lockup;\n  lamports: number;\n};\n\n/**\n * Initialize stake instruction params\n */\nexport type InitializeStakeParams = {\n  stakePubkey: PublicKey;\n  authorized: Authorized;\n  lockup?: Lockup;\n};\n\n/**\n * Delegate stake instruction params\n */\nexport type DelegateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  votePubkey: PublicKey;\n};\n\n/**\n * Authorize stake instruction params\n */\nexport type AuthorizeStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Authorize stake instruction params using a derived key\n */\nexport type AuthorizeWithSeedStakeParams = {\n  stakePubkey: PublicKey;\n  authorityBase: PublicKey;\n  authoritySeed: string;\n  authorityOwner: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  stakeAuthorizationType: StakeAuthorizationType;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Split stake instruction params\n */\nexport type SplitStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  lamports: number;\n};\n\n/**\n * Split with seed transaction params\n */\nexport type SplitStakeWithSeedParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  splitStakePubkey: PublicKey;\n  basePubkey: PublicKey;\n  seed: string;\n  lamports: number;\n};\n\n/**\n * Withdraw stake instruction params\n */\nexport type WithdrawStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n  toPubkey: PublicKey;\n  lamports: number;\n  custodianPubkey?: PublicKey;\n};\n\n/**\n * Deactivate stake instruction params\n */\nexport type DeactivateStakeParams = {\n  stakePubkey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Merge stake instruction params\n */\nexport type MergeStakeParams = {\n  stakePubkey: PublicKey;\n  sourceStakePubKey: PublicKey;\n  authorizedPubkey: PublicKey;\n};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: StakeInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as StakeInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    const o: AuthorizeStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {\n      newAuthorized,\n      stakeAuthorizationType,\n      authoritySeed,\n      authorityOwner,\n    } = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    const o: AuthorizeWithSeedStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n    if (instruction.keys.length > 3) {\n      o.custodianPubkey = instruction.keys[3].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a merge stake instruction and retrieve the instruction params.\n   */\n  static decodeMerge(instruction: TransactionInstruction): MergeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Merge, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      sourceStakePubKey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    const o: WithdrawStakeParams = {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n    if (instruction.keys.length > 5) {\n      o.custodianPubkey = instruction.keys[5].pubkey;\n    }\n    return o;\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n */\nexport type StakeInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof StakeInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  | 'Authorize'\n  | 'AuthorizeWithSeed'\n  | 'Deactivate'\n  | 'Delegate'\n  | 'Initialize'\n  | 'Merge'\n  | 'Split'\n  | 'Withdraw';\n\ntype StakeInstructionInputData = {\n  Authorize: IInstructionInputData &\n    Readonly<{\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  AuthorizeWithSeed: IInstructionInputData &\n    Readonly<{\n      authorityOwner: Uint8Array;\n      authoritySeed: string;\n      instruction: number;\n      newAuthorized: Uint8Array;\n      stakeAuthorizationType: number;\n    }>;\n  Deactivate: IInstructionInputData;\n  Delegate: IInstructionInputData;\n  Initialize: IInstructionInputData &\n    Readonly<{\n      authorized: AuthorizedRaw;\n      lockup: LockupRaw;\n    }>;\n  Merge: IInstructionInputData;\n  Split: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n  Withdraw: IInstructionInputData &\n    Readonly<{\n      lamports: number;\n    }>;\n};\n\n/**\n * An enumeration of valid stake InstructionType's\n * @internal\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in StakeInstructionType]: InstructionType<\n    StakeInstructionInputData[Instruction]\n  >;\n}>({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct<StakeInstructionInputData['Initialize']>([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<StakeInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct<StakeInstructionInputData['Delegate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct<StakeInstructionInputData['Split']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct<StakeInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct<StakeInstructionInputData['Deactivate']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  Merge: {\n    index: 7,\n    layout: BufferLayout.struct<StakeInstructionInputData['Merge']>([\n      BufferLayout.u32('instruction'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct<StakeInstructionInputData['AuthorizeWithSeed']>(\n      [\n        BufferLayout.u32('instruction'),\n        Layout.publicKey('newAuthorized'),\n        BufferLayout.u32('stakeAuthorizationType'),\n        Layout.rustString('authoritySeed'),\n        Layout.publicKey('authorityOwner'),\n      ],\n    ),\n  },\n});\n\n/**\n * Stake authorization type\n */\nexport type StakeAuthorizationType = {\n  /** The Stake Authorization index (from solana-stake-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Stake program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Stake11111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Stake account\n   *\n   * This is generated from the solana-stake-program StakeState struct as\n   * `StakeState::size_of()`:\n   * https://docs.rs/solana-stake-program/latest/solana_stake_program/stake_state/enum.StakeState.html\n   */\n  static space: number = 200;\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup: maybeLockup} = params;\n    const lockup: Lockup = maybeLockup || Lockup.default;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: toBuffer(authorized.staker.toBuffer()),\n        withdrawer: toBuffer(authorized.withdrawer.toBuffer()),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: toBuffer(lockup.custodian.toBuffer()),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.stakePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n      custodianPubkey,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: toBuffer(authorityOwner.toBuffer()),\n    });\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: authorityBase, isSigner: true, isWritable: false},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * @internal\n   */\n  static splitInstruction(params: SplitStakeParams): TransactionInstruction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n    return new TransactionInstruction({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.authorizedPubkey,\n        newAccountPubkey: params.splitStakePubkey,\n        lamports: 0,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(this.splitInstruction(params));\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another account\n   * derived from a base public key and seed\n   */\n  static splitWithSeed(params: SplitStakeWithSeedParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      splitStakePubkey,\n      basePubkey,\n      seed,\n      lamports,\n    } = params;\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.allocate({\n        accountPubkey: splitStakePubkey,\n        basePubkey,\n        seed,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n    return transaction.add(\n      this.splitInstruction({\n        stakePubkey,\n        authorizedPubkey,\n        splitStakePubkey,\n        lamports,\n      }),\n    );\n  }\n\n  /**\n   * Generate a Transaction that merges Stake accounts.\n   */\n  static merge(params: MergeStakeParams): Transaction {\n    const {stakePubkey, sourceStakePubKey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Merge;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: sourceStakePubKey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports, custodianPubkey} =\n      params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: stakePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n        isSigner: false,\n        isWritable: false,\n      },\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n    if (custodianPubkey) {\n      keys.push({pubkey: custodianPubkey, isSigner: false, isWritable: false});\n    }\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\n\nimport {\n  encodeData,\n  decodeData,\n  InstructionType,\n  IInstructionInputData,\n} from '../instruction';\nimport * as Layout from '../layout';\nimport {PublicKey} from '../publickey';\nimport {SystemProgram} from './system';\nimport {SYSVAR_CLOCK_PUBKEY, SYSVAR_RENT_PUBKEY} from '../sysvar';\nimport {Transaction, TransactionInstruction} from '../transaction';\nimport {toBuffer} from '../utils/to-buffer';\n\n/**\n * Vote account info\n */\nexport class VoteInit {\n  nodePubkey: PublicKey;\n  authorizedVoter: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number; /** [0, 100] */\n\n  constructor(\n    nodePubkey: PublicKey,\n    authorizedVoter: PublicKey,\n    authorizedWithdrawer: PublicKey,\n    commission: number,\n  ) {\n    this.nodePubkey = nodePubkey;\n    this.authorizedVoter = authorizedVoter;\n    this.authorizedWithdrawer = authorizedWithdrawer;\n    this.commission = commission;\n  }\n}\n\n/**\n * Create vote account transaction params\n */\nexport type CreateVoteAccountParams = {\n  fromPubkey: PublicKey;\n  votePubkey: PublicKey;\n  voteInit: VoteInit;\n  lamports: number;\n};\n\n/**\n * InitializeAccount instruction params\n */\nexport type InitializeAccountParams = {\n  votePubkey: PublicKey;\n  nodePubkey: PublicKey;\n  voteInit: VoteInit;\n};\n\n/**\n * Authorize instruction params\n */\nexport type AuthorizeVoteParams = {\n  votePubkey: PublicKey;\n  /** Current vote or withdraw authority, depending on `voteAuthorizationType` */\n  authorizedPubkey: PublicKey;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n};\n\n/**\n * AuthorizeWithSeed instruction params\n */\nexport type AuthorizeVoteWithSeedParams = {\n  currentAuthorityDerivedKeyBasePubkey: PublicKey;\n  currentAuthorityDerivedKeyOwnerPubkey: PublicKey;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorizedPubkey: PublicKey;\n  voteAuthorizationType: VoteAuthorizationType;\n  votePubkey: PublicKey;\n};\n\n/**\n * Withdraw from vote account transaction params\n */\nexport type WithdrawFromVoteAccountParams = {\n  votePubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  lamports: number;\n  toPubkey: PublicKey;\n};\n\n/**\n * Vote Instruction class\n */\nexport class VoteInstruction {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Decode a vote instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): VoteInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type: VoteInstructionType | undefined;\n    for (const [ixType, layout] of Object.entries(VOTE_INSTRUCTION_LAYOUTS)) {\n      if (layout.index == typeIndex) {\n        type = ixType as VoteInstructionType;\n        break;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a VoteInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode an initialize vote instruction and retrieve the instruction params.\n   */\n  static decodeInitializeAccount(\n    instruction: TransactionInstruction,\n  ): InitializeAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 4);\n\n    const {voteInit} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      nodePubkey: instruction.keys[3].pubkey,\n      voteInit: new VoteInit(\n        new PublicKey(voteInit.nodePubkey),\n        new PublicKey(voteInit.authorizedVoter),\n        new PublicKey(voteInit.authorizedWithdrawer),\n        voteInit.commission,\n      ),\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {newAuthorized, voteAuthorizationType} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeVoteWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey,\n        currentAuthorityDerivedKeySeed,\n        newAuthorized,\n        voteAuthorizationType,\n      },\n    } = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      currentAuthorityDerivedKeyBasePubkey: instruction.keys[2].pubkey,\n      currentAuthorityDerivedKeyOwnerPubkey: new PublicKey(\n        currentAuthorityDerivedKeyOwnerPubkey,\n      ),\n      currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      voteAuthorizationType: {\n        index: voteAuthorizationType,\n      },\n      votePubkey: instruction.keys[0].pubkey,\n    };\n  }\n\n  /**\n   * Decode a withdraw instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawFromVoteAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {lamports} = decodeData(\n      VOTE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      votePubkey: instruction.keys[0].pubkey,\n      authorizedWithdrawerPubkey: instruction.keys[2].pubkey,\n      lamports,\n      toPubkey: instruction.keys[1].pubkey,\n    };\n  }\n\n  /**\n   * @internal\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(VoteProgram.programId)) {\n      throw new Error('invalid instruction; programId is not VoteProgram');\n    }\n  }\n\n  /**\n   * @internal\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid VoteInstructionType's\n */\nexport type VoteInstructionType =\n  // FIXME\n  // It would be preferable for this type to be `keyof VoteInstructionInputData`\n  // but Typedoc does not transpile `keyof` expressions.\n  // See https://github.com/TypeStrong/typedoc/issues/1894\n  'Authorize' | 'AuthorizeWithSeed' | 'InitializeAccount' | 'Withdraw';\n\n/** @internal */\nexport type VoteAuthorizeWithSeedArgs = Readonly<{\n  currentAuthorityDerivedKeyOwnerPubkey: Uint8Array;\n  currentAuthorityDerivedKeySeed: string;\n  newAuthorized: Uint8Array;\n  voteAuthorizationType: number;\n}>;\ntype VoteInstructionInputData = {\n  Authorize: IInstructionInputData & {\n    newAuthorized: Uint8Array;\n    voteAuthorizationType: number;\n  };\n  AuthorizeWithSeed: IInstructionInputData & {\n    voteAuthorizeWithSeedArgs: VoteAuthorizeWithSeedArgs;\n  };\n  InitializeAccount: IInstructionInputData & {\n    voteInit: Readonly<{\n      authorizedVoter: Uint8Array;\n      authorizedWithdrawer: Uint8Array;\n      commission: number;\n      nodePubkey: Uint8Array;\n    }>;\n  };\n  Withdraw: IInstructionInputData & {\n    lamports: number;\n  };\n};\n\nconst VOTE_INSTRUCTION_LAYOUTS = Object.freeze<{\n  [Instruction in VoteInstructionType]: InstructionType<\n    VoteInstructionInputData[Instruction]\n  >;\n}>({\n  InitializeAccount: {\n    index: 0,\n    layout: BufferLayout.struct<VoteInstructionInputData['InitializeAccount']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteInit(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct<VoteInstructionInputData['Authorize']>([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('voteAuthorizationType'),\n    ]),\n  },\n  Withdraw: {\n    index: 3,\n    layout: BufferLayout.struct<VoteInstructionInputData['Withdraw']>([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  AuthorizeWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct<VoteInstructionInputData['AuthorizeWithSeed']>([\n      BufferLayout.u32('instruction'),\n      Layout.voteAuthorizeWithSeedArgs(),\n    ]),\n  },\n});\n\n/**\n * VoteAuthorize type\n */\nexport type VoteAuthorizationType = {\n  /** The VoteAuthorize index (from solana-vote-program) */\n  index: number;\n};\n\n/**\n * An enumeration of valid VoteAuthorization layouts.\n */\nexport const VoteAuthorizationLayout = Object.freeze({\n  Voter: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Vote program\n */\nexport class VoteProgram {\n  /**\n   * @internal\n   */\n  constructor() {}\n\n  /**\n   * Public key that identifies the Vote program\n   */\n  static programId: PublicKey = new PublicKey(\n    'Vote111111111111111111111111111111111111111',\n  );\n\n  /**\n   * Max space of a Vote account\n   *\n   * This is generated from the solana-vote-program VoteState struct as\n   * `VoteState::size_of()`:\n   * https://docs.rs/solana-vote-program/1.9.5/solana_vote_program/vote_state/struct.VoteState.html#method.size_of\n   */\n  static space: number = 3731;\n\n  /**\n   * Generate an Initialize instruction.\n   */\n  static initializeAccount(\n    params: InitializeAccountParams,\n  ): TransactionInstruction {\n    const {votePubkey, nodePubkey, voteInit} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.InitializeAccount;\n    const data = encodeData(type, {\n      voteInit: {\n        nodePubkey: toBuffer(voteInit.nodePubkey.toBuffer()),\n        authorizedVoter: toBuffer(voteInit.authorizedVoter.toBuffer()),\n        authorizedWithdrawer: toBuffer(\n          voteInit.authorizedWithdrawer.toBuffer(),\n        ),\n        commission: voteInit.commission,\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: votePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: nodePubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a transaction that creates a new Vote account.\n   */\n  static createAccount(params: CreateVoteAccountParams): Transaction {\n    const transaction = new Transaction();\n    transaction.add(\n      SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.votePubkey,\n        lamports: params.lamports,\n        space: this.space,\n        programId: this.programId,\n      }),\n    );\n\n    return transaction.add(\n      this.initializeAccount({\n        votePubkey: params.votePubkey,\n        nodePubkey: params.voteInit.nodePubkey,\n        voteInit: params.voteInit,\n      }),\n    );\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account.\n   */\n  static authorize(params: AuthorizeVoteParams): Transaction {\n    const {\n      votePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n      voteAuthorizationType: voteAuthorizationType.index,\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction that authorizes a new Voter or Withdrawer on the Vote account\n   * where the current Voter or Withdrawer authority is a derived key.\n   */\n  static authorizeWithSeed(params: AuthorizeVoteWithSeedParams): Transaction {\n    const {\n      currentAuthorityDerivedKeyBasePubkey,\n      currentAuthorityDerivedKeyOwnerPubkey,\n      currentAuthorityDerivedKeySeed,\n      newAuthorizedPubkey,\n      voteAuthorizationType,\n      votePubkey,\n    } = params;\n\n    const type = VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      voteAuthorizeWithSeedArgs: {\n        currentAuthorityDerivedKeyOwnerPubkey: toBuffer(\n          currentAuthorityDerivedKeyOwnerPubkey.toBuffer(),\n        ),\n        currentAuthorityDerivedKeySeed: currentAuthorityDerivedKeySeed,\n        newAuthorized: toBuffer(newAuthorizedPubkey.toBuffer()),\n        voteAuthorizationType: voteAuthorizationType.index,\n      },\n    });\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n      {\n        pubkey: currentAuthorityDerivedKeyBasePubkey,\n        isSigner: true,\n        isWritable: false,\n      },\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw from a Vote account.\n   */\n  static withdraw(params: WithdrawFromVoteAccountParams): Transaction {\n    const {votePubkey, authorizedWithdrawerPubkey, lamports, toPubkey} = params;\n    const type = VOTE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    const keys = [\n      {pubkey: votePubkey, isSigner: false, isWritable: true},\n      {pubkey: toPubkey, isSigner: false, isWritable: true},\n      {pubkey: authorizedWithdrawerPubkey, isSigner: true, isWritable: false},\n    ];\n\n    return new Transaction().add({\n      keys,\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a transaction to withdraw safely from a Vote account.\n   *\n   * This function was created as a safeguard for vote accounts running validators, `safeWithdraw`\n   * checks that the withdraw amount will not exceed the specified balance while leaving enough left\n   * to cover rent. If you wish to close the vote account by withdrawing the full amount, call the\n   * `withdraw` method directly.\n   */\n  static safeWithdraw(\n    params: WithdrawFromVoteAccountParams,\n    currentVoteAccountBalance: number,\n    rentExemptMinimum: number,\n  ): Transaction {\n    if (params.lamports > currentVoteAccountBalance - rentExemptMinimum) {\n      throw new Error(\n        'Withdraw will leave vote account with insuffcient funds.',\n      );\n    }\n    return VoteProgram.withdraw(params);\n  }\n}\n","import {Buffer} from 'buffer';\nimport {\n  assert as assertType,\n  optional,\n  string,\n  type as pick,\n} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './utils/shortvec-encoding';\nimport {PublicKey, PUBLIC_KEY_LENGTH} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @internal\n */\ntype ConfigKey = {\n  publicKey: PublicKey;\n  isSigner: boolean;\n};\n\n/**\n * Info used to identity validators.\n */\nexport type Info = {\n  /** validator name */\n  name: string;\n  /** optional, validator website */\n  website?: string;\n  /** optional, extra information the validator chose to share */\n  details?: string;\n  /** optional, used to identify validators on keybase.io */\n  keybaseUsername?: string;\n};\n\nconst InfoString = pick({\n  name: string(),\n  website: optional(string()),\n  details: optional(string()),\n  keybaseUsername: optional(string()),\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBLIC_KEY_LENGTH));\n      byteArray = byteArray.slice(PUBLIC_KEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo: any = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = JSON.parse(rawInfo as string);\n        assertType(info, InfoString);\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","import * as BufferLayout from '@solana/buffer-layout';\nimport type {Buffer} from 'buffer';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './utils/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {\n  slot: number;\n  confirmationCount: number;\n};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = Readonly<{\n  epoch: number;\n  credits: number;\n  prevCredits: number;\n}>;\n\nexport type AuthorizedVoter = Readonly<{\n  epoch: number;\n  authorizedVoter: PublicKey;\n}>;\n\ntype AuthorizedVoterRaw = Readonly<{\n  authorizedVoter: Uint8Array;\n  epoch: number;\n}>;\n\ntype PriorVoters = Readonly<{\n  buf: PriorVoterRaw[];\n  idx: number;\n  isEmpty: number;\n}>;\n\nexport type PriorVoter = Readonly<{\n  authorizedPubkey: PublicKey;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\ntype PriorVoterRaw = Readonly<{\n  authorizedPubkey: Uint8Array;\n  epochOfLastAuthorizedSwitch: number;\n  targetEpoch: number;\n}>;\n\nexport type BlockTimestamp = Readonly<{\n  slot: number;\n  timestamp: number;\n}>;\n\ntype VoteAccountData = Readonly<{\n  authorizedVoters: AuthorizedVoterRaw[];\n  authorizedWithdrawer: Uint8Array;\n  commission: number;\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n  nodePubkey: Uint8Array;\n  priorVoters: PriorVoters;\n  rootSlot: number;\n  rootSlotValid: number;\n  votes: Lockout[];\n}>;\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @internal\n */\nconst VoteAccountLayout = BufferLayout.struct<VoteAccountData>([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedWithdrawer'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq<Lockout>(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64(), // authorizedVoters.length\n  BufferLayout.seq<AuthorizedVoterRaw>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      Layout.publicKey('authorizedVoter'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'authorizedVoters',\n  ),\n  BufferLayout.struct<PriorVoters>(\n    [\n      BufferLayout.seq(\n        BufferLayout.struct([\n          Layout.publicKey('authorizedPubkey'),\n          BufferLayout.nu64('epochOfLastAuthorizedSwitch'),\n          BufferLayout.nu64('targetEpoch'),\n        ]),\n        32,\n        'buf',\n      ),\n      BufferLayout.nu64('idx'),\n      BufferLayout.u8('isEmpty'),\n    ],\n    'priorVoters',\n  ),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq<EpochCredits>(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n  BufferLayout.struct<BlockTimestamp>(\n    [BufferLayout.nu64('slot'), BufferLayout.nu64('timestamp')],\n    'lastTimestamp',\n  ),\n]);\n\ntype VoteAccountArgs = {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n};\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedWithdrawer: PublicKey;\n  commission: number;\n  rootSlot: number | null;\n  votes: Lockout[];\n  authorizedVoters: AuthorizedVoter[];\n  priorVoters: PriorVoter[];\n  epochCredits: EpochCredits[];\n  lastTimestamp: BlockTimestamp;\n\n  /**\n   * @internal\n   */\n  constructor(args: VoteAccountArgs) {\n    this.nodePubkey = args.nodePubkey;\n    this.authorizedWithdrawer = args.authorizedWithdrawer;\n    this.commission = args.commission;\n    this.rootSlot = args.rootSlot;\n    this.votes = args.votes;\n    this.authorizedVoters = args.authorizedVoters;\n    this.priorVoters = args.priorVoters;\n    this.epochCredits = args.epochCredits;\n    this.lastTimestamp = args.lastTimestamp;\n  }\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const versionOffset = 4;\n    const va = VoteAccountLayout.decode(toBuffer(buffer), versionOffset);\n\n    let rootSlot: number | null = va.rootSlot;\n    if (!va.rootSlotValid) {\n      rootSlot = null;\n    }\n\n    return new VoteAccount({\n      nodePubkey: new PublicKey(va.nodePubkey),\n      authorizedWithdrawer: new PublicKey(va.authorizedWithdrawer),\n      commission: va.commission,\n      votes: va.votes,\n      rootSlot,\n      authorizedVoters: va.authorizedVoters.map(parseAuthorizedVoter),\n      priorVoters: getPriorVoters(va.priorVoters),\n      epochCredits: va.epochCredits,\n      lastTimestamp: va.lastTimestamp,\n    });\n  }\n}\n\nfunction parseAuthorizedVoter({\n  authorizedVoter,\n  epoch,\n}: AuthorizedVoterRaw): AuthorizedVoter {\n  return {\n    epoch,\n    authorizedVoter: new PublicKey(authorizedVoter),\n  };\n}\n\nfunction parsePriorVoters({\n  authorizedPubkey,\n  epochOfLastAuthorizedSwitch,\n  targetEpoch,\n}: PriorVoterRaw): PriorVoter {\n  return {\n    authorizedPubkey: new PublicKey(authorizedPubkey),\n    epochOfLastAuthorizedSwitch,\n    targetEpoch,\n  };\n}\n\nfunction getPriorVoters({buf, idx, isEmpty}: PriorVoters): PriorVoter[] {\n  if (isEmpty) {\n    return [];\n  }\n\n  return [\n    ...buf.slice(idx + 1).map(parsePriorVoters),\n    ...buf.slice(0, idx).map(parsePriorVoters),\n  ];\n}\n","const endpoint = {\n  http: {\n    devnet: 'http://api.devnet.solana.com',\n    testnet: 'http://api.testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com/',\n  },\n  https: {\n    devnet: 'https://api.devnet.solana.com',\n    testnet: 'https://api.testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com/',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","import type {Buffer} from 'buffer';\n\nimport {\n  BlockheightBasedTransactionConfirmationStrategy,\n  Connection,\n} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `commitment` option is not specified, defaults to 'max' commitment.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {BlockheightBasedTransactionConfirmationStrategy} confirmationStrategy\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategy: BlockheightBasedTransactionConfirmationStrategy,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n/**\n * @deprecated Calling `sendAndConfirmRawTransaction()` without a `confirmationStrategy`\n * is no longer supported and will be removed in a future version.\n */\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature>;\n\n// eslint-disable-next-line no-redeclare\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  confirmationStrategyOrConfirmOptions:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | ConfirmOptions\n    | undefined,\n  maybeConfirmOptions?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  let confirmationStrategy:\n    | BlockheightBasedTransactionConfirmationStrategy\n    | undefined;\n  let options: ConfirmOptions | undefined;\n  if (\n    confirmationStrategyOrConfirmOptions &&\n    Object.prototype.hasOwnProperty.call(\n      confirmationStrategyOrConfirmOptions,\n      'lastValidBlockHeight',\n    )\n  ) {\n    confirmationStrategy =\n      confirmationStrategyOrConfirmOptions as BlockheightBasedTransactionConfirmationStrategy;\n    options = maybeConfirmOptions;\n  } else {\n    options = confirmationStrategyOrConfirmOptions as\n      | ConfirmOptions\n      | undefined;\n  }\n  const sendOptions = options && {\n    skipPreflight: options.skipPreflight,\n    preflightCommitment: options.preflightCommitment || options.commitment,\n    minContextSlot: options.minContextSlot,\n  };\n\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    sendOptions,\n  );\n\n  const commitment = options && options.commitment;\n  const confirmationPromise = confirmationStrategy\n    ? connection.confirmTransaction(confirmationStrategy, commitment)\n    : connection.confirmTransaction(signature, commitment);\n  const status = (await confirmationPromise).value;\n\n  if (status.err) {\n    throw new Error(\n      `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n    );\n  }\n\n  return signature;\n}\n","export * from './account';\nexport * from './blockhash';\nexport * from './bpf-loader-deprecated';\nexport * from './bpf-loader';\nexport * from './connection';\nexport * from './epoch-schedule';\nexport * from './errors';\nexport * from './fee-calculator';\nexport * from './keypair';\nexport * from './loader';\nexport * from './message';\nexport * from './nonce-account';\nexport * from './programs';\nexport * from './publickey';\nexport * from './transaction';\nexport * from './validator-info';\nexport * from './vote-account';\nexport * from './sysvar';\nexport * from './utils';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["ed25519","utils","sha512Sync","m","sha512","concatBytes","generatePrivateKey","randomPrivateKey","generateKeypair","privateScalar","publicKey","getPublicKey","secretKey","Uint8Array","set","sync","isOnCurve","Point","fromHex","sign","message","slice","verify","toBuffer","arr","Buffer","isBuffer","from","buffer","byteOffset","byteLength","Struct","constructor","properties","Object","assign","encode","serialize","SOLANA_SCHEMA","decode","data","deserialize","decodeUnchecked","deserializeUnchecked","Enum","enum","keys","length","Error","map","key","Map","MAX_SEED_LENGTH","PUBLIC_KEY_LENGTH","isPublicKeyData","value","_bn","undefined","uniquePublicKeyCounter","PublicKey","decoded","bs58","BN","unique","equals","eq","toBase58","toBytes","toJSON","b","toArrayLike","zeroPad","alloc","copy","toString","createWithSeed","fromPublicKey","seed","programId","concat","publicKeyBytes","sha256","createProgramAddressSync","seeds","forEach","TypeError","createProgramAddress","findProgramAddressSync","nonce","address","seedsWithNonce","err","findProgramAddress","pubkeyData","pubkey","default","kind","fields","Account","_publicKey","_secretKey","secretKeyBuffer","BPF_LOADER_DEPRECATED_PROGRAM_ID","PACKET_DATA_SIZE","VERSION_PREFIX_MASK","SIGNATURE_LENGTH_IN_BYTES","TransactionExpiredBlockheightExceededError","signature","defineProperty","prototype","TransactionExpiredTimeoutError","timeoutSeconds","toFixed","MessageAccountKeys","staticAccountKeys","accountKeysFromLookups","keySegments","push","writable","readonly","get","index","keySegment","flat","compileInstructions","instructions","U8_MAX","keyIndexMap","findKeyIndex","keyIndex","instruction","programIdIndex","accountKeyIndexes","meta","property","BufferLayout","blob","rustString","rsl","struct","u32","offset","_decode","bind","_encode","rslShim","str","chars","span","authorized","lockup","ns64","voteInit","u8","voteAuthorizeWithSeedArgs","getAlloc","type","getItemAlloc","item","field","Array","isArray","elementLayout","layout","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","condition","CompiledKeys","payer","keyMetaMap","compile","getOrInsertDefault","keyMeta","isSigner","isWritable","isInvoked","payerKeyMeta","ix","accountMeta","getMessageComponents","mapEntries","entries","assert","writableSigners","filter","readonlySigners","writableNonSigners","readonlyNonSigners","header","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","payerAddress","extractTableLookup","lookupTable","writableIndexes","drainedWritableKeys","drainKeysFoundInLookupTable","state","addresses","readonlyIndexes","drainedReadonlyKeys","accountKey","lookupTableEntries","keyMetaFilter","lookupTableIndexes","drainedKeys","lookupTableIndex","findIndex","entry","delete","Message","args","accountKeys","recentBlockhash","indexToProgramIds","account","version","compiledInstructions","accounts","addressTableLookups","getAccountKeys","compiledKeys","payerKey","isAccountSigner","isAccountWritable","numSignedAccounts","unsignedAccountIndex","numUnsignedAccounts","numWritableUnsignedAccounts","numWritableSignedAccounts","isProgramId","has","programIds","values","nonProgramIds","_","numKeys","keyCount","shortvec","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","instructionBufferLength","instructionLayout","seq","signDataLayout","Layout","transaction","signData","byteArray","accountCount","i","dataSlice","messageArgs","MessageV0","numAccountKeysFromLookups","count","lookup","addressLookupTableAccounts","resolveAddressTableLookups","numStaticAccountKeys","lookupAccountKeysIndex","numWritableLookupAccountKeys","reduce","tableLookup","tableAccount","find","lookupTableAccounts","extractResult","addressTableLookup","encodedStaticAccountKeysLength","serializedInstructions","serializeInstructions","encodedInstructionsLength","serializedAddressTableLookups","serializeAddressTableLookups","encodedAddressTableLookupsLength","messageLayout","serializedMessage","MESSAGE_VERSION_0_PREFIX","serializedMessageLength","prefix","staticAccountKeysLength","instructionsLength","addressTableLookupsLength","serializedLength","encodedAccountKeyIndexesLength","encodedDataLength","encodedWritableIndexesLength","encodedReadonlyIndexesLength","addressTableLookupLayout","maskedPrefix","splice","accountKeyIndexesLength","addressTableLookupsCount","writableIndexesLength","readonlyIndexesLength","VersionedMessage","deserializeMessageVersion","TransactionStatus","DEFAULT_SIGNATURE","fill","TransactionInstruction","opts","Transaction","signatures","feePayer","lastValidBlockHeight","nonceInfo","_message","_json","hasOwnProperty","call","blockhash","nonceInstruction","signers","add","items","compileMessage","JSON","stringify","console","warn","accountMetas","includes","uniqueMetas","pubkeyString","uniqueIndex","x","sort","y","localeCompare","feePayerIndex","payerMeta","unshift","signedKeys","unsignedKeys","indexOf","invariant","_compile","valid","every","pair","serializeMessage","getEstimatedFee","connection","getFeeForMessage","setSigners","seen","Set","uniqueSigners","signer","_partialSign","partialSign","_addSignature","addSignature","sigpair","verifySignatures","_verifySignatures","requireAllSignatures","config","_serialize","signatureCount","transactionLength","wireTransaction","keyObj","populate","sigPubkeyPair","some","TransactionMessage","decompile","compiledIx","compileToLegacyMessage","compileToV0Message","VersionedTransaction","defaultSignatures","encodedSignaturesLength","transactionLayout","serializedTransaction","serializedTransactionLength","signaturesLength","messageData","signerPubkeys","signerIndex","SYSVAR_CLOCK_PUBKEY","SYSVAR_EPOCH_SCHEDULE_PUBKEY","SYSVAR_INSTRUCTIONS_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_SLOT_HASHES_PUBKEY","SYSVAR_SLOT_HISTORY_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","sendAndConfirmTransaction","options","sendOptions","skipPreflight","preflightCommitment","commitment","maxRetries","minContextSlot","sendTransaction","status","confirmTransaction","sleep","ms","Promise","resolve","setTimeout","encodeData","allocLength","layoutFields","decodeData","FeeCalculatorLayout","nu64","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","authorizedPubkey","feeCalculator","fromAccountData","nonceAccount","encodeDecode","bigInt","bigIntLayout","src","toBigIntLE","toBufferLE","u64","SystemInstruction","decodeInstructionType","checkProgramId","instructionTypeLayout","typeIndex","ixType","SYSTEM_INSTRUCTION_LAYOUTS","decodeCreateAccount","checkKeyLength","lamports","space","Create","fromPubkey","newAccountPubkey","decodeTransfer","Transfer","toPubkey","decodeTransferWithSeed","TransferWithSeed","basePubkey","decodeAllocate","Allocate","accountPubkey","decodeAllocateWithSeed","base","AllocateWithSeed","decodeAssign","Assign","decodeAssignWithSeed","AssignWithSeed","decodeCreateWithSeed","CreateWithSeed","decodeNonceInitialize","InitializeNonceAccount","noncePubkey","decodeNonceAdvance","AdvanceNonceAccount","decodeNonceWithdraw","WithdrawNonceAccount","decodeNonceAuthorize","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","UpgradeNonceAccount","createAccount","params","transfer","BigInt","createAccountWithSeed","createNonceAccount","initParams","nonceInitialize","instructionData","nonceAdvance","nonceWithdraw","nonceAuthorize","allocate","CHUNK_SIZE","Loader","getMinNumSignatures","Math","ceil","chunkSize","load","program","balanceNeeded","getMinimumBalanceForRentExemption","programInfo","getAccountInfo","executable","error","owner","dataLayout","array","transactions","bytesLength","bytesLengthPadding","_rpcEndpoint","REQUESTS_PER_SECOND","all","BPF_LOADER_PROGRAM_ID","BpfLoader","elf","loaderProgramId","MINIMUM_SLOT_PER_EPOCH","trailingZeros","n","nextPowerOfTwo","EpochSchedule","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","getEpoch","slot","getEpochAndSlotIndex","epoch","epochLen","getSlotsInEpoch","slotIndex","normalSlotIndex","normalEpochIndex","floor","getFirstSlotInEpoch","pow","getLastSlotInEpoch","SendTransactionError","logs","SolanaJSONRPCErrorCode","JSON_RPC_SERVER_ERROR_BLOCK_CLEANED_UP","JSON_RPC_SERVER_ERROR_SEND_TRANSACTION_PREFLIGHT_FAILURE","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_BLOCK_NOT_AVAILABLE","JSON_RPC_SERVER_ERROR_NODE_UNHEALTHY","JSON_RPC_SERVER_ERROR_TRANSACTION_PRECOMPILE_VERIFICATION_FAILURE","JSON_RPC_SERVER_ERROR_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_NO_SNAPSHOT","JSON_RPC_SERVER_ERROR_LONG_TERM_STORAGE_SLOT_SKIPPED","JSON_RPC_SERVER_ERROR_KEY_EXCLUDED_FROM_SECONDARY_INDEX","JSON_RPC_SERVER_ERROR_TRANSACTION_HISTORY_NOT_AVAILABLE","JSON_RPC_SCAN_ERROR","JSON_RPC_SERVER_ERROR_TRANSACTION_SIGNATURE_LEN_MISMATCH","JSON_RPC_SERVER_ERROR_BLOCK_STATUS_NOT_AVAILABLE_YET","JSON_RPC_SERVER_ERROR_UNSUPPORTED_TRANSACTION_VERSION","JSON_RPC_SERVER_ERROR_MIN_CONTEXT_SLOT_NOT_REACHED","SolanaJSONRPCError","code","customMessage","name","globalThis","fetch","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","LOOKUP_TABLE_META_SIZE","AddressLookupTableAccount","isActive","U64_MAX","deactivationSlot","accountData","LookupTableMetaLayout","serializedAddressesLen","numSerializedAddresses","lastExtendedSlot","lastExtendedSlotStartIndex","lastExtendedStartIndex","authority","URL_RE","makeWebsocketUrl","endpoint","matches","match","hostish","portWithColon","rest","protocol","startsWith","startPort","parseInt","websocketPort","PublicKeyFromString","coerce","instance","string","RawAccountDataResult","tuple","literal","BufferFromRawAccountData","BLOCKHASH_CACHE_TIMEOUT_MS","assertEndpointUrl","putativeUrl","test","extractCommitmentFromConfig","commitmentOrConfig","specifiedCommitment","specifiedConfig","createRpcResult","result","union","pick","jsonrpc","id","unknown","optional","any","UnknownRpcResult","jsonRpcResult","schema","create","jsonRpcResultAndContext","context","number","notificationResultAndContext","versionedMessageFromResponse","response","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetInflationRewardResult","nullable","effectiveSlot","amount","postBalance","GetEpochInfoResult","slotsInEpoch","absoluteSlot","blockHeight","transactionCount","GetEpochScheduleResult","boolean","GetLeaderScheduleResult","record","TransactionErrorResult","SignatureStatusResult","SignatureReceivedResult","VersionResult","SimulatedTransactionResponseStruct","rentEpoch","unitsConsumed","returnData","BlockProductionResponseStruct","byIdentity","range","firstSlot","lastSlot","createRpcClient","url","httpHeaders","customFetch","fetchMiddleware","disableRetryOnRateLimit","fetchImpl","fetchWithMiddleware","info","init","modifiedFetchArgs","reject","modifiedInfo","modifiedInit","clientBrowser","RpcClient","request","callback","agent","method","body","headers","COMMON_HTTP_HEADERS","too_many_requests_retries","res","waitTime","log","statusText","text","ok","createRpcRequest","client","createRpcBatchRequest","requests","batch","methodName","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","uiAmount","decimals","uiAmountString","GetTokenLargestAccountsResult","GetTokenAccountsByOwner","ParsedAccountDataResult","parsed","GetParsedTokenAccountsByOwner","GetLargestAccountsRpcResult","AccountInfoResult","KeyedAccountInfoResult","ParsedOrRawAccountData","ParsedAccountInfoResult","KeyedParsedAccountInfoResult","StakeActivationResult","active","inactive","GetConfirmedSignaturesForAddress2RpcResult","memo","blockTime","GetSignaturesForAddressRpcResult","AccountNotificationResult","subscription","ProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SlotUpdateResult","timestamp","stats","numTransactionEntries","numSuccessfulTransactions","numFailedTransactions","maxTransactionsPerEntry","SlotUpdateNotificationResult","SignatureNotificationResult","RootNotificationResult","ContactInfoResult","gossip","tpu","rpc","VoteAccountInfoResult","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","commission","lastVote","rootSlot","GetVoteAccounts","current","delinquent","ConfirmationStatus","SignatureStatusResponse","confirmations","confirmationStatus","GetSignatureStatusesRpcResult","GetMinimumBalanceForRentExemptionRpcResult","AddressTableLookupStruct","ConfirmedTransactionResult","ParsedInstructionResult","RawInstructionResult","InstructionResult","UnknownInstructionResult","ParsedOrRawInstruction","ParsedConfirmedTransactionResult","source","TokenBalanceResult","accountIndex","mint","uiTokenAmount","LoadedAddressesResult","ConfirmedTransactionMetaResult","fee","innerInstructions","preBalances","postBalances","logMessages","preTokenBalances","postTokenBalances","loadedAddresses","computeUnitsConsumed","ParsedConfirmedTransactionMetaResult","TransactionVersionStruct","GetBlockRpcResult","previousBlockhash","parentSlot","rewards","rewardType","GetParsedBlockRpcResult","GetConfirmedBlockRpcResult","GetBlockSignaturesRpcResult","GetTransactionRpcResult","GetParsedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","lamportsPerSignature","GetLatestBlockhashRpcResult","PerfSampleResult","numTransactions","numSlots","samplePeriodSecs","GetRecentPerformanceSamplesRpcResult","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","LogsResult","LogsNotificationResult","process","Connection","_commitment","_confirmTransactionInitialTimeout","_rpcWsEndpoint","_rpcClient","_rpcRequest","_rpcBatchRequest","_rpcWebSocket","_rpcWebSocketConnected","_rpcWebSocketHeartbeat","_rpcWebSocketIdleTimeout","_rpcWebSocketGeneration","_disableBlockhashCaching","_pollingBlockhash","_blockhashInfo","latestBlockhash","lastFetch","transactionSignatures","simulatedSignatures","_nextClientSubscriptionId","_subscriptionDisposeFunctionsByClientSubscriptionId","_subscriptionCallbacksByServerSubscriptionId","_subscriptionsByHash","_subscriptionsAutoDisposedByRpc","wsEndpoint","confirmTransactionInitialTimeout","RpcWebSocketClient","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSlotUpdatesNotification","_wsOnSignatureNotification","_wsOnRootNotification","_wsOnLogsNotification","rpcEndpoint","getBalanceAndContext","_buildArgs","unsafeRes","getBalance","then","catch","e","getBlockTime","getMinimumLedgerSlot","getFirstAvailableBlock","getSupply","configArg","getTokenSupply","tokenMintAddress","getTokenAccountBalance","tokenAddress","getTokenAccountsByOwner","ownerAddress","_args","getParsedTokenAccountsByOwner","getLargestAccounts","arg","getTokenLargestAccounts","mintAddress","getAccountInfoAndContext","getParsedAccountInfo","getMultipleParsedAccounts","publicKeys","rawConfig","getMultipleAccountsInfoAndContext","getMultipleAccountsInfo","getStakeActivation","getProgramAccounts","configOrCommitment","encoding","configWithoutEncoding","getParsedProgramAccounts","strategy","rawSignature","decodedSignature","subscriptionCommitment","timeoutId","subscriptionId","done","confirmationPromise","onSignature","__type","PROCESSED","expiryPromise","timeoutMs","TIMED_OUT","checkBlockHeight","getBlockHeight","_e","currentBlockHeight","BLOCKHEIGHT_EXCEEDED","outcome","race","clearTimeout","removeSignatureListener","getClusterNodes","getVoteAccounts","getSlot","getSlotLeader","getSlotLeaders","startSlot","limit","getSignatureStatus","getSignatureStatuses","getTransactionCount","getTotalSupply","excludeNonCirculatingAccountsList","getInflationGovernor","getInflationReward","getEpochInfo","getEpochSchedule","epochSchedule","getLeaderSchedule","getRecentBlockhashAndContext","getRecentPerformanceSamples","getFeeCalculatorForBlockhash","wireMessage","getRecentBlockhash","getLatestBlockhash","getLatestBlockhashAndContext","getVersion","getGenesisHash","getBlock","_buildArgsAtLeastConfirmed","getParsedBlock","getBlockProduction","extra","c","getTransaction","getParsedTransaction","getParsedTransactions","getTransactions","getConfirmedBlock","block","getBlocks","endSlot","getBlockSignatures","transactionDetails","getConfirmedBlockSignatures","getConfirmedTransaction","getParsedConfirmedTransaction","getParsedConfirmedTransactions","getConfirmedSignaturesForAddress","firstAvailableBlock","until","highestConfirmedRoot","before","confirmedSignatureInfo","getConfirmedSignaturesForAddress2","getSignaturesForAddress","getAddressLookupTable","accountInfo","getNonceAndContext","getNonce","requestAirdrop","to","_blockhashWithExpiryBlockHeight","disableCache","timeSinceFetch","Date","now","expired","_pollNewBlockhash","startTime","cachedLatestBlockhash","cachedBlockhash","getStakeMinimumDelegation","simulateTransaction","transactionOrMessage","configOrSigners","includeAccounts","versionedTx","encodedTransaction","originalTx","sigVerify","traceIndent","logTrace","join","signersOrOptions","sendRawTransaction","rawTransaction","sendEncodedTransaction","setInterval","notify","_updateSubscriptions","Number","MAX_SAFE_INTEGER","clearInterval","hash","close","connect","activeWebSocketGeneration","isCurrentConnectionStillActive","callbacks","serverSubscriptionId","unsubscribeMethod","_handleServerNotification","callbackArgs","cb","notification","_makeSubscription","subscriptionConfig","clientSubscriptionId","fastStableStringify","existingSubscription","onAccountChange","removeAccountChangeListener","_unsubscribeClientSubscription","accountId","onProgramAccountChange","filters","removeProgramAccountChangeListener","onLogs","mentions","removeOnLogsListener","onSlotChange","removeSlotChangeListener","onSlotUpdate","removeSlotUpdateListener","subscriptionName","dispose","override","_err","onSignatureWithOptions","onRootChange","removeRootChangeListener","Keypair","keypair","_keypair","generate","fromSecretKey","skipValidation","computedPublicKey","ii","fromSeed","LOOKUP_TABLE_INSTRUCTION_LAYOUTS","CreateLookupTable","bigintLayout","FreezeLookupTable","ExtendLookupTable","DeactivateLookupTable","CloseLookupTable","AddressLookupTableInstruction","layoutType","decodeCreateLookupTable","checkKeysLength","recentSlot","decodeExtendLookupTable","decodeCloseLookupTable","recipient","decodeFreezeLookupTable","decodeDeactivateLookupTable","AddressLookupTableProgram","createLookupTable","lookupTableAddress","bumpSeed","freezeLookupTable","extendLookupTable","addr","deactivateLookupTable","closeLookupTable","ComputeBudgetInstruction","COMPUTE_BUDGET_INSTRUCTION_LAYOUTS","decodeRequestUnits","units","additionalFee","RequestUnits","decodeRequestHeapFrame","RequestHeapFrame","decodeSetComputeUnitLimit","SetComputeUnitLimit","decodeSetComputeUnitPrice","microLamports","SetComputeUnitPrice","ComputeBudgetProgram","requestUnits","requestHeapFrame","setComputeUnitLimit","setComputeUnitPrice","PRIVATE_KEY_BYTES","PUBLIC_KEY_BYTES","SIGNATURE_BYTES","ED25519_INSTRUCTION_LAYOUT","u16","Ed25519Program","createInstructionWithPublicKey","instructionIndex","publicKeyOffset","signatureOffset","messageDataOffset","numSignatures","padding","signatureInstructionIndex","publicKeyInstructionIndex","messageDataSize","messageInstructionIndex","createInstructionWithPrivateKey","privateKey","secp256k1","hmacSha256Sync","msgs","h","hmac","msg","update","digest","ecdsaSign","msgHash","privKey","signSync","der","recovered","isValidPrivateKey","publicKeyCreate","ETHEREUM_ADDRESS_BYTES","SIGNATURE_OFFSETS_SERIALIZED_SIZE","SECP256K1_INSTRUCTION_LAYOUT","Secp256k1Program","publicKeyToEthAddress","keccak_256","recoveryId","createInstructionWithEthAddress","ethAddress","rawAddress","substr","dataStart","ethAddressOffset","ethAddressInstructionIndex","pkey","messageHash","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","decodeInitialize","Initialize","stakePubkey","decodeDelegate","Delegate","decodeAuthorize","newAuthorized","stakeAuthorizationType","Authorize","o","custodianPubkey","decodeAuthorizeWithSeed","authoritySeed","authorityOwner","AuthorizeWithSeed","authorityBase","decodeSplit","Split","splitStakePubkey","decodeMerge","Merge","sourceStakePubKey","decodeWithdraw","Withdraw","decodeDeactivate","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","maybeLockup","delegate","authorize","authorizeWithSeed","splitInstruction","split","splitWithSeed","merge","withdraw","deactivate","VoteInit","authorizedVoter","authorizedWithdrawer","VoteInstruction","VOTE_INSTRUCTION_LAYOUTS","decodeInitializeAccount","InitializeAccount","voteAuthorizationType","currentAuthorityDerivedKeyOwnerPubkey","currentAuthorityDerivedKeySeed","currentAuthorityDerivedKeyBasePubkey","authorizedWithdrawerPubkey","VoteProgram","VoteAuthorizationLayout","Voter","initializeAccount","safeWithdraw","currentVoteAccountBalance","rentExemptMinimum","VALIDATOR_INFO_KEY","InfoString","website","details","keybaseUsername","ValidatorInfo","fromConfigData","configKeyCount","configKeys","rawInfo","parse","assertType","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","votes","authorizedVoters","priorVoters","lastTimestamp","versionOffset","va","rootSlotValid","parseAuthorizedVoter","getPriorVoters","parsePriorVoters","epochOfLastAuthorizedSwitch","targetEpoch","buf","idx","isEmpty","http","devnet","testnet","https","clusterApiUrl","cluster","tls","sendAndConfirmRawTransaction","confirmationStrategyOrConfirmOptions","maybeConfirmOptions","confirmationStrategy","LAMPORTS_PER_SOL"],"mappings":"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"}