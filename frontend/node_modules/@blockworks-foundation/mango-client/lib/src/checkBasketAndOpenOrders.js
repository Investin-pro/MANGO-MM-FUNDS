"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const web3_js_1 = require("@solana/web3.js");
const client_1 = require("./client");
const config_1 = require("./config");
const config = config_1.Config.ids();
const cluster = (process.env.CLUSTER || 'devnet');
const connection = new web3_js_1.Connection(config.cluster_urls[cluster], 'processed');
const groupName = process.env.GROUP || 'devnet.2';
const groupIds = config.getGroup(cluster, groupName);
if (!groupIds) {
    throw new Error(`Group ${groupName} not found`);
}
const dexProgramId = groupIds.serumProgramId;
const mangoProgramId = groupIds.mangoProgramId;
const mangoGroupKey = groupIds.publicKey;
const client = new client_1.MangoClient(connection, mangoProgramId);
function check() {
    return __awaiter(this, void 0, void 0, function* () {
        const group = yield client.getMangoGroup(mangoGroupKey);
        console.log('cache', group.mangoCache.toBase58());
        const cacheAi = yield connection.getAccountInfo(group.mangoCache);
        console.log((cacheAi === null || cacheAi === void 0 ? void 0 : cacheAi.lamports) * 0.000000001);
    });
}
check();
//# sourceMappingURL=checkBasketAndOpenOrders.js.map